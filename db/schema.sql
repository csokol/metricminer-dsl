-- MySQL dump 10.13  Distrib 5.1.56, for slackware-linux-gnu (x86_64)
--
-- Host: localhost    Database: MetricMiner
-- ------------------------------------------------------
-- Server version	5.1.56

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `Artifact`
--

DROP TABLE IF EXISTS `Artifact`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Artifact` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `kind` varchar(255) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `project_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKBA9C69F2783885CC` (`project_id`),
  KEY `project_index` (`project_id`),
  KEY `name_index` (`name`),
  CONSTRAINT `FKBA9C69F2783885CC` FOREIGN KEY (`project_id`) REFERENCES `Project` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=102 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Artifact`
--

LOCK TABLES `Artifact` WRITE;
/*!40000 ALTER TABLE `Artifact` DISABLE KEYS */;
INSERT INTO `Artifact` VALUES (1,'CODE','.classpath',1),(2,'CODE','.gitignore',1),(3,'CODE','.project',1),(4,'CODE','.settings/.jsdtscope',1),(5,'CODE','.settings/org.eclipse.jdt.core.prefs',1),(6,'CODE','.settings/org.eclipse.wst.common.component',1),(7,'CODE','.settings/org.eclipse.wst.common.project.facet.core.xml',1),(8,'CODE','.settings/org.eclipse.wst.jsdt.ui.superType.container',1),(9,'CODE','.settings/org.eclipse.wst.jsdt.ui.superType.name',1),(10,'CODE','build.properties',1),(11,'CODE','build.xml',1),(12,'CODE','ivy.xml',1),(13,'CODE','ivysettings.xml',1),(14,'CODE','src/main/webapp/META-INF/MANIFEST.MF',1),(15,'CODE','src/main/webapp/WEB-INF/web.xml',1),(16,'CODE','src/main/webapp/index.html',1),(17,'CODE','src/main/java/br/ime/usp/recommender/IndexController.java',1),(18,'CODE','.settings/org.jboss.ide.eclipse.as.core.prefs',1),(19,'CODE','src/main/java/br/ime/usp/recommender/ItemToItemRecommender.java',1),(20,'CODE','src/main/java/br/ime/usp/recommender/controller/IndexController.java',1),(21,'CODE','src/main/java/br/ime/usp/recommender/factory/ItemToItemRecommenderFactory.java',1),(22,'CODE','src/main/java/br/ime/usp/recommender/model/Item.java',1),(23,'CODE','src/main/java/br/ime/usp/recommender/model/User.java',1),(24,'CODE','src/test/java/br/ime/usp/recommender/factory/ItemToItemRecommenderFactoryTest.java',1),(25,'CODE','src/main/java/br/ime/usp/commendans/ItemToItemRecommender.java',1),(26,'CODE','src/main/java/br/ime/usp/commendans/controller/IndexController.java',1),(27,'CODE','src/main/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactory.java',1),(28,'CODE','src/main/java/br/ime/usp/commendans/model/Item.java',1),(29,'CODE','src/main/java/br/ime/usp/commendans/model/User.java',1),(30,'CODE','src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java',1),(31,'CODE','src/main/java/br/ime/usp/commendans/Recommender.java',1),(32,'CODE','src/main/java/br/ime/usp/commendans/factory/ItemToItemsAssociation.java',1),(33,'CODE','src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommender.java',1),(34,'CODE','src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java',1),(35,'CODE','src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemsAssociation.java',1),(36,'CODE','src/main/java/br/ime/usp/commendans/util/DataImporter.java',1),(37,'CODE','src/main/resources/hibernate.cfg.xml',1),(38,'CODE','src/main/resources/log4j.xml',1),(39,'CODE','src/main/resources/orders.csv',1),(40,'CODE','src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java',1),(41,'CODE','src/main/java/br/ime/usp/commendans/dao/ItemDao.java',1),(42,'CODE','src/main/java/br/ime/usp/commendans/dao/UserDao.java',1),(43,'CODE','src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java',1),(44,'CODE','src/main/java/br/ime/usp/commendans/infra/RecommenderComponent.java',1),(45,'CODE','src/main/java/br/ime/usp/commendans/infra/TupleJsonSerializer.java',1),(46,'CODE','src/main/java/br/ime/usp/commendans/itemtoitem/ItemVector.java',1),(47,'CODE','src/main/java/br/ime/usp/commendans/itemtoitem/Tuple.java',1),(48,'CODE','src/test/java/br/ime/usp/commendans/dao/UserDaoTest.java',1),(49,'CODE','src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java',1),(50,'CODE','src/test/java/br/ime/usp/commendans/itemtoitem/ItemVectorTest.java',1),(51,'CODE','src/main/java/br/ime/usp/commendans/components/SessionCreator.java',1),(52,'CODE','src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java',1),(53,'CODE','src/main/resources/hibernate-heroku.cfg.xml',1),(54,'CODE','src/test/java/br/ime/usp/commendans/components/SessionFactoryCreatorTest.java',1),(55,'CODE','Procfile',1),(56,'CODE','pom.xml',1),(57,'CODE','src/main/webapp/WEB-INF/web-dev.xml',1),(58,'CODE','src/main/webapp/WEB-INF/web-heroku.xml',1),(59,'CODE','src/main/java/br/ime/usp/commendans/runner/Runner.java',1),(60,'CODE','src/main/java/br/ime/usp/commendans/dao/CustomerDao.java',1),(61,'CODE','src/main/java/br/ime/usp/commendans/model/Customer.java',1),(62,'CODE','src/main/java/br/ime/usp/commendans/model/Application.java',1),(63,'CODE','src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java',1),(64,'CODE','src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommender.java',1),(65,'CODE','src/main/java/br/ime/usp/commendans/recommender/GeneralRecommender.java',1),(66,'CODE','src/test/java/br/ime/usp/commendans/dao/CustomerDaoTest.java',1),(67,'CODE','src/test/resources/hibernate.test.cfg.xml',1),(68,'CODE','src/main/java/br/ime/usp/commendans/dao/ApplicationDao.java',1),(69,'CODE','src/test/java/br/ime/usp/commendans/dao/ApplicationDaoTest.java',1),(70,'CODE','src/test/java/br/ime/usp/commendans/dao/DaoTest.java',1),(71,'CODE','src/test/java/br/ime/usp/commendans/dao/ItemDaoTest.java',1),(72,'CODE','src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommenderFactory.java',1),(73,'CODE','src/test/java/br/ime/usp/commendans/factory/SingleAppRecommenderFactoryTest.java',1),(74,'CODE','src/main/java/br/ime/usp/commendans/infra/DataImporter.java',1),(75,'CODE','src/main/java/br/ime/usp/commendans/infra/JettyRunner.java',1),(76,'CODE','src/main/java/br/ime/usp/commendans/infra/SessionCreator.java',1),(77,'CODE','src/main/java/br/ime/usp/commendans/infra/SessionFactoryCreator.java',1),(78,'CODE','src/main/java/br/ime/usp/commendans/recommender/Recommender.java',1),(79,'CODE','src/main/java/br/ime/usp/commendans/recommender/itemtoitem/ItemToItemsAssociation.java',1),(80,'CODE','src/main/java/br/ime/usp/commendans/recommender/itemtoitem/ItemVector.java',1),(81,'CODE','src/main/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommender.java',1),(82,'CODE','src/main/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommenderFactory.java',1),(83,'CODE','src/main/java/br/ime/usp/commendans/recommender/itemtoitem/Tuple.java',1),(84,'CODE','src/test/java/br/ime/usp/commendans/recommender/itemtoitem/ItemVectorTest.java',1),(85,'CODE','src/test/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommenderFactoryTest.java',1),(86,'CODE','src/main/java/br/ime/usp/commendans/recommender/RecommenderCreator.java',1),(87,'CODE','script/new_sale.sh',1),(88,'CODE','src/main/java/br/ime/usp/commendans/controller/ClientAppController.java',1),(89,'CODE','src/main/java/br/ime/usp/commendans/dao/ClientAppDao.java',1),(90,'CODE','src/main/java/br/ime/usp/commendans/model/ClientApp.java',1),(91,'CODE','src/main/java/br/ime/usp/commendans/model/GroupedItems.java',1),(92,'CODE','src/main/java/br/ime/usp/commendans/model/GroupedItemsTest.java',1),(93,'CODE','src/test/java/br/ime/usp/commendans/dao/ClientAppDaoTest.java',1),(94,'CODE','src/main/java/br/ime/usp/commendans/infra/HibernateTransactionInterceptor.java',1),(95,'CODE','src/main/webapp/WEB-INF/jsp/clientApp/clientAppForm.jsp',1),(96,'CODE','src/main/webapp/WEB-INF/jsp/clientApp/saveApp.jsp',1),(97,'CODE','src/main/java/br/ime/usp/commendans/infra/ValidAccessKey.java',1),(98,'CODE','src/main/java/br/ime/usp/commendans/infra/ValidAccessKeyInterceptor.java',1),(99,'CODE','src/main/resources/import.sql',1),(100,'CODE','src/main/webapp/WEB-INF/jsp/index/index.jsp',1),(101,'CODE','README.md',1);
/*!40000 ALTER TABLE `Artifact` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Author`
--

DROP TABLE IF EXISTS `Author`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Author` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `secret_email` varchar(255) DEFAULT NULL,
  `secret_name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `author_name` (`secret_name`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Author`
--

LOCK TABLES `Author` WRITE;
/*!40000 ALTER TABLE `Author` DISABLE KEYS */;
INSERT INTO `Author` VALUES (1,'chico.sokol@gmail.com','Francisco Sokol');
/*!40000 ALTER TABLE `Author` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `BlamedLine`
--

DROP TABLE IF EXISTS `BlamedLine`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `BlamedLine` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `line` int(11) NOT NULL,
  `author_id` int(11) DEFAULT NULL,
  `sourceCode_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK1C2602C97FD44CE8` (`sourceCode_id`),
  KEY `FK1C2602C998C6CCE8` (`author_id`),
  CONSTRAINT `FK1C2602C97FD44CE8` FOREIGN KEY (`sourceCode_id`) REFERENCES `SourceCode` (`id`),
  CONSTRAINT `FK1C2602C998C6CCE8` FOREIGN KEY (`author_id`) REFERENCES `Author` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `BlamedLine`
--

LOCK TABLES `BlamedLine` WRITE;
/*!40000 ALTER TABLE `BlamedLine` DISABLE KEYS */;
/*!40000 ALTER TABLE `BlamedLine` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CCResult`
--

DROP TABLE IF EXISTS `CCResult`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CCResult` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `avgCc` double NOT NULL,
  `cc` int(11) NOT NULL,
  `sourceCode_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK99E2F49D7FD44CE8` (`sourceCode_id`),
  CONSTRAINT `FK99E2F49D7FD44CE8` FOREIGN KEY (`sourceCode_id`) REFERENCES `SourceCode` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=231 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CCResult`
--

LOCK TABLES `CCResult` WRITE;
/*!40000 ALTER TABLE `CCResult` DISABLE KEYS */;
INSERT INTO `CCResult` VALUES (1,1,2,17),(2,-1,0,22),(3,-1,0,23),(4,1,2,24),(5,1,1,25),(6,-1,0,26),(7,1,1,27),(8,1,1,29),(9,-1,0,30),(10,1,2,31),(11,1,1,32),(12,-1,0,33),(13,1,1,34),(14,-1,0,35),(15,-1,0,36),(16,-1,0,37),(17,-1,0,38),(18,-1,0,39),(19,1,1,40),(20,-1,0,41),(21,1.33333333333333,4,42),(22,1,1,43),(23,2,10,44),(24,1.44444444444444,13,45),(25,1.2,6,46),(26,1,2,47),(27,1,1,48),(28,1,1,49),(29,1.33333333333333,4,50),(30,2,10,51),(31,1.44444444444444,13,52),(32,1.16666666666667,7,53),(33,1,6,54),(34,2.66666666666667,8,55),(35,1,1,59),(36,-1,0,60),(37,-1,0,61),(38,-1,0,62),(39,2.66666666666667,8,64),(40,1,1,67),(41,1,3,68),(42,1,3,69),(43,1,2,70),(44,1.33333333333333,4,71),(45,-1,0,72),(46,1,3,73),(47,1.5,6,74),(48,2,10,75),(49,1.8,9,76),(50,1.6,8,77),(51,2.57142857142857,18,78),(52,1,1,80),(53,1,1,81),(54,1,2,82),(55,1.5,3,83),(56,1.75,7,84),(57,1,1,85),(58,1,4,87),(59,1.25,5,88),(60,1,1,91),(61,1,1,92),(62,1.5,6,99),(63,1,3,100),(64,1,4,101),(65,2.5,10,102),(66,1,1,107),(67,3,3,110),(68,1.5,6,112),(69,1.5,6,114),(70,1.5,6,115),(71,1,2,116),(72,-1,0,117),(73,1.33333333333333,4,118),(74,2,10,119),(75,1,6,120),(76,-1,0,121),(77,2.5,10,122),(78,1,1,126),(79,1,1,127),(80,1,3,128),(81,1,4,129),(82,1.33333333333333,4,130),(83,1,3,132),(84,1.33333333333333,4,133),(85,2,10,134),(86,1,1,136),(87,1.83333333333333,11,138),(88,1,5,139),(89,1,5,140),(90,1,1,141),(91,1,5,142),(92,1.16666666666667,7,143),(93,2.5,10,144),(94,1,1,145),(95,1,2,146),(96,1.5,3,147),(97,1,4,150),(98,1,3,151),(99,1.25,5,152),(100,1.83333333333333,11,153),(101,1.5,6,154),(102,1,3,155),(103,1,6,156),(104,-1,0,157),(105,1,5,160),(106,1,1,161),(107,1,1,163),(108,1,4,164),(109,1,2,165),(110,1,3,166),(111,-1,0,167),(112,1.5,6,168),(113,-1,0,169),(114,1.71428571428571,12,170),(115,1.5,6,171),(116,1,9,172),(117,1.33333333333333,4,173),(118,2.5,10,174),(119,1,3,177),(120,1,4,178),(121,1,1,179),(122,-1,0,180),(123,1,1,181),(124,1,5,182),(125,1.63636363636364,18,183),(126,2.57142857142857,18,184),(127,1,2,185),(128,3,3,188),(129,1,4,190),(130,1,3,191),(131,1,3,192),(132,1.8,9,193),(133,1,3,194),(134,1,3,195),(135,1,4,196),(136,1,3,197),(137,-1,0,198),(138,1.5,6,199),(139,-1,0,200),(140,1.71428571428571,12,201),(141,-1,0,202),(142,1,1,203),(143,1.5,3,204),(144,-1,0,206),(145,-1,0,207),(146,-1,0,208),(147,1,3,209),(148,1.8,9,210),(149,2.5,10,211),(150,3,3,212),(151,1.5,6,213),(152,1,4,214),(153,1.5,6,215),(154,1,5,216),(155,-1,0,217),(156,-1,0,218),(157,-1,0,219),(158,-1,0,220),(159,-1,0,221),(160,1.63636363636364,18,222),(161,1.33333333333333,4,223),(162,1,1,224),(163,1.8,9,225),(164,1.75,7,226),(165,1.5,6,227),(166,1.71428571428571,12,228),(167,2.57142857142857,18,229),(168,-1,0,230),(169,-1,0,231),(170,1,1,232),(171,-1,0,233),(172,1,2,234),(173,-1,0,235),(174,1.5,3,236),(175,1,1,237),(176,1,3,239),(177,1.5,6,240),(178,1,3,241),(179,-1,0,242),(180,1.5,6,243),(181,2.5,5,246),(182,1.8,9,247),(183,-1,0,248),(184,1,3,249),(185,1,5,250),(186,1,4,251),(187,2.5,10,252),(188,-1,0,253),(189,1.63636363636364,18,254),(190,1,7,255),(191,1.66666666666667,5,256),(192,1,1,257),(193,2.57142857142857,18,258),(194,1.33333333333333,4,259),(195,1.5,6,260),(196,-1,0,263),(197,1,4,264),(198,1,6,265),(199,1,3,266),(200,1,2,267),(201,1.5,3,268),(202,1,1,269),(203,1.75,7,271),(204,1.66666666666667,10,272),(205,1,6,273),(206,1,5,274),(207,2.33333333333333,7,275),(208,1,5,278),(209,1,7,279),(210,1,5,284),(211,2.5,10,285),(212,1.63636363636364,18,286),(213,1.75,7,289),(214,1,3,290),(215,2.5,10,291),(216,1,3,292),(217,1.75,7,294),(218,2.5,10,295),(219,1.63636363636364,18,296),(220,1,2,297),(221,1.5,6,298),(222,1.75,7,299),(223,1.66666666666667,10,300),(224,2,10,302),(225,1.75,7,303),(226,1.2,6,304),(227,-1,0,305),(228,2,6,306),(229,1,3,308),(230,1,3,310);
/*!40000 ALTER TABLE `CCResult` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CalculatedMetric`
--

DROP TABLE IF EXISTS `CalculatedMetric`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CalculatedMetric` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `metricFactoryClass` varchar(255) DEFAULT NULL,
  `project_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKDDFFC92E783885CC` (`project_id`),
  CONSTRAINT `FKDDFFC92E783885CC` FOREIGN KEY (`project_id`) REFERENCES `Project` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CalculatedMetric`
--

LOCK TABLES `CalculatedMetric` WRITE;
/*!40000 ALTER TABLE `CalculatedMetric` DISABLE KEYS */;
INSERT INTO `CalculatedMetric` VALUES (1,'org.metricminer.tasks.metric.lcom.LComMetricFactory',1),(2,'org.metricminer.tasks.metric.fanout.FanOutMetricFactory',1),(3,'org.metricminer.tasks.metric.methods.MethodsCountMetricFactory',1),(4,'org.metricminer.tasks.metric.lines.LinesOfCodeMetricFactory',1),(5,'org.metricminer.tasks.metric.invocation.MethodsInvocationMetricFactory',1),(6,'org.metricminer.tasks.metric.cc.CCMetricFactory',1),(7,'org.metricminer.tasks.metric.testedmethods.TestedMethodsFinderMetricFactory',1);
/*!40000 ALTER TABLE `CalculatedMetric` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Commit`
--

DROP TABLE IF EXISTS `Commit`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Commit` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `commitId` varchar(255) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `priorCommitId` varchar(255) DEFAULT NULL,
  `author_id` int(11) DEFAULT NULL,
  `diff_id` int(11) DEFAULT NULL,
  `message_id` int(11) DEFAULT NULL,
  `project_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK78A41557783885CC` (`project_id`),
  KEY `FK78A4155798C6CCE8` (`author_id`),
  KEY `FK78A41557296EDC55` (`message_id`),
  KEY `FK78A4155719316E28` (`diff_id`),
  CONSTRAINT `FK78A4155719316E28` FOREIGN KEY (`diff_id`) REFERENCES `Diff` (`id`),
  CONSTRAINT `FK78A41557296EDC55` FOREIGN KEY (`message_id`) REFERENCES `CommitMessage` (`id`),
  CONSTRAINT `FK78A41557783885CC` FOREIGN KEY (`project_id`) REFERENCES `Project` (`id`),
  CONSTRAINT `FK78A4155798C6CCE8` FOREIGN KEY (`author_id`) REFERENCES `Author` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=59 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Commit`
--

LOCK TABLES `Commit` WRITE;
/*!40000 ALTER TABLE `Commit` DISABLE KEYS */;
INSERT INTO `Commit` VALUES (1,'8c5f7a1a8cbe723ebe75d94a3e23052e89080a98','2012-10-29 08:58:02','',1,1,1,1),(2,'dccbccbe60be83681556de12762acf86b7dfc0dd','2012-10-29 09:09:03','8c5f7a1a8cbe723ebe75d94a3e23052e89080a98',1,2,2,1),(3,'3eb3118d1d59d6aaf4f7d08942d325c02f039e10','2012-10-29 14:37:20','dccbccbe60be83681556de12762acf86b7dfc0dd',1,3,3,1),(4,'63ec6447571ac6185cca8cd0ce5cdac21d1ad841','2012-10-29 14:38:13','3eb3118d1d59d6aaf4f7d08942d325c02f039e10',1,4,4,1),(5,'c53115e748b7fec55b80f157f4925694bebe21b6','2012-10-29 16:12:09','63ec6447571ac6185cca8cd0ce5cdac21d1ad841',1,5,5,1),(6,'dae03c91d40a11b9a2ac666979d949aa72cd82c4','2012-10-29 19:46:15','c53115e748b7fec55b80f157f4925694bebe21b6',1,6,6,1),(7,'7813f035ae7533363862e1ca44dd9411735db63f','2012-10-29 19:46:28','dae03c91d40a11b9a2ac666979d949aa72cd82c4',1,7,7,1),(8,'11d8ad36c259bda89d1836d822133cb36ea7223d','2012-10-31 10:44:14','7813f035ae7533363862e1ca44dd9411735db63f',1,8,8,1),(9,'ca5a2b26ac121685e9f46eab4e2fb3465864fcc7','2012-11-01 01:06:38','11d8ad36c259bda89d1836d822133cb36ea7223d',1,9,9,1),(10,'bfcb3c80c5fb341388d3c96ab05b34a14919cac2','2012-11-01 01:07:54','ca5a2b26ac121685e9f46eab4e2fb3465864fcc7',1,10,10,1),(11,'f294dae238b023c6e3834969f288d7dec95cde5f','2012-11-01 08:54:57','bfcb3c80c5fb341388d3c96ab05b34a14919cac2',1,11,11,1),(12,'cb54338f23ff89ecfaa6d65c7a3fed2cc41978e0','2012-11-10 18:02:57','f294dae238b023c6e3834969f288d7dec95cde5f',1,12,12,1),(13,'51e8e78520f6e9e5019f15a35248779350fd0a9a','2012-11-11 11:21:54','cb54338f23ff89ecfaa6d65c7a3fed2cc41978e0',1,13,13,1),(14,'54012515d53c89ceffa02072c90470b627a8e538','2012-11-11 11:33:42','51e8e78520f6e9e5019f15a35248779350fd0a9a',1,14,14,1),(15,'3ad54455f1d2356a4970d49b9c1894fbf5d31fde','2012-11-11 11:39:02','54012515d53c89ceffa02072c90470b627a8e538',1,15,15,1),(16,'5f8629c7d177a044ec17344c880af2cb5f26fe14','2012-11-11 11:42:28','3ad54455f1d2356a4970d49b9c1894fbf5d31fde',1,16,16,1),(17,'5962b14f9a9ab59c1d7cc2522538755658b814d1','2012-11-11 11:44:26','5f8629c7d177a044ec17344c880af2cb5f26fe14',1,17,17,1),(18,'51450d308e5d92f6576ff5835e08657fb7aec255','2012-11-11 11:51:48','5962b14f9a9ab59c1d7cc2522538755658b814d1',1,18,18,1),(19,'20160cb11ffeabad183003ec13d0396dd02fdb0d','2012-11-11 12:40:22','51450d308e5d92f6576ff5835e08657fb7aec255',1,19,19,1),(20,'0badba825177d71316eb686766d4de68dfb9cb69','2012-11-11 12:48:33','20160cb11ffeabad183003ec13d0396dd02fdb0d',1,20,20,1),(21,'958c568a161f52a946e8d949b493616af3791b5a','2012-11-11 12:57:28','0badba825177d71316eb686766d4de68dfb9cb69',1,21,21,1),(22,'d7636392033a07a9336a275afb45f2467b492b0e','2012-11-11 18:02:03','958c568a161f52a946e8d949b493616af3791b5a',1,22,22,1),(23,'43a706b0811d5a6e463ceb93bbb56c33a0ca1798','2012-11-23 11:42:44','d7636392033a07a9336a275afb45f2467b492b0e',1,23,23,1),(24,'9932de8824e298066a72556c48e4bd9df0320461','2012-11-23 12:00:39','43a706b0811d5a6e463ceb93bbb56c33a0ca1798',1,24,24,1),(25,'f50f6dde949b193d362c3665de431a5537acf819','2012-11-23 14:40:39','9932de8824e298066a72556c48e4bd9df0320461',1,25,25,1),(26,'d37b91064bfb4b57ce4666fd10514411da1b4024','2012-11-23 15:38:55','f50f6dde949b193d362c3665de431a5537acf819',1,26,26,1),(27,'9167a6910373d1a1c28f20fd09599c1c1d024126','2012-11-23 15:49:26','d37b91064bfb4b57ce4666fd10514411da1b4024',1,27,27,1),(28,'90424afc8cab1ce32ade024f2d715539f4b342fc','2012-11-23 18:18:12','9167a6910373d1a1c28f20fd09599c1c1d024126',1,28,28,1),(29,'cfb253e4a5419c7d57ba2ee7e164ae64b6da0e02','2012-11-23 21:08:06','90424afc8cab1ce32ade024f2d715539f4b342fc',1,29,29,1),(30,'76c2dd5087648dc43c035cd501d724c793174c3a','2012-11-23 21:12:53','cfb253e4a5419c7d57ba2ee7e164ae64b6da0e02',1,30,30,1),(31,'150785b314f6c9a271cac89fede34803a280cf26','2012-11-23 21:31:55','76c2dd5087648dc43c035cd501d724c793174c3a',1,31,31,1),(32,'3c0f2403ab4c68f13b9fac1ab4fcd8bd6f073d47','2012-11-25 12:50:27','150785b314f6c9a271cac89fede34803a280cf26',1,32,32,1),(33,'113ddb8eb2e20b45922471c0a9f79d85e9b324f2','2012-11-25 13:02:27','3c0f2403ab4c68f13b9fac1ab4fcd8bd6f073d47',1,33,33,1),(34,'6a008b9e81add134d802c608e7207370f43f3eb2','2012-11-25 13:08:26','113ddb8eb2e20b45922471c0a9f79d85e9b324f2',1,34,34,1),(35,'0bf045638fc44a52afa74c32b5bdca0916fc7b05','2012-11-25 13:10:51','6a008b9e81add134d802c608e7207370f43f3eb2',1,35,35,1),(36,'b1d7a08ab060202117fca5ba029565d83a27d0e9','2012-11-25 13:13:48','0bf045638fc44a52afa74c32b5bdca0916fc7b05',1,36,36,1),(37,'7a9983af3224fe2f36b80fb14325dcb7db521881','2012-11-25 13:28:47','b1d7a08ab060202117fca5ba029565d83a27d0e9',1,37,37,1),(38,'f84a6af21d50853858a8ad8693684eb4c27f1f53','2012-11-25 13:41:46','7a9983af3224fe2f36b80fb14325dcb7db521881',1,38,38,1),(39,'d2cb0e11761366b989871dda9f32f1e3627023fd','2012-11-25 13:47:30','f84a6af21d50853858a8ad8693684eb4c27f1f53',1,39,39,1),(40,'ea397d47f6843655abfd7e81e4e0c32e4aa29264','2012-11-26 10:54:53','d2cb0e11761366b989871dda9f32f1e3627023fd',1,40,40,1),(41,'a4d86ffba08ed1a7711f9dd5fb47c402046c88e3','2012-11-26 11:20:41','ea397d47f6843655abfd7e81e4e0c32e4aa29264',1,41,41,1),(42,'77d0ec9710ff67722a88663de9417c682a591a42','2012-11-26 11:29:19','a4d86ffba08ed1a7711f9dd5fb47c402046c88e3',1,42,42,1),(43,'9a494d2195c7bfd065b739fa253b6833daa7330c','2012-11-26 11:46:22','77d0ec9710ff67722a88663de9417c682a591a42',1,43,43,1),(44,'397bf6612317dfa7097516ef9379d6c4d8cb6583','2012-11-26 11:57:08','9a494d2195c7bfd065b739fa253b6833daa7330c',1,44,44,1),(45,'a6a7cfffbcecab1596c5b592c425e99d360cb4a4','2012-11-26 12:17:22','397bf6612317dfa7097516ef9379d6c4d8cb6583',1,45,45,1),(46,'c0e90efe9f98a246d234a69411d36a9d03494e9d','2012-11-26 12:22:49','a6a7cfffbcecab1596c5b592c425e99d360cb4a4',1,46,46,1),(47,'da27d2f82b8f407df764bc90fb75d1e71e275fdd','2012-11-26 12:27:54','c0e90efe9f98a246d234a69411d36a9d03494e9d',1,47,47,1),(48,'16bea21ba841b703277c99a0b040bc8edd4d8fe9','2012-11-26 12:33:36','da27d2f82b8f407df764bc90fb75d1e71e275fdd',1,48,48,1),(49,'33e7fb03a80ca2e805ee9677ac9f6081fd2cef0a','2012-11-26 15:18:07','16bea21ba841b703277c99a0b040bc8edd4d8fe9',1,49,49,1),(50,'87f706965182b19201b1fab40072f78390b3e730','2012-11-26 15:35:54','33e7fb03a80ca2e805ee9677ac9f6081fd2cef0a',1,50,50,1),(51,'5793147c147db9e7184ecbfd4edce5dd83dd9b80','2012-11-26 15:40:45','87f706965182b19201b1fab40072f78390b3e730',1,51,51,1),(52,'71acd05a05eb0f25c443292c16df471267ec37ad','2012-11-26 17:27:57','5793147c147db9e7184ecbfd4edce5dd83dd9b80',1,52,52,1),(53,'b4d012360e0d838b072bc608e7e5f2db2cb349c6','2012-11-26 17:36:29','71acd05a05eb0f25c443292c16df471267ec37ad',1,53,53,1),(54,'b8f6234b8ab3cd217577bb7d98e3b7a2e9662aa4','2012-11-26 17:49:49','b4d012360e0d838b072bc608e7e5f2db2cb349c6',1,54,54,1),(55,'37194ffd6bc588d02ddb62cad4eab58c35fb57b9','2012-11-26 19:11:41','b8f6234b8ab3cd217577bb7d98e3b7a2e9662aa4',1,55,55,1),(56,'58b5bc3004d82d1d7bb9b0370ba077e623ec5561','2012-11-26 19:57:55','37194ffd6bc588d02ddb62cad4eab58c35fb57b9',1,56,56,1),(57,'76ba8b28c9475ac860f1d286ec9398b81b82b302','2012-11-26 20:01:45','58b5bc3004d82d1d7bb9b0370ba077e623ec5561',1,57,57,1),(58,'4e30bb44c97932cba83be508398cb7137eda09dc','2012-11-28 10:18:41','76ba8b28c9475ac860f1d286ec9398b81b82b302',1,58,58,1);
/*!40000 ALTER TABLE `Commit` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `CommitMessage`
--

DROP TABLE IF EXISTS `CommitMessage`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `CommitMessage` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `message` longtext,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=59 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `CommitMessage`
--

LOCK TABLES `CommitMessage` WRITE;
/*!40000 ALTER TABLE `CommitMessage` DISABLE KEYS */;
INSERT INTO `CommitMessage` VALUES (1,'primeiro commit'),(2,'primeiro controller'),(3,'some classes and project renaming'),(4,'renaming packages'),(5,'recommending collective intelligence example'),(6,'importing data from csv'),(7,'removing old stuff'),(8,'importando dados direito'),(9,'creating controller methods'),(10,'minors'),(11,'using own hibernate components'),(12,'fixing test'),(13,'heroku confs'),(14,'jetty runner'),(15,'removing connection pool'),(16,'postgre driver'),(17,'postgresql driver'),(18,'fixing heroku path'),(19,'heroku'),(20,'recommender app scoped'),(21,'minors'),(22,'heroku'),(23,'some refactorings'),(24,'adding application user'),(25,'listing customers of same application'),(26,'recommending for multiple apps'),(27,'splitting own item id from users apps ids'),(28,'updating heroku hibernate'),(29,'using heroku web.xml'),(30,'heroku create-drop'),(31,'using app item id for recommending'),(32,'validating access key'),(33,'refactorings'),(34,'restructuring packages'),(35,'jetty logs'),(36,'prototype scoped'),(37,'recommender should be app scoped'),(38,'recreating recommender after importing data'),(39,'removing create-drop for heroku confs for first release'),(40,'saving new sale'),(41,'form to create app'),(42,'removing join'),(43,'jstl and expression lang'),(44,'jsp api'),(45,'el'),(46,'removing like'),(47,'usgin vraptor interceptor transaction'),(48,'app key should be unique'),(49,'usgin sha256 to generate key'),(50,'hello world route'),(51,'removing index'),(52,'refactoring single app recommender'),(53,'cleaning code'),(54,'sending access key by post'),(55,'using interceptor to validate key'),(56,'some docs'),(57,'commenting import method'),(58,'readme');
/*!40000 ALTER TABLE `CommitMessage` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Diff`
--

DROP TABLE IF EXISTS `Diff`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Diff` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `diff` longtext,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=59 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Diff`
--

LOCK TABLES `Diff` WRITE;
/*!40000 ALTER TABLE `Diff` DISABLE KEYS */;
INSERT INTO `Diff` VALUES (1,'\r\ndiff --git a/.classpath b/.classpath\r\nnew file mode 100644\r\nindex 0000000..0cba456\r\n--- /dev/null\r\n+++ b/.classpath\r\n@@ -0,0 +1,19 @@\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<classpath>\r\n+	<classpathentry kind=\"src\" path=\"src/main/java\"/>\r\n+	<classpathentry kind=\"src\" path=\"src/main/resources\"/>\r\n+	<classpathentry kind=\"src\" path=\"src/test/java\"/>\r\n+	<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java\">\r\n+		<attributes>\r\n+			<attribute name=\"owner.project.facets\" value=\"java\"/>\r\n+		</attributes>\r\n+	</classpathentry>\r\n+	<classpathentry kind=\"con\" path=\"org.eclipse.jst.server.core.container/org.eclipse.jst.server.tomcat.runtimeTarget/Apache Tomcat v7.0\">\r\n+		<attributes>\r\n+			<attribute name=\"owner.project.facets\" value=\"jst.web\"/>\r\n+		</attributes>\r\n+	</classpathentry>\r\n+	<classpathentry kind=\"con\" path=\"org.eclipse.jst.j2ee.internal.web.container\"/>\r\n+	<classpathentry kind=\"con\" path=\"org.eclipse.jst.j2ee.internal.module.container\"/>\r\n+	<classpathentry kind=\"output\" path=\"build/classes\"/>\r\n+</classpath>\r\ndiff --git a/.gitignore b/.gitignore\r\nnew file mode 100644\r\nindex 0000000..fe1b1ad\r\n--- /dev/null\r\n+++ b/.gitignore\r\n@@ -0,0 +1,3 @@\r\n+*.jar\r\n+*.class\r\n+build/\r\ndiff --git a/.project b/.project\r\nnew file mode 100644\r\nindex 0000000..ae8d339\r\n--- /dev/null\r\n+++ b/.project\r\n@@ -0,0 +1,36 @@\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<projectDescription>\r\n+	<name>recommender</name>\r\n+	<comment></comment>\r\n+	<projects>\r\n+	</projects>\r\n+	<buildSpec>\r\n+		<buildCommand>\r\n+			<name>org.eclipse.wst.jsdt.core.javascriptValidator</name>\r\n+			<arguments>\r\n+			</arguments>\r\n+		</buildCommand>\r\n+		<buildCommand>\r\n+			<name>org.eclipse.jdt.core.javabuilder</name>\r\n+			<arguments>\r\n+			</arguments>\r\n+		</buildCommand>\r\n+		<buildCommand>\r\n+			<name>org.eclipse.wst.common.project.facet.core.builder</name>\r\n+			<arguments>\r\n+			</arguments>\r\n+		</buildCommand>\r\n+		<buildCommand>\r\n+			<name>org.eclipse.wst.validation.validationbuilder</name>\r\n+			<arguments>\r\n+			</arguments>\r\n+		</buildCommand>\r\n+	</buildSpec>\r\n+	<natures>\r\n+		<nature>org.eclipse.jem.workbench.JavaEMFNature</nature>\r\n+		<nature>org.eclipse.wst.common.modulecore.ModuleCoreNature</nature>\r\n+		<nature>org.eclipse.wst.common.project.facet.core.nature</nature>\r\n+		<nature>org.eclipse.jdt.core.javanature</nature>\r\n+		<nature>org.eclipse.wst.jsdt.core.jsNature</nature>\r\n+	</natures>\r\n+</projectDescription>\r\ndiff --git a/.settings/.jsdtscope b/.settings/.jsdtscope\r\nnew file mode 100644\r\nindex 0000000..b46b920\r\n--- /dev/null\r\n+++ b/.settings/.jsdtscope\r\n@@ -0,0 +1,12 @@\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<classpath>\r\n+	<classpathentry kind=\"src\" path=\"src/main/webapp\"/>\r\n+	<classpathentry kind=\"con\" path=\"org.eclipse.wst.jsdt.launching.JRE_CONTAINER\"/>\r\n+	<classpathentry kind=\"con\" path=\"org.eclipse.wst.jsdt.launching.WebProject\">\r\n+		<attributes>\r\n+			<attribute name=\"hide\" value=\"true\"/>\r\n+		</attributes>\r\n+	</classpathentry>\r\n+	<classpathentry kind=\"con\" path=\"org.eclipse.wst.jsdt.launching.baseBrowserLibrary\"/>\r\n+	<classpathentry kind=\"output\" path=\"\"/>\r\n+</classpath>\r\ndiff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs\r\nnew file mode 100644\r\nindex 0000000..fa1ee62\r\n--- /dev/null\r\n+++ b/.settings/org.eclipse.jdt.core.prefs\r\n@@ -0,0 +1,8 @@\r\n+#Mon Oct 29 08:50:46 BRST 2012\r\n+eclipse.preferences.version=1\r\n+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled\r\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6\r\n+org.eclipse.jdt.core.compiler.compliance=1.6\r\n+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error\r\n+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error\r\n+org.eclipse.jdt.core.compiler.source=1.6\r\ndiff --git a/.settings/org.eclipse.wst.common.component b/.settings/org.eclipse.wst.common.component\r\nnew file mode 100644\r\nindex 0000000..58a20de\r\n--- /dev/null\r\n+++ b/.settings/org.eclipse.wst.common.component\r\n@@ -0,0 +1,11 @@\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<project-modules id=\"moduleCoreId\" project-version=\"1.5.0\">\r\n+    <wb-module deploy-name=\"recommender\">\r\n+        <wb-resource deploy-path=\"/\" source-path=\"/src/main/webapp\" tag=\"defaultRootSource\"/>\r\n+        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/java\"/>\r\n+        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/resources\"/>\r\n+        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/test/java\"/>\r\n+        <property name=\"context-root\" value=\"recommender\"/>\r\n+        <property name=\"java-output-path\" value=\"/recommender/build/classes\"/>\r\n+    </wb-module>\r\n+</project-modules>\r\ndiff --git a/.settings/org.eclipse.wst.common.project.facet.core.xml b/.settings/org.eclipse.wst.common.project.facet.core.xml\r\nnew file mode 100644\r\nindex 0000000..cff8881\r\n--- /dev/null\r\n+++ b/.settings/org.eclipse.wst.common.project.facet.core.xml\r\n@@ -0,0 +1,10 @@\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<faceted-project>\r\n+  <runtime name=\"Apache Tomcat v7.0\"/>\r\n+  <fixed facet=\"java\"/>\r\n+  <fixed facet=\"jst.web\"/>\r\n+  <fixed facet=\"wst.jsdt.web\"/>\r\n+  <installed facet=\"java\" version=\"1.6\"/>\r\n+  <installed facet=\"jst.web\" version=\"3.0\"/>\r\n+  <installed facet=\"wst.jsdt.web\" version=\"1.0\"/>\r\n+</faceted-project>\r\ndiff --git a/.settings/org.eclipse.wst.jsdt.ui.superType.container b/.settings/org.eclipse.wst.jsdt.ui.superType.container\r\nnew file mode 100644\r\nindex 0000000..3bd5d0a\r\n--- /dev/null\r\n+++ b/.settings/org.eclipse.wst.jsdt.ui.superType.container\r\n@@ -0,0 +1 @@\r\n+org.eclipse.wst.jsdt.launching.baseBrowserLibrary\r\n\\ No newline at end of file\r\ndiff --git a/.settings/org.eclipse.wst.jsdt.ui.superType.name b/.settings/org.eclipse.wst.jsdt.ui.superType.name\r\nnew file mode 100644\r\nindex 0000000..05bd71b\r\n--- /dev/null\r\n+++ b/.settings/org.eclipse.wst.jsdt.ui.superType.name\r\n@@ -0,0 +1 @@\r\n+Window\r\n\\ No newline at end of file\r\ndiff --git a/build.properties b/build.properties\r\nnew file mode 100644\r\nindex 0000000..df0f435\r\n--- /dev/null\r\n+++ b/build.properties\r\n@@ -0,0 +1,19 @@\r\n+webapp.dir=src/main/webapp/\r\n+libs.dir=${webapp.dir}/WEB-INF/lib\r\n+\r\n+ivy.jar.file=ivy-2.2.0.jar\r\n+ivy.file=ivysettings.xml\r\n+\r\n+tmp.root=target\r\n+tmp.dir=${tmp.root}/recommender\r\n+tmp.webinf.dir=${tmp.dir}/WEB-INF\r\n+tmp.classes.dir=${tmp.webinf.dir}/classes\r\n+tmp.test-classes.dir=${tmp.dir}/test-classes\r\n+\r\n+artifacts.dir=${tmp.root}/artifacts/\r\n+war.file=recommender.war\r\n+\r\n+src.dir=src/main/java\r\n+libs.dir=${webapp.dir}/WEB-INF/lib\r\n+resources.dir=src/main/resources\r\n+\r\ndiff --git a/build.xml b/build.xml\r\nnew file mode 100644\r\nindex 0000000..2fa36ad\r\n--- /dev/null\r\n+++ b/build.xml\r\n@@ -0,0 +1,60 @@\r\n+<project name=\"Metric Miner\" default=\"war\" basedir=\".\" xmlns:ivy=\"antlib:org.apache.ivy.ant\">\r\n+\r\n+	<property file=\"build.properties\" />\r\n+\r\n+	<path id=\"libs.classpath\" path=\".\">\r\n+		<fileset dir=\"${libs.dir}\">\r\n+			<include name=\"*.jar\" />\r\n+		</fileset>\r\n+	</path>\r\n+\r\n+	<path id=\"compile.classpath\" path=\".\">\r\n+		<path refid=\"libs.classpath\" />\r\n+	</path>\r\n+\r\n+	<target name=\"prepare\">\r\n+		<mkdir dir=\"${tmp.dir}\" />\r\n+		<mkdir dir=\"${tmp.webinf.dir}\" />\r\n+		<mkdir dir=\"${tmp.classes.dir}\" />\r\n+		<mkdir dir=\"${tmp.test-classes.dir}\" />\r\n+	</target>\r\n+\r\n+	<target name=\"clean\">\r\n+		<delete dir=\"${tmp.dir}\" />\r\n+		<delete>\r\n+	    	<fileset dir=\"${libs.dir}\" includes=\"*.jar\"/>\r\n+		</delete>\r\n+	</target>\r\n+	\r\n+	<!-- resolve dependencies -->\r\n+	<target name=\"resolve\" description=\"--> retrieve dependencies with ivy\">\r\n+		<path id=\"ivy.lib.path\">\r\n+			<pathelement location=\"${ivy.jar.file}\" />\r\n+		</path>\r\n+		<taskdef resource=\"org/apache/ivy/ant/antlib.xml\" uri=\"antlib:org.apache.ivy.ant\" classpathref=\"ivy.lib.path\" />\r\n+\r\n+		<delete dir=\"${libs.dir}\" includes=\"**/*.*\" />\r\n+		<ivy:settings file=\"${ivy.file}\" />\r\n+		<ivy:retrieve pattern=\"${webapp.dir}/WEB-INF/lib/[artifact](-[classifier]).[ext]\" sync=\"true\" />\r\n+	</target>\r\n+\r\n+	<target name=\"compile\" depends=\"prepare\">\r\n+		<javac destdir=\"${tmp.classes.dir}\" srcdir=\"${src.dir}\" classpathref=\"compile.classpath\" debug=\"true\" encoding=\"UTF-8\" />\r\n+	</target>\r\n+\r\n+	<target name=\"war\" depends=\"compile\">\r\n+		<delete file=\"${artifacts.dir}/${war.file}\" />\r\n+		<copy todir=\"${tmp.classes.dir}\">\r\n+			<fileset dir=\"${resources.dir}\" />\r\n+		</copy>\r\n+		<move file=\"${tmp.classes.dir}/log4j.server.xml\" tofile=\"${tmp.classes.dir}/log4j.xml\"/>\r\n+\r\n+		<war destfile=\"${artifacts.dir}/${war.file}\" webxml=\"${webapp.dir}/WEB-INF/web.xml\" compress=\"true\">\r\n+			<fileset dir=\"${webapp.dir}\">\r\n+				<exclude name=\"WEB-INF/web.xml\" />\r\n+			</fileset>\r\n+			<classes dir=\"${tmp.classes.dir}\" />\r\n+		</war>\r\n+	</target>\r\n+\r\n+</project>\r\n\\ No newline at end of file\r\ndiff --git a/ivy.xml b/ivy.xml\r\nnew file mode 100644\r\nindex 0000000..9f68df8\r\n--- /dev/null\r\n+++ b/ivy.xml\r\n@@ -0,0 +1,39 @@\r\n+<ivy-module version=\"2.0\">\r\n+	<info organisation=\"caelum\" module=\"MetricMiner\" />\r\n+\r\n+	<configurations>\r\n+		<conf name=\"default\" description=\"dependencies used for compile\" />\r\n+		<conf name=\"test\" description=\"dependencies used for tests\" visibility=\"public\" />\r\n+	</configurations>\r\n+\r\n+	<dependencies>\r\n+		<!-- Hibernate and other stuff -->\r\n+		<dependency org=\"org.hibernate\" name=\"hibernate-core\" rev=\"3.6.10.Final\"/>\r\n+		<dependency org=\"org.hibernate.javax.persistence\" name=\"hibernate-jpa-2.0-api\" rev=\"1.0.0.Final\" conf=\"default\" />\r\n+		<dependency org=\"org.hibernate\" name=\"hibernate-c3p0\" rev=\"3.6.10.Final\" conf=\"default\" />\r\n+		<dependency org=\"javax.transaction\" name=\"jta\" rev=\"1.1\"/>\r\n+		<dependency org=\"mysql\" name=\"mysql-connector-java\" rev=\"5.1.18\"/>\r\n+		<dependency org=\"c3p0\" name=\"c3p0\" rev=\"0.9.1\" conf=\"default\" />\r\n+		<dependency org=\"org.hibernate\" name=\"hibernate-validator\" rev=\"4.3.0.Final\"/>\r\n+		<dependency org=\"net.sf.ehcache\" name=\"ehcache-core\" rev=\"2.5.3\"/>\r\n+		\r\n+\r\n+		<!-- VRaptor dependencies -->\r\n+		<dependency org=\"br.com.caelum\" name=\"vraptor\" rev=\"3.4.1\" conf=\"default\" />\r\n+        <dependency org=\"org.slf4j\" name=\"slf4j-api\" rev=\"1.6.1\"/>\r\n+        <dependency org=\"log4j\" name=\"log4j\" rev=\"1.2.16\"/>\r\n+		<dependency org=\"org.slf4j\" name=\"slf4j-log4j12\" rev=\"1.6.1\"/>\r\n+		<dependency org=\"org.mortbay.jetty\" name=\"servlet-api-2.5\" rev=\"6.1H.14.1\"/>\r\n+		<dependency org=\"org.glassfish.web\" name=\"jstl-impl\" rev=\"1.2\"/>\r\n+		<dependency org=\"org.mortbay.jetty\" name=\"servlet-api\" rev=\"3.0.pre4\"/>\r\n+		<dependency org=\"javassist\" name=\"javassist\" rev=\"3.12.1.GA\"/>\r\n+		<dependency org=\"commons-io\" name=\"commons-io\" rev=\"2.0.1\"/>\r\n+		<dependency org=\"com.google.guava\" name=\"guava\" rev=\"r09\"/>\r\n+\r\n+		<!-- Test dependencies -->\r\n+		<dependency org=\"junit\" name=\"junit\" rev=\"4.8.2\" conf=\"test->default\" />\r\n+		<dependency org=\"org.mockito\" name=\"mockito-all\" rev=\"1.8.5\" conf=\"test->default\" />\r\n+		<dependency org=\"org.hsqldb\" name=\"hsqldb\" rev=\"2.2.8\" conf=\"test->default\" />\r\n+            \r\n+	</dependencies>\r\n+</ivy-module>\r\ndiff --git a/ivysettings.xml b/ivysettings.xml\r\nnew file mode 100644\r\nindex 0000000..c0c6f9a\r\n--- /dev/null\r\n+++ b/ivysettings.xml\r\n@@ -0,0 +1,13 @@\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<ivysettings>\r\n+  <settings defaultResolver=\"myChain\" />\r\n+  <resolvers>\r\n+    <chain name=\"myChain\" returnFirst=\"true\">\r\n+      <ibiblio name=\"ibiblio\" m2compatible=\"true\" />\r\n+      <ibiblio name=\"jboss\" m2compatible=\"true\" root=\"http://repository.jboss.com/maven2/\" />\r\n+      <ibiblio name=\"jboss2\" m2compatible=\"true\" root=\"http://repository.jboss.com/nexus/content/groups/public/\" />\r\n+      <ibiblio name=\"sonatype-oss-public\" m2compatible=\"true\" root=\"https://oss.sonatype.org/content/groups/public/\" />\r\n+      <ibiblio name=\"terracotta\" m2compatible=\"true\" root=\"http://repo.terracotta.org/maven2/\" />\r\n+    </chain>\r\n+  </resolvers>\r\n+</ivysettings>\r\n\\ No newline at end of file\r\ndiff --git a/src/main/webapp/META-INF/MANIFEST.MF b/src/main/webapp/META-INF/MANIFEST.MF\r\nnew file mode 100644\r\nindex 0000000..5e94951\r\n--- /dev/null\r\n+++ b/src/main/webapp/META-INF/MANIFEST.MF\r\n@@ -0,0 +1,3 @@\r\n+Manifest-Version: 1.0\r\n+Class-Path: \r\n+\r\ndiff --git a/src/main/webapp/WEB-INF/web.xml b/src/main/webapp/WEB-INF/web.xml\r\nnew file mode 100644\r\nindex 0000000..c0b64a7\r\n--- /dev/null\r\n+++ b/src/main/webapp/WEB-INF/web.xml\r\n@@ -0,0 +1,12 @@\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\">\r\n+  <display-name>recommender</display-name>\r\n+  <welcome-file-list>\r\n+    <welcome-file>index.html</welcome-file>\r\n+    <welcome-file>index.htm</welcome-file>\r\n+    <welcome-file>index.jsp</welcome-file>\r\n+    <welcome-file>default.html</welcome-file>\r\n+    <welcome-file>default.htm</welcome-file>\r\n+    <welcome-file>default.jsp</welcome-file>\r\n+  </welcome-file-list>\r\n+</web-app>\r\n\\ No newline at end of file\r\ndiff --git a/src/main/webapp/index.html b/src/main/webapp/index.html\r\nnew file mode 100644\r\nindex 0000000..23d3089\r\n--- /dev/null\r\n+++ b/src/main/webapp/index.html\r\n@@ -0,0 +1,5 @@\r\n+<html>\r\n+	<body>\r\n+		<h1>Hello</h1>\r\n+	</body>\r\n+</html>\r\n\\ No newline at end of file\r\n'),(2,'\r\ndiff --git a/src/main/java/br/ime/usp/recommender/IndexController.java b/src/main/java/br/ime/usp/recommender/IndexController.java\r\nnew file mode 100644\r\nindex 0000000..c266b2e\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/recommender/IndexController.java\r\n@@ -0,0 +1,22 @@\r\n+package br.ime.usp.recommender;\r\n+\r\n+import br.com.caelum.vraptor.Get;\r\n+import br.com.caelum.vraptor.Resource;\r\n+import br.com.caelum.vraptor.Result;\r\n+import br.com.caelum.vraptor.view.Results;\r\n+\r\n+\r\n+@Resource\r\n+public class IndexController {\r\n+    \r\n+    private final Result result;\r\n+\r\n+    public IndexController(Result result) {\r\n+        this.result = result;\r\n+    }\r\n+    \r\n+    @Get(\"/\")\r\n+    public void index() {\r\n+        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n+    }\r\n+}\r\n'),(3,'\r\ndiff --git a/.project b/.project\r\nindex ae8d339..cf5dd09 100644\r\n--- a/.project\r\n+++ b/.project\r\n@@ -1,6 +1,6 @@\r\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n <projectDescription>\r\n-	<name>recommender</name>\r\n+	<name>commendans</name>\r\n 	<comment></comment>\r\n 	<projects>\r\n 	</projects>\r\ndiff --git a/.settings/org.eclipse.wst.common.component b/.settings/org.eclipse.wst.common.component\r\nindex 58a20de..965e8a9 100644\r\n--- a/.settings/org.eclipse.wst.common.component\r\n+++ b/.settings/org.eclipse.wst.common.component\r\n@@ -1,11 +1,11 @@\r\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n <project-modules id=\"moduleCoreId\" project-version=\"1.5.0\">\r\n-    <wb-module deploy-name=\"recommender\">\r\n+    <wb-module deploy-name=\"commendans\">\r\n         <wb-resource deploy-path=\"/\" source-path=\"/src/main/webapp\" tag=\"defaultRootSource\"/>\r\n         <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/java\"/>\r\n         <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/resources\"/>\r\n         <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/test/java\"/>\r\n-        <property name=\"context-root\" value=\"recommender\"/>\r\n-        <property name=\"java-output-path\" value=\"/recommender/build/classes\"/>\r\n+        <property name=\"java-output-path\" value=\"/commendans/build/classes\"/>\r\n+        <property name=\"context-root\" value=\"commendans\"/>\r\n     </wb-module>\r\n </project-modules>\r\ndiff --git a/.settings/org.jboss.ide.eclipse.as.core.prefs b/.settings/org.jboss.ide.eclipse.as.core.prefs\r\nnew file mode 100644\r\nindex 0000000..251ff7e\r\n--- /dev/null\r\n+++ b/.settings/org.jboss.ide.eclipse.as.core.prefs\r\n@@ -0,0 +1,3 @@\r\n+#Mon Oct 29 14:36:46 BRST 2012\r\n+eclipse.preferences.version=1\r\n+org.jboss.ide.eclipse.as.core.singledeployable.deployableList=\r\ndiff --git a/ivy.xml b/ivy.xml\r\nindex 9f68df8..6dea182 100644\r\n--- a/ivy.xml\r\n+++ b/ivy.xml\r\n@@ -1,5 +1,5 @@\r\n <ivy-module version=\"2.0\">\r\n-	<info organisation=\"caelum\" module=\"MetricMiner\" />\r\n+	<info organisation=\"ime-usp\" module=\"recommender\" />\r\n \r\n 	<configurations>\r\n 		<conf name=\"default\" description=\"dependencies used for compile\" />\r\ndiff --git a/src/main/java/br/ime/usp/recommender/IndexController.java b/src/main/java/br/ime/usp/recommender/IndexController.java\r\ndeleted file mode 100644\r\nindex c266b2e..0000000\r\n--- a/src/main/java/br/ime/usp/recommender/IndexController.java\r\n+++ /dev/null\r\n@@ -1,22 +0,0 @@\r\n-package br.ime.usp.recommender;\r\n-\r\n-import br.com.caelum.vraptor.Get;\r\n-import br.com.caelum.vraptor.Resource;\r\n-import br.com.caelum.vraptor.Result;\r\n-import br.com.caelum.vraptor.view.Results;\r\n-\r\n-\r\n-@Resource\r\n-public class IndexController {\r\n-    \r\n-    private final Result result;\r\n-\r\n-    public IndexController(Result result) {\r\n-        this.result = result;\r\n-    }\r\n-    \r\n-    @Get(\"/\")\r\n-    public void index() {\r\n-        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n-    }\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/recommender/ItemToItemRecommender.java b/src/main/java/br/ime/usp/recommender/ItemToItemRecommender.java\r\nnew file mode 100644\r\nindex 0000000..549c69a\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/recommender/ItemToItemRecommender.java\r\n@@ -0,0 +1,5 @@\r\n+package br.ime.usp.recommender;\r\n+\r\n+public class ItemToItemRecommender {\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/recommender/controller/IndexController.java b/src/main/java/br/ime/usp/recommender/controller/IndexController.java\r\nnew file mode 100644\r\nindex 0000000..0f547af\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/recommender/controller/IndexController.java\r\n@@ -0,0 +1,22 @@\r\n+package br.ime.usp.recommender.controller;\r\n+\r\n+import br.com.caelum.vraptor.Get;\r\n+import br.com.caelum.vraptor.Resource;\r\n+import br.com.caelum.vraptor.Result;\r\n+import br.com.caelum.vraptor.view.Results;\r\n+\r\n+\r\n+@Resource\r\n+public class IndexController {\r\n+    \r\n+    private final Result result;\r\n+\r\n+    public IndexController(Result result) {\r\n+        this.result = result;\r\n+    }\r\n+    \r\n+    @Get(\"/\")\r\n+    public void index() {\r\n+        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n+    }\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/recommender/factory/ItemToItemRecommenderFactory.java b/src/main/java/br/ime/usp/recommender/factory/ItemToItemRecommenderFactory.java\r\nnew file mode 100644\r\nindex 0000000..c2aaae7\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/recommender/factory/ItemToItemRecommenderFactory.java\r\n@@ -0,0 +1,11 @@\r\n+package br.ime.usp.recommender.factory;\r\n+\r\n+import br.ime.usp.recommender.model.User;\r\n+\r\n+public class ItemToItemRecommenderFactory {\r\n+\r\n+    public void addUser(User user) {\r\n+        \r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/recommender/model/Item.java b/src/main/java/br/ime/usp/recommender/model/Item.java\r\nnew file mode 100644\r\nindex 0000000..3963c79\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/recommender/model/Item.java\r\n@@ -0,0 +1,5 @@\r\n+package br.ime.usp.recommender.model;\r\n+\r\n+public class Item {\r\n+    \r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/recommender/model/User.java b/src/main/java/br/ime/usp/recommender/model/User.java\r\nnew file mode 100644\r\nindex 0000000..fc51a6f\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/recommender/model/User.java\r\n@@ -0,0 +1,10 @@\r\n+package br.ime.usp.recommender.model;\r\n+\r\n+import java.util.List;\r\n+\r\n+public class User {\r\n+\r\n+    public User(List<Item> items) {\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/webapp/WEB-INF/web.xml b/src/main/webapp/WEB-INF/web.xml\r\nindex c0b64a7..5368bfa 100644\r\n--- a/src/main/webapp/WEB-INF/web.xml\r\n+++ b/src/main/webapp/WEB-INF/web.xml\r\n@@ -1,6 +1,6 @@\r\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n <web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\">\r\n-  <display-name>recommender</display-name>\r\n+  <display-name>commendans</display-name>\r\n   <welcome-file-list>\r\n     <welcome-file>index.html</welcome-file>\r\n     <welcome-file>index.htm</welcome-file>\r\ndiff --git a/src/test/java/br/ime/usp/recommender/factory/ItemToItemRecommenderFactoryTest.java b/src/test/java/br/ime/usp/recommender/factory/ItemToItemRecommenderFactoryTest.java\r\nnew file mode 100644\r\nindex 0000000..e966e3c\r\n--- /dev/null\r\n+++ b/src/test/java/br/ime/usp/recommender/factory/ItemToItemRecommenderFactoryTest.java\r\n@@ -0,0 +1,20 @@\r\n+package br.ime.usp.recommender.factory;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.recommender.model.Item;\r\n+import br.ime.usp.recommender.model.User;\r\n+\r\n+public class ItemToItemRecommenderFactoryTest {\r\n+\r\n+    @Test\r\n+    public void test() {\r\n+        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n+        List<Item> items = new ArrayList<Item>();\r\n+        factory.addUser(new User(items));\r\n+    }\r\n+\r\n+}\r\n'),(4,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/ItemToItemRecommender.java b/src/main/java/br/ime/usp/commendans/ItemToItemRecommender.java\r\nnew file mode 100644\r\nindex 0000000..a476fc6\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/ItemToItemRecommender.java\r\n@@ -0,0 +1,5 @@\r\n+package br.ime.usp.commendans;\r\n+\r\n+public class ItemToItemRecommender {\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/IndexController.java b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\nnew file mode 100644\r\nindex 0000000..6ad9621\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n@@ -0,0 +1,22 @@\r\n+package br.ime.usp.commendans.controller;\r\n+\r\n+import br.com.caelum.vraptor.Get;\r\n+import br.com.caelum.vraptor.Resource;\r\n+import br.com.caelum.vraptor.Result;\r\n+import br.com.caelum.vraptor.view.Results;\r\n+\r\n+\r\n+@Resource\r\n+public class IndexController {\r\n+    \r\n+    private final Result result;\r\n+\r\n+    public IndexController(Result result) {\r\n+        this.result = result;\r\n+    }\r\n+    \r\n+    @Get(\"/\")\r\n+    public void index() {\r\n+        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n+    }\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactory.java b/src/main/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactory.java\r\nnew file mode 100644\r\nindex 0000000..581dd9a\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactory.java\r\n@@ -0,0 +1,11 @@\r\n+package br.ime.usp.commendans.factory;\r\n+\r\n+import br.ime.usp.commendans.model.User;\r\n+\r\n+public class ItemToItemRecommenderFactory {\r\n+\r\n+    public void addUser(User user) {\r\n+        \r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Item.java b/src/main/java/br/ime/usp/commendans/model/Item.java\r\nnew file mode 100644\r\nindex 0000000..a288398\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Item.java\r\n@@ -0,0 +1,5 @@\r\n+package br.ime.usp.commendans.model;\r\n+\r\n+public class Item {\r\n+    \r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/User.java b/src/main/java/br/ime/usp/commendans/model/User.java\r\nnew file mode 100644\r\nindex 0000000..86ce074\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/model/User.java\r\n@@ -0,0 +1,10 @@\r\n+package br.ime.usp.commendans.model;\r\n+\r\n+import java.util.List;\r\n+\r\n+public class User {\r\n+\r\n+    public User(List<Item> items) {\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/recommender/ItemToItemRecommender.java b/src/main/java/br/ime/usp/recommender/ItemToItemRecommender.java\r\ndeleted file mode 100644\r\nindex 549c69a..0000000\r\n--- a/src/main/java/br/ime/usp/recommender/ItemToItemRecommender.java\r\n+++ /dev/null\r\n@@ -1,5 +0,0 @@\r\n-package br.ime.usp.recommender;\r\n-\r\n-public class ItemToItemRecommender {\r\n-\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/recommender/controller/IndexController.java b/src/main/java/br/ime/usp/recommender/controller/IndexController.java\r\ndeleted file mode 100644\r\nindex 0f547af..0000000\r\n--- a/src/main/java/br/ime/usp/recommender/controller/IndexController.java\r\n+++ /dev/null\r\n@@ -1,22 +0,0 @@\r\n-package br.ime.usp.recommender.controller;\r\n-\r\n-import br.com.caelum.vraptor.Get;\r\n-import br.com.caelum.vraptor.Resource;\r\n-import br.com.caelum.vraptor.Result;\r\n-import br.com.caelum.vraptor.view.Results;\r\n-\r\n-\r\n-@Resource\r\n-public class IndexController {\r\n-    \r\n-    private final Result result;\r\n-\r\n-    public IndexController(Result result) {\r\n-        this.result = result;\r\n-    }\r\n-    \r\n-    @Get(\"/\")\r\n-    public void index() {\r\n-        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n-    }\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/recommender/factory/ItemToItemRecommenderFactory.java b/src/main/java/br/ime/usp/recommender/factory/ItemToItemRecommenderFactory.java\r\ndeleted file mode 100644\r\nindex c2aaae7..0000000\r\n--- a/src/main/java/br/ime/usp/recommender/factory/ItemToItemRecommenderFactory.java\r\n+++ /dev/null\r\n@@ -1,11 +0,0 @@\r\n-package br.ime.usp.recommender.factory;\r\n-\r\n-import br.ime.usp.recommender.model.User;\r\n-\r\n-public class ItemToItemRecommenderFactory {\r\n-\r\n-    public void addUser(User user) {\r\n-        \r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/recommender/model/Item.java b/src/main/java/br/ime/usp/recommender/model/Item.java\r\ndeleted file mode 100644\r\nindex 3963c79..0000000\r\n--- a/src/main/java/br/ime/usp/recommender/model/Item.java\r\n+++ /dev/null\r\n@@ -1,5 +0,0 @@\r\n-package br.ime.usp.recommender.model;\r\n-\r\n-public class Item {\r\n-    \r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/recommender/model/User.java b/src/main/java/br/ime/usp/recommender/model/User.java\r\ndeleted file mode 100644\r\nindex fc51a6f..0000000\r\n--- a/src/main/java/br/ime/usp/recommender/model/User.java\r\n+++ /dev/null\r\n@@ -1,10 +0,0 @@\r\n-package br.ime.usp.recommender.model;\r\n-\r\n-import java.util.List;\r\n-\r\n-public class User {\r\n-\r\n-    public User(List<Item> items) {\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\nnew file mode 100644\r\nindex 0000000..1be07ce\r\n--- /dev/null\r\n+++ b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n@@ -0,0 +1,21 @@\r\n+package br.ime.usp.commendans.factory;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.factory.ItemToItemRecommenderFactory;\r\n+import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.model.User;\r\n+\r\n+public class ItemToItemRecommenderFactoryTest {\r\n+\r\n+    @Test\r\n+    public void test() {\r\n+        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n+        List<Item> items = new ArrayList<Item>();\r\n+        factory.addUser(new User(items));\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/test/java/br/ime/usp/recommender/factory/ItemToItemRecommenderFactoryTest.java b/src/test/java/br/ime/usp/recommender/factory/ItemToItemRecommenderFactoryTest.java\r\ndeleted file mode 100644\r\nindex e966e3c..0000000\r\n--- a/src/test/java/br/ime/usp/recommender/factory/ItemToItemRecommenderFactoryTest.java\r\n+++ /dev/null\r\n@@ -1,20 +0,0 @@\r\n-package br.ime.usp.recommender.factory;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import br.ime.usp.recommender.model.Item;\r\n-import br.ime.usp.recommender.model.User;\r\n-\r\n-public class ItemToItemRecommenderFactoryTest {\r\n-\r\n-    @Test\r\n-    public void test() {\r\n-        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n-        List<Item> items = new ArrayList<Item>();\r\n-        factory.addUser(new User(items));\r\n-    }\r\n-\r\n-}\r\n'),(5,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/ItemToItemRecommender.java b/src/main/java/br/ime/usp/commendans/ItemToItemRecommender.java\r\nindex a476fc6..860b025 100644\r\n--- a/src/main/java/br/ime/usp/commendans/ItemToItemRecommender.java\r\n+++ b/src/main/java/br/ime/usp/commendans/ItemToItemRecommender.java\r\n@@ -1,5 +1,38 @@\r\n package br.ime.usp.commendans;\r\n \r\n-public class ItemToItemRecommender {\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.factory.ItemToItemsAssociation;\r\n+import br.ime.usp.commendans.factory.ItemToItemsAssociation.Tuple;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class ItemToItemRecommender implements Recommender {\r\n+\r\n+    private final Map<Item, List<Tuple>> associations;\r\n+\r\n+    public ItemToItemRecommender(\r\n+            HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        this.associations = parse(associations);\r\n+    }\r\n+\r\n+    private Map<Item, List<Tuple>> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        HashMap<Item, List<Tuple>> map = new HashMap<Item, List<Tuple>>();\r\n+        Set<Item> items = associations.keySet();\r\n+        for (Item item : items) {\r\n+            ItemToItemsAssociation association = associations.get(item);\r\n+            List<Tuple> tuples = association.toTupleList();\r\n+            map.put(item, tuples);\r\n+        }\r\n+        return map;\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<Tuple> recommendendItemsFor(Item item) {\r\n+        List<Tuple> tuples = associations.get(item);\r\n+        return tuples;\r\n+    }\r\n \r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/Recommender.java b/src/main/java/br/ime/usp/commendans/Recommender.java\r\nnew file mode 100644\r\nindex 0000000..5397bd2\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/Recommender.java\r\n@@ -0,0 +1,10 @@\r\n+package br.ime.usp.commendans;\r\n+\r\n+import java.util.List;\r\n+\r\n+import br.ime.usp.commendans.factory.ItemToItemsAssociation.Tuple;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public interface Recommender {\r\n+    public List<Tuple> recommendendItemsFor(Item item);\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactory.java b/src/main/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactory.java\r\nindex 581dd9a..cf6a011 100644\r\n--- a/src/main/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactory.java\r\n+++ b/src/main/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactory.java\r\n@@ -1,11 +1,61 @@\r\n package br.ime.usp.commendans.factory;\r\n \r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.ItemToItemRecommender;\r\n+import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.model.User;\r\n \r\n public class ItemToItemRecommenderFactory {\r\n \r\n+    private Map<Item, List<User>> usersByItemBought;\r\n+    private HashMap<Item, ItemToItemsAssociation> associations;\r\n+    \r\n+    public ItemToItemRecommenderFactory() {\r\n+        usersByItemBought = new HashMap<Item, List<User>>();\r\n+    }\r\n+    \r\n     public void addUser(User user) {\r\n-        \r\n+        List<Item> items = user.itemsBought();\r\n+        for (Item item : items) {\r\n+            store(item, user);\r\n+        }\r\n+    }\r\n+\r\n+    private void store(Item item, User user) {\r\n+        List<User> users = usersByItemBought.get(item);\r\n+        if (users == null) {\r\n+            users = new ArrayList<User>();\r\n+        }\r\n+        users.add(user);\r\n+        usersByItemBought.put(item, users);\r\n+    }\r\n+    \r\n+    \r\n+    public ItemToItemRecommender build() {\r\n+        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n+        Set<Item> items = usersByItemBought.keySet();\r\n+        for (Item item : items) {\r\n+            ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n+            List<User> users = usersByItemBought.get(item);\r\n+            for (User user : users) {\r\n+                List<Item> boughtTogether = user.itemsBought();\r\n+                System.out.println(item + \" -> \" +boughtTogether);\r\n+                for (Item i : boughtTogether) {\r\n+                    association.associate(i);\r\n+                }\r\n+            }\r\n+            associations.put(item, association);\r\n+        }\r\n+        return new ItemToItemRecommender(associations);\r\n+    }\r\n+    \r\n+    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n+        return associations;\r\n     }\r\n \r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/factory/ItemToItemsAssociation.java b/src/main/java/br/ime/usp/commendans/factory/ItemToItemsAssociation.java\r\nnew file mode 100644\r\nindex 0000000..f0e665b\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/factory/ItemToItemsAssociation.java\r\n@@ -0,0 +1,84 @@\r\n+package br.ime.usp.commendans.factory;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class ItemToItemsAssociation {\r\n+    private Item item;\r\n+    private Map<Item, Double> associations;\r\n+\r\n+    public ItemToItemsAssociation(Item item) {\r\n+        this.item = item;\r\n+        this.associations = new HashMap<Item, Double>();\r\n+    }\r\n+\r\n+    public void associate(Item i) {\r\n+        if (i.equals(this.item))\r\n+            return;\r\n+        Double v = associations.get(i);\r\n+        if (v == null) {\r\n+            v = 0.0;\r\n+        }\r\n+        v += 1.0;\r\n+        associations.put(i, v);\r\n+    }\r\n+    \r\n+    public double associationValue(Item i) {\r\n+        Double v = associations.get(i);\r\n+        if (v == null) {\r\n+            return 0.0;\r\n+        }\r\n+        return v;\r\n+    }\r\n+    \r\n+    \r\n+    @Override\r\n+    public String toString() {\r\n+        String res = this.item.toString() + \" => {\" + associations.toString() + \"}\";\r\n+        return res;\r\n+    }\r\n+\r\n+    public List<Tuple> toTupleList() {\r\n+        Set<Item> items = associations.keySet();\r\n+        ArrayList<Tuple> tuples = new ArrayList<Tuple>();\r\n+        for (Item item : items) {\r\n+            Double value = associations.get(item);\r\n+            tuples.add(new Tuple(item, value));\r\n+        }\r\n+        Collections.sort(tuples);\r\n+        Collections.reverse(tuples);\r\n+        return tuples;\r\n+    }\r\n+\r\n+    \r\n+    public class Tuple implements Comparable<Tuple> {\r\n+        private Item item;\r\n+        private Double value;\r\n+\r\n+        public Tuple(Item item, Double value) {\r\n+            this.item = item;\r\n+            this.value = value;\r\n+        }\r\n+\r\n+        public Item getItem() {\r\n+            return item;\r\n+        }\r\n+\r\n+        public Double getValue() {\r\n+            return value;\r\n+        }\r\n+\r\n+        @Override\r\n+        public int compareTo(Tuple o) {\r\n+            return (int) (value - o.getValue());\r\n+        }\r\n+\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Item.java b/src/main/java/br/ime/usp/commendans/model/Item.java\r\nindex a288398..f1af6c6 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/Item.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Item.java\r\n@@ -1,5 +1,32 @@\r\n package br.ime.usp.commendans.model;\r\n \r\n public class Item {\r\n+    private Long id;\r\n+\r\n+    public Item(Long id) {\r\n+        this.id = id;\r\n+    }\r\n+    \r\n+    @Override\r\n+    public int hashCode() {\r\n+        return id.hashCode();\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (obj instanceof Item) {\r\n+            Item other = (Item) obj;\r\n+            return other.getId().equals(this.id);\r\n+        }\r\n+        return false;\r\n+    }\r\n+    \r\n+    public Long getId() {\r\n+        return id;\r\n+    }\r\n     \r\n+    @Override\r\n+    public String toString() {\r\n+        return \"Item \" + id;\r\n+    }\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/User.java b/src/main/java/br/ime/usp/commendans/model/User.java\r\nindex 86ce074..8c73b8c 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/User.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/User.java\r\n@@ -4,7 +4,14 @@ import java.util.List;\r\n \r\n public class User {\r\n \r\n+    private final List<Item> items;\r\n+\r\n     public User(List<Item> items) {\r\n+        this.items = items;\r\n+    }\r\n+\r\n+    public List<Item> itemsBought() {\r\n+        return items;\r\n     }\r\n \r\n }\r\ndiff --git a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\nindex 1be07ce..5d4eb3b 100644\r\n--- a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n@@ -1,11 +1,15 @@\r\n package br.ime.usp.commendans.factory;\r\n \r\n-import java.util.ArrayList;\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.HashMap;\r\n import java.util.List;\r\n \r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.factory.ItemToItemRecommenderFactory;\r\n+import br.ime.usp.commendans.ItemToItemRecommender;\r\n+import br.ime.usp.commendans.factory.ItemToItemsAssociation.Tuple;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.model.User;\r\n \r\n@@ -14,8 +18,66 @@ public class ItemToItemRecommenderFactoryTest {\r\n     @Test\r\n     public void test() {\r\n         ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n-        List<Item> items = new ArrayList<Item>();\r\n-        factory.addUser(new User(items));\r\n+        Item item1 = new Item(1l);\r\n+        Item item2 = new Item(2l);\r\n+        Item item3 = new Item(3l);\r\n+        Item item4 = new Item(4l);\r\n+        User user1 = new User(Arrays.asList(item1, item3));\r\n+        User user2 = new User(Arrays.asList(item2, item4));\r\n+        User user3 = new User(Arrays.asList(item1, item2, item3));\r\n+        User user4 = new User(Arrays.asList(item3, item4));\r\n+        factory.addUser(user1);\r\n+        factory.addUser(user2);\r\n+        factory.addUser(user3);\r\n+        factory.addUser(user4);\r\n+        \r\n+        ItemToItemRecommender recommender = factory.build();\r\n+        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n+        \r\n+        List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1);\r\n+        ItemToItemsAssociation association = associations.get(item1);\r\n+        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(2, recommendedItems.size());\r\n+        assertEquals(item3, recommendedItems.get(0).getItem());\r\n+        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(item2, recommendedItems.get(1).getItem());\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        \r\n+        recommendedItems = recommender.recommendendItemsFor(item2);\r\n+        association = associations.get(item2);\r\n+        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(3, recommendedItems.size());\r\n+        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n+        \r\n+        recommendedItems = recommender.recommendendItemsFor(item3);\r\n+        association = associations.get(item3);\r\n+        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(3, recommendedItems.size());\r\n+        assertEquals(item1, recommendedItems.get(0).getItem());\r\n+        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n+        \r\n+        association = associations.get(item4);\r\n+        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n+        \r\n     }\r\n \r\n }\r\n'),(6,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/Recommender.java b/src/main/java/br/ime/usp/commendans/Recommender.java\r\nindex 5397bd2..70d791c 100644\r\n--- a/src/main/java/br/ime/usp/commendans/Recommender.java\r\n+++ b/src/main/java/br/ime/usp/commendans/Recommender.java\r\n@@ -2,7 +2,7 @@ package br.ime.usp.commendans;\r\n \r\n import java.util.List;\r\n \r\n-import br.ime.usp.commendans.factory.ItemToItemsAssociation.Tuple;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation.Tuple;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n public interface Recommender {\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommender.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommender.java\r\nnew file mode 100644\r\nindex 0000000..ce01649\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommender.java\r\n@@ -0,0 +1,38 @@\r\n+package br.ime.usp.commendans.itemtoitem;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.Recommender;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation.Tuple;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class ItemToItemRecommender implements Recommender {\r\n+\r\n+    private final Map<Item, List<Tuple>> associations;\r\n+\r\n+    public ItemToItemRecommender(\r\n+            HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        this.associations = parse(associations);\r\n+    }\r\n+\r\n+    private Map<Item, List<Tuple>> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        HashMap<Item, List<Tuple>> map = new HashMap<Item, List<Tuple>>();\r\n+        Set<Item> items = associations.keySet();\r\n+        for (Item item : items) {\r\n+            ItemToItemsAssociation association = associations.get(item);\r\n+            List<Tuple> tuples = association.toTupleList();\r\n+            map.put(item, tuples);\r\n+        }\r\n+        return map;\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<Tuple> recommendendItemsFor(Item item) {\r\n+        List<Tuple> tuples = associations.get(item);\r\n+        return tuples;\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\nnew file mode 100644\r\nindex 0000000..75db695\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\n@@ -0,0 +1,60 @@\r\n+package br.ime.usp.commendans.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.model.User;\r\n+\r\n+public class ItemToItemRecommenderFactory {\r\n+\r\n+    private Map<Item, List<User>> usersByItemBought;\r\n+    private HashMap<Item, ItemToItemsAssociation> associations;\r\n+    \r\n+    public ItemToItemRecommenderFactory() {\r\n+        usersByItemBought = new HashMap<Item, List<User>>();\r\n+    }\r\n+    \r\n+    public void addUser(User user) {\r\n+        List<Item> items = user.itemsBought();\r\n+        for (Item item : items) {\r\n+            store(item, user);\r\n+        }\r\n+    }\r\n+\r\n+    private void store(Item item, User user) {\r\n+        List<User> users = usersByItemBought.get(item);\r\n+        if (users == null) {\r\n+            users = new ArrayList<User>();\r\n+        }\r\n+        users.add(user);\r\n+        usersByItemBought.put(item, users);\r\n+    }\r\n+    \r\n+    \r\n+    public ItemToItemRecommender build() {\r\n+        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n+        Set<Item> items = usersByItemBought.keySet();\r\n+        for (Item item : items) {\r\n+            ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n+            List<User> users = usersByItemBought.get(item);\r\n+            for (User user : users) {\r\n+                List<Item> boughtTogether = user.itemsBought();\r\n+                System.out.println(item + \" -> \" +boughtTogether);\r\n+                for (Item i : boughtTogether) {\r\n+                    association.associate(i);\r\n+                }\r\n+            }\r\n+            associations.put(item, association);\r\n+        }\r\n+        return new ItemToItemRecommender(associations);\r\n+    }\r\n+    \r\n+    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n+        return associations;\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemsAssociation.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemsAssociation.java\r\nnew file mode 100644\r\nindex 0000000..46c77b4\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemsAssociation.java\r\n@@ -0,0 +1,84 @@\r\n+package br.ime.usp.commendans.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class ItemToItemsAssociation {\r\n+    private Item item;\r\n+    private Map<Item, Double> associations;\r\n+\r\n+    public ItemToItemsAssociation(Item item) {\r\n+        this.item = item;\r\n+        this.associations = new HashMap<Item, Double>();\r\n+    }\r\n+\r\n+    public void associate(Item i) {\r\n+        if (i.equals(this.item))\r\n+            return;\r\n+        Double v = associations.get(i);\r\n+        if (v == null) {\r\n+            v = 0.0;\r\n+        }\r\n+        v += 1.0;\r\n+        associations.put(i, v);\r\n+    }\r\n+    \r\n+    public double associationValue(Item i) {\r\n+        Double v = associations.get(i);\r\n+        if (v == null) {\r\n+            return 0.0;\r\n+        }\r\n+        return v;\r\n+    }\r\n+    \r\n+    \r\n+    @Override\r\n+    public String toString() {\r\n+        String res = this.item.toString() + \" => {\" + associations.toString() + \"}\";\r\n+        return res;\r\n+    }\r\n+\r\n+    public List<Tuple> toTupleList() {\r\n+        Set<Item> items = associations.keySet();\r\n+        ArrayList<Tuple> tuples = new ArrayList<Tuple>();\r\n+        for (Item item : items) {\r\n+            Double value = associations.get(item);\r\n+            tuples.add(new Tuple(item, value));\r\n+        }\r\n+        Collections.sort(tuples);\r\n+        Collections.reverse(tuples);\r\n+        return tuples;\r\n+    }\r\n+\r\n+    \r\n+    public class Tuple implements Comparable<Tuple> {\r\n+        private Item item;\r\n+        private Double value;\r\n+\r\n+        public Tuple(Item item, Double value) {\r\n+            this.item = item;\r\n+            this.value = value;\r\n+        }\r\n+\r\n+        public Item getItem() {\r\n+            return item;\r\n+        }\r\n+\r\n+        public Double getValue() {\r\n+            return value;\r\n+        }\r\n+\r\n+        @Override\r\n+        public int compareTo(Tuple o) {\r\n+            return (int) (value - o.getValue());\r\n+        }\r\n+\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Item.java b/src/main/java/br/ime/usp/commendans/model/Item.java\r\nindex f1af6c6..50863fb 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/Item.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Item.java\r\n@@ -1,8 +1,17 @@\r\n package br.ime.usp.commendans.model;\r\n \r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n public class Item {\r\n+    @Id\r\n     private Long id;\r\n \r\n+    @Deprecated\r\n+    protected Item() {\r\n+    }\r\n+    \r\n     public Item(Long id) {\r\n         this.id = id;\r\n     }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/User.java b/src/main/java/br/ime/usp/commendans/model/User.java\r\nindex 8c73b8c..121311c 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/User.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/User.java\r\n@@ -2,16 +2,44 @@ package br.ime.usp.commendans.model;\r\n \r\n import java.util.List;\r\n \r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToMany;\r\n+\r\n+@Entity\r\n public class User {\r\n+    \r\n+    @Id @GeneratedValue\r\n+    private Long id;\r\n \r\n-    private final List<Item> items;\r\n+    @ManyToMany\r\n+    private List<Item> items;\r\n+    \r\n+    @Deprecated\r\n+    public User() {\r\n+    }\r\n \r\n-    public User(List<Item> items) {\r\n+    public User(List<Item> items, Long id) {\r\n         this.items = items;\r\n+        this.id = id;\r\n     }\r\n \r\n     public List<Item> itemsBought() {\r\n         return items;\r\n     }\r\n+    \r\n+    @Override\r\n+    public String toString() {\r\n+        return \"User \" + id;\r\n+    }\r\n+\r\n+    public void add(Item item) {\r\n+        items.add(item);\r\n+    }\r\n+    \r\n+    public List<Item> getItems() {\r\n+        return items;\r\n+    }\r\n \r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/util/DataImporter.java b/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\nnew file mode 100644\r\nindex 0000000..2dc2bb6\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\n@@ -0,0 +1,78 @@\r\n+package br.ime.usp.commendans.util;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+import org.hibernate.SessionFactory;\r\n+import org.hibernate.StatelessSession;\r\n+import org.hibernate.cfg.Configuration;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.model.User;\r\n+\r\n+public class DataImporter {\r\n+    \r\n+    private final StatelessSession session;\r\n+    private static Logger logger;\r\n+\r\n+    public DataImporter(StatelessSession session) {\r\n+        this.session = session;\r\n+    }\r\n+\r\n+    public static void main(String[] args) throws IOException {\r\n+        logger = Logger.getLogger(DataImporter.class);\r\n+        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n+        StatelessSession session = sf.openStatelessSession();\r\n+        DataImporter dataImporter = new DataImporter(session);\r\n+        dataImporter.importData(\"/orders.csv\");\r\n+    }\r\n+\r\n+    private void importData(String file) throws IOException {\r\n+        HashMap<Long, User> users = new HashMap<Long, User>();\r\n+        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n+        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n+        String line = reader.readLine();\r\n+        \r\n+        while (line != null) {\r\n+            logger.info(line);\r\n+            List<String> row = Arrays.asList(line.split(\",\"));\r\n+            long id = Long.parseLong(row.get(0));\r\n+            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n+            User user = users.get(id);\r\n+            if (user == null) {\r\n+                user = new User(new ArrayList<Item>(), id);\r\n+            }\r\n+            Item item = items.get(itemId);\r\n+            if (item == null) {\r\n+                item = new Item(itemId);\r\n+            }\r\n+            user.add(item);\r\n+            line = reader.readLine();\r\n+            users.put(id, user);\r\n+            items.put(itemId, item);\r\n+        }\r\n+        \r\n+        logger.info(\"persisting\");\r\n+        session.getTransaction().begin();\r\n+        for (Item item : items.values()) {\r\n+            session.insert(item);\r\n+        }\r\n+        \r\n+        Collection<User> allUsers = users.values();\r\n+        for (User user : allUsers) {\r\n+            session.insert(user);\r\n+        }\r\n+        session.getTransaction().commit();\r\n+        logger.info(\"finished persisting\");\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/resources/hibernate.cfg.xml b/src/main/resources/hibernate.cfg.xml\r\nnew file mode 100644\r\nindex 0000000..a165aa6\r\n--- /dev/null\r\n+++ b/src/main/resources/hibernate.cfg.xml\r\n@@ -0,0 +1,29 @@\r\n+<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n+<!DOCTYPE hibernate-configuration PUBLIC\r\n+        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n+        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n+<hibernate-configuration>\r\n+    <session-factory>\r\n+    \r\n+    	<!-- connection pool configs -->\r\n+	    <property name=\"c3p0.acquire_increment\">1</property> \r\n+		<property name=\"c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n+		<property name=\"c3p0.max_size\">15</property> \r\n+		<property name=\"c3p0.min_size\">1</property> \r\n+		<property name=\"c3p0.timeout\">600</property>\r\n+    \r\n+        <property name=\"connection.url\">jdbc:mysql://localhost/commendans</property>\r\n+        <property name=\"connection.driver_class\">com.mysql.jdbc.Driver</property>\r\n+        <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\r\n+        <property name=\"connection.username\">root</property>\r\n+        <property name=\"connection.password\"></property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n+        <property name=\"show_sql\">false</property>\r\n+        <property name=\"format_sql\">false</property>\r\n+        <property name=\"hibernate.generate_statistics\">true</property>\r\n+\r\n+        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.User\" />\r\n+\r\n+    </session-factory>\r\n+</hibernate-configuration>\r\ndiff --git a/src/main/resources/log4j.xml b/src/main/resources/log4j.xml\r\nnew file mode 100644\r\nindex 0000000..7e36326\r\n--- /dev/null\r\n+++ b/src/main/resources/log4j.xml\r\n@@ -0,0 +1,27 @@\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\r\n+<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\r\n+\r\n+	<appender name=\"stdout\" class=\"org.apache.log4j.ConsoleAppender\">\r\n+		<layout class=\"org.apache.log4j.PatternLayout\">\r\n+			<param name=\"ConversionPattern\" value=\"%d{HH:mm:ss,SSS} %5p [%-20c{1}] %m%n\" />\r\n+		</layout>\r\n+	</appender>\r\n+\r\n+	<category name=\"org.hibernate\">\r\n+		<priority value=\"DEBUG\" />\r\n+		<appender-ref ref=\"stdout\" />\r\n+	</category>\r\n+	\r\n+	<category name=\"br.ime.usp\">\r\n+		<priority value=\"DEBUG\" />\r\n+		<appender-ref ref=\"stdout\" />\r\n+	</category>\r\n+\r\n+	<category name=\"br.com.caelum.vraptor\">\r\n+		<priority value=\"INFO\" />\r\n+		<appender-ref ref=\"stdout\" />\r\n+	</category>\r\n+	\r\n+\r\n+</log4j:configuration>\r\ndiff --git a/src/main/resources/orders.csv b/src/main/resources/orders.csv\r\nnew file mode 100644\r\nindex 0000000..b3f2294\r\n--- /dev/null\r\n+++ b/src/main/resources/orders.csv\r\n@@ -0,0 +1,1057 @@\r\n+121042,\"Livro 1 - E-book + Impresso\"\r\n+121045,\"Livro 2 - E-book + Impresso\"\r\n+121046,\"Livro 1 - Impresso\"\r\n+121049,\"Livro 1 - E-book + Impresso\"\r\n+121050,\"Livro 1 - Impresso\"\r\n+121051,\"Livro 1 - E-book\"\r\n+121052,\"Livro 1 - Impresso\"\r\n+121054,\"Livro 1 - Impresso\"\r\n+121055,\"Livro 1 - E-book\"\r\n+121056,\"Livro 2 - E-book\"\r\n+121057,\"Livro 2 - E-book + Impresso\"\r\n+121058,\"Livro 1 - E-book\"\r\n+121059,\"Livro 1 - E-book\"\r\n+121060,\"Livro 4 - E-book + Impresso\"\r\n+121061,\"Livro 1 - E-book\"\r\n+121061,\"Livro 5 - E-book\"\r\n+121061,\"Livro 2 - E-book\"\r\n+121061,\"Livro 4 - E-book\"\r\n+121062,\"Livro 4 - E-book\"\r\n+121063,\"Livro 4 - E-book\"\r\n+121064,\"Livro 4 - E-book\"\r\n+121064,\"Livro 2 - E-book\"\r\n+121065,\"Livro 3 - Impresso\"\r\n+121066,\"Livro 3 - E-book\"\r\n+121067,\"Livro 2 - E-book\"\r\n+121068,\"Livro 1 - E-book\"\r\n+121069,\"Livro 1 - E-book\"\r\n+121070,\"Livro 1 - E-book\"\r\n+121071,\"Livro 1 - E-book + Impresso\"\r\n+121072,\"Livro 1 - E-book + Impresso\"\r\n+121073,\"Livro 1 - E-book\"\r\n+121074,\"Livro 5 - E-book\"\r\n+121075,\"Livro 2 - E-book\"\r\n+121076,\"Livro 4 - E-book\"\r\n+121077,\"Livro 4 - E-book\"\r\n+121077,\"Livro 2 - E-book\"\r\n+121078,\"Livro 3 - E-book + Impresso\"\r\n+121079,\"Livro 1 - E-book\"\r\n+121079,\"Livro 3 - E-book\"\r\n+121080,\"Livro 5 - E-book + Impresso\"\r\n+121080,\"Livro 4 - E-book + Impresso\"\r\n+121080,\"Livro 2 - E-book + Impresso\"\r\n+121081,\"Livro 2 - E-book\"\r\n+121082,\"Livro 2 - E-book\"\r\n+121083,\"Livro 4 - E-book\"\r\n+121084,\"Livro 1 - E-book\"\r\n+121085,\"Livro 4 - E-book\"\r\n+121086,\"Livro 1 - E-book + Impresso\"\r\n+121087,\"Livro 3 - E-book\"\r\n+121087,\"Livro 1 - E-book\"\r\n+121087,\"Livro 2 - E-book\"\r\n+121088,\"Livro 1 - E-book\"\r\n+121089,\"Livro 2 - E-book\"\r\n+121089,\"Livro 6 - E-book\"\r\n+121089,\"Livro 1 - E-book\"\r\n+121090,\"Livro 3 - E-book\"\r\n+121092,\"Livro 2 - E-book + Impresso\"\r\n+121092,\"Livro 1 - E-book + Impresso\"\r\n+121093,\"Livro 4 - E-book\"\r\n+121094,\"Livro 6 - E-book + Impresso\"\r\n+121097,\"Livro 3 - E-book\"\r\n+121098,\"Livro 3 - E-book\"\r\n+121099,\"Livro 3 - E-book\"\r\n+121100,\"Livro 1 - E-book\"\r\n+121101,\"Livro 4 - E-book\"\r\n+121102,\"Livro 3 - E-book + Impresso\"\r\n+121103,\"Livro 1 - E-book + Impresso\"\r\n+121104,\"Livro 3 - E-book\"\r\n+121105,\"Livro 3 - E-book\"\r\n+121106,\"Livro 6 - E-book\"\r\n+121107,\"Livro 4 - E-book\"\r\n+121108,\"Livro 3 - E-book\"\r\n+121109,\"Livro 2 - E-book\"\r\n+121110,\"Livro 3 - E-book + Impresso\"\r\n+121113,\"Livro 4 - E-book + Impresso\"\r\n+121114,\"Livro 4 - E-book\"\r\n+121115,\"Livro 1 - E-book\"\r\n+121116,\"Livro 2 - E-book\"\r\n+121117,\"Livro 1 - E-book\"\r\n+121118,\"Livro 2 - Impresso\"\r\n+121119,\"Livro 3 - E-book + Impresso\"\r\n+121122,\"Livro 2 - E-book\"\r\n+121123,\"Livro 3 - E-book\"\r\n+121124,\"Livro 3 - E-book + Impresso\"\r\n+121125,\"Livro 3 - E-book\"\r\n+121126,\"Livro 2 - E-book\"\r\n+121127,\"Livro 3 - E-book + Impresso\"\r\n+121129,\"Livro 1 - E-book\"\r\n+121130,\"Livro 3 - E-book\"\r\n+121131,\"Livro 1 - E-book\"\r\n+121132,\"Livro 2 - E-book\"\r\n+121133,\"Livro 4 - E-book\"\r\n+121134,\"Livro 1 - E-book\"\r\n+121135,\"Livro 3 - E-book\"\r\n+121136,\"Livro 5 - E-book\"\r\n+121137,\"Livro 3 - E-book\"\r\n+121138,\"Livro 3 - E-book + Impresso\"\r\n+121139,\"Livro 2 - E-book\"\r\n+121140,\"Livro 4 - E-book + Impresso\"\r\n+121141,\"Livro 1 - E-book\"\r\n+121142,\"Livro 2 - E-book + Impresso\"\r\n+121142,\"Livro 1 - E-book + Impresso\"\r\n+121143,\"Livro 1 - Impresso\"\r\n+121144,\"Livro 1 - E-book\"\r\n+121145,\"Livro 1 - E-book\"\r\n+121146,\"Livro 2 - E-book\"\r\n+121146,\"Livro 1 - E-book\"\r\n+121147,\"Livro 1 - E-book\"\r\n+121149,\"Livro 3 - E-book\"\r\n+121150,\"Livro 1 - E-book\"\r\n+121151,\"Livro 2 - E-book\"\r\n+121152,\"Livro 3 - E-book\"\r\n+121153,\"Livro 3 - E-book\"\r\n+121154,\"Livro 6 - E-book\"\r\n+121155,\"Livro 4 - E-book\"\r\n+121156,\"Livro 2 - E-book\"\r\n+121157,\"Livro 1 - E-book\"\r\n+121158,\"Livro 4 - E-book + Impresso\"\r\n+121159,\"Livro 1 - E-book + Impresso\"\r\n+121160,\"Livro 6 - E-book\"\r\n+121160,\"Livro 1 - E-book\"\r\n+121160,\"Livro 2 - E-book\"\r\n+121161,\"Livro 2 - E-book\"\r\n+121163,\"Livro 2 - E-book\"\r\n+121164,\"Livro 4 - E-book\"\r\n+121166,\"Livro 3 - E-book\"\r\n+121166,\"Livro 2 - E-book\"\r\n+121166,\"Livro 5 - E-book\"\r\n+121167,\"Livro 2 - E-book + Impresso\"\r\n+121170,\"Livro 2 - E-book\"\r\n+121171,\"Livro 3 - E-book\"\r\n+121171,\"Livro 1 - E-book\"\r\n+121172,\"Livro 6 - E-book\"\r\n+121173,\"Livro 2 - E-book\"\r\n+121173,\"Livro 1 - E-book\"\r\n+121174,\"Livro 4 - E-book\"\r\n+121177,\"Livro 4 - E-book\"\r\n+121178,\"Livro 4 - E-book\"\r\n+121179,\"Livro 3 - E-book\"\r\n+121180,\"Livro 2 - E-book\"\r\n+121181,\"Livro 3 - E-book\"\r\n+121182,\"Livro 6 - E-book\"\r\n+121183,\"Livro 4 - E-book\"\r\n+121184,\"Livro 2 - E-book\"\r\n+121185,\"Livro 3 - E-book\"\r\n+121186,\"Livro 2 - E-book\"\r\n+121187,\"Livro 3 - E-book\"\r\n+121188,\"Livro 3 - E-book\"\r\n+121189,\"Livro 2 - E-book\"\r\n+121190,\"Livro 2 - Impresso\"\r\n+121191,\"Livro 3 - E-book\"\r\n+121192,\"Livro 5 - E-book\"\r\n+121193,\"Livro 2 - E-book\"\r\n+121195,\"Livro 2 - E-book\"\r\n+121197,\"Livro 3 - E-book + Impresso\"\r\n+121198,\"Livro 5 - E-book\"\r\n+121199,\"Livro 2 - E-book\"\r\n+121200,\"Livro 3 - E-book\"\r\n+121200,\"Livro 2 - E-book\"\r\n+121201,\"Livro 2 - E-book\"\r\n+121202,\"Livro 2 - E-book\"\r\n+121202,\"Livro 3 - E-book\"\r\n+121203,\"Livro 2 - E-book\"\r\n+121204,\"Livro 3 - E-book\"\r\n+121205,\"Livro 1 - E-book\"\r\n+121206,\"Livro 1 - E-book\"\r\n+121207,\"Livro 4 - E-book + Impresso\"\r\n+121208,\"Livro 2 - E-book\"\r\n+121211,\"Livro 6 - E-book\"\r\n+121212,\"Livro 1 - E-book\"\r\n+121213,\"Livro 4 - E-book\"\r\n+121215,\"Livro 4 - E-book\"\r\n+121216,\"Livro 6 - E-book\"\r\n+121216,\"Livro 4 - E-book\"\r\n+121217,\"Livro 6 - E-book\"\r\n+121218,\"Livro 4 - E-book\"\r\n+121219,\"Livro 4 - E-book + Impresso\"\r\n+121220,\"Livro 4 - E-book\"\r\n+121221,\"Livro 5 - E-book\"\r\n+121222,\"Livro 4 - E-book\"\r\n+121223,\"Livro 4 - Impresso\"\r\n+121224,\"Livro 4 - E-book\"\r\n+121225,\"Livro 5 - E-book\"\r\n+121227,\"Livro 4 - E-book\"\r\n+121228,\"Livro 2 - E-book\"\r\n+121228,\"Livro 3 - E-book\"\r\n+121229,\"Livro 4 - E-book\"\r\n+121229,\"Livro 2 - E-book\"\r\n+121230,\"Livro 4 - E-book\"\r\n+121231,\"Livro 6 - E-book\"\r\n+121233,\"Livro 4 - E-book\"\r\n+121234,\"Livro 5 - E-book\"\r\n+121234,\"Livro 4 - E-book\"\r\n+121234,\"Livro 2 - E-book\"\r\n+121235,\"Livro 4 - E-book\"\r\n+121235,\"Livro 1 - E-book\"\r\n+121236,\"Livro 4 - E-book\"\r\n+121237,\"Livro 4 - E-book\"\r\n+121238,\"Livro 5 - E-book\"\r\n+121238,\"Livro 2 - E-book\"\r\n+121239,\"Livro 4 - E-book\"\r\n+121240,\"Livro 2 - Impresso\"\r\n+121241,\"Livro 4 - E-book\"\r\n+121243,\"Livro 4 - E-book\"\r\n+121244,\"Livro 1 - E-book\"\r\n+121245,\"Livro 4 - E-book\"\r\n+121246,\"Livro 1 - E-book\"\r\n+121247,\"Livro 3 - E-book\"\r\n+121248,\"Livro 6 - E-book\"\r\n+121250,\"Livro 3 - E-book\"\r\n+121251,\"Livro 3 - E-book\"\r\n+121252,\"Livro 6 - E-book\"\r\n+121253,\"Livro 1 - E-book\"\r\n+121254,\"Livro 4 - Impresso\"\r\n+121255,\"Livro 4 - Impresso\"\r\n+121256,\"Livro 1 - E-book\"\r\n+121257,\"Livro 1 - E-book\"\r\n+121258,\"Livro 4 - E-book + Impresso\"\r\n+121261,\"Livro 5 - E-book\"\r\n+121262,\"Livro 1 - Impresso\"\r\n+121262,\"Livro 4 - E-book + Impresso\"\r\n+121263,\"Livro 7 - E-book + Impresso\"\r\n+121263,\"Livro 8 - E-book + Impresso\"\r\n+121263,\"Livro 9 - E-book + Impresso\"\r\n+121263,\"Livro 3 - E-book + Impresso\"\r\n+121264,\"Livro 9 - E-book\"\r\n+121265,\"Livro 7 - E-book + Impresso\"\r\n+121265,\"Livro 8 - E-book + Impresso\"\r\n+121265,\"Livro 9 - E-book\"\r\n+121266,\"Livro 8 - E-book + Impresso\"\r\n+121267,\"Livro 10 - E-book + Impresso\"\r\n+121268,\"Livro 9 - E-book\"\r\n+121269,\"Livro 9 - Impresso\"\r\n+121270,\"Livro 9 - E-book\"\r\n+121271,\"Livro 2 - E-book\"\r\n+121272,\"Livro 9 - E-book\"\r\n+121273,\"Livro 7 - E-book\"\r\n+121273,\"Livro 8 - E-book\"\r\n+121273,\"Livro 9 - E-book\"\r\n+121275,\"Livro 1 - Impresso\"\r\n+121276,\"Livro 7 - E-book\"\r\n+121277,\"Livro 8 - E-book\"\r\n+121277,\"Livro 2 - E-book\"\r\n+121278,\"Livro 5 - E-book\"\r\n+121279,\"Livro 9 - E-book\"\r\n+121280,\"Livro 7 - E-book\"\r\n+121281,\"Livro 9 - E-book\"\r\n+121282,\"Livro 3 - E-book\"\r\n+121282,\"Livro 9 - E-book\"\r\n+121283,\"Livro 6 - E-book\"\r\n+121284,\"Livro 4 - E-book\"\r\n+121284,\"Livro 2 - E-book\"\r\n+121285,\"Livro 2 - E-book\"\r\n+121285,\"Livro 5 - E-book\"\r\n+121286,\"Livro 9 - E-book\"\r\n+121287,\"Livro 3 - E-book + Impresso\"\r\n+121288,\"Livro 9 - E-book\"\r\n+121289,\"Livro 6 - E-book\"\r\n+121290,\"Livro 6 - E-book\"\r\n+121291,\"Livro 7 - E-book\"\r\n+121291,\"Livro 6 - E-book\"\r\n+121291,\"Livro 1 - E-book\"\r\n+121292,\"Livro 9 - E-book\"\r\n+121296,\"Livro 9 - E-book\"\r\n+121297,\"Livro 4 - E-book\"\r\n+121298,\"Livro 3 - E-book\"\r\n+121299,\"Livro 9 - E-book\"\r\n+121300,\"Livro 8 - E-book + Impresso\"\r\n+121300,\"Livro 6 - Impresso\"\r\n+121302,\"Livro 9 - E-book\"\r\n+121303,\"Livro 9 - E-book\"\r\n+121304,\"Livro 9 - E-book\"\r\n+121305,\"Livro 6 - E-book\"\r\n+121306,\"Livro 6 - E-book\"\r\n+121307,\"Livro 2 - E-book\"\r\n+121308,\"Livro 10 - E-book\"\r\n+121308,\"Livro 9 - E-book\"\r\n+121309,\"Livro 8 - E-book\"\r\n+121311,\"Livro 2 - E-book + Impresso\"\r\n+121311,\"Livro 10 - E-book + Impresso\"\r\n+121312,\"Livro 10 - E-book\"\r\n+121313,\"Livro 7 - E-book\"\r\n+121313,\"Livro 6 - E-book\"\r\n+121313,\"Livro 2 - E-book\"\r\n+121313,\"Livro 8 - E-book\"\r\n+121313,\"Livro 10 - E-book\"\r\n+121314,\"Livro 1 - Impresso\"\r\n+121315,\"Livro 9 - E-book\"\r\n+121316,\"Livro 3 - E-book\"\r\n+121317,\"Livro 10 - E-book\"\r\n+121318,\"Livro 8 - E-book\"\r\n+121319,\"Livro 2 - E-book\"\r\n+121320,\"Livro 2 - E-book\"\r\n+121320,\"Livro 5 - E-book\"\r\n+121321,\"Livro 6 - E-book\"\r\n+121322,\"Livro 9 - E-book + Impresso\"\r\n+121323,\"Livro 9 - E-book\"\r\n+121324,\"Livro 9 - Impresso\"\r\n+121325,\"Livro 9 - E-book\"\r\n+121327,\"Livro 9 - E-book + Impresso\"\r\n+121328,\"Livro 3 - E-book\"\r\n+121330,\"Livro 4 - E-book\"\r\n+121333,\"Livro 9 - E-book\"\r\n+121334,\"Livro 9 - E-book\"\r\n+121335,\"Livro 9 - E-book\"\r\n+121335,\"Livro 6 - E-book\"\r\n+121336,\"Livro 9 - E-book\"\r\n+121337,\"Livro 4 - E-book\"\r\n+121338,\"Livro 9 - E-book + Impresso\"\r\n+121339,\"Livro 9 - Impresso\"\r\n+121340,\"Livro 9 - E-book\"\r\n+121341,\"Livro 9 - E-book\"\r\n+121342,\"Livro 9 - E-book\"\r\n+121342,\"Livro 3 - E-book\"\r\n+121343,\"Livro 9 - Impresso\"\r\n+121344,\"Livro 9 - E-book\"\r\n+121345,\"Livro 9 - E-book\"\r\n+121346,\"Livro 6 - E-book\"\r\n+121347,\"Livro 2 - E-book\"\r\n+121348,\"Livro 9 - E-book\"\r\n+121349,\"Livro 7 - E-book + Impresso\"\r\n+121350,\"Livro 6 - E-book\"\r\n+121350,\"Livro 7 - E-book\"\r\n+121350,\"Livro 9 - E-book\"\r\n+121351,\"Livro 4 - E-book\"\r\n+121351,\"Livro 9 - E-book\"\r\n+121351,\"Livro 10 - E-book\"\r\n+121351,\"Livro 2 - E-book\"\r\n+121351,\"Livro 1 - E-book\"\r\n+121351,\"Livro 3 - E-book\"\r\n+121352,\"Livro 9 - E-book + Impresso\"\r\n+121353,\"Livro 8 - E-book\"\r\n+121354,\"Livro 6 - E-book\"\r\n+121355,\"Livro 9 - E-book\"\r\n+121356,\"Livro 9 - E-book\"\r\n+121357,\"Livro 8 - E-book\"\r\n+121358,\"Livro 9 - E-book\"\r\n+121359,\"Livro 9 - E-book\"\r\n+121360,\"Livro 9 - E-book\"\r\n+121361,\"Livro 9 - E-book\"\r\n+121361,\"Livro 8 - E-book\"\r\n+121361,\"Livro 1 - E-book\"\r\n+121362,\"Livro 8 - E-book + Impresso\"\r\n+121362,\"Livro 2 - E-book + Impresso\"\r\n+121363,\"Livro 9 - E-book\"\r\n+121365,\"Livro 9 - E-book + Impresso\"\r\n+121366,\"Livro 4 - E-book\"\r\n+121366,\"Livro 5 - E-book\"\r\n+121367,\"Livro 9 - E-book\"\r\n+121368,\"Livro 9 - E-book\"\r\n+121369,\"Livro 9 - E-book\"\r\n+121370,\"Livro 3 - E-book\"\r\n+121371,\"Livro 6 - E-book\"\r\n+121372,\"Livro 3 - E-book\"\r\n+121373,\"Livro 6 - E-book + Impresso\"\r\n+121374,\"Livro 3 - E-book\"\r\n+121375,\"Livro 6 - E-book\"\r\n+121375,\"Livro 9 - E-book\"\r\n+121376,\"Livro 9 - E-book\"\r\n+121377,\"Livro 9 - E-book\"\r\n+121378,\"Livro 2 - E-book\"\r\n+121378,\"Livro 4 - E-book\"\r\n+121379,\"Livro 9 - E-book\"\r\n+121380,\"Livro 10 - E-book\"\r\n+121382,\"Livro 10 - E-book\"\r\n+121383,\"Livro 5 - E-book\"\r\n+121384,\"Livro 9 - E-book\"\r\n+121385,\"Livro 9 - E-book\"\r\n+121386,\"Livro 3 - E-book + Impresso\"\r\n+121387,\"Livro 3 - E-book\"\r\n+121388,\"Livro 6 - Impresso\"\r\n+121389,\"Livro 8 - E-book\"\r\n+121389,\"Livro 2 - E-book\"\r\n+121390,\"Livro 9 - E-book\"\r\n+121391,\"Livro 9 - E-book\"\r\n+121392,\"Livro 3 - Impresso\"\r\n+121393,\"Livro 3 - E-book\"\r\n+121394,\"Livro 9 - E-book\"\r\n+121396,\"Livro 9 - E-book\"\r\n+121397,\"Livro 9 - E-book\"\r\n+121398,\"Livro 4 - E-book\"\r\n+121399,\"Livro 3 - E-book\"\r\n+121400,\"Livro 8 - E-book\"\r\n+121401,\"Livro 5 - E-book\"\r\n+121402,\"Livro 6 - E-book\"\r\n+121403,\"Livro 3 - E-book\"\r\n+121404,\"Livro 2 - E-book\"\r\n+121405,\"Livro 3 - E-book\"\r\n+121408,\"Livro 2 - E-book\"\r\n+121409,\"Livro 9 - E-book\"\r\n+121410,\"Livro 9 - Impresso\"\r\n+121411,\"Livro 3 - E-book\"\r\n+121413,\"Livro 4 - E-book\"\r\n+121414,\"Livro 9 - E-book\"\r\n+121415,\"Livro 6 - E-book\"\r\n+121416,\"Livro 3 - E-book\"\r\n+121417,\"Livro 9 - E-book\"\r\n+121418,\"Livro 3 - E-book\"\r\n+121419,\"Livro 2 - E-book\"\r\n+121420,\"Livro 4 - E-book\"\r\n+121420,\"Livro 9 - E-book\"\r\n+121421,\"Livro 1 - E-book\"\r\n+121422,\"Livro 6 - E-book + Impresso\"\r\n+121423,\"Livro 9 - E-book\"\r\n+121424,\"Livro 10 - E-book\"\r\n+121424,\"Livro 3 - E-book\"\r\n+121426,\"Livro 3 - E-book\"\r\n+121427,\"Livro 3 - E-book\"\r\n+121428,\"Livro 9 - E-book\"\r\n+121429,\"Livro 2 - E-book + Impresso\"\r\n+121429,\"Livro 3 - E-book + Impresso\"\r\n+121430,\"Livro 3 - E-book\"\r\n+121431,\"Livro 6 - E-book\"\r\n+121432,\"Livro 9 - E-book\"\r\n+121433,\"Livro 9 - E-book\"\r\n+121433,\"Livro 1 - E-book\"\r\n+121433,\"Livro 3 - E-book\"\r\n+121434,\"Livro 5 - E-book\"\r\n+121435,\"Livro 1 - E-book\"\r\n+121436,\"Livro 4 - E-book\"\r\n+121437,\"Livro 3 - E-book\"\r\n+121439,\"Livro 6 - E-book\"\r\n+121440,\"Livro 7 - E-book\"\r\n+121440,\"Livro 3 - E-book\"\r\n+121440,\"Livro 6 - E-book\"\r\n+121441,\"Livro 6 - E-book\"\r\n+121442,\"Livro 8 - E-book\"\r\n+121442,\"Livro 9 - E-book\"\r\n+121442,\"Livro 6 - E-book\"\r\n+121442,\"Livro 7 - E-book\"\r\n+121443,\"Livro 1 - E-book\"\r\n+121443,\"Livro 6 - E-book\"\r\n+121444,\"Livro 6 - E-book\"\r\n+121445,\"Livro 3 - E-book\"\r\n+121446,\"Livro 9 - E-book + Impresso\"\r\n+121447,\"Livro 6 - E-book\"\r\n+121448,\"Livro 6 - E-book\"\r\n+121449,\"Livro 3 - E-book\"\r\n+121449,\"Livro 2 - E-book\"\r\n+121450,\"Livro 5 - E-book\"\r\n+121451,\"Livro 4 - E-book\"\r\n+121452,\"Livro 9 - E-book\"\r\n+121453,\"Livro 9 - E-book + Impresso\"\r\n+121455,\"Livro 3 - E-book\"\r\n+121457,\"Livro 9 - E-book\"\r\n+121458,\"Livro 3 - E-book\"\r\n+121459,\"Livro 9 - E-book + Impresso\"\r\n+121460,\"Livro 3 - E-book\"\r\n+121461,\"Livro 2 - E-book\"\r\n+121462,\"Livro 9 - E-book\"\r\n+121463,\"Livro 9 - E-book\"\r\n+121464,\"Livro 9 - E-book\"\r\n+121465,\"Livro 9 - E-book + Impresso\"\r\n+121466,\"Livro 6 - E-book\"\r\n+121467,\"Livro 9 - E-book\"\r\n+121468,\"Livro 1 - E-book\"\r\n+121468,\"Livro 6 - E-book\"\r\n+121469,\"Livro 9 - E-book + Impresso\"\r\n+121470,\"Livro 8 - E-book\"\r\n+121470,\"Livro 9 - E-book\"\r\n+121473,\"Livro 9 - Impresso\"\r\n+121474,\"Livro 5 - E-book\"\r\n+121474,\"Livro 7 - E-book\"\r\n+121474,\"Livro 8 - E-book\"\r\n+121474,\"Livro 9 - E-book\"\r\n+121475,\"Livro 8 - E-book\"\r\n+121475,\"Livro 7 - E-book\"\r\n+121475,\"Livro 10 - E-book\"\r\n+121475,\"Livro 9 - E-book\"\r\n+121475,\"Livro 6 - E-book\"\r\n+121476,\"Livro 9 - E-book + Impresso\"\r\n+121477,\"Livro 4 - E-book\"\r\n+121478,\"Livro 10 - E-book\"\r\n+121478,\"Livro 9 - E-book\"\r\n+121478,\"Livro 4 - E-book\"\r\n+121479,\"Livro 4 - E-book + Impresso\"\r\n+121481,\"Livro 8 - E-book\"\r\n+121482,\"Livro 9 - E-book\"\r\n+121483,\"Livro 9 - E-book\"\r\n+121485,\"Livro 9 - E-book + Impresso\"\r\n+121486,\"Livro 10 - E-book\"\r\n+121487,\"Livro 5 - E-book + Impresso\"\r\n+121488,\"Livro 9 - E-book\"\r\n+121489,\"Livro 9 - E-book\"\r\n+121490,\"Livro 9 - E-book\"\r\n+121491,\"Livro 9 - E-book\"\r\n+121492,\"Livro 1 - E-book + Impresso\"\r\n+121493,\"Livro 9 - E-book\"\r\n+121494,\"Livro 7 - E-book\"\r\n+121495,\"Livro 7 - E-book\"\r\n+121497,\"Livro 1 - E-book\"\r\n+121498,\"Livro 3 - Impresso\"\r\n+121499,\"Livro 9 - Impresso\"\r\n+121500,\"Livro 4 - E-book\"\r\n+121501,\"Livro 3 - E-book + Impresso\"\r\n+121502,\"Livro 2 - Impresso\"\r\n+121502,\"Livro 9 - Impresso\"\r\n+121503,\"Livro 10 - E-book\"\r\n+121504,\"Livro 3 - E-book\"\r\n+121505,\"Livro 9 - E-book\"\r\n+121506,\"Livro 6 - E-book\"\r\n+121507,\"Livro 1 - E-book\"\r\n+121508,\"Livro 2 - E-book\"\r\n+121508,\"Livro 9 - E-book\"\r\n+121508,\"Livro 4 - E-book\"\r\n+121509,\"Livro 9 - E-book\"\r\n+121510,\"Livro 7 - E-book\"\r\n+121511,\"Livro 9 - Impresso\"\r\n+121512,\"Livro 9 - Impresso\"\r\n+121513,\"Livro 10 - E-book\"\r\n+121514,\"Livro 4 - E-book\"\r\n+121514,\"Livro 9 - E-book\"\r\n+121515,\"Livro 9 - E-book\"\r\n+121516,\"Livro 4 - E-book\"\r\n+121516,\"Livro 3 - E-book\"\r\n+121517,\"Livro 3 - E-book\"\r\n+121518,\"Livro 5 - E-book\"\r\n+121519,\"Livro 1 - E-book + Impresso\"\r\n+121520,\"Livro 4 - E-book + Impresso\"\r\n+121521,\"Livro 9 - E-book\"\r\n+121522,\"Livro 9 - E-book\"\r\n+121523,\"Livro 4 - E-book\"\r\n+121523,\"Livro 10 - E-book\"\r\n+121524,\"Livro 9 - E-book\"\r\n+121525,\"Livro 2 - E-book\"\r\n+121525,\"Livro 9 - E-book\"\r\n+121526,\"Livro 4 - E-book\"\r\n+121527,\"Livro 2 - E-book\"\r\n+121528,\"Livro 6 - E-book\"\r\n+121529,\"Livro 4 - E-book\"\r\n+121530,\"Livro 7 - E-book\"\r\n+121531,\"Livro 3 - E-book\"\r\n+121533,\"Livro 9 - E-book\"\r\n+121534,\"Livro 2 - E-book\"\r\n+121535,\"Livro 10 - E-book\"\r\n+121535,\"Livro 2 - E-book\"\r\n+121535,\"Livro 3 - E-book\"\r\n+121536,\"Livro 2 - E-book\"\r\n+121536,\"Livro 9 - E-book\"\r\n+121536,\"Livro 6 - E-book\"\r\n+121537,\"Livro 3 - E-book\"\r\n+121538,\"Livro 6 - E-book\"\r\n+121538,\"Livro 2 - E-book\"\r\n+121539,\"Livro 3 - E-book + Impresso\"\r\n+121540,\"Livro 9 - E-book\"\r\n+121541,\"Livro 1 - E-book + Impresso\"\r\n+121542,\"Livro 3 - Impresso\"\r\n+121543,\"Livro 10 - E-book + Impresso\"\r\n+121544,\"Livro 1 - E-book\"\r\n+121545,\"Livro 3 - E-book\"\r\n+121546,\"Livro 10 - E-book\"\r\n+121547,\"Livro 3 - E-book + Impresso\"\r\n+121548,\"Livro 7 - E-book\"\r\n+121549,\"Livro 7 - E-book\"\r\n+121550,\"Livro 3 - E-book\"\r\n+121551,\"Livro 5 - E-book\"\r\n+121553,\"Livro 7 - E-book\"\r\n+121554,\"Livro 9 - E-book\"\r\n+121555,\"Livro 7 - E-book\"\r\n+121556,\"Livro 2 - E-book\"\r\n+121556,\"Livro 3 - E-book\"\r\n+121556,\"Livro 6 - E-book\"\r\n+121556,\"Livro 7 - E-book\"\r\n+121557,\"Livro 3 - E-book\"\r\n+121558,\"Livro 4 - E-book\"\r\n+121560,\"Livro 3 - E-book + Impresso\"\r\n+121562,\"Livro 9 - E-book\"\r\n+121563,\"Livro 9 - E-book + Impresso\"\r\n+121564,\"Livro 4 - E-book\"\r\n+121565,\"Livro 9 - Impresso\"\r\n+121566,\"Livro 4 - E-book + Impresso\"\r\n+121567,\"Livro 2 - E-book\"\r\n+121567,\"Livro 9 - E-book + Impresso\"\r\n+121568,\"Livro 8 - E-book\"\r\n+121569,\"Livro 5 - E-book\"\r\n+121570,\"Livro 4 - E-book\"\r\n+121571,\"Livro 10 - E-book\"\r\n+121572,\"Livro 2 - E-book\"\r\n+121572,\"Livro 9 - E-book\"\r\n+121572,\"Livro 3 - E-book\"\r\n+121573,\"Livro 9 - E-book\"\r\n+121573,\"Livro 1 - E-book\"\r\n+121573,\"Livro 7 - E-book\"\r\n+121573,\"Livro 8 - E-book\"\r\n+121573,\"Livro 4 - E-book\"\r\n+121573,\"Livro 6 - E-book\"\r\n+121573,\"Livro 3 - E-book\"\r\n+121573,\"Livro 2 - E-book\"\r\n+121574,\"Livro 1 - E-book\"\r\n+121575,\"Livro 4 - E-book\"\r\n+121576,\"Livro 8 - E-book\"\r\n+121577,\"Livro 7 - E-book\"\r\n+121578,\"Livro 9 - E-book\"\r\n+121579,\"Livro 7 - E-book\"\r\n+121579,\"Livro 8 - E-book\"\r\n+121580,\"Livro 6 - E-book\"\r\n+121581,\"Livro 1 - Impresso\"\r\n+121582,\"Livro 6 - E-book\"\r\n+121583,\"Livro 7 - E-book\"\r\n+121584,\"Livro 7 - E-book\"\r\n+121584,\"Livro 10 - E-book\"\r\n+121584,\"Livro 9 - E-book\"\r\n+121585,\"Livro 3 - E-book\"\r\n+121586,\"Livro 9 - E-book\"\r\n+121587,\"Livro 9 - E-book\"\r\n+121588,\"Livro 5 - E-book\"\r\n+121589,\"Livro 9 - E-book\"\r\n+121590,\"Livro 6 - E-book\"\r\n+121592,\"Livro 3 - E-book\"\r\n+121593,\"Livro 9 - E-book + Impresso\"\r\n+121594,\"Livro 4 - E-book\"\r\n+121595,\"Livro 4 - E-book\"\r\n+121596,\"Livro 10 - E-book\"\r\n+121596,\"Livro 3 - E-book\"\r\n+121596,\"Livro 6 - E-book\"\r\n+121597,\"Livro 6 - E-book\"\r\n+121597,\"Livro 9 - E-book\"\r\n+121597,\"Livro 10 - E-book\"\r\n+121597,\"Livro 7 - E-book\"\r\n+121598,\"Livro 3 - E-book\"\r\n+121599,\"Livro 1 - E-book\"\r\n+121600,\"Livro 8 - E-book\"\r\n+121600,\"Livro 4 - E-book\"\r\n+121600,\"Livro 1 - E-book\"\r\n+121602,\"Livro 9 - E-book\"\r\n+121603,\"Livro 2 - Impresso\"\r\n+121603,\"Livro 5 - E-book + Impresso\"\r\n+121604,\"Livro 6 - E-book\"\r\n+121605,\"Livro 6 - E-book\"\r\n+121605,\"Livro 3 - E-book\"\r\n+121606,\"Livro 2 - E-book\"\r\n+121607,\"Livro 7 - E-book\"\r\n+121608,\"Livro 6 - E-book\"\r\n+121609,\"Livro 6 - E-book\"\r\n+121610,\"Livro 3 - E-book + Impresso\"\r\n+121610,\"Livro 10 - E-book + Impresso\"\r\n+121611,\"Livro 10 - E-book\"\r\n+121612,\"Livro 3 - E-book\"\r\n+121613,\"Livro 4 - E-book\"\r\n+121614,\"Livro 4 - E-book\"\r\n+121614,\"Livro 2 - E-book\"\r\n+121615,\"Livro 6 - E-book\"\r\n+121616,\"Livro 2 - E-book\"\r\n+121617,\"Livro 2 - E-book + Impresso\"\r\n+121617,\"Livro 3 - E-book + Impresso\"\r\n+121618,\"Livro 2 - E-book\"\r\n+121619,\"Livro 9 - E-book\"\r\n+121619,\"Livro 3 - E-book\"\r\n+121620,\"Livro 7 - E-book\"\r\n+121621,\"Livro 6 - E-book\"\r\n+121622,\"Livro 9 - E-book + Impresso\"\r\n+121623,\"Livro 1 - E-book\"\r\n+121623,\"Livro 6 - E-book\"\r\n+121624,\"Livro 4 - E-book\"\r\n+121625,\"Livro 6 - E-book\"\r\n+121626,\"Livro 3 - E-book\"\r\n+121627,\"Livro 8 - E-book\"\r\n+121627,\"Livro 7 - E-book\"\r\n+121627,\"Livro 6 - E-book\"\r\n+121627,\"Livro 4 - E-book + Impresso\"\r\n+121628,\"Livro 3 - Impresso\"\r\n+121629,\"Livro 3 - E-book\"\r\n+121630,\"Livro 2 - E-book\"\r\n+121630,\"Livro 10 - E-book\"\r\n+121632,\"Livro 9 - E-book\"\r\n+121633,\"Livro 6 - E-book\"\r\n+121633,\"Livro 4 - E-book\"\r\n+121634,\"Livro 7 - E-book\"\r\n+121635,\"Livro 6 - E-book\"\r\n+121636,\"Livro 7 - E-book\"\r\n+121637,\"Livro 2 - E-book\"\r\n+121637,\"Livro 8 - E-book\"\r\n+121638,\"Livro 2 - E-book\"\r\n+121639,\"Livro 7 - E-book + Impresso\"\r\n+121640,\"Livro 5 - E-book\"\r\n+121642,\"Livro 9 - E-book + Impresso\"\r\n+121642,\"Livro 8 - E-book\"\r\n+121643,\"Livro 3 - E-book\"\r\n+121644,\"Livro 6 - E-book + Impresso\"\r\n+121645,\"Livro 3 - E-book\"\r\n+121646,\"Livro 7 - E-book\"\r\n+121647,\"Livro 7 - E-book\"\r\n+121648,\"Livro 6 - E-book\"\r\n+121649,\"Livro 9 - E-book\"\r\n+121651,\"Livro 3 - E-book\"\r\n+121652,\"Livro 6 - E-book\"\r\n+121653,\"Livro 9 - E-book\"\r\n+121656,\"Livro 9 - E-book + Impresso\"\r\n+121656,\"Livro 4 - E-book + Impresso\"\r\n+121657,\"Livro 10 - E-book\"\r\n+121657,\"Livro 3 - E-book\"\r\n+121658,\"Livro 9 - E-book\"\r\n+121658,\"Livro 3 - E-book\"\r\n+121659,\"Livro 7 - E-book\"\r\n+121660,\"Livro 6 - E-book\"\r\n+121661,\"Livro 1 - E-book\"\r\n+121662,\"Livro 8 - E-book\"\r\n+121663,\"Livro 6 - E-book\"\r\n+121664,\"Livro 9 - Impresso\"\r\n+121665,\"Livro 8 - E-book + Impresso\"\r\n+121667,\"Livro 9 - E-book\"\r\n+121668,\"Livro 9 - E-book\"\r\n+121668,\"Livro 3 - E-book\"\r\n+121669,\"Livro 9 - E-book + Impresso\"\r\n+121670,\"Livro 9 - E-book + Impresso\"\r\n+121671,\"Livro 9 - E-book\"\r\n+121671,\"Livro 10 - E-book\"\r\n+121672,\"Livro 1 - E-book\"\r\n+121673,\"Livro 9 - E-book\"\r\n+121675,\"Livro 9 - E-book\"\r\n+121675,\"Livro 3 - E-book\"\r\n+121675,\"Livro 2 - E-book\"\r\n+121675,\"Livro 10 - E-book\"\r\n+121676,\"Livro 6 - E-book\"\r\n+121676,\"Livro 9 - E-book\"\r\n+121677,\"Livro 8 - E-book\"\r\n+121678,\"Livro 3 - E-book + Impresso\"\r\n+121679,\"Livro 6 - E-book\"\r\n+121680,\"Livro 9 - E-book\"\r\n+121681,\"Livro 9 - E-book + Impresso\"\r\n+121682,\"Livro 9 - E-book\"\r\n+121683,\"Livro 3 - E-book\"\r\n+121684,\"Livro 9 - E-book\"\r\n+121685,\"Livro 9 - E-book\"\r\n+121686,\"Livro 3 - E-book\"\r\n+121687,\"Livro 2 - E-book + Impresso\"\r\n+121688,\"Livro 3 - E-book\"\r\n+121689,\"Livro 6 - E-book\"\r\n+121690,\"Livro 6 - E-book\"\r\n+121691,\"Livro 6 - E-book\"\r\n+121692,\"Livro 1 - E-book\"\r\n+121693,\"Livro 4 - E-book\"\r\n+121693,\"Livro 10 - E-book\"\r\n+121693,\"Livro 9 - E-book\"\r\n+121696,\"Livro 9 - E-book\"\r\n+121697,\"Livro 6 - E-book\"\r\n+121698,\"Livro 4 - E-book\"\r\n+121698,\"Livro 3 - E-book\"\r\n+121699,\"Livro 9 - E-book\"\r\n+121700,\"Livro 10 - E-book\"\r\n+121701,\"Livro 1 - Impresso\"\r\n+121702,\"Livro 3 - E-book\"\r\n+121702,\"Livro 6 - E-book\"\r\n+121703,\"Livro 4 - E-book\"\r\n+121704,\"Livro 5 - E-book\"\r\n+121705,\"Livro 7 - E-book\"\r\n+121706,\"Livro 1 - E-book\"\r\n+121706,\"Livro 9 - E-book\"\r\n+121706,\"Livro 4 - E-book\"\r\n+121708,\"Livro 1 - E-book\"\r\n+121708,\"Livro 4 - E-book\"\r\n+121709,\"Livro 6 - E-book\"\r\n+121710,\"Livro 6 - E-book\"\r\n+121711,\"Livro 2 - E-book\"\r\n+121712,\"Livro 1 - E-book\"\r\n+121713,\"Livro 2 - E-book\"\r\n+121713,\"Livro 4 - E-book\"\r\n+121714,\"Livro 6 - E-book + Impresso\"\r\n+121715,\"Livro 6 - E-book\"\r\n+121716,\"Livro 6 - E-book\"\r\n+121718,\"Livro 9 - E-book\"\r\n+121719,\"Livro 4 - E-book + Impresso\"\r\n+121720,\"Livro 3 - E-book\"\r\n+121721,\"Livro 3 - E-book + Impresso\"\r\n+121722,\"Livro 2 - E-book + Impresso\"\r\n+121724,\"Livro 9 - E-book\"\r\n+121727,\"Livro 6 - E-book\"\r\n+121728,\"Livro 6 - E-book\"\r\n+121729,\"Livro 9 - E-book\"\r\n+121732,\"Livro 3 - Impresso\"\r\n+121733,\"Livro 4 - Impresso\"\r\n+121735,\"Livro 3 - E-book\"\r\n+121736,\"Livro 1 - E-book\"\r\n+121737,\"Livro 2 - E-book\"\r\n+121740,\"Livro 9 - E-book\"\r\n+121741,\"Livro 4 - E-book\"\r\n+121742,\"Livro 3 - E-book\"\r\n+121743,\"Livro 3 - E-book\"\r\n+121744,\"Livro 3 - E-book\"\r\n+121747,\"Livro 4 - E-book + Impresso\"\r\n+121748,\"Livro 2 - E-book\"\r\n+121748,\"Livro 3 - E-book\"\r\n+121749,\"Livro 3 - E-book\"\r\n+121750,\"Livro 5 - E-book\"\r\n+121752,\"Livro 9 - E-book\"\r\n+121753,\"Livro 6 - E-book\"\r\n+121754,\"Livro 9 - E-book\"\r\n+121755,\"Livro 8 - E-book\"\r\n+121756,\"Livro 9 - Impresso\"\r\n+121758,\"Livro 6 - E-book\"\r\n+121759,\"Livro 3 - E-book\"\r\n+121760,\"Livro 3 - E-book\"\r\n+121761,\"Livro 1 - E-book\"\r\n+121764,\"Livro 9 - E-book + Impresso\"\r\n+121764,\"Livro 4 - E-book + Impresso\"\r\n+121765,\"Livro 4 - E-book\"\r\n+121766,\"Livro 3 - E-book\"\r\n+121766,\"Livro 5 - E-book\"\r\n+121768,\"Livro 2 - E-book\"\r\n+121769,\"Livro 9 - E-book\"\r\n+121770,\"Livro 3 - E-book\"\r\n+121771,\"Livro 9 - E-book + Impresso\"\r\n+121773,\"Livro 9 - E-book\"\r\n+121774,\"Livro 9 - E-book\"\r\n+121775,\"Livro 4 - E-book\"\r\n+121776,\"Livro 9 - E-book\"\r\n+121777,\"Livro 1 - E-book\"\r\n+121778,\"Livro 6 - E-book + Impresso\"\r\n+121779,\"Livro 6 - E-book\"\r\n+121780,\"Livro 9 - E-book\"\r\n+121781,\"Livro 3 - E-book + Impresso\"\r\n+121782,\"Livro 3 - E-book\"\r\n+121783,\"Livro 9 - E-book\"\r\n+121784,\"Livro 10 - E-book\"\r\n+121784,\"Livro 9 - E-book\"\r\n+121784,\"Livro 3 - E-book\"\r\n+121785,\"Livro 3 - E-book\"\r\n+121786,\"Livro 9 - E-book\"\r\n+121787,\"Livro 5 - E-book\"\r\n+121788,\"Livro 1 - E-book\"\r\n+121789,\"Livro 1 - Impresso\"\r\n+121790,\"Livro 6 - E-book + Impresso\"\r\n+121790,\"Livro 9 - E-book + Impresso\"\r\n+121790,\"Livro 3 - Impresso\"\r\n+121791,\"Livro 3 - E-book\"\r\n+121792,\"Livro 9 - E-book\"\r\n+121793,\"Livro 9 - E-book\"\r\n+121794,\"Livro 3 - E-book\"\r\n+121795,\"Livro 2 - E-book\"\r\n+121795,\"Livro 6 - E-book\"\r\n+121795,\"Livro 1 - E-book\"\r\n+121796,\"Livro 6 - E-book\"\r\n+121797,\"Livro 9 - E-book + Impresso\"\r\n+121798,\"Livro 4 - E-book\"\r\n+121799,\"Livro 10 - E-book\"\r\n+121800,\"Livro 2 - E-book\"\r\n+121801,\"Livro 6 - E-book\"\r\n+121802,\"Livro 2 - E-book\"\r\n+121803,\"Livro 6 - E-book\"\r\n+121804,\"Livro 2 - E-book + Impresso\"\r\n+121806,\"Livro 8 - E-book\"\r\n+121806,\"Livro 2 - E-book\"\r\n+121806,\"Livro 4 - E-book\"\r\n+121807,\"Livro 3 - E-book\"\r\n+121807,\"Livro 10 - E-book\"\r\n+121808,\"Livro 6 - E-book\"\r\n+121808,\"Livro 3 - E-book\"\r\n+121808,\"Livro 2 - E-book\"\r\n+121810,\"Livro 3 - E-book\"\r\n+121811,\"Livro 3 - E-book + Impresso\"\r\n+121812,\"Livro 6 - E-book\"\r\n+121812,\"Livro 3 - E-book\"\r\n+121813,\"Livro 2 - E-book\"\r\n+121814,\"Livro 4 - E-book\"\r\n+121814,\"Livro 2 - E-book\"\r\n+121815,\"Livro 2 - E-book\"\r\n+121815,\"Livro 9 - E-book\"\r\n+121815,\"Livro 4 - E-book\"\r\n+121815,\"Livro 6 - E-book\"\r\n+121816,\"Livro 1 - E-book\"\r\n+121817,\"Livro 1 - E-book\"\r\n+121819,\"Livro 2 - E-book\"\r\n+121821,\"Livro 2 - E-book\"\r\n+121821,\"Livro 9 - E-book\"\r\n+121821,\"Livro 8 - E-book\"\r\n+121822,\"Livro 2 - E-book\"\r\n+121823,\"Livro 4 - E-book\"\r\n+121824,\"Livro 9 - E-book\"\r\n+121825,\"Livro 2 - E-book\"\r\n+121825,\"Livro 8 - E-book\"\r\n+121825,\"Livro 9 - E-book + Impresso\"\r\n+121826,\"Livro 3 - E-book\"\r\n+121826,\"Livro 6 - E-book\"\r\n+121826,\"Livro 2 - E-book\"\r\n+121828,\"Livro 5 - E-book\"\r\n+121829,\"Livro 2 - E-book\"\r\n+121830,\"Livro 6 - E-book\"\r\n+121831,\"Livro 1 - E-book\"\r\n+121832,\"Livro 5 - E-book\"\r\n+121832,\"Livro 2 - E-book\"\r\n+121832,\"Livro 8 - E-book\"\r\n+121833,\"Livro 4 - E-book\"\r\n+121834,\"Livro 9 - E-book\"\r\n+121836,\"Livro 9 - E-book\"\r\n+121837,\"Livro 9 - E-book + Impresso\"\r\n+121838,\"Livro 3 - E-book + Impresso\"\r\n+121839,\"Livro 9 - E-book + Impresso\"\r\n+121840,\"Livro 1 - E-book\"\r\n+121841,\"Livro 3 - E-book\"\r\n+121842,\"Livro 3 - E-book\"\r\n+121843,\"Livro 8 - E-book\"\r\n+121844,\"Livro 3 - E-book\"\r\n+121845,\"Livro 2 - E-book\"\r\n+121846,\"Livro 4 - E-book\"\r\n+121848,\"Livro 6 - E-book\"\r\n+121851,\"Livro 6 - E-book + Impresso\"\r\n+121852,\"Livro 2 - Impresso\"\r\n+121853,\"Livro 3 - E-book\"\r\n+121855,\"Livro 2 - E-book\"\r\n+121855,\"Livro 8 - E-book\"\r\n+121856,\"Livro 3 - E-book\"\r\n+121857,\"Livro 9 - E-book\"\r\n+121858,\"Livro 3 - E-book\"\r\n+121859,\"Livro 9 - E-book\"\r\n+121860,\"Livro 8 - E-book\"\r\n+121861,\"Livro 3 - E-book\"\r\n+121862,\"Livro 9 - E-book\"\r\n+121863,\"Livro 4 - Impresso\"\r\n+121864,\"Livro 3 - E-book\"\r\n+121865,\"Livro 6 - E-book\"\r\n+121866,\"Livro 9 - E-book\"\r\n+121867,\"Livro 5 - E-book + Impresso\"\r\n+121867,\"Livro 8 - E-book + Impresso\"\r\n+121867,\"Livro 10 - E-book + Impresso\"\r\n+121867,\"Livro 1 - Impresso\"\r\n+121867,\"Livro 4 - Impresso\"\r\n+121868,\"Livro 3 - E-book\"\r\n+121868,\"Livro 1 - E-book\"\r\n+121869,\"Livro 2 - E-book\"\r\n+121869,\"Livro 9 - E-book\"\r\n+121869,\"Livro 3 - E-book\"\r\n+121869,\"Livro 10 - E-book\"\r\n+121870,\"Livro 9 - E-book\"\r\n+121872,\"Livro 9 - E-book\"\r\n+121874,\"Livro 6 - E-book\"\r\n+121875,\"Livro 3 - E-book\"\r\n+121876,\"Livro 6 - E-book\"\r\n+121876,\"Livro 9 - E-book\"\r\n+121877,\"Livro 4 - Impresso\"\r\n+121877,\"Livro 9 - Impresso\"\r\n+121878,\"Livro 3 - E-book\"\r\n+121879,\"Livro 2 - E-book\"\r\n+121880,\"Livro 6 - E-book\"\r\n+121882,\"Livro 1 - E-book\"\r\n+121883,\"Livro 3 - Impresso\"\r\n+121884,\"Livro 9 - E-book + Impresso\"\r\n+121885,\"Livro 3 - E-book\"\r\n+121886,\"Livro 10 - E-book\"\r\n+121887,\"Livro 9 - E-book\"\r\n+121888,\"Livro 3 - E-book\"\r\n+121889,\"Livro 5 - E-book\"\r\n+121889,\"Livro 2 - E-book\"\r\n+121889,\"Livro 9 - E-book\"\r\n+121890,\"Livro 4 - E-book\"\r\n+121891,\"Livro 9 - E-book\"\r\n+121891,\"Livro 3 - E-book\"\r\n+121892,\"Livro 10 - E-book\"\r\n+121893,\"Livro 9 - E-book\"\r\n+121894,\"Livro 2 - E-book\"\r\n+121895,\"Livro 1 - E-book\"\r\n+121896,\"Livro 6 - E-book + Impresso\"\r\n+121899,\"Livro 3 - E-book\"\r\n+121900,\"Livro 9 - E-book\"\r\n+121901,\"Livro 8 - E-book\"\r\n+121902,\"Livro 2 - E-book + Impresso\"\r\n+121903,\"Livro 9 - E-book\"\r\n+121904,\"Livro 3 - E-book\"\r\n+121905,\"Livro 2 - E-book\"\r\n+121906,\"Livro 3 - E-book\"\r\n+121907,\"Livro 3 - Impresso\"\r\n+121907,\"Livro 7 - E-book + Impresso\"\r\n+121908,\"Livro 9 - E-book\"\r\n+121909,\"Livro 9 - Impresso\"\r\n+121910,\"Livro 10 - E-book\"\r\n+121910,\"Livro 3 - E-book\"\r\n+121912,\"Livro 9 - E-book\"\r\n+121913,\"Livro 2 - E-book\"\r\n+121913,\"Livro 1 - E-book\"\r\n+121914,\"Livro 9 - E-book\"\r\n+121915,\"Livro 4 - E-book\"\r\n+121916,\"Livro 9 - E-book\"\r\n+121917,\"Livro 3 - E-book + Impresso\"\r\n+121918,\"Livro 3 - E-book\"\r\n+121920,\"Livro 3 - E-book\"\r\n+121921,\"Livro 9 - E-book\"\r\n+121922,\"Livro 9 - E-book\"\r\n+121923,\"Livro 2 - E-book\"\r\n+121925,\"Livro 7 - E-book\"\r\n+121926,\"Livro 4 - E-book\"\r\n+121927,\"Livro 8 - E-book\"\r\n+121928,\"Livro 9 - E-book + Impresso\"\r\n+121929,\"Livro 3 - Impresso\"\r\n+121930,\"Livro 3 - E-book\"\r\n+121930,\"Livro 6 - E-book\"\r\n+121931,\"Livro 3 - E-book\"\r\n+121932,\"Livro 10 - E-book\"\r\n+121933,\"Livro 9 - Impresso\"\r\n+121933,\"Livro 4 - E-book\"\r\n+121934,\"Livro 10 - E-book\"\r\n+121934,\"Livro 4 - E-book\"\r\n+121934,\"Livro 6 - E-book\"\r\n+121935,\"Livro 6 - E-book\"\r\n+121936,\"Livro 9 - E-book\"\r\n+121937,\"Livro 2 - E-book\"\r\n+121939,\"Livro 3 - E-book\"\r\n+121939,\"Livro 6 - E-book\"\r\n+121940,\"Livro 7 - E-book\"\r\n+121941,\"Livro 2 - Impresso\"\r\n+121942,\"Livro 4 - E-book\"\r\n+121943,\"Livro 2 - E-book\"\r\n+121944,\"Livro 3 - E-book\"\r\n+121945,\"Livro 1 - E-book\"\r\n+121946,\"Livro 3 - E-book + Impresso\"\r\n+121947,\"Livro 3 - E-book\"\r\n+121949,\"Livro 3 - Impresso\"\r\n+121950,\"Livro 4 - E-book\"\r\n+121951,\"Livro 3 - Impresso\"\r\n+121952,\"Livro 3 - Impresso\"\r\n+121953,\"Livro 2 - E-book + Impresso\"\r\n+121954,\"Livro 1 - E-book\"\r\n+121955,\"Livro 3 - E-book\"\r\n+121956,\"Livro 4 - E-book\"\r\n+121957,\"Livro 9 - E-book\"\r\n+121958,\"Livro 8 - E-book\"\r\n+121959,\"Livro 9 - E-book\"\r\n+121960,\"Livro 8 - E-book\"\r\n+121961,\"Livro 2 - E-book\"\r\n+121962,\"Livro 3 - E-book\"\r\n+121965,\"Livro 3 - E-book\"\r\n+121966,\"Livro 3 - E-book\"\r\n+121967,\"Livro 6 - E-book + Impresso\"\r\n+121967,\"Livro 3 - E-book + Impresso\"\r\n+121968,\"Livro 3 - E-book + Impresso\"\r\n+121971,\"Livro 3 - E-book\"\r\n+121972,\"Livro 6 - E-book\"\r\n+121973,\"Livro 3 - E-book\"\r\n+121973,\"Livro 7 - E-book\"\r\n+121974,\"Livro 1 - E-book + Impresso\"\r\n+121974,\"Livro 5 - E-book + Impresso\"\r\n+121975,\"Livro 3 - E-book\"\r\n+121976,\"Livro 1 - E-book\"\r\n+121979,\"Livro 3 - E-book\"\r\n+121980,\"Livro 9 - E-book\"\r\n+121983,\"Livro 7 - E-book\"\r\n+121983,\"Livro 2 - E-book\"\r\n+121984,\"Livro 4 - E-book + Impresso\"\r\n+121986,\"Livro 10 - E-book\"\r\n+121987,\"Livro 1 - E-book + Impresso\"\r\n+121988,\"Livro 9 - E-book\"\r\n+121989,\"Livro 3 - E-book\"\r\n+121990,\"Livro 3 - E-book\"\r\n+121991,\"Livro 9 - E-book + Impresso\"\r\n+121992,\"Livro 2 - E-book\"\r\n+121993,\"Livro 2 - E-book\"\r\n+121994,\"Livro 6 - E-book + Impresso\"\r\n+121995,\"Livro 7 - E-book\"\r\n+121997,\"Livro 4 - E-book\"\r\n+121998,\"Livro 3 - E-book\"\r\n+121999,\"Livro 8 - E-book\"\r\n+122000,\"Livro 5 - E-book\"\r\n+122001,\"Livro 3 - E-book\"\r\n+122002,\"Livro 3 - E-book\"\r\n+122002,\"Livro 6 - E-book\"\r\n+122003,\"Livro 6 - E-book\"\r\n+122004,\"Livro 2 - E-book\"\r\n+122005,\"Livro 3 - E-book\"\r\n+122006,\"Livro 6 - E-book\"\r\ndiff --git a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\nindex 5d4eb3b..9546212 100644\r\n--- a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n@@ -8,8 +8,10 @@ import java.util.List;\r\n \r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.ItemToItemRecommender;\r\n-import br.ime.usp.commendans.factory.ItemToItemsAssociation.Tuple;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation.Tuple;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.model.User;\r\n \r\n@@ -22,10 +24,10 @@ public class ItemToItemRecommenderFactoryTest {\r\n         Item item2 = new Item(2l);\r\n         Item item3 = new Item(3l);\r\n         Item item4 = new Item(4l);\r\n-        User user1 = new User(Arrays.asList(item1, item3));\r\n-        User user2 = new User(Arrays.asList(item2, item4));\r\n-        User user3 = new User(Arrays.asList(item1, item2, item3));\r\n-        User user4 = new User(Arrays.asList(item3, item4));\r\n+        User user1 = new User(Arrays.asList(item1, item3), 1l);\r\n+        User user2 = new User(Arrays.asList(item2, item4), 2l);\r\n+        User user3 = new User(Arrays.asList(item1, item2, item3), 3l);\r\n+        User user4 = new User(Arrays.asList(item3, item4), 4l);\r\n         factory.addUser(user1);\r\n         factory.addUser(user2);\r\n         factory.addUser(user3);\r\n'),(7,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/ItemToItemRecommender.java b/src/main/java/br/ime/usp/commendans/ItemToItemRecommender.java\r\ndeleted file mode 100644\r\nindex 860b025..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/ItemToItemRecommender.java\r\n+++ /dev/null\r\n@@ -1,38 +0,0 @@\r\n-package br.ime.usp.commendans;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import br.ime.usp.commendans.factory.ItemToItemsAssociation;\r\n-import br.ime.usp.commendans.factory.ItemToItemsAssociation.Tuple;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class ItemToItemRecommender implements Recommender {\r\n-\r\n-    private final Map<Item, List<Tuple>> associations;\r\n-\r\n-    public ItemToItemRecommender(\r\n-            HashMap<Item, ItemToItemsAssociation> associations) {\r\n-        this.associations = parse(associations);\r\n-    }\r\n-\r\n-    private Map<Item, List<Tuple>> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n-        HashMap<Item, List<Tuple>> map = new HashMap<Item, List<Tuple>>();\r\n-        Set<Item> items = associations.keySet();\r\n-        for (Item item : items) {\r\n-            ItemToItemsAssociation association = associations.get(item);\r\n-            List<Tuple> tuples = association.toTupleList();\r\n-            map.put(item, tuples);\r\n-        }\r\n-        return map;\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<Tuple> recommendendItemsFor(Item item) {\r\n-        List<Tuple> tuples = associations.get(item);\r\n-        return tuples;\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactory.java b/src/main/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactory.java\r\ndeleted file mode 100644\r\nindex cf6a011..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactory.java\r\n+++ /dev/null\r\n@@ -1,61 +0,0 @@\r\n-package br.ime.usp.commendans.factory;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import br.ime.usp.commendans.ItemToItemRecommender;\r\n-import br.ime.usp.commendans.model.Item;\r\n-import br.ime.usp.commendans.model.User;\r\n-\r\n-public class ItemToItemRecommenderFactory {\r\n-\r\n-    private Map<Item, List<User>> usersByItemBought;\r\n-    private HashMap<Item, ItemToItemsAssociation> associations;\r\n-    \r\n-    public ItemToItemRecommenderFactory() {\r\n-        usersByItemBought = new HashMap<Item, List<User>>();\r\n-    }\r\n-    \r\n-    public void addUser(User user) {\r\n-        List<Item> items = user.itemsBought();\r\n-        for (Item item : items) {\r\n-            store(item, user);\r\n-        }\r\n-    }\r\n-\r\n-    private void store(Item item, User user) {\r\n-        List<User> users = usersByItemBought.get(item);\r\n-        if (users == null) {\r\n-            users = new ArrayList<User>();\r\n-        }\r\n-        users.add(user);\r\n-        usersByItemBought.put(item, users);\r\n-    }\r\n-    \r\n-    \r\n-    public ItemToItemRecommender build() {\r\n-        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n-        Set<Item> items = usersByItemBought.keySet();\r\n-        for (Item item : items) {\r\n-            ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n-            List<User> users = usersByItemBought.get(item);\r\n-            for (User user : users) {\r\n-                List<Item> boughtTogether = user.itemsBought();\r\n-                System.out.println(item + \" -> \" +boughtTogether);\r\n-                for (Item i : boughtTogether) {\r\n-                    association.associate(i);\r\n-                }\r\n-            }\r\n-            associations.put(item, association);\r\n-        }\r\n-        return new ItemToItemRecommender(associations);\r\n-    }\r\n-    \r\n-    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n-        return associations;\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/factory/ItemToItemsAssociation.java b/src/main/java/br/ime/usp/commendans/factory/ItemToItemsAssociation.java\r\ndeleted file mode 100644\r\nindex f0e665b..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/factory/ItemToItemsAssociation.java\r\n+++ /dev/null\r\n@@ -1,84 +0,0 @@\r\n-package br.ime.usp.commendans.factory;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collections;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class ItemToItemsAssociation {\r\n-    private Item item;\r\n-    private Map<Item, Double> associations;\r\n-\r\n-    public ItemToItemsAssociation(Item item) {\r\n-        this.item = item;\r\n-        this.associations = new HashMap<Item, Double>();\r\n-    }\r\n-\r\n-    public void associate(Item i) {\r\n-        if (i.equals(this.item))\r\n-            return;\r\n-        Double v = associations.get(i);\r\n-        if (v == null) {\r\n-            v = 0.0;\r\n-        }\r\n-        v += 1.0;\r\n-        associations.put(i, v);\r\n-    }\r\n-    \r\n-    public double associationValue(Item i) {\r\n-        Double v = associations.get(i);\r\n-        if (v == null) {\r\n-            return 0.0;\r\n-        }\r\n-        return v;\r\n-    }\r\n-    \r\n-    \r\n-    @Override\r\n-    public String toString() {\r\n-        String res = this.item.toString() + \" => {\" + associations.toString() + \"}\";\r\n-        return res;\r\n-    }\r\n-\r\n-    public List<Tuple> toTupleList() {\r\n-        Set<Item> items = associations.keySet();\r\n-        ArrayList<Tuple> tuples = new ArrayList<Tuple>();\r\n-        for (Item item : items) {\r\n-            Double value = associations.get(item);\r\n-            tuples.add(new Tuple(item, value));\r\n-        }\r\n-        Collections.sort(tuples);\r\n-        Collections.reverse(tuples);\r\n-        return tuples;\r\n-    }\r\n-\r\n-    \r\n-    public class Tuple implements Comparable<Tuple> {\r\n-        private Item item;\r\n-        private Double value;\r\n-\r\n-        public Tuple(Item item, Double value) {\r\n-            this.item = item;\r\n-            this.value = value;\r\n-        }\r\n-\r\n-        public Item getItem() {\r\n-            return item;\r\n-        }\r\n-\r\n-        public Double getValue() {\r\n-            return value;\r\n-        }\r\n-\r\n-        @Override\r\n-        public int compareTo(Tuple o) {\r\n-            return (int) (value - o.getValue());\r\n-        }\r\n-\r\n-    }\r\n-\r\n-}\r\n'),(8,'\r\ndiff --git a/.gitignore b/.gitignore\r\nindex fe1b1ad..097b6a7 100644\r\n--- a/.gitignore\r\n+++ b/.gitignore\r\n@@ -1,3 +1,4 @@\r\n *.jar\r\n *.class\r\n build/\r\n+.~lock*\r\ndiff --git a/src/main/java/br/ime/usp/commendans/util/DataImporter.java b/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\nindex 2dc2bb6..8b61fad 100644\r\n--- a/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\n+++ b/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\n@@ -11,8 +11,8 @@ import java.util.HashMap;\r\n import java.util.List;\r\n \r\n import org.apache.log4j.Logger;\r\n+import org.hibernate.Session;\r\n import org.hibernate.SessionFactory;\r\n-import org.hibernate.StatelessSession;\r\n import org.hibernate.cfg.Configuration;\r\n \r\n import br.ime.usp.commendans.model.Item;\r\n@@ -20,17 +20,17 @@ import br.ime.usp.commendans.model.User;\r\n \r\n public class DataImporter {\r\n     \r\n-    private final StatelessSession session;\r\n+    private final Session session;\r\n     private static Logger logger;\r\n \r\n-    public DataImporter(StatelessSession session) {\r\n+    public DataImporter(Session session) {\r\n         this.session = session;\r\n     }\r\n \r\n     public static void main(String[] args) throws IOException {\r\n         logger = Logger.getLogger(DataImporter.class);\r\n         SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n-        StatelessSession session = sf.openStatelessSession();\r\n+        Session session = sf.openSession();\r\n         DataImporter dataImporter = new DataImporter(session);\r\n         dataImporter.importData(\"/orders.csv\");\r\n     }\r\n@@ -64,12 +64,13 @@ public class DataImporter {\r\n         logger.info(\"persisting\");\r\n         session.getTransaction().begin();\r\n         for (Item item : items.values()) {\r\n-            session.insert(item);\r\n+            session.save(item);\r\n         }\r\n         \r\n         Collection<User> allUsers = users.values();\r\n         for (User user : allUsers) {\r\n-            session.insert(user);\r\n+            System.out.println(user.itemsBought());\r\n+            session.save(user);\r\n         }\r\n         session.getTransaction().commit();\r\n         logger.info(\"finished persisting\");\r\ndiff --git a/src/main/resources/hibernate.cfg.xml b/src/main/resources/hibernate.cfg.xml\r\nindex a165aa6..394b1c0 100644\r\n--- a/src/main/resources/hibernate.cfg.xml\r\n+++ b/src/main/resources/hibernate.cfg.xml\r\n@@ -17,7 +17,7 @@\r\n         <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\r\n         <property name=\"connection.username\">root</property>\r\n         <property name=\"connection.password\"></property>\r\n-        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n         <property name=\"hibernate.generate_statistics\">true</property>\r\n'),(9,'\r\ndiff --git a/ivy.xml b/ivy.xml\r\nindex 6dea182..f279995 100644\r\n--- a/ivy.xml\r\n+++ b/ivy.xml\r\n@@ -16,7 +16,6 @@\r\n 		<dependency org=\"c3p0\" name=\"c3p0\" rev=\"0.9.1\" conf=\"default\" />\r\n 		<dependency org=\"org.hibernate\" name=\"hibernate-validator\" rev=\"4.3.0.Final\"/>\r\n 		<dependency org=\"net.sf.ehcache\" name=\"ehcache-core\" rev=\"2.5.3\"/>\r\n-		\r\n \r\n 		<!-- VRaptor dependencies -->\r\n 		<dependency org=\"br.com.caelum\" name=\"vraptor\" rev=\"3.4.1\" conf=\"default\" />\r\n@@ -30,6 +29,9 @@\r\n 		<dependency org=\"commons-io\" name=\"commons-io\" rev=\"2.0.1\"/>\r\n 		<dependency org=\"com.google.guava\" name=\"guava\" rev=\"r09\"/>\r\n \r\n+		<!-- commendans dependencies -->\r\n+		<dependency org=\"com.google.code.gson\" name=\"gson\" rev=\"2.2.2\"/>\r\n+		\r\n 		<!-- Test dependencies -->\r\n 		<dependency org=\"junit\" name=\"junit\" rev=\"4.8.2\" conf=\"test->default\" />\r\n 		<dependency org=\"org.mockito\" name=\"mockito-all\" rev=\"1.8.5\" conf=\"test->default\" />\r\ndiff --git a/src/main/java/br/ime/usp/commendans/Recommender.java b/src/main/java/br/ime/usp/commendans/Recommender.java\r\nindex 70d791c..f9067dc 100644\r\n--- a/src/main/java/br/ime/usp/commendans/Recommender.java\r\n+++ b/src/main/java/br/ime/usp/commendans/Recommender.java\r\n@@ -1,10 +1,8 @@\r\n package br.ime.usp.commendans;\r\n \r\n-import java.util.List;\r\n-\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation.Tuple;\r\n+import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n public interface Recommender {\r\n-    public List<Tuple> recommendendItemsFor(Item item);\r\n+    public ItemVector recommendendItemsFor(Item item);\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\nnew file mode 100644\r\nindex 0000000..9803810\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n@@ -0,0 +1,47 @@\r\n+package br.ime.usp.commendans.controller;\r\n+\r\n+import java.util.List;\r\n+\r\n+import br.com.caelum.vraptor.Get;\r\n+import br.com.caelum.vraptor.Resource;\r\n+import br.com.caelum.vraptor.Result;\r\n+import br.com.caelum.vraptor.view.Results;\r\n+import br.ime.usp.commendans.dao.ItemDao;\r\n+import br.ime.usp.commendans.infra.TupleJsonSerializer;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n+import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n+import br.ime.usp.commendans.itemtoitem.Tuple;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+@Resource\r\n+public class ItemToItemController {\r\n+    private final ItemToItemRecommender itemToItem;\r\n+    private final ItemDao itemDao;\r\n+    private final Result result;\r\n+    private final TupleJsonSerializer serializer;\r\n+\r\n+    public ItemToItemController(ItemToItemRecommender itemToItem, ItemDao itemDao, Result result, TupleJsonSerializer serializer) {\r\n+        this.itemToItem = itemToItem;\r\n+        this.itemDao = itemDao;\r\n+        this.result = result;\r\n+        this.serializer = serializer;\r\n+    }\r\n+    \r\n+    @Get(\"/recommend/item/{itemId}\")\r\n+    public void recommend(Long itemId) {\r\n+        Item item = itemDao.find(itemId);\r\n+        ItemVector recommendend = itemToItem.recommendendItemsFor(item);\r\n+        result.use(Results.http())\r\n+            .addHeader(\"content-type\", \"application/json\")\r\n+            .body(serializer.toJson(recommendend.getTuples()));\r\n+    }\r\n+    \r\n+    @Get(\"/recommend/items/\")\r\n+    public void recommend(List<Long> itemsIds) {\r\n+        List<Item> items = itemDao.find(itemsIds);\r\n+        List<Tuple> recommendend = itemToItem.recommendendItemsFor(items).getTuples();\r\n+        result.use(Results.http())\r\n+        .addHeader(\"content-type\", \"application/json\")\r\n+        .body(serializer.toJson(recommendend));\r\n+    }\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/ItemDao.java b/src/main/java/br/ime/usp/commendans/dao/ItemDao.java\r\nnew file mode 100644\r\nindex 0000000..8e2675e\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/ItemDao.java\r\n@@ -0,0 +1,31 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.hibernate.Session;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+@Component\r\n+public class ItemDao {\r\n+    \r\n+    private final Session session;\r\n+\r\n+    public ItemDao(Session session) {\r\n+        this.session = session;\r\n+    }\r\n+\r\n+    public Item find(Long itemId) {\r\n+        return (Item) session.load(Item.class, itemId);\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public List<Item> find(List<Long> itemsIds) {\r\n+        return session\r\n+                .createQuery(\"select item from Item item where item.id in :ids\")\r\n+                .setParameterList(\"ids\", itemsIds)\r\n+                .list();\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/UserDao.java b/src/main/java/br/ime/usp/commendans/dao/UserDao.java\r\nnew file mode 100644\r\nindex 0000000..bce6d2e\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/UserDao.java\r\n@@ -0,0 +1,23 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.hibernate.Session;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.User;\r\n+\r\n+@Component\r\n+public class UserDao {\r\n+    private final Session session;\r\n+\r\n+    public UserDao(Session session) {\r\n+        this.session = session;\r\n+    }\r\n+    \r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public List<User> list() {\r\n+        session.createQuery(\"select user from User user join fetch user.items\");\r\n+        return session.createCriteria(User.class).list();\r\n+    }\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java b/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java\r\nnew file mode 100644\r\nindex 0000000..8f73c17\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java\r\n@@ -0,0 +1,38 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.annotation.PostConstruct;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n+import br.ime.usp.commendans.dao.UserDao;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n+import br.ime.usp.commendans.model.User;\r\n+\r\n+@Component\r\n+public class ItemToItemRecommenderCreator implements ComponentFactory<ItemToItemRecommender> {\r\n+    private final UserDao dao;\r\n+    private final ItemToItemRecommenderFactory factory;\r\n+    private ItemToItemRecommender itemToItemRecommender;\r\n+\r\n+    public ItemToItemRecommenderCreator(UserDao dao, ItemToItemRecommenderFactory factory) {\r\n+        this.dao = dao;\r\n+        this.factory = factory;\r\n+    }\r\n+\r\n+    @Override\r\n+    public ItemToItemRecommender getInstance() {\r\n+        return itemToItemRecommender;\r\n+    }\r\n+    \r\n+    @PostConstruct\r\n+    public void create() {\r\n+        List<User> users = dao.list();\r\n+        for (User user : users) {\r\n+            factory.addUser(user);\r\n+        }\r\n+        this.itemToItemRecommender = factory.build();\r\n+    }\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/RecommenderComponent.java b/src/main/java/br/ime/usp/commendans/infra/RecommenderComponent.java\r\nnew file mode 100644\r\nindex 0000000..04cdd7a\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/RecommenderComponent.java\r\n@@ -0,0 +1,6 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+\r\n+public class RecommenderComponent {\r\n+    \r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/TupleJsonSerializer.java b/src/main/java/br/ime/usp/commendans/infra/TupleJsonSerializer.java\r\nnew file mode 100644\r\nindex 0000000..9572bf7\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/TupleJsonSerializer.java\r\n@@ -0,0 +1,28 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import java.util.List;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.itemtoitem.Tuple;\r\n+\r\n+import com.google.gson.Gson;\r\n+\r\n+@Component\r\n+public class TupleJsonSerializer {\r\n+    \r\n+    private final Gson gson;\r\n+\r\n+    public TupleJsonSerializer() {\r\n+        this.gson = new Gson();\r\n+    }\r\n+\r\n+    public String toJson(Tuple tuple) {\r\n+        return gson.toJson(tuple);\r\n+    }\r\n+    \r\n+    public String toJson(List<Tuple> tuples) {\r\n+        return gson.toJson(tuples);\r\n+    }\r\n+\r\n+    \r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommender.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommender.java\r\nindex ce01649..cd1949c 100644\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommender.java\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommender.java\r\n@@ -1,38 +1,46 @@\r\n package br.ime.usp.commendans.itemtoitem;\r\n \r\n+import java.util.ArrayList;\r\n import java.util.HashMap;\r\n import java.util.List;\r\n import java.util.Map;\r\n import java.util.Set;\r\n \r\n import br.ime.usp.commendans.Recommender;\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation.Tuple;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n public class ItemToItemRecommender implements Recommender {\r\n \r\n-    private final Map<Item, List<Tuple>> associations;\r\n+    private final Map<Item, ItemVector> associations;\r\n \r\n     public ItemToItemRecommender(\r\n             HashMap<Item, ItemToItemsAssociation> associations) {\r\n         this.associations = parse(associations);\r\n     }\r\n \r\n-    private Map<Item, List<Tuple>> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n-        HashMap<Item, List<Tuple>> map = new HashMap<Item, List<Tuple>>();\r\n+    private Map<Item, ItemVector> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        HashMap<Item, ItemVector> map = new HashMap<Item, ItemVector>();\r\n         Set<Item> items = associations.keySet();\r\n         for (Item item : items) {\r\n             ItemToItemsAssociation association = associations.get(item);\r\n             List<Tuple> tuples = association.toTupleList();\r\n-            map.put(item, tuples);\r\n+            map.put(item, new ItemVector(tuples));\r\n         }\r\n         return map;\r\n     }\r\n \r\n     @Override\r\n-    public List<Tuple> recommendendItemsFor(Item item) {\r\n-        List<Tuple> tuples = associations.get(item);\r\n-        return tuples;\r\n+    public ItemVector recommendendItemsFor(Item item) {\r\n+        return associations.get(item);\r\n+    }\r\n+\r\n+    public ItemVector recommendendItemsFor(List<Item> items) {\r\n+        ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n+        for (Item item : items) {\r\n+            ItemVector other = recommendendItemsFor(item);\r\n+            vector = vector.merge(other);\r\n+        }\r\n+        return vector;\r\n     }\r\n \r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\nindex 75db695..f174aec 100644\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\n@@ -6,9 +6,11 @@ import java.util.List;\r\n import java.util.Map;\r\n import java.util.Set;\r\n \r\n+import br.com.caelum.vraptor.ioc.Component;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.model.User;\r\n \r\n+@Component\r\n public class ItemToItemRecommenderFactory {\r\n \r\n     private Map<Item, List<User>> usersByItemBought;\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemsAssociation.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemsAssociation.java\r\nindex 46c77b4..a9e46dd 100644\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemsAssociation.java\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemsAssociation.java\r\n@@ -56,29 +56,4 @@ public class ItemToItemsAssociation {\r\n         return tuples;\r\n     }\r\n \r\n-    \r\n-    public class Tuple implements Comparable<Tuple> {\r\n-        private Item item;\r\n-        private Double value;\r\n-\r\n-        public Tuple(Item item, Double value) {\r\n-            this.item = item;\r\n-            this.value = value;\r\n-        }\r\n-\r\n-        public Item getItem() {\r\n-            return item;\r\n-        }\r\n-\r\n-        public Double getValue() {\r\n-            return value;\r\n-        }\r\n-\r\n-        @Override\r\n-        public int compareTo(Tuple o) {\r\n-            return (int) (value - o.getValue());\r\n-        }\r\n-\r\n-    }\r\n-\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemVector.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemVector.java\r\nnew file mode 100644\r\nindex 0000000..fd0fad6\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemVector.java\r\n@@ -0,0 +1,52 @@\r\n+package br.ime.usp.commendans.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+public class ItemVector {\r\n+\r\n+    private Set<Tuple> tuples;\r\n+\r\n+    public ItemVector(Set<Tuple> tuples) {\r\n+        this.tuples = tuples;\r\n+    }\r\n+\r\n+    public ItemVector(List<Tuple> tuples) {\r\n+        this(new HashSet<Tuple>(tuples));\r\n+    }\r\n+\r\n+    public List<Tuple> getTuples() {\r\n+        ArrayList<Tuple> tuples = new ArrayList<Tuple>(this.tuples);\r\n+        Collections.sort(tuples);\r\n+        Collections.reverse(tuples);\r\n+        return Collections.unmodifiableList(tuples);\r\n+    }\r\n+    \r\n+    private void remove(Tuple t) {\r\n+        tuples.remove(t);\r\n+    }\r\n+\r\n+    public ItemVector merge(ItemVector other) {\r\n+        Set<Tuple> tuples = new HashSet<Tuple>();\r\n+        Set<Tuple> tuplesToRemove = new HashSet<Tuple>();\r\n+        for (Tuple tuple : this.tuples) {\r\n+            for (Tuple t : other.getTuples()) {\r\n+                if (t.getItem().equals(tuple.getItem())) {\r\n+                    Tuple newTuple = new Tuple(t.getItem(), tuple.getValue() + t.getValue());\r\n+                    tuples.add(newTuple);\r\n+                    tuplesToRemove.add(t);\r\n+                    tuplesToRemove.add(tuple);\r\n+                    break;\r\n+                }\r\n+            }\r\n+        }\r\n+        tuples.addAll(this.tuples);\r\n+        tuples.addAll(other.getTuples());\r\n+        tuples.removeAll(tuplesToRemove);\r\n+        return new ItemVector(tuples);\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/Tuple.java b/src/main/java/br/ime/usp/commendans/itemtoitem/Tuple.java\r\nnew file mode 100644\r\nindex 0000000..e735a7f\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/Tuple.java\r\n@@ -0,0 +1,63 @@\r\n+package br.ime.usp.commendans.itemtoitem;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class Tuple implements Comparable<Tuple> {\r\n+    private Item item;\r\n+    private Double value;\r\n+\r\n+    public Tuple(Item item, Double value) {\r\n+        this.item = item;\r\n+        this.value = value;\r\n+    }\r\n+\r\n+    public Item getItem() {\r\n+        return item;\r\n+    }\r\n+\r\n+    public Double getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    @Override\r\n+    public int compareTo(Tuple o) {\r\n+        return (int) (value - o.getValue());\r\n+    }\r\n+    \r\n+    @Override\r\n+    public int hashCode() {\r\n+        final int prime = 31;\r\n+        int result = 1;\r\n+        result = prime * result + ((item == null) ? 0 : item.hashCode());\r\n+        result = prime * result + ((value == null) ? 0 : value.hashCode());\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (getClass() != obj.getClass())\r\n+            return false;\r\n+        Tuple other = (Tuple) obj;\r\n+        if (item == null) {\r\n+            if (other.item != null)\r\n+                return false;\r\n+        } else if (!item.equals(other.item))\r\n+            return false;\r\n+        if (value == null) {\r\n+            if (other.value != null)\r\n+                return false;\r\n+        } else if (!value.equals(other.value))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return \"[Tuple: item=\" + item + \"]\";\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/webapp/WEB-INF/web.xml b/src/main/webapp/WEB-INF/web.xml\r\nindex 5368bfa..4526131 100644\r\n--- a/src/main/webapp/WEB-INF/web.xml\r\n+++ b/src/main/webapp/WEB-INF/web.xml\r\n@@ -1,12 +1,15 @@\r\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\">\r\n-  <display-name>commendans</display-name>\r\n-  <welcome-file-list>\r\n-    <welcome-file>index.html</welcome-file>\r\n-    <welcome-file>index.htm</welcome-file>\r\n-    <welcome-file>index.jsp</welcome-file>\r\n-    <welcome-file>default.html</welcome-file>\r\n-    <welcome-file>default.htm</welcome-file>\r\n-    <welcome-file>default.jsp</welcome-file>\r\n-  </welcome-file-list>\r\n+<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+	xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"\r\n+	xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n+	id=\"WebApp_ID\" version=\"3.0\">\r\n+	<display-name>commendans</display-name>\r\n+	\r\n+	<context-param>\r\n+		<param-name>br.com.caelum.vraptor.packages</param-name>\r\n+		<param-value>\r\n+	        br.com.caelum.vraptor.util.hibernate\r\n+        </param-value>\r\n+	</context-param>\r\n+	\r\n </web-app>\r\n\\ No newline at end of file\r\ndiff --git a/src/test/java/br/ime/usp/commendans/dao/UserDaoTest.java b/src/test/java/br/ime/usp/commendans/dao/UserDaoTest.java\r\nnew file mode 100644\r\nindex 0000000..60eeacf\r\n--- /dev/null\r\n+++ b/src/test/java/br/ime/usp/commendans/dao/UserDaoTest.java\r\n@@ -0,0 +1,22 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.hibernate.Session;\r\n+import org.hibernate.SessionFactory;\r\n+import org.hibernate.cfg.Configuration;\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.model.User;\r\n+\r\n+public class UserDaoTest {\r\n+\r\n+    @Test\r\n+    public void test() {\r\n+        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n+        Session session = sf.openSession();\r\n+        UserDao userDao = new UserDao(session);\r\n+        List<User> users = userDao.list();\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\nindex 9546212..06be6fc 100644\r\n--- a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n@@ -11,14 +11,14 @@ import org.junit.Test;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation.Tuple;\r\n+import br.ime.usp.commendans.itemtoitem.Tuple;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.model.User;\r\n \r\n public class ItemToItemRecommenderFactoryTest {\r\n \r\n     @Test\r\n-    public void test() {\r\n+    public void shouldBuildRecommender() {\r\n         ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n         Item item1 = new Item(1l);\r\n         Item item2 = new Item(2l);\r\n@@ -36,7 +36,7 @@ public class ItemToItemRecommenderFactoryTest {\r\n         ItemToItemRecommender recommender = factory.build();\r\n         HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n         \r\n-        List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1);\r\n+        List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1).getTuples();\r\n         ItemToItemsAssociation association = associations.get(item1);\r\n         assertEquals(0.0, association.associationValue(item1), 0.001);\r\n         assertEquals(1.0, association.associationValue(item2), 0.001);\r\n@@ -49,7 +49,7 @@ public class ItemToItemRecommenderFactoryTest {\r\n         assertEquals(item2, recommendedItems.get(1).getItem());\r\n         assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n         \r\n-        recommendedItems = recommender.recommendendItemsFor(item2);\r\n+        recommendedItems = recommender.recommendendItemsFor(item2).getTuples();\r\n         association = associations.get(item2);\r\n         assertEquals(1.0, association.associationValue(item1), 0.001);\r\n         assertEquals(0.0, association.associationValue(item2), 0.001);\r\n@@ -61,7 +61,7 @@ public class ItemToItemRecommenderFactoryTest {\r\n         assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n         assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n         \r\n-        recommendedItems = recommender.recommendendItemsFor(item3);\r\n+        recommendedItems = recommender.recommendendItemsFor(item3).getTuples();\r\n         association = associations.get(item3);\r\n         assertEquals(2.0, association.associationValue(item1), 0.001);\r\n         assertEquals(1.0, association.associationValue(item2), 0.001);\r\ndiff --git a/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java b/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java\r\nnew file mode 100644\r\nindex 0000000..af9d9fa\r\n--- /dev/null\r\n+++ b/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java\r\n@@ -0,0 +1,28 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.Arrays;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.itemtoitem.Tuple;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class TupleJsonSerializerTest {\r\n+\r\n+    @Test\r\n+    public void shouldSerializeATuple() {\r\n+        TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n+        String json = serializer.toJson(new Tuple(new Item(1l), 10.0));\r\n+        assertEquals(\"{\\\"item\\\":{\\\"id\\\":1},\\\"value\\\":10.0}\", json);\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void shouldSerializeATupleList() {\r\n+        TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n+        String json = serializer.toJson(Arrays.asList(new Tuple(new Item(1l), 10.0)));\r\n+        assertEquals(\"[{\\\"item\\\":{\\\"id\\\":1},\\\"value\\\":10.0}]\", json);\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/test/java/br/ime/usp/commendans/itemtoitem/ItemVectorTest.java b/src/test/java/br/ime/usp/commendans/itemtoitem/ItemVectorTest.java\r\nnew file mode 100644\r\nindex 0000000..16e7191\r\n--- /dev/null\r\n+++ b/src/test/java/br/ime/usp/commendans/itemtoitem/ItemVectorTest.java\r\n@@ -0,0 +1,40 @@\r\n+package br.ime.usp.commendans.itemtoitem;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class ItemVectorTest {\r\n+\r\n+    @Test\r\n+    public void test() {\r\n+        Item item1 = new Item(1l);\r\n+        Item item2 = new Item(2l);\r\n+        Item item3 = new Item(3l);\r\n+        Item item4 = new Item(4l);\r\n+        List<Tuple> tuples = asList(new Tuple(item1, 11.0), new Tuple(item2, 8.0), new Tuple(item3, 2.0));\r\n+        ItemVector itemVector1 = new ItemVector(new HashSet<Tuple>(tuples));\r\n+        tuples = asList(new Tuple(item4, 10.0), new Tuple(item3, 7.0));\r\n+        ItemVector itemVector2 = new ItemVector(new HashSet<Tuple>(tuples));\r\n+        \r\n+        ItemVector merge = itemVector1.merge(itemVector2);\r\n+        List<Tuple> expected = asList(new Tuple(item1, 11.0), new Tuple(item4, 10.0), new Tuple(item3, 9.0), new Tuple(item2, 8.0));\r\n+        assertEquals(expected, merge.getTuples());\r\n+        \r\n+    }\r\n+\r\n+    private List<Tuple> asList(Tuple ... tuples) {\r\n+        ArrayList<Tuple> tuplesList = new ArrayList<Tuple>();\r\n+        for (int i = 0; i < tuples.length; i++) {\r\n+            tuplesList.add(tuples[i]);\r\n+        }\r\n+        return tuplesList;\r\n+    }\r\n+\r\n+}\r\n'),(10,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemVector.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemVector.java\r\nindex fd0fad6..a44262c 100644\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemVector.java\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemVector.java\r\n@@ -25,10 +25,6 @@ public class ItemVector {\r\n         return Collections.unmodifiableList(tuples);\r\n     }\r\n     \r\n-    private void remove(Tuple t) {\r\n-        tuples.remove(t);\r\n-    }\r\n-\r\n     public ItemVector merge(ItemVector other) {\r\n         Set<Tuple> tuples = new HashSet<Tuple>();\r\n         Set<Tuple> tuplesToRemove = new HashSet<Tuple>();\r\ndiff --git a/src/test/java/br/ime/usp/commendans/dao/UserDaoTest.java b/src/test/java/br/ime/usp/commendans/dao/UserDaoTest.java\r\nindex 60eeacf..10e234b 100644\r\n--- a/src/test/java/br/ime/usp/commendans/dao/UserDaoTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/dao/UserDaoTest.java\r\n@@ -1,22 +1,18 @@\r\n package br.ime.usp.commendans.dao;\r\n \r\n-import java.util.List;\r\n-\r\n import org.hibernate.Session;\r\n import org.hibernate.SessionFactory;\r\n import org.hibernate.cfg.Configuration;\r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.model.User;\r\n-\r\n public class UserDaoTest {\r\n \r\n     @Test\r\n-    public void test() {\r\n+    public void shouldFindUsers() {\r\n         SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n         Session session = sf.openSession();\r\n         UserDao userDao = new UserDao(session);\r\n-        List<User> users = userDao.list();\r\n+        userDao.list();\r\n     }\r\n \r\n }\r\n'),(11,'\r\ndiff --git a/.gitignore b/.gitignore\r\nindex 097b6a7..0030ccc 100644\r\n--- a/.gitignore\r\n+++ b/.gitignore\r\n@@ -2,3 +2,4 @@\r\n *.class\r\n build/\r\n .~lock*\r\n+target/\r\ndiff --git a/src/main/java/br/ime/usp/commendans/components/SessionCreator.java b/src/main/java/br/ime/usp/commendans/components/SessionCreator.java\r\nnew file mode 100644\r\nindex 0000000..6ca9a2a\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/components/SessionCreator.java\r\n@@ -0,0 +1,38 @@\r\n+package br.ime.usp.commendans.components;\r\n+\r\n+import javax.annotation.PostConstruct;\r\n+import javax.annotation.PreDestroy;\r\n+\r\n+import org.hibernate.Session;\r\n+import org.hibernate.SessionFactory;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n+import br.com.caelum.vraptor.ioc.RequestScoped;\r\n+\r\n+@Component @RequestScoped\r\n+public class SessionCreator implements ComponentFactory<Session> {\r\n+    \r\n+    private final SessionFactory sf;\r\n+    private org.hibernate.classic.Session session;\r\n+\r\n+    public SessionCreator(SessionFactory sf) {\r\n+        this.sf = sf;\r\n+    }\r\n+\r\n+    @Override\r\n+    public Session getInstance() {\r\n+        return session;\r\n+    }\r\n+    \r\n+    @PostConstruct\r\n+    public void create() {\r\n+        session = sf.openSession();\r\n+    }\r\n+    \r\n+    @PreDestroy\r\n+    public void destroy() {\r\n+        session.close();\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java b/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java\r\nnew file mode 100644\r\nindex 0000000..5a2243d\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java\r\n@@ -0,0 +1,52 @@\r\n+package br.ime.usp.commendans.components;\r\n+\r\n+import javax.annotation.PostConstruct;\r\n+import javax.annotation.PreDestroy;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+import org.hibernate.SessionFactory;\r\n+import org.hibernate.cfg.Configuration;\r\n+\r\n+import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n+\r\n+@Component @ApplicationScoped\r\n+public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n+\r\n+    private SessionFactory sessionFactory;\r\n+    private static Logger LOG = Logger.getLogger(SessionFactoryCreator.class);\r\n+    \r\n+    public SessionFactoryCreator() {\r\n+    }\r\n+\r\n+    @Override\r\n+    public SessionFactory getInstance() {\r\n+        return sessionFactory;\r\n+    }\r\n+    \r\n+    @PreDestroy\r\n+    public void destroy() {\r\n+        sessionFactory.close();\r\n+    }\r\n+    \r\n+    @PostConstruct\r\n+    public void create() {\r\n+        //if (env.getName().equals(\"heroku\")) {\r\n+        if (true) {\r\n+            LOG.info(\"using heroku specific confs\");\r\n+            Configuration configuration = new Configuration().configure(\"/hibernate-heroku.cfg.xml\");\r\n+            configuration.setProperty(\"hibernate.connection.url\", \"jdbc:mysql://localhost/commendans\");\r\n+            configuration.setProperty(\"hibernate.connection.driver_class\", \"com.mysql.jdbc.Driver\");\r\n+            configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.MySQL5InnoDBDialect\");\r\n+            configuration.setProperty(\"hibernate.connection.username\", \"root\");\r\n+            configuration.setProperty(\"hibernate.connection.password\", \"\");\r\n+            \r\n+            sessionFactory = configuration.buildSessionFactory();\r\n+        } else {\r\n+            LOG.info(\"using heroku specific normal confs\");\r\n+            sessionFactory = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n+        }\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/resources/hibernate-heroku.cfg.xml b/src/main/resources/hibernate-heroku.cfg.xml\r\nnew file mode 100644\r\nindex 0000000..3c9b209\r\n--- /dev/null\r\n+++ b/src/main/resources/hibernate-heroku.cfg.xml\r\n@@ -0,0 +1,23 @@\r\n+<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n+<!DOCTYPE hibernate-configuration PUBLIC\r\n+        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n+        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n+<hibernate-configuration>\r\n+    <session-factory>\r\n+    \r\n+    	<!-- connection pool configs -->\r\n+	    <property name=\"hibernate.c3p0.acquire_increment\">1</property> \r\n+		<property name=\"hibernate.c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n+		<property name=\"hibernate.c3p0.max_size\">15</property> \r\n+		<property name=\"hibernate.c3p0.min_size\">1</property> \r\n+		<property name=\"hibernate.c3p0.timeout\">600</property>\r\n+    \r\n+        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n+        <property name=\"show_sql\">false</property>\r\n+        <property name=\"format_sql\">false</property>\r\n+\r\n+        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.User\" />\r\n+\r\n+    </session-factory>\r\n+</hibernate-configuration>\r\ndiff --git a/src/main/webapp/WEB-INF/web.xml b/src/main/webapp/WEB-INF/web.xml\r\nindex 4526131..3314d42 100644\r\n--- a/src/main/webapp/WEB-INF/web.xml\r\n+++ b/src/main/webapp/WEB-INF/web.xml\r\n@@ -5,11 +5,4 @@\r\n 	id=\"WebApp_ID\" version=\"3.0\">\r\n 	<display-name>commendans</display-name>\r\n 	\r\n-	<context-param>\r\n-		<param-name>br.com.caelum.vraptor.packages</param-name>\r\n-		<param-value>\r\n-	        br.com.caelum.vraptor.util.hibernate\r\n-        </param-value>\r\n-	</context-param>\r\n-	\r\n </web-app>\r\n\\ No newline at end of file\r\ndiff --git a/src/test/java/br/ime/usp/commendans/components/SessionFactoryCreatorTest.java b/src/test/java/br/ime/usp/commendans/components/SessionFactoryCreatorTest.java\r\nnew file mode 100644\r\nindex 0000000..b3eae02\r\n--- /dev/null\r\n+++ b/src/test/java/br/ime/usp/commendans/components/SessionFactoryCreatorTest.java\r\n@@ -0,0 +1,20 @@\r\n+package br.ime.usp.commendans.components;\r\n+\r\n+import static org.mockito.Mockito.mock;\r\n+import static org.mockito.Mockito.when;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import br.com.caelum.vraptor.environment.Environment;\r\n+\r\n+public class SessionFactoryCreatorTest {\r\n+\r\n+    @Test\r\n+    public void shouldGetSessionFactory() {\r\n+        Environment env = mock(Environment.class);\r\n+        when(env.getName()).thenReturn(\"heroku\");\r\n+        SessionFactoryCreator sfc = new SessionFactoryCreator(env);\r\n+        sfc.create();\r\n+    }\r\n+\r\n+}\r\n'),(12,'\r\ndiff --git a/src/test/java/br/ime/usp/commendans/components/SessionFactoryCreatorTest.java b/src/test/java/br/ime/usp/commendans/components/SessionFactoryCreatorTest.java\r\nindex b3eae02..e1602f7 100644\r\n--- a/src/test/java/br/ime/usp/commendans/components/SessionFactoryCreatorTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/components/SessionFactoryCreatorTest.java\r\n@@ -1,19 +1,12 @@\r\n package br.ime.usp.commendans.components;\r\n \r\n-import static org.mockito.Mockito.mock;\r\n-import static org.mockito.Mockito.when;\r\n-\r\n import org.junit.Test;\r\n \r\n-import br.com.caelum.vraptor.environment.Environment;\r\n-\r\n public class SessionFactoryCreatorTest {\r\n \r\n     @Test\r\n     public void shouldGetSessionFactory() {\r\n-        Environment env = mock(Environment.class);\r\n-        when(env.getName()).thenReturn(\"heroku\");\r\n-        SessionFactoryCreator sfc = new SessionFactoryCreator(env);\r\n+        SessionFactoryCreator sfc = new SessionFactoryCreator();\r\n         sfc.create();\r\n     }\r\n \r\n'),(13,'\r\ndiff --git a/.gitignore b/.gitignore\r\nindex 0030ccc..8b7a95d 100644\r\n--- a/.gitignore\r\n+++ b/.gitignore\r\n@@ -3,3 +3,5 @@\r\n build/\r\n .~lock*\r\n target/\r\n+src/main/webapp/WEB-INF/lib/\r\n+src/main/webapp/WEB-INF/classes/\r\ndiff --git a/Procfile b/Procfile\r\nnew file mode 100644\r\nindex 0000000..8459100\r\n--- /dev/null\r\n+++ b/Procfile\r\n@@ -0,0 +1 @@\r\n+web: sh target/bin/webapp\r\ndiff --git a/build.properties b/build.properties\r\nindex df0f435..042eebb 100644\r\n--- a/build.properties\r\n+++ b/build.properties\r\n@@ -11,7 +11,7 @@ tmp.classes.dir=${tmp.webinf.dir}/classes\r\n tmp.test-classes.dir=${tmp.dir}/test-classes\r\n \r\n artifacts.dir=${tmp.root}/artifacts/\r\n-war.file=recommender.war\r\n+war.file=commendans.war\r\n \r\n src.dir=src/main/java\r\n libs.dir=${webapp.dir}/WEB-INF/lib\r\ndiff --git a/build.xml b/build.xml\r\nindex 2fa36ad..20e9339 100644\r\n--- a/build.xml\r\n+++ b/build.xml\r\n@@ -1,4 +1,4 @@\r\n-<project name=\"Metric Miner\" default=\"war\" basedir=\".\" xmlns:ivy=\"antlib:org.apache.ivy.ant\">\r\n+<project name=\"Metric Miner\" default=\"resolve\" basedir=\".\" xmlns:ivy=\"antlib:org.apache.ivy.ant\">\r\n \r\n 	<property file=\"build.properties\" />\r\n \r\n@@ -20,10 +20,7 @@\r\n 	</target>\r\n \r\n 	<target name=\"clean\">\r\n-		<delete dir=\"${tmp.dir}\" />\r\n-		<delete>\r\n-	    	<fileset dir=\"${libs.dir}\" includes=\"*.jar\"/>\r\n-		</delete>\r\n+		<delete dir=\"${tmp.root}\" />\r\n 	</target>\r\n 	\r\n 	<!-- resolve dependencies -->\r\n@@ -42,19 +39,21 @@\r\n 		<javac destdir=\"${tmp.classes.dir}\" srcdir=\"${src.dir}\" classpathref=\"compile.classpath\" debug=\"true\" encoding=\"UTF-8\" />\r\n 	</target>\r\n \r\n-	<target name=\"war\" depends=\"compile\">\r\n+	<target name=\"heroku-war\" depends=\"compile\">\r\n 		<delete file=\"${artifacts.dir}/${war.file}\" />\r\n 		<copy todir=\"${tmp.classes.dir}\">\r\n 			<fileset dir=\"${resources.dir}\" />\r\n 		</copy>\r\n-		<move file=\"${tmp.classes.dir}/log4j.server.xml\" tofile=\"${tmp.classes.dir}/log4j.xml\"/>\r\n+		\r\n+		<copy file=\"${webapp.dir}/WEB-INF/web.xml\" tofile=\"${webapp.dir}/WEB-INF/web-dev.xml\"/>\r\n+		\r\n+		<copy file=\"${webapp.dir}/WEB-INF/web-heroku.xml\" tofile=\"${webapp.dir}/WEB-INF/web.xml\"/>\r\n \r\n 		<war destfile=\"${artifacts.dir}/${war.file}\" webxml=\"${webapp.dir}/WEB-INF/web.xml\" compress=\"true\">\r\n-			<fileset dir=\"${webapp.dir}\">\r\n-				<exclude name=\"WEB-INF/web.xml\" />\r\n-			</fileset>\r\n 			<classes dir=\"${tmp.classes.dir}\" />\r\n 		</war>\r\n+		\r\n+		<copy file=\"${webapp.dir}/WEB-INF/web-dev.xml\" tofile=\"${webapp.dir}/WEB-INF/web.xml\"/>\r\n 	</target>\r\n \r\n </project>\r\n\\ No newline at end of file\r\ndiff --git a/ivy.xml b/ivy.xml\r\nindex f279995..5090548 100644\r\n--- a/ivy.xml\r\n+++ b/ivy.xml\r\n@@ -7,6 +7,8 @@\r\n 	</configurations>\r\n \r\n 	<dependencies>\r\n+		<dependency org=\"com.github.jsimone\" name=\"webapp-runner\" rev=\"7.0.22.1\"/>\r\n+	\r\n 		<!-- Hibernate and other stuff -->\r\n 		<dependency org=\"org.hibernate\" name=\"hibernate-core\" rev=\"3.6.10.Final\"/>\r\n 		<dependency org=\"org.hibernate.javax.persistence\" name=\"hibernate-jpa-2.0-api\" rev=\"1.0.0.Final\" conf=\"default\" />\r\ndiff --git a/pom.xml b/pom.xml\r\nnew file mode 100644\r\nindex 0000000..c16b660\r\n--- /dev/null\r\n+++ b/pom.xml\r\n@@ -0,0 +1,217 @@\r\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n+	<modelVersion>4.0.0</modelVersion>\r\n+	<groupId>heroku-blank</groupId>\r\n+	<artifactId>heroku-blank</artifactId>\r\n+	<version>0.0.1-SNAPSHOT</version>\r\n+	<name>heroku-blank</name>\r\n+\r\n+	<properties>\r\n+		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n+	</properties>\r\n+\r\n+	<build>\r\n+		<outputDirectory>${basedir}/src/main/webapp/WEB-INF/classes</outputDirectory>\r\n+		<plugins>\r\n+			<plugin>\r\n+				<artifactId>maven-compiler-plugin</artifactId>\r\n+				<version>2.3.2</version>\r\n+				<configuration>\r\n+					<source>1.6</source>\r\n+					<target>1.6</target>\r\n+					<encoding>UTF-8</encoding>\r\n+				</configuration>\r\n+			</plugin>\r\n+            \r\n+            <plugin>\r\n+                <artifactId>maven-eclipse-plugin</artifactId>\r\n+                <version>2.8</version>\r\n+                <configuration>\r\n+                    <downloadSources>true</downloadSources>\r\n+                    <downloadJavadocs>true</downloadJavadocs>\r\n+                </configuration>\r\n+            </plugin>\r\n+            \r\n+            <plugin>\r\n+				<artifactId>maven-dependency-plugin</artifactId>\r\n+				<executions>\r\n+					<execution>\r\n+						<phase>install</phase>\r\n+						<goals>\r\n+							<goal>copy-dependencies</goal>\r\n+						</goals>\r\n+						<configuration>\r\n+							<outputDirectory>src/main/webapp/WEB-INF/lib</outputDirectory>\r\n+						</configuration>\r\n+					</execution>\r\n+				</executions>\r\n+				</plugin>\r\n+            \r\n+			<plugin>\r\n+				<groupId>org.apache.maven.plugins</groupId>\r\n+				<artifactId>maven-war-plugin</artifactId>\r\n+				<version>2.1.1</version>\r\n+			</plugin>\r\n+			<plugin>\r\n+				<groupId>org.mortbay.jetty</groupId>\r\n+				<artifactId>maven-jetty-plugin</artifactId>\r\n+				<version>6.1.14</version>\r\n+				<configuration>\r\n+					<scanIntervalSeconds>3</scanIntervalSeconds>\r\n+					<stopKey>foo</stopKey>\r\n+					<stopPort>9999</stopPort>\r\n+					<webAppConfig>\r\n+						<contextPath>/</contextPath>\r\n+					</webAppConfig>\r\n+				</configuration>\r\n+			</plugin>\r\n+            <plugin>\r\n+                <groupId>org.codehaus.mojo</groupId>\r\n+                <artifactId>appassembler-maven-plugin</artifactId>\r\n+                <version>1.1.1</version>\r\n+                <executions>\r\n+                    <execution>\r\n+                        <phase>package</phase>\r\n+                        <goals>\r\n+                            <goal>assemble</goal>\r\n+                        </goals>\r\n+                        <configuration>\r\n+                            <assembleDirectory>target</assembleDirectory>\r\n+                            <extraJvmArguments>-Xmx512m</extraJvmArguments>\r\n+                            <programs>\r\n+                                <program>\r\n+                                    <mainClass>Main</mainClass>\r\n+                                    <name>webapp</name>\r\n+                                </program>\r\n+                            </programs>\r\n+                        </configuration>\r\n+                    </execution>\r\n+                </executions>\r\n+            </plugin>\r\n+		</plugins>\r\n+	</build>\r\n+\r\n+	<dependencies>\r\n+		<dependency>\r\n+		  <groupId>org.hibernate</groupId>\r\n+		  <artifactId>hibernate-core</artifactId>\r\n+		  <version>3.6.10.Final</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.hibernate.javax.persistence</groupId>\r\n+		  <artifactId>hibernate-jpa-2.0-api</artifactId>\r\n+		  <version>1.0.0.Final</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.hibernate</groupId>\r\n+		  <artifactId>hibernate-c3p0</artifactId>\r\n+		  <version>3.6.10.Final</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>javax.transaction</groupId>\r\n+		  <artifactId>jta</artifactId>\r\n+		  <version>1.1</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>mysql</groupId>\r\n+		  <artifactId>mysql-connector-java</artifactId>\r\n+		  <version>5.1.18</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>c3p0</groupId>\r\n+		  <artifactId>c3p0</artifactId>\r\n+		  <version>0.9.1</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.hibernate</groupId>\r\n+		  <artifactId>hibernate-validator</artifactId>\r\n+		  <version>4.3.0.Final</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>net.sf.ehcache</groupId>\r\n+		  <artifactId>ehcache-core</artifactId>\r\n+		  <version>2.5.3</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>br.com.caelum</groupId>\r\n+		  <artifactId>vraptor</artifactId>\r\n+		  <version>3.4.1</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.slf4j</groupId>\r\n+		  <artifactId>slf4j-api</artifactId>\r\n+		  <version>1.6.1</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>log4j</groupId>\r\n+		  <artifactId>log4j</artifactId>\r\n+		  <version>1.2.16</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.slf4j</groupId>\r\n+		  <artifactId>slf4j-log4j12</artifactId>\r\n+		  <version>1.6.1</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.mortbay.jetty</groupId>\r\n+		  <artifactId>servlet-api-2.5</artifactId>\r\n+		  <version>6.1H.14.1</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.glassfish.web</groupId>\r\n+		  <artifactId>jstl-impl</artifactId>\r\n+		  <version>1.2</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.mortbay.jetty</groupId>\r\n+		  <artifactId>servlet-api</artifactId>\r\n+		  <version>3.0.pre4</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>javassist</groupId>\r\n+		  <artifactId>javassist</artifactId>\r\n+		  <version>3.12.1.GA</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>commons-io</groupId>\r\n+		  <artifactId>commons-io</artifactId>\r\n+		  <version>2.0.1</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>com.google.guava</groupId>\r\n+		  <artifactId>guava</artifactId>\r\n+		  <version>r09</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>com.google.code.gson</groupId>\r\n+		  <artifactId>gson</artifactId>\r\n+		  <version>2.2.2</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>junit</groupId>\r\n+		  <artifactId>junit</artifactId>\r\n+		  <version>4.8.2</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.mockito</groupId>\r\n+		  <artifactId>mockito-all</artifactId>\r\n+		  <version>1.8.5</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.hsqldb</groupId>\r\n+		  <artifactId>hsqldb</artifactId>\r\n+		  <version>2.2.8</version>\r\n+		</dependency>\r\n+		<!-- Provided dependencies -->\r\n+	</dependencies>\r\n+\r\n+	<reporting>\r\n+		<plugins>\r\n+			<plugin>\r\n+				<groupId>org.codehaus.mojo</groupId>\r\n+				<artifactId>cobertura-maven-plugin</artifactId>\r\n+				<version>2.5.1</version>\r\n+			</plugin>\r\n+		</plugins>\r\n+	</reporting>\r\n+</project>\r\n\\ No newline at end of file\r\ndiff --git a/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java b/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java\r\nindex 5a2243d..784f216 100644\r\n--- a/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java\r\n+++ b/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java\r\n@@ -1,7 +1,11 @@\r\n package br.ime.usp.commendans.components;\r\n \r\n+import java.net.URI;\r\n+import java.net.URISyntaxException;\r\n+\r\n import javax.annotation.PostConstruct;\r\n import javax.annotation.PreDestroy;\r\n+import javax.servlet.ServletContext;\r\n \r\n import org.apache.log4j.Logger;\r\n import org.hibernate.SessionFactory;\r\n@@ -16,8 +20,10 @@ public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n \r\n     private SessionFactory sessionFactory;\r\n     private static Logger LOG = Logger.getLogger(SessionFactoryCreator.class);\r\n+    private String env;\r\n     \r\n-    public SessionFactoryCreator() {\r\n+    public SessionFactoryCreator(ServletContext context) {\r\n+        env = context.getInitParameter(\"environment\");\r\n     }\r\n \r\n     @Override\r\n@@ -32,15 +38,29 @@ public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n     \r\n     @PostConstruct\r\n     public void create() {\r\n-        //if (env.getName().equals(\"heroku\")) {\r\n-        if (true) {\r\n+        if (env.equals(\"heroku\")) {\r\n+            \r\n+            URI dbUri;\r\n+            try {\r\n+                dbUri = new URI(System.getenv(\"DATABASE_URL\"));\r\n+            } catch (URISyntaxException e) {\r\n+                throw new RuntimeException(e);\r\n+            }\r\n+\r\n+            String username = dbUri.getUserInfo().split(\":\")[0];\r\n+            String password = dbUri.getUserInfo().split(\":\")[1];\r\n+            String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + \':\' + dbUri.getPort() + \"/\" + dbUri.getPort();\r\n+            \r\n             LOG.info(\"using heroku specific confs\");\r\n+            LOG.info(\"username: \" + username);\r\n+            LOG.info(\"password: \" + password);\r\n+            LOG.info(\"dbUrl: \" + dbUrl);\r\n             Configuration configuration = new Configuration().configure(\"/hibernate-heroku.cfg.xml\");\r\n-            configuration.setProperty(\"hibernate.connection.url\", \"jdbc:mysql://localhost/commendans\");\r\n+            configuration.setProperty(\"hibernate.connection.url\", dbUrl);\r\n             configuration.setProperty(\"hibernate.connection.driver_class\", \"com.mysql.jdbc.Driver\");\r\n-            configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.MySQL5InnoDBDialect\");\r\n-            configuration.setProperty(\"hibernate.connection.username\", \"root\");\r\n-            configuration.setProperty(\"hibernate.connection.password\", \"\");\r\n+            configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\r\n+            configuration.setProperty(\"hibernate.connection.username\", username);\r\n+            configuration.setProperty(\"hibernate.connection.password\", password);\r\n             \r\n             sessionFactory = configuration.buildSessionFactory();\r\n         } else {\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/IndexController.java b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\nindex 6ad9621..715d829 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n@@ -1,22 +1,34 @@\r\n package br.ime.usp.commendans.controller;\r\n \r\n+import org.hibernate.Session;\r\n+\r\n import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n+import br.ime.usp.commendans.util.DataImporter;\r\n \r\n \r\n @Resource\r\n public class IndexController {\r\n     \r\n     private final Result result;\r\n+    private final Session session;\r\n \r\n-    public IndexController(Result result) {\r\n+    public IndexController(Result result, Session session) {\r\n         this.result = result;\r\n+        this.session = session;\r\n     }\r\n     \r\n     @Get(\"/\")\r\n     public void index() {\r\n         result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n     }\r\n+    \r\n+    @Get(\"/import/askjdhakjshdakjshd\")\r\n+    public void importData() {\r\n+        DataImporter dataImporter = new DataImporter(session);\r\n+        dataImporter.importData(\"/orders.csv\");\r\n+        result.use(Results.http()).body(\"<html><body>finished persisting</body></html>\");\r\n+    }\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\nindex 9803810..b3f8061 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n@@ -31,17 +31,19 @@ public class ItemToItemController {\r\n     public void recommend(Long itemId) {\r\n         Item item = itemDao.find(itemId);\r\n         ItemVector recommendend = itemToItem.recommendendItemsFor(item);\r\n-        result.use(Results.http())\r\n-            .addHeader(\"content-type\", \"application/json\")\r\n-            .body(serializer.toJson(recommendend.getTuples()));\r\n+        serializedResult(recommendend.getTuples());\r\n     }\r\n     \r\n     @Get(\"/recommend/items/\")\r\n     public void recommend(List<Long> itemsIds) {\r\n         List<Item> items = itemDao.find(itemsIds);\r\n         List<Tuple> recommendend = itemToItem.recommendendItemsFor(items).getTuples();\r\n+        serializedResult(recommendend);\r\n+    }\r\n+\r\n+    private void serializedResult(List<Tuple> recommendend) {\r\n         result.use(Results.http())\r\n-        .addHeader(\"content-type\", \"application/json\")\r\n-        .body(serializer.toJson(recommendend));\r\n+            .addHeader(\"content-type\", \"application/json\")\r\n+            .body(serializer.toJson(recommendend));\r\n     }\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/util/DataImporter.java b/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\nindex 8b61fad..9591128 100644\r\n--- a/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\n+++ b/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\n@@ -21,26 +21,25 @@ import br.ime.usp.commendans.model.User;\r\n public class DataImporter {\r\n     \r\n     private final Session session;\r\n-    private static Logger logger;\r\n+    private static Logger logger = Logger.getLogger(DataImporter.class);\r\n \r\n     public DataImporter(Session session) {\r\n         this.session = session;\r\n     }\r\n \r\n     public static void main(String[] args) throws IOException {\r\n-        logger = Logger.getLogger(DataImporter.class);\r\n         SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n         Session session = sf.openSession();\r\n         DataImporter dataImporter = new DataImporter(session);\r\n         dataImporter.importData(\"/orders.csv\");\r\n     }\r\n \r\n-    private void importData(String file) throws IOException {\r\n+    public void importData(String file) {\r\n         HashMap<Long, User> users = new HashMap<Long, User>();\r\n         HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n         InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n         BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n-        String line = reader.readLine();\r\n+        String line = safeReadLine(reader);\r\n         \r\n         while (line != null) {\r\n             logger.info(line);\r\n@@ -56,7 +55,7 @@ public class DataImporter {\r\n                 item = new Item(itemId);\r\n             }\r\n             user.add(item);\r\n-            line = reader.readLine();\r\n+            line = safeReadLine(reader);\r\n             users.put(id, user);\r\n             items.put(itemId, item);\r\n         }\r\n@@ -69,11 +68,18 @@ public class DataImporter {\r\n         \r\n         Collection<User> allUsers = users.values();\r\n         for (User user : allUsers) {\r\n-            System.out.println(user.itemsBought());\r\n             session.save(user);\r\n         }\r\n         session.getTransaction().commit();\r\n         logger.info(\"finished persisting\");\r\n     }\r\n \r\n+    private String safeReadLine(BufferedReader reader) {\r\n+        try {\r\n+            return reader.readLine();\r\n+        } catch (IOException e) {\r\n+            throw new RuntimeException(\"could not read file\", e);\r\n+        }\r\n+    }\r\n+\r\n }\r\ndiff --git a/src/main/resources/hibernate-heroku.cfg.xml b/src/main/resources/hibernate-heroku.cfg.xml\r\nindex 3c9b209..651ee5f 100644\r\n--- a/src/main/resources/hibernate-heroku.cfg.xml\r\n+++ b/src/main/resources/hibernate-heroku.cfg.xml\r\n@@ -12,7 +12,7 @@\r\n 		<property name=\"hibernate.c3p0.min_size\">1</property> \r\n 		<property name=\"hibernate.c3p0.timeout\">600</property>\r\n     \r\n-        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n \r\ndiff --git a/src/main/webapp/WEB-INF/web-dev.xml b/src/main/webapp/WEB-INF/web-dev.xml\r\nnew file mode 100644\r\nindex 0000000..58309bd\r\n--- /dev/null\r\n+++ b/src/main/webapp/WEB-INF/web-dev.xml\r\n@@ -0,0 +1,52 @@\r\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n+<!--\r\n+  Licensed to the Apache Software Foundation (ASF) under one or more\r\n+  contributor license agreements.  See the NOTICE file distributed with\r\n+  this work for additional information regarding copyright ownership.\r\n+  The ASF licenses this file to You under the Apache License, Version 2.0\r\n+  (the \"License\"); you may not use this file except in compliance with\r\n+  the License.  You may obtain a copy of the License at\r\n+\r\n+      http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+  Unless required by applicable law or agreed to in writing, software\r\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+  See the License for the specific language governing permissions and\r\n+  limitations under the License.\r\n+-->\r\n+<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+  xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\r\n+                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n+  version=\"3.0\">\r\n+\r\n+    <servlet>\r\n+        <servlet-name>default</servlet-name>\r\n+        <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\r\n+        <init-param>\r\n+            <param-name>debug</param-name>\r\n+            <param-value>0</param-value>\r\n+        </init-param>\r\n+        <init-param>\r\n+            <param-name>listings</param-name>\r\n+            <param-value>false</param-value>\r\n+        </init-param>\r\n+        <load-on-startup>1</load-on-startup>\r\n+    </servlet>\r\n+\r\n+\r\n+\r\n+    <session-config>\r\n+        <session-timeout>30</session-timeout>\r\n+    </session-config>\r\n+\r\n+    \r\n+    <display-name>commendans</display-name>\r\n+	\r\n+	<context-param>\r\n+        <param-name>environment</param-name>\r\n+        <param-value>heroku</param-value>\r\n+    </context-param>\r\n+\r\n+</web-app>\r\ndiff --git a/src/main/webapp/WEB-INF/web-heroku.xml b/src/main/webapp/WEB-INF/web-heroku.xml\r\nnew file mode 100644\r\nindex 0000000..fd4a5d6\r\n--- /dev/null\r\n+++ b/src/main/webapp/WEB-INF/web-heroku.xml\r\n@@ -0,0 +1,37 @@\r\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n+<!--\r\n+  Licensed to the Apache Software Foundation (ASF) under one or more\r\n+  contributor license agreements.  See the NOTICE file distributed with\r\n+  this work for additional information regarding copyright ownership.\r\n+  The ASF licenses this file to You under the Apache License, Version 2.0\r\n+  (the \"License\"); you may not use this file except in compliance with\r\n+  the License.  You may obtain a copy of the License at\r\n+\r\n+      http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+  Unless required by applicable law or agreed to in writing, software\r\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+  See the License for the specific language governing permissions and\r\n+  limitations under the License.\r\n+-->\r\n+<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+  xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\r\n+                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n+  version=\"3.0\">\r\n+\r\n+\r\n+    <session-config>\r\n+        <session-timeout>30</session-timeout>\r\n+    </session-config>\r\n+\r\n+    \r\n+    <display-name>commendans</display-name>\r\n+	\r\n+	<context-param>\r\n+        <param-name>environment</param-name>\r\n+        <param-value>heroku</param-value>\r\n+    </context-param>\r\n+\r\n+</web-app>\r\ndiff --git a/src/main/webapp/WEB-INF/web.xml b/src/main/webapp/WEB-INF/web.xml\r\nindex 3314d42..3db1738 100644\r\n--- a/src/main/webapp/WEB-INF/web.xml\r\n+++ b/src/main/webapp/WEB-INF/web.xml\r\n@@ -1,8 +1,39 @@\r\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-	xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"\r\n-	xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n-	id=\"WebApp_ID\" version=\"3.0\">\r\n-	<display-name>commendans</display-name>\r\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n+<!--\r\n+  Licensed to the Apache Software Foundation (ASF) under one or more\r\n+  contributor license agreements.  See the NOTICE file distributed with\r\n+  this work for additional information regarding copyright ownership.\r\n+  The ASF licenses this file to You under the Apache License, Version 2.0\r\n+  (the \"License\"); you may not use this file except in compliance with\r\n+  the License.  You may obtain a copy of the License at\r\n+\r\n+      http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+  Unless required by applicable law or agreed to in writing, software\r\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+  See the License for the specific language governing permissions and\r\n+  limitations under the License.\r\n+-->\r\n+<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+  xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\r\n+                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n+  version=\"3.0\">\r\n+\r\n+\r\n+\r\n+\r\n+    <session-config>\r\n+        <session-timeout>30</session-timeout>\r\n+    </session-config>\r\n+\r\n+    \r\n+    <display-name>commendans</display-name>\r\n 	\r\n-</web-app>\r\n\\ No newline at end of file\r\n+	<context-param>\r\n+        <param-name>environment</param-name>\r\n+        <param-value>heroku</param-value>\r\n+    </context-param>\r\n+\r\n+</web-app>\r\ndiff --git a/src/test/java/br/ime/usp/commendans/components/SessionFactoryCreatorTest.java b/src/test/java/br/ime/usp/commendans/components/SessionFactoryCreatorTest.java\r\nindex e1602f7..fa62e46 100644\r\n--- a/src/test/java/br/ime/usp/commendans/components/SessionFactoryCreatorTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/components/SessionFactoryCreatorTest.java\r\n@@ -1,12 +1,20 @@\r\n package br.ime.usp.commendans.components;\r\n \r\n+import static org.mockito.Mockito.mock;\r\n+import static org.mockito.Mockito.when;\r\n+\r\n+import javax.servlet.ServletContext;\r\n+\r\n+import org.junit.Ignore;\r\n import org.junit.Test;\r\n \r\n public class SessionFactoryCreatorTest {\r\n \r\n-    @Test\r\n+    @Test @Ignore\r\n     public void shouldGetSessionFactory() {\r\n-        SessionFactoryCreator sfc = new SessionFactoryCreator();\r\n+        ServletContext context = mock(ServletContext.class);\r\n+        when(context.getInitParameter(\"environment\")).thenReturn(\"heroku\");\r\n+        SessionFactoryCreator sfc = new SessionFactoryCreator(context);\r\n         sfc.create();\r\n     }\r\n \r\n'),(14,'\r\ndiff --git a/ivy.xml b/ivy.xml\r\nindex 5090548..11425c9 100644\r\n--- a/ivy.xml\r\n+++ b/ivy.xml\r\n@@ -33,6 +33,10 @@\r\n \r\n 		<!-- commendans dependencies -->\r\n 		<dependency org=\"com.google.code.gson\" name=\"gson\" rev=\"2.2.2\"/>\r\n+		<dependency org=\"com.google.code.gson\" name=\"gson\" rev=\"2.2.2\"/>\r\n+		\r\n+		<dependency org=\"org.eclipse.jetty\" name=\"jetty-webapp\" rev=\"7.4.4.v20110707\"/>\r\n+		<dependency org=\"org.mortbay.jetty\" name=\"jsp-2.1-glassfish\" rev=\"2.1.v20100127\" />\r\n 		\r\n 		<!-- Test dependencies -->\r\n 		<dependency org=\"junit\" name=\"junit\" rev=\"4.8.2\" conf=\"test->default\" />\r\ndiff --git a/pom.xml b/pom.xml\r\nindex c16b660..2581208 100644\r\n--- a/pom.xml\r\n+++ b/pom.xml\r\n@@ -51,6 +51,9 @@\r\n 				<groupId>org.apache.maven.plugins</groupId>\r\n 				<artifactId>maven-war-plugin</artifactId>\r\n 				<version>2.1.1</version>\r\n+				<configuration>\r\n+    					<webXml>src/main/webapp/WEB-INF/web-heroku.xml</webXml>        \r\n+  				</configuration>\r\n 			</plugin>\r\n 			<plugin>\r\n 				<groupId>org.mortbay.jetty</groupId>\r\n@@ -80,7 +83,7 @@\r\n                             <extraJvmArguments>-Xmx512m</extraJvmArguments>\r\n                             <programs>\r\n                                 <program>\r\n-                                    <mainClass>Main</mainClass>\r\n+                                    <mainClass>br.ime.usp.commendans.runner.Runner</mainClass>\r\n                                     <name>webapp</name>\r\n                                 </program>\r\n                             </programs>\r\n@@ -202,6 +205,16 @@\r\n 		  <artifactId>hsqldb</artifactId>\r\n 		  <version>2.2.8</version>\r\n 		</dependency>\r\n+		<dependency>\r\n+			<groupId>org.eclipse.jetty</groupId>\r\n+			<artifactId>jetty-webapp</artifactId>\r\n+			<version>7.4.4.v20110707</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+			<groupId>org.mortbay.jetty</groupId>\r\n+			<artifactId>jsp-2.1-glassfish</artifactId>\r\n+			<version>2.1.v20100127</version>\r\n+		</dependency>\r\n 		<!-- Provided dependencies -->\r\n 	</dependencies>\r\n \r\ndiff --git a/src/main/java/br/ime/usp/commendans/runner/Runner.java b/src/main/java/br/ime/usp/commendans/runner/Runner.java\r\nnew file mode 100644\r\nindex 0000000..aac2b87\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/runner/Runner.java\r\n@@ -0,0 +1,25 @@\r\n+package br.ime.usp.commendans.runner;\r\n+\r\n+import org.eclipse.jetty.server.Server;\r\n+import org.eclipse.jetty.webapp.WebAppContext;\r\n+\r\n+public class Runner {\r\n+    \r\n+    public static void main(String[] args) throws Exception {\r\n+        String webappDirLocation = \"src/main/webapp/\";\r\n+        String webPort = System.getenv(\"PORT\");\r\n+        if (webPort == null || webPort.isEmpty()) {\r\n+            webPort = \"8080\";\r\n+        }\r\n+        Server server = new Server(Integer.valueOf(webPort));\r\n+        WebAppContext root = new WebAppContext();\r\n+        root.setContextPath(\"/\");\r\n+        root.setDescriptor(webappDirLocation + \"/WEB-INF/web.xml\");\r\n+        root.setResourceBase(webappDirLocation);\r\n+        root.setParentLoaderPriority(true);\r\n+        server.setHandler(root);\r\n+        server.start();\r\n+        server.join();\r\n+    }\r\n+    \r\n+}\r\n\\ No newline at end of file\r\n'),(15,'\r\ndiff --git a/src/main/resources/hibernate-heroku.cfg.xml b/src/main/resources/hibernate-heroku.cfg.xml\r\nindex 651ee5f..e08943f 100644\r\n--- a/src/main/resources/hibernate-heroku.cfg.xml\r\n+++ b/src/main/resources/hibernate-heroku.cfg.xml\r\n@@ -6,11 +6,11 @@\r\n     <session-factory>\r\n     \r\n     	<!-- connection pool configs -->\r\n-	    <property name=\"hibernate.c3p0.acquire_increment\">1</property> \r\n-		<property name=\"hibernate.c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n-		<property name=\"hibernate.c3p0.max_size\">15</property> \r\n-		<property name=\"hibernate.c3p0.min_size\">1</property> \r\n-		<property name=\"hibernate.c3p0.timeout\">600</property>\r\n+<!-- 	    <property name=\"hibernate.c3p0.acquire_increment\">1</property>  -->\r\n+<!-- 		<property name=\"hibernate.c3p0.idle_test_period\">100</property> seconds  -->\r\n+<!-- 		<property name=\"hibernate.c3p0.max_size\">15</property>  -->\r\n+<!-- 		<property name=\"hibernate.c3p0.min_size\">1</property>  -->\r\n+<!-- 		<property name=\"hibernate.c3p0.timeout\">600</property> -->\r\n     \r\n         <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n         <property name=\"show_sql\">false</property>\r\n'),(16,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java b/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java\r\nindex 784f216..f9b69fe 100644\r\n--- a/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java\r\n+++ b/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java\r\n@@ -57,7 +57,7 @@ public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n             LOG.info(\"dbUrl: \" + dbUrl);\r\n             Configuration configuration = new Configuration().configure(\"/hibernate-heroku.cfg.xml\");\r\n             configuration.setProperty(\"hibernate.connection.url\", dbUrl);\r\n-            configuration.setProperty(\"hibernate.connection.driver_class\", \"com.mysql.jdbc.Driver\");\r\n+            configuration.setProperty(\"hibernate.connection.driver_class\", \"org.postgresql.Driver\");\r\n             configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\r\n             configuration.setProperty(\"hibernate.connection.username\", username);\r\n             configuration.setProperty(\"hibernate.connection.password\", password);\r\n'),(17,'\r\ndiff --git a/pom.xml b/pom.xml\r\nindex 2581208..6ad222e 100644\r\n--- a/pom.xml\r\n+++ b/pom.xml\r\n@@ -215,6 +215,12 @@\r\n 			<artifactId>jsp-2.1-glassfish</artifactId>\r\n 			<version>2.1.v20100127</version>\r\n 		</dependency>\r\n+		<dependency>\r\n+			<groupId>postgresql</groupId>\r\n+			<artifactId>postgresql</artifactId>\r\n+			<version>9.1-901.jdbc4</version>\r\n+		</dependency>\r\n+            \r\n 		<!-- Provided dependencies -->\r\n 	</dependencies>\r\n \r\n'),(18,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java b/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java\r\nindex f9b69fe..063965a 100644\r\n--- a/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java\r\n+++ b/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java\r\n@@ -49,7 +49,7 @@ public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n \r\n             String username = dbUri.getUserInfo().split(\":\")[0];\r\n             String password = dbUri.getUserInfo().split(\":\")[1];\r\n-            String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + \':\' + dbUri.getPort() + \"/\" + dbUri.getPort();\r\n+            String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + \':\' + dbUri.getPort()  + dbUri.getPath();\r\n             \r\n             LOG.info(\"using heroku specific confs\");\r\n             LOG.info(\"username: \" + username);\r\n'),(19,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java b/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java\r\nindex 063965a..d4f6138 100644\r\n--- a/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java\r\n+++ b/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java\r\n@@ -64,7 +64,6 @@ public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n             \r\n             sessionFactory = configuration.buildSessionFactory();\r\n         } else {\r\n-            LOG.info(\"using heroku specific normal confs\");\r\n             sessionFactory = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n         }\r\n     }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java b/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\nnew file mode 100644\r\nindex 0000000..d266150\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\n@@ -0,0 +1,23 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.hibernate.Session;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+\r\n+@Component\r\n+public class CustomerDao {\r\n+    private final Session session;\r\n+\r\n+    public CustomerDao(Session session) {\r\n+        this.session = session;\r\n+    }\r\n+    \r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public List<Customer> list() {\r\n+        session.createQuery(\"select customer from Customer customer join fetch customer.items\");\r\n+        return session.createCriteria(Customer.class).list();\r\n+    }\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/UserDao.java b/src/main/java/br/ime/usp/commendans/dao/UserDao.java\r\ndeleted file mode 100644\r\nindex bce6d2e..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/dao/UserDao.java\r\n+++ /dev/null\r\n@@ -1,23 +0,0 @@\r\n-package br.ime.usp.commendans.dao;\r\n-\r\n-import java.util.List;\r\n-\r\n-import org.hibernate.Session;\r\n-\r\n-import br.com.caelum.vraptor.ioc.Component;\r\n-import br.ime.usp.commendans.model.User;\r\n-\r\n-@Component\r\n-public class UserDao {\r\n-    private final Session session;\r\n-\r\n-    public UserDao(Session session) {\r\n-        this.session = session;\r\n-    }\r\n-    \r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public List<User> list() {\r\n-        session.createQuery(\"select user from User user join fetch user.items\");\r\n-        return session.createCriteria(User.class).list();\r\n-    }\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java b/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java\r\nindex 8f73c17..82935aa 100644\r\n--- a/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java\r\n@@ -6,18 +6,18 @@ import javax.annotation.PostConstruct;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n-import br.ime.usp.commendans.dao.UserDao;\r\n+import br.ime.usp.commendans.dao.CustomerDao;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n-import br.ime.usp.commendans.model.User;\r\n+import br.ime.usp.commendans.model.Customer;\r\n \r\n @Component\r\n public class ItemToItemRecommenderCreator implements ComponentFactory<ItemToItemRecommender> {\r\n-    private final UserDao dao;\r\n+    private final CustomerDao dao;\r\n     private final ItemToItemRecommenderFactory factory;\r\n     private ItemToItemRecommender itemToItemRecommender;\r\n \r\n-    public ItemToItemRecommenderCreator(UserDao dao, ItemToItemRecommenderFactory factory) {\r\n+    public ItemToItemRecommenderCreator(CustomerDao dao, ItemToItemRecommenderFactory factory) {\r\n         this.dao = dao;\r\n         this.factory = factory;\r\n     }\r\n@@ -29,8 +29,8 @@ public class ItemToItemRecommenderCreator implements ComponentFactory<ItemToItem\r\n     \r\n     @PostConstruct\r\n     public void create() {\r\n-        List<User> users = dao.list();\r\n-        for (User user : users) {\r\n+        List<Customer> users = dao.list();\r\n+        for (Customer user : users) {\r\n             factory.addUser(user);\r\n         }\r\n         this.itemToItemRecommender = factory.build();\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\nindex f174aec..6e2aa02 100644\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\n@@ -8,29 +8,29 @@ import java.util.Set;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.ime.usp.commendans.model.Item;\r\n-import br.ime.usp.commendans.model.User;\r\n+import br.ime.usp.commendans.model.Customer;\r\n \r\n @Component\r\n public class ItemToItemRecommenderFactory {\r\n \r\n-    private Map<Item, List<User>> usersByItemBought;\r\n+    private Map<Item, List<Customer>> usersByItemBought;\r\n     private HashMap<Item, ItemToItemsAssociation> associations;\r\n     \r\n     public ItemToItemRecommenderFactory() {\r\n-        usersByItemBought = new HashMap<Item, List<User>>();\r\n+        usersByItemBought = new HashMap<Item, List<Customer>>();\r\n     }\r\n     \r\n-    public void addUser(User user) {\r\n+    public void addUser(Customer user) {\r\n         List<Item> items = user.itemsBought();\r\n         for (Item item : items) {\r\n             store(item, user);\r\n         }\r\n     }\r\n \r\n-    private void store(Item item, User user) {\r\n-        List<User> users = usersByItemBought.get(item);\r\n+    private void store(Item item, Customer user) {\r\n+        List<Customer> users = usersByItemBought.get(item);\r\n         if (users == null) {\r\n-            users = new ArrayList<User>();\r\n+            users = new ArrayList<Customer>();\r\n         }\r\n         users.add(user);\r\n         usersByItemBought.put(item, users);\r\n@@ -42,8 +42,8 @@ public class ItemToItemRecommenderFactory {\r\n         Set<Item> items = usersByItemBought.keySet();\r\n         for (Item item : items) {\r\n             ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n-            List<User> users = usersByItemBought.get(item);\r\n-            for (User user : users) {\r\n+            List<Customer> users = usersByItemBought.get(item);\r\n+            for (Customer user : users) {\r\n                 List<Item> boughtTogether = user.itemsBought();\r\n                 System.out.println(item + \" -> \" +boughtTogether);\r\n                 for (Item i : boughtTogether) {\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Customer.java b/src/main/java/br/ime/usp/commendans/model/Customer.java\r\nnew file mode 100644\r\nindex 0000000..97fb7db\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Customer.java\r\n@@ -0,0 +1,45 @@\r\n+package br.ime.usp.commendans.model;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToMany;\r\n+\r\n+@Entity\r\n+public class Customer {\r\n+    \r\n+    @Id @GeneratedValue\r\n+    private Long id;\r\n+\r\n+    @ManyToMany\r\n+    private List<Item> items;\r\n+    \r\n+    @Deprecated\r\n+    public Customer() {\r\n+    }\r\n+\r\n+    public Customer(List<Item> items, Long id) {\r\n+        this.items = items;\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public List<Item> itemsBought() {\r\n+        return items;\r\n+    }\r\n+    \r\n+    @Override\r\n+    public String toString() {\r\n+        return \"User \" + id;\r\n+    }\r\n+\r\n+    public void add(Item item) {\r\n+        items.add(item);\r\n+    }\r\n+    \r\n+    public List<Item> getItems() {\r\n+        return items;\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/User.java b/src/main/java/br/ime/usp/commendans/model/User.java\r\ndeleted file mode 100644\r\nindex 121311c..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/model/User.java\r\n+++ /dev/null\r\n@@ -1,45 +0,0 @@\r\n-package br.ime.usp.commendans.model;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToMany;\r\n-\r\n-@Entity\r\n-public class User {\r\n-    \r\n-    @Id @GeneratedValue\r\n-    private Long id;\r\n-\r\n-    @ManyToMany\r\n-    private List<Item> items;\r\n-    \r\n-    @Deprecated\r\n-    public User() {\r\n-    }\r\n-\r\n-    public User(List<Item> items, Long id) {\r\n-        this.items = items;\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public List<Item> itemsBought() {\r\n-        return items;\r\n-    }\r\n-    \r\n-    @Override\r\n-    public String toString() {\r\n-        return \"User \" + id;\r\n-    }\r\n-\r\n-    public void add(Item item) {\r\n-        items.add(item);\r\n-    }\r\n-    \r\n-    public List<Item> getItems() {\r\n-        return items;\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/util/DataImporter.java b/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\nindex 9591128..53582cd 100644\r\n--- a/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\n+++ b/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\n@@ -16,7 +16,7 @@ import org.hibernate.SessionFactory;\r\n import org.hibernate.cfg.Configuration;\r\n \r\n import br.ime.usp.commendans.model.Item;\r\n-import br.ime.usp.commendans.model.User;\r\n+import br.ime.usp.commendans.model.Customer;\r\n \r\n public class DataImporter {\r\n     \r\n@@ -35,20 +35,20 @@ public class DataImporter {\r\n     }\r\n \r\n     public void importData(String file) {\r\n-        HashMap<Long, User> users = new HashMap<Long, User>();\r\n+        HashMap<Long, Customer> users = new HashMap<Long, Customer>();\r\n         HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n         InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n         BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n         String line = safeReadLine(reader);\r\n         \r\n         while (line != null) {\r\n-            logger.info(line);\r\n+            logger.debug(line);\r\n             List<String> row = Arrays.asList(line.split(\",\"));\r\n             long id = Long.parseLong(row.get(0));\r\n             long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n-            User user = users.get(id);\r\n+            Customer user = users.get(id);\r\n             if (user == null) {\r\n-                user = new User(new ArrayList<Item>(), id);\r\n+                user = new Customer(new ArrayList<Item>(), id);\r\n             }\r\n             Item item = items.get(itemId);\r\n             if (item == null) {\r\n@@ -60,18 +60,18 @@ public class DataImporter {\r\n             items.put(itemId, item);\r\n         }\r\n         \r\n-        logger.info(\"persisting\");\r\n+        logger.debug(\"persisting\");\r\n         session.getTransaction().begin();\r\n         for (Item item : items.values()) {\r\n             session.save(item);\r\n         }\r\n         \r\n-        Collection<User> allUsers = users.values();\r\n-        for (User user : allUsers) {\r\n+        Collection<Customer> allUsers = users.values();\r\n+        for (Customer user : allUsers) {\r\n             session.save(user);\r\n         }\r\n         session.getTransaction().commit();\r\n-        logger.info(\"finished persisting\");\r\n+        logger.debug(\"finished persisting\");\r\n     }\r\n \r\n     private String safeReadLine(BufferedReader reader) {\r\ndiff --git a/src/main/resources/hibernate-heroku.cfg.xml b/src/main/resources/hibernate-heroku.cfg.xml\r\nindex e08943f..7067eb5 100644\r\n--- a/src/main/resources/hibernate-heroku.cfg.xml\r\n+++ b/src/main/resources/hibernate-heroku.cfg.xml\r\n@@ -12,12 +12,12 @@\r\n <!-- 		<property name=\"hibernate.c3p0.min_size\">1</property>  -->\r\n <!-- 		<property name=\"hibernate.c3p0.timeout\">600</property> -->\r\n     \r\n-        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n-        <mapping class=\"br.ime.usp.commendans.model.User\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n \r\n     </session-factory>\r\n </hibernate-configuration>\r\ndiff --git a/src/main/resources/hibernate.cfg.xml b/src/main/resources/hibernate.cfg.xml\r\nindex 394b1c0..d193158 100644\r\n--- a/src/main/resources/hibernate.cfg.xml\r\n+++ b/src/main/resources/hibernate.cfg.xml\r\n@@ -17,13 +17,13 @@\r\n         <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\r\n         <property name=\"connection.username\">root</property>\r\n         <property name=\"connection.password\"></property>\r\n-        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n         <property name=\"hibernate.generate_statistics\">true</property>\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n-        <mapping class=\"br.ime.usp.commendans.model.User\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n \r\n     </session-factory>\r\n </hibernate-configuration>\r\ndiff --git a/src/main/resources/log4j.xml b/src/main/resources/log4j.xml\r\nindex 7e36326..50a6273 100644\r\n--- a/src/main/resources/log4j.xml\r\n+++ b/src/main/resources/log4j.xml\r\n@@ -9,12 +9,12 @@\r\n 	</appender>\r\n \r\n 	<category name=\"org.hibernate\">\r\n-		<priority value=\"DEBUG\" />\r\n+		<priority value=\"INFO\" />\r\n 		<appender-ref ref=\"stdout\" />\r\n 	</category>\r\n 	\r\n 	<category name=\"br.ime.usp\">\r\n-		<priority value=\"DEBUG\" />\r\n+		<priority value=\"INFO\" />\r\n 		<appender-ref ref=\"stdout\" />\r\n 	</category>\r\n \r\ndiff --git a/src/test/java/br/ime/usp/commendans/dao/UserDaoTest.java b/src/test/java/br/ime/usp/commendans/dao/UserDaoTest.java\r\nindex 10e234b..2bb6dbd 100644\r\n--- a/src/test/java/br/ime/usp/commendans/dao/UserDaoTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/dao/UserDaoTest.java\r\n@@ -11,7 +11,7 @@ public class UserDaoTest {\r\n     public void shouldFindUsers() {\r\n         SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n         Session session = sf.openSession();\r\n-        UserDao userDao = new UserDao(session);\r\n+        CustomerDao userDao = new CustomerDao(session);\r\n         userDao.list();\r\n     }\r\n \r\ndiff --git a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\nindex 06be6fc..391e047 100644\r\n--- a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n@@ -13,7 +13,7 @@ import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\n import br.ime.usp.commendans.itemtoitem.Tuple;\r\n import br.ime.usp.commendans.model.Item;\r\n-import br.ime.usp.commendans.model.User;\r\n+import br.ime.usp.commendans.model.Customer;\r\n \r\n public class ItemToItemRecommenderFactoryTest {\r\n \r\n@@ -24,10 +24,10 @@ public class ItemToItemRecommenderFactoryTest {\r\n         Item item2 = new Item(2l);\r\n         Item item3 = new Item(3l);\r\n         Item item4 = new Item(4l);\r\n-        User user1 = new User(Arrays.asList(item1, item3), 1l);\r\n-        User user2 = new User(Arrays.asList(item2, item4), 2l);\r\n-        User user3 = new User(Arrays.asList(item1, item2, item3), 3l);\r\n-        User user4 = new User(Arrays.asList(item3, item4), 4l);\r\n+        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l);\r\n+        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l);\r\n+        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l);\r\n+        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l);\r\n         factory.addUser(user1);\r\n         factory.addUser(user2);\r\n         factory.addUser(user3);\r\n'),(20,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/IndexController.java b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\nindex 715d829..4b9ca18 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n@@ -6,7 +6,6 @@ import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n-import br.ime.usp.commendans.util.DataImporter;\r\n \r\n \r\n @Resource\r\n@@ -27,8 +26,8 @@ public class IndexController {\r\n     \r\n     @Get(\"/import/askjdhakjshdakjshd\")\r\n     public void importData() {\r\n-        DataImporter dataImporter = new DataImporter(session);\r\n-        dataImporter.importData(\"/orders.csv\");\r\n+        //DataImporter dataImporter = new DataImporter(session);\r\n+        //dataImporter.importData(\"/orders.csv\");\r\n         result.use(Results.http()).body(\"<html><body>finished persisting</body></html>\");\r\n     }\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\nindex b3f8061..0966999 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n@@ -31,17 +31,17 @@ public class ItemToItemController {\r\n     public void recommend(Long itemId) {\r\n         Item item = itemDao.find(itemId);\r\n         ItemVector recommendend = itemToItem.recommendendItemsFor(item);\r\n-        serializedResult(recommendend.getTuples());\r\n+        serializeResult(recommendend.getTuples());\r\n     }\r\n     \r\n     @Get(\"/recommend/items/\")\r\n     public void recommend(List<Long> itemsIds) {\r\n         List<Item> items = itemDao.find(itemsIds);\r\n         List<Tuple> recommendend = itemToItem.recommendendItemsFor(items).getTuples();\r\n-        serializedResult(recommendend);\r\n+        serializeResult(recommendend);\r\n     }\r\n \r\n-    private void serializedResult(List<Tuple> recommendend) {\r\n+    private void serializeResult(List<Tuple> recommendend) {\r\n         result.use(Results.http())\r\n             .addHeader(\"content-type\", \"application/json\")\r\n             .body(serializer.toJson(recommendend));\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java b/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java\r\nindex 82935aa..77b3315 100644\r\n--- a/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java\r\n@@ -4,6 +4,7 @@ import java.util.List;\r\n \r\n import javax.annotation.PostConstruct;\r\n \r\n+import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n import br.ime.usp.commendans.dao.CustomerDao;\r\n@@ -11,7 +12,7 @@ import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n import br.ime.usp.commendans.model.Customer;\r\n \r\n-@Component\r\n+@Component @ApplicationScoped\r\n public class ItemToItemRecommenderCreator implements ComponentFactory<ItemToItemRecommender> {\r\n     private final CustomerDao dao;\r\n     private final ItemToItemRecommenderFactory factory;\r\ndiff --git a/src/main/resources/hibernate-heroku.cfg.xml b/src/main/resources/hibernate-heroku.cfg.xml\r\nindex 7067eb5..2a3e7d9 100644\r\n--- a/src/main/resources/hibernate-heroku.cfg.xml\r\n+++ b/src/main/resources/hibernate-heroku.cfg.xml\r\n@@ -14,7 +14,7 @@\r\n     \r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n-        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n'),(21,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/IndexController.java b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\nindex 4b9ca18..715d829 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n@@ -6,6 +6,7 @@ import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n+import br.ime.usp.commendans.util.DataImporter;\r\n \r\n \r\n @Resource\r\n@@ -26,8 +27,8 @@ public class IndexController {\r\n     \r\n     @Get(\"/import/askjdhakjshdakjshd\")\r\n     public void importData() {\r\n-        //DataImporter dataImporter = new DataImporter(session);\r\n-        //dataImporter.importData(\"/orders.csv\");\r\n+        DataImporter dataImporter = new DataImporter(session);\r\n+        dataImporter.importData(\"/orders.csv\");\r\n         result.use(Results.http()).body(\"<html><body>finished persisting</body></html>\");\r\n     }\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java b/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java\r\nindex 77b3315..82935aa 100644\r\n--- a/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java\r\n@@ -4,7 +4,6 @@ import java.util.List;\r\n \r\n import javax.annotation.PostConstruct;\r\n \r\n-import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n import br.ime.usp.commendans.dao.CustomerDao;\r\n@@ -12,7 +11,7 @@ import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n import br.ime.usp.commendans.model.Customer;\r\n \r\n-@Component @ApplicationScoped\r\n+@Component\r\n public class ItemToItemRecommenderCreator implements ComponentFactory<ItemToItemRecommender> {\r\n     private final CustomerDao dao;\r\n     private final ItemToItemRecommenderFactory factory;\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\nindex 6e2aa02..ee711ff 100644\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\n@@ -6,11 +6,12 @@ import java.util.List;\r\n import java.util.Map;\r\n import java.util.Set;\r\n \r\n+import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n import br.com.caelum.vraptor.ioc.Component;\r\n-import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n \r\n-@Component\r\n+@Component @ApplicationScoped\r\n public class ItemToItemRecommenderFactory {\r\n \r\n     private Map<Item, List<Customer>> usersByItemBought;\r\n@@ -45,7 +46,6 @@ public class ItemToItemRecommenderFactory {\r\n             List<Customer> users = usersByItemBought.get(item);\r\n             for (Customer user : users) {\r\n                 List<Item> boughtTogether = user.itemsBought();\r\n-                System.out.println(item + \" -> \" +boughtTogether);\r\n                 for (Item i : boughtTogether) {\r\n                     association.associate(i);\r\n                 }\r\ndiff --git a/src/main/resources/hibernate-heroku.cfg.xml b/src/main/resources/hibernate-heroku.cfg.xml\r\nindex 2a3e7d9..7067eb5 100644\r\n--- a/src/main/resources/hibernate-heroku.cfg.xml\r\n+++ b/src/main/resources/hibernate-heroku.cfg.xml\r\n@@ -14,7 +14,7 @@\r\n     \r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n-        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\ndiff --git a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\nindex 391e047..ec46ec5 100644\r\n--- a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n@@ -18,7 +18,7 @@ import br.ime.usp.commendans.model.Customer;\r\n public class ItemToItemRecommenderFactoryTest {\r\n \r\n     @Test\r\n-    public void shouldBuildRecommender() {\r\n+    public void shouldBuildRecommenderBookExample() {\r\n         ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n         Item item1 = new Item(1l);\r\n         Item item2 = new Item(2l);\r\n'),(22,'\r\ndiff --git a/src/main/resources/hibernate-heroku.cfg.xml b/src/main/resources/hibernate-heroku.cfg.xml\r\nindex 7067eb5..2a3e7d9 100644\r\n--- a/src/main/resources/hibernate-heroku.cfg.xml\r\n+++ b/src/main/resources/hibernate-heroku.cfg.xml\r\n@@ -14,7 +14,7 @@\r\n     \r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n-        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n'),(23,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\nindex ee711ff..37bb827 100644\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\n@@ -14,46 +14,49 @@ import br.ime.usp.commendans.model.Item;\r\n @Component @ApplicationScoped\r\n public class ItemToItemRecommenderFactory {\r\n \r\n-    private Map<Item, List<Customer>> usersByItemBought;\r\n+    private Map<Item, List<Customer>> customerByItemBought;\r\n     private HashMap<Item, ItemToItemsAssociation> associations;\r\n     \r\n     public ItemToItemRecommenderFactory() {\r\n-        usersByItemBought = new HashMap<Item, List<Customer>>();\r\n+        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n     }\r\n     \r\n     public void addUser(Customer user) {\r\n-        List<Item> items = user.itemsBought();\r\n-        for (Item item : items) {\r\n+        for (Item item : user.itemsBought()) {\r\n             store(item, user);\r\n         }\r\n     }\r\n \r\n     private void store(Item item, Customer user) {\r\n-        List<Customer> users = usersByItemBought.get(item);\r\n+        List<Customer> users = customerByItemBought.get(item);\r\n         if (users == null) {\r\n             users = new ArrayList<Customer>();\r\n         }\r\n         users.add(user);\r\n-        usersByItemBought.put(item, users);\r\n+        customerByItemBought.put(item, users);\r\n     }\r\n     \r\n     \r\n     public ItemToItemRecommender build() {\r\n         associations = new HashMap<Item, ItemToItemsAssociation>();\r\n-        Set<Item> items = usersByItemBought.keySet();\r\n+        Set<Item> items = customerByItemBought.keySet();\r\n         for (Item item : items) {\r\n-            ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n-            List<Customer> users = usersByItemBought.get(item);\r\n-            for (Customer user : users) {\r\n-                List<Item> boughtTogether = user.itemsBought();\r\n-                for (Item i : boughtTogether) {\r\n-                    association.associate(i);\r\n-                }\r\n-            }\r\n-            associations.put(item, association);\r\n+            associate(item);\r\n         }\r\n         return new ItemToItemRecommender(associations);\r\n     }\r\n+\r\n+    private void associate(Item item) {\r\n+        ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n+        List<Customer> customers = customerByItemBought.get(item);\r\n+        for (Customer user : customers) {\r\n+            List<Item> boughtTogether = user.itemsBought();\r\n+            for (Item i : boughtTogether) {\r\n+                association.associate(i);\r\n+            }\r\n+        }\r\n+        associations.put(item, association);\r\n+    }\r\n     \r\n     public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n         return associations;\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Customer.java b/src/main/java/br/ime/usp/commendans/model/Customer.java\r\nindex 97fb7db..cf33859 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/Customer.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Customer.java\r\n@@ -38,8 +38,4 @@ public class Customer {\r\n         items.add(item);\r\n     }\r\n     \r\n-    public List<Item> getItems() {\r\n-        return items;\r\n-    }\r\n-\r\n }\r\n'),(24,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/TupleJsonSerializer.java b/src/main/java/br/ime/usp/commendans/infra/TupleJsonSerializer.java\r\nindex 9572bf7..cda60ec 100644\r\n--- a/src/main/java/br/ime/usp/commendans/infra/TupleJsonSerializer.java\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/TupleJsonSerializer.java\r\n@@ -1,11 +1,15 @@\r\n package br.ime.usp.commendans.infra;\r\n \r\n+import java.util.Arrays;\r\n import java.util.List;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.ime.usp.commendans.itemtoitem.Tuple;\r\n \r\n+import com.google.gson.ExclusionStrategy;\r\n+import com.google.gson.FieldAttributes;\r\n import com.google.gson.Gson;\r\n+import com.google.gson.GsonBuilder;\r\n \r\n @Component\r\n public class TupleJsonSerializer {\r\n@@ -13,7 +17,8 @@ public class TupleJsonSerializer {\r\n     private final Gson gson;\r\n \r\n     public TupleJsonSerializer() {\r\n-        this.gson = new Gson();\r\n+        ExclusionStrategy strategy = new IncludeAllowedAttributes();\r\n+        this.gson = new GsonBuilder().addSerializationExclusionStrategy(strategy).create();\r\n     }\r\n \r\n     public String toJson(Tuple tuple) {\r\n@@ -23,6 +28,24 @@ public class TupleJsonSerializer {\r\n     public String toJson(List<Tuple> tuples) {\r\n         return gson.toJson(tuples);\r\n     }\r\n+    \r\n+    private class IncludeAllowedAttributes implements ExclusionStrategy {\r\n+\r\n+        private List<String> allowedAttributes = Arrays.asList(\"item\", \"id\", \"value\");\r\n+\r\n+        @Override\r\n+        public boolean shouldSkipClass(Class<?> arg0) {\r\n+            return false;\r\n+        }\r\n+\r\n+        @Override\r\n+        public boolean shouldSkipField(FieldAttributes attr) {\r\n+            String name = attr.getName();\r\n+            boolean allowedAttribute = allowedAttributes.contains(name); \r\n+            return !allowedAttribute;\r\n+        }\r\n+        \r\n+    }\r\n \r\n     \r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Application.java b/src/main/java/br/ime/usp/commendans/model/Application.java\r\nnew file mode 100644\r\nindex 0000000..915cb67\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Application.java\r\n@@ -0,0 +1,12 @@\r\n+package br.ime.usp.commendans.model;\r\n+\r\n+public class Application {\r\n+    private String name;\r\n+    private String key;\r\n+    \r\n+    public Application(String name, String key) {\r\n+        this.name = name;\r\n+        this.key = key;\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Customer.java b/src/main/java/br/ime/usp/commendans/model/Customer.java\r\nindex cf33859..9017270 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/Customer.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Customer.java\r\n@@ -6,6 +6,7 @@ import javax.persistence.Entity;\r\n import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n import javax.persistence.ManyToMany;\r\n+import javax.persistence.ManyToOne;\r\n \r\n @Entity\r\n public class Customer {\r\n@@ -16,13 +17,17 @@ public class Customer {\r\n     @ManyToMany\r\n     private List<Item> items;\r\n     \r\n+    @ManyToOne\r\n+    private Application app;\r\n+    \r\n     @Deprecated\r\n     public Customer() {\r\n     }\r\n \r\n-    public Customer(List<Item> items, Long id) {\r\n+    public Customer(List<Item> items, Long id, Application app) {\r\n         this.items = items;\r\n         this.id = id;\r\n+        this.app = app;\r\n     }\r\n \r\n     public List<Item> itemsBought() {\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Item.java b/src/main/java/br/ime/usp/commendans/model/Item.java\r\nindex 50863fb..0b7d11b 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/Item.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Item.java\r\n@@ -2,18 +2,23 @@ package br.ime.usp.commendans.model;\r\n \r\n import javax.persistence.Entity;\r\n import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n \r\n @Entity\r\n public class Item {\r\n     @Id\r\n     private Long id;\r\n+    \r\n+    @ManyToOne\r\n+    private Application app;\r\n \r\n     @Deprecated\r\n     protected Item() {\r\n     }\r\n     \r\n-    public Item(Long id) {\r\n+    public Item(Long id, Application app) {\r\n         this.id = id;\r\n+        this.app = app;\r\n     }\r\n     \r\n     @Override\r\ndiff --git a/src/main/java/br/ime/usp/commendans/util/DataImporter.java b/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\nindex 53582cd..d8fc076 100644\r\n--- a/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\n+++ b/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\n@@ -15,8 +15,9 @@ import org.hibernate.Session;\r\n import org.hibernate.SessionFactory;\r\n import org.hibernate.cfg.Configuration;\r\n \r\n-import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n \r\n public class DataImporter {\r\n     \r\n@@ -40,6 +41,7 @@ public class DataImporter {\r\n         InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n         BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n         String line = safeReadLine(reader);\r\n+        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n         \r\n         while (line != null) {\r\n             logger.debug(line);\r\n@@ -48,11 +50,11 @@ public class DataImporter {\r\n             long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n             Customer user = users.get(id);\r\n             if (user == null) {\r\n-                user = new Customer(new ArrayList<Item>(), id);\r\n+                user = new Customer(new ArrayList<Item>(), id, cdc);\r\n             }\r\n             Item item = items.get(itemId);\r\n             if (item == null) {\r\n-                item = new Item(itemId);\r\n+                item = new Item(itemId, cdc);\r\n             }\r\n             user.add(item);\r\n             line = safeReadLine(reader);\r\ndiff --git a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\nindex ec46ec5..a936620 100644\r\n--- a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n@@ -12,22 +12,24 @@ import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\n import br.ime.usp.commendans.itemtoitem.Tuple;\r\n-import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n \r\n public class ItemToItemRecommenderFactoryTest {\r\n \r\n     @Test\r\n     public void shouldBuildRecommenderBookExample() {\r\n         ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n-        Item item1 = new Item(1l);\r\n-        Item item2 = new Item(2l);\r\n-        Item item3 = new Item(3l);\r\n-        Item item4 = new Item(4l);\r\n-        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l);\r\n-        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l);\r\n-        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l);\r\n-        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l);\r\n+        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n+        Item item1 = new Item(1l, cdc);\r\n+        Item item2 = new Item(2l, cdc);\r\n+        Item item3 = new Item(3l, cdc);\r\n+        Item item4 = new Item(4l, cdc);\r\n+        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l, cdc);\r\n+        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l, cdc);\r\n+        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l, cdc);\r\n+        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l, cdc);\r\n         factory.addUser(user1);\r\n         factory.addUser(user2);\r\n         factory.addUser(user3);\r\ndiff --git a/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java b/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java\r\nindex af9d9fa..a647659 100644\r\n--- a/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java\r\n@@ -7,6 +7,7 @@ import java.util.Arrays;\r\n import org.junit.Test;\r\n \r\n import br.ime.usp.commendans.itemtoitem.Tuple;\r\n+import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n public class TupleJsonSerializerTest {\r\n@@ -14,14 +15,16 @@ public class TupleJsonSerializerTest {\r\n     @Test\r\n     public void shouldSerializeATuple() {\r\n         TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n-        String json = serializer.toJson(new Tuple(new Item(1l), 10.0));\r\n+        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        String json = serializer.toJson(new Tuple(new Item(1l, cdc), 10.0));\r\n         assertEquals(\"{\\\"item\\\":{\\\"id\\\":1},\\\"value\\\":10.0}\", json);\r\n     }\r\n     \r\n     @Test\r\n     public void shouldSerializeATupleList() {\r\n         TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n-        String json = serializer.toJson(Arrays.asList(new Tuple(new Item(1l), 10.0)));\r\n+        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        String json = serializer.toJson(Arrays.asList(new Tuple(new Item(1l, cdc), 10.0)));\r\n         assertEquals(\"[{\\\"item\\\":{\\\"id\\\":1},\\\"value\\\":10.0}]\", json);\r\n     }\r\n \r\ndiff --git a/src/test/java/br/ime/usp/commendans/itemtoitem/ItemVectorTest.java b/src/test/java/br/ime/usp/commendans/itemtoitem/ItemVectorTest.java\r\nindex 16e7191..59eb600 100644\r\n--- a/src/test/java/br/ime/usp/commendans/itemtoitem/ItemVectorTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/itemtoitem/ItemVectorTest.java\r\n@@ -8,16 +8,18 @@ import java.util.List;\r\n \r\n import org.junit.Test;\r\n \r\n+import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n public class ItemVectorTest {\r\n \r\n     @Test\r\n     public void test() {\r\n-        Item item1 = new Item(1l);\r\n-        Item item2 = new Item(2l);\r\n-        Item item3 = new Item(3l);\r\n-        Item item4 = new Item(4l);\r\n+        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        Item item1 = new Item(1l, cdc);\r\n+        Item item2 = new Item(2l, cdc);\r\n+        Item item3 = new Item(3l, cdc);\r\n+        Item item4 = new Item(4l, cdc);\r\n         List<Tuple> tuples = asList(new Tuple(item1, 11.0), new Tuple(item2, 8.0), new Tuple(item3, 2.0));\r\n         ItemVector itemVector1 = new ItemVector(new HashSet<Tuple>(tuples));\r\n         tuples = asList(new Tuple(item4, 10.0), new Tuple(item3, 7.0));\r\n'),(25,'\r\ndiff --git a/.classpath b/.classpath\r\nindex 0cba456..6195f25 100644\r\n--- a/.classpath\r\n+++ b/.classpath\r\n@@ -3,6 +3,7 @@\r\n 	<classpathentry kind=\"src\" path=\"src/main/java\"/>\r\n 	<classpathentry kind=\"src\" path=\"src/main/resources\"/>\r\n 	<classpathentry kind=\"src\" path=\"src/test/java\"/>\r\n+	<classpathentry kind=\"src\" path=\"src/test/resources\"/>\r\n 	<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java\">\r\n 		<attributes>\r\n 			<attribute name=\"owner.project.facets\" value=\"java\"/>\r\ndiff --git a/.settings/org.eclipse.wst.common.component b/.settings/org.eclipse.wst.common.component\r\nindex 965e8a9..14b856d 100644\r\n--- a/.settings/org.eclipse.wst.common.component\r\n+++ b/.settings/org.eclipse.wst.common.component\r\n@@ -1,10 +1,10 @@\r\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<project-modules id=\"moduleCoreId\" project-version=\"1.5.0\">\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><project-modules id=\"moduleCoreId\" project-version=\"1.5.0\">\r\n     <wb-module deploy-name=\"commendans\">\r\n         <wb-resource deploy-path=\"/\" source-path=\"/src/main/webapp\" tag=\"defaultRootSource\"/>\r\n         <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/java\"/>\r\n         <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/resources\"/>\r\n         <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/test/java\"/>\r\n+        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/test/resources\"/>\r\n         <property name=\"java-output-path\" value=\"/commendans/build/classes\"/>\r\n         <property name=\"context-root\" value=\"commendans\"/>\r\n     </wb-module>\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\nindex 0966999..d1b8fd1 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n@@ -8,19 +8,19 @@ import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n import br.ime.usp.commendans.dao.ItemDao;\r\n import br.ime.usp.commendans.infra.TupleJsonSerializer;\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n+import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n import br.ime.usp.commendans.itemtoitem.Tuple;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n @Resource\r\n public class ItemToItemController {\r\n-    private final ItemToItemRecommender itemToItem;\r\n+    private final SingleAppRecommender itemToItem;\r\n     private final ItemDao itemDao;\r\n     private final Result result;\r\n     private final TupleJsonSerializer serializer;\r\n \r\n-    public ItemToItemController(ItemToItemRecommender itemToItem, ItemDao itemDao, Result result, TupleJsonSerializer serializer) {\r\n+    public ItemToItemController(SingleAppRecommender itemToItem, ItemDao itemDao, Result result, TupleJsonSerializer serializer) {\r\n         this.itemToItem = itemToItem;\r\n         this.itemDao = itemDao;\r\n         this.result = result;\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java b/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\nindex d266150..6936e21 100644\r\n--- a/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\n@@ -2,9 +2,11 @@ package br.ime.usp.commendans.dao;\r\n \r\n import java.util.List;\r\n \r\n+import org.hibernate.Query;\r\n import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Customer;\r\n \r\n @Component\r\n@@ -17,7 +19,15 @@ public class CustomerDao {\r\n     \r\n     @SuppressWarnings(\"unchecked\")\r\n     public List<Customer> list() {\r\n-        session.createQuery(\"select customer from Customer customer join fetch customer.items\");\r\n+        Query query = session.createQuery(\"select customer from Customer customer join fetch customer.items\");\r\n         return session.createCriteria(Customer.class).list();\r\n     }\r\n+\r\n+    public List<Customer> findCustomersOf(Application app) {\r\n+        Query query = session.createQuery(\"select customer from Customer customer \" +\r\n+        		\"join fetch customer.items \" +\r\n+        		\"where customer.app.name like :appName\");\r\n+        query.setParameter(\"appName\", app.getName());\r\n+        return query.list();\r\n+    }\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java b/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java\r\nnew file mode 100644\r\nindex 0000000..9485fa6\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java\r\n@@ -0,0 +1,44 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.annotation.PostConstruct;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n+import br.ime.usp.commendans.dao.CustomerDao;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n+import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n+\r\n+@Component\r\n+public class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n+    private final CustomerDao dao;\r\n+    private final ItemToItemRecommenderFactory factory;\r\n+    private SingleAppRecommender itemToItemRecommender;\r\n+    private GeneralRecommender recommender;\r\n+\r\n+    public RecommenderCreator(CustomerDao dao, ItemToItemRecommenderFactory factory) {\r\n+        this.dao = dao;\r\n+        this.factory = factory;\r\n+    }\r\n+\r\n+    @Override\r\n+    public GeneralRecommender getInstance() {\r\n+        return recommender;\r\n+    }\r\n+    \r\n+    @PostConstruct\r\n+    public void create() {\r\n+        List<Customer> users = dao.list();\r\n+        this.itemToItemRecommender = buildSingleAppRecommender(users);\r\n+    }\r\n+\r\n+    private SingleAppRecommender buildSingleAppRecommender(List<Customer> users) {\r\n+        for (Customer user : users) {\r\n+            factory.addUser(user);\r\n+        }\r\n+        return factory.build();\r\n+    }\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\nindex 37bb827..68792a3 100644\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\n@@ -37,13 +37,13 @@ public class ItemToItemRecommenderFactory {\r\n     }\r\n     \r\n     \r\n-    public ItemToItemRecommender build() {\r\n+    public SingleAppRecommender build() {\r\n         associations = new HashMap<Item, ItemToItemsAssociation>();\r\n         Set<Item> items = customerByItemBought.keySet();\r\n         for (Item item : items) {\r\n             associate(item);\r\n         }\r\n-        return new ItemToItemRecommender(associations);\r\n+        return new SingleAppRecommender(associations);\r\n     }\r\n \r\n     private void associate(Item item) {\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommender.java b/src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommender.java\r\nnew file mode 100644\r\nindex 0000000..eb1229e\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommender.java\r\n@@ -0,0 +1,46 @@\r\n+package br.ime.usp.commendans.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.Recommender;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class SingleAppRecommender implements Recommender {\r\n+\r\n+    private final Map<Item, ItemVector> associations;\r\n+\r\n+    public SingleAppRecommender(\r\n+            HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        this.associations = parse(associations);\r\n+    }\r\n+\r\n+    private Map<Item, ItemVector> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        HashMap<Item, ItemVector> map = new HashMap<Item, ItemVector>();\r\n+        Set<Item> items = associations.keySet();\r\n+        for (Item item : items) {\r\n+            ItemToItemsAssociation association = associations.get(item);\r\n+            List<Tuple> tuples = association.toTupleList();\r\n+            map.put(item, new ItemVector(tuples));\r\n+        }\r\n+        return map;\r\n+    }\r\n+\r\n+    @Override\r\n+    public ItemVector recommendendItemsFor(Item item) {\r\n+        return associations.get(item);\r\n+    }\r\n+\r\n+    public ItemVector recommendendItemsFor(List<Item> items) {\r\n+        ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n+        for (Item item : items) {\r\n+            ItemVector other = recommendendItemsFor(item);\r\n+            vector = vector.merge(other);\r\n+        }\r\n+        return vector;\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Application.java b/src/main/java/br/ime/usp/commendans/model/Application.java\r\nindex 915cb67..2dfd9dc 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/Application.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Application.java\r\n@@ -1,12 +1,30 @@\r\n package br.ime.usp.commendans.model;\r\n \r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n public class Application {\r\n+    \r\n+    @Id @GeneratedValue\r\n+    private Long id;\r\n+    \r\n     private String name;\r\n-    private String key;\r\n     \r\n-    public Application(String name, String key) {\r\n+    private String accessKey;\r\n+\r\n+    @Deprecated\r\n+    protected Application() {\r\n+    }\r\n+    \r\n+    public Application(String name, String accessKey) {\r\n         this.name = name;\r\n-        this.key = key;\r\n+        this.accessKey = accessKey;\r\n+    }\r\n+    \r\n+    public String getName() {\r\n+        return name;\r\n     }\r\n \r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Customer.java b/src/main/java/br/ime/usp/commendans/model/Customer.java\r\nindex 9017270..888ca2f 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/Customer.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Customer.java\r\n@@ -13,8 +13,10 @@ public class Customer {\r\n     \r\n     @Id @GeneratedValue\r\n     private Long id;\r\n+    \r\n+    private Long appId;\r\n \r\n-    @ManyToMany\r\n+    @ManyToMany()\r\n     private List<Item> items;\r\n     \r\n     @ManyToOne\r\n@@ -24,9 +26,9 @@ public class Customer {\r\n     public Customer() {\r\n     }\r\n \r\n-    public Customer(List<Item> items, Long id, Application app) {\r\n+    public Customer(List<Item> items, Long appId, Application app) {\r\n         this.items = items;\r\n-        this.id = id;\r\n+        this.appId = appId;\r\n         this.app = app;\r\n     }\r\n \r\n@@ -36,11 +38,15 @@ public class Customer {\r\n     \r\n     @Override\r\n     public String toString() {\r\n-        return \"User \" + id;\r\n+        return \"User \" + appId + \" from \" + app;\r\n     }\r\n \r\n     public void add(Item item) {\r\n         items.add(item);\r\n     }\r\n     \r\n+    public Application getApp() {\r\n+        return app;\r\n+    }\r\n+    \r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/recommender/GeneralRecommender.java b/src/main/java/br/ime/usp/commendans/recommender/GeneralRecommender.java\r\nnew file mode 100644\r\nindex 0000000..26830e8\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/recommender/GeneralRecommender.java\r\n@@ -0,0 +1,5 @@\r\n+package br.ime.usp.commendans.recommender;\r\n+\r\n+public class GeneralRecommender {\r\n+\r\n+}\r\ndiff --git a/src/main/resources/hibernate.cfg.xml b/src/main/resources/hibernate.cfg.xml\r\nindex d193158..98c999a 100644\r\n--- a/src/main/resources/hibernate.cfg.xml\r\n+++ b/src/main/resources/hibernate.cfg.xml\r\n@@ -24,6 +24,7 @@\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n \r\n     </session-factory>\r\n </hibernate-configuration>\r\ndiff --git a/src/main/resources/log4j.xml b/src/main/resources/log4j.xml\r\nindex 50a6273..b71d2f3 100644\r\n--- a/src/main/resources/log4j.xml\r\n+++ b/src/main/resources/log4j.xml\r\n@@ -9,7 +9,7 @@\r\n 	</appender>\r\n \r\n 	<category name=\"org.hibernate\">\r\n-		<priority value=\"INFO\" />\r\n+		<priority value=\"DEBUG\" />\r\n 		<appender-ref ref=\"stdout\" />\r\n 	</category>\r\n 	\r\ndiff --git a/src/test/java/br/ime/usp/commendans/dao/CustomerDaoTest.java b/src/test/java/br/ime/usp/commendans/dao/CustomerDaoTest.java\r\nnew file mode 100644\r\nindex 0000000..14e28b3\r\n--- /dev/null\r\n+++ b/src/test/java/br/ime/usp/commendans/dao/CustomerDaoTest.java\r\n@@ -0,0 +1,80 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import org.hibernate.Session;\r\n+import org.hibernate.SessionFactory;\r\n+import org.hibernate.cfg.Configuration;\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.BeforeClass;\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class CustomerDaoTest {\r\n+\r\n+    private static Session session;\r\n+    private static CustomerDao userDao;\r\n+    private static Application app;\r\n+\r\n+    @BeforeClass\r\n+    public static void setUpClass() {\r\n+        SessionFactory sf = new Configuration().configure(\r\n+                \"/hibernate.test.cfg.xml\").buildSessionFactory();\r\n+        session = sf.openSession();\r\n+        userDao = new CustomerDao(session);\r\n+        app = new Application(\"cdc\", \"123\");\r\n+        session.save(app);\r\n+    }\r\n+    \r\n+    @Before\r\n+    public void setUp() {\r\n+        session.beginTransaction();\r\n+    }\r\n+    \r\n+    @After\r\n+    public void tearDown() {\r\n+        session.getTransaction().rollback();\r\n+    }\r\n+\r\n+    @Test\r\n+    public void shouldFindUsers() {\r\n+        List<Item> items = Arrays.asList();\r\n+        session.save(new Customer(items, 1l, app));\r\n+        session.save(new Customer(items, 2l, app));\r\n+        session.save(new Customer(items, 3l, app));\r\n+        List<Customer> users = userDao.list();\r\n+        assertEquals(3, users.size());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void shouldFindUsersOfSpecificApp() throws Exception {\r\n+        Item item = new Item(1l, app);\r\n+        List<Item> items = Arrays.asList(item);\r\n+        session.save(new Customer(items, 1l, app));\r\n+        session.save(new Customer(items, 2l, app));\r\n+        session.save(new Customer(items, 3l, app));\r\n+        Application otherApp = new Application(\"gnarus\", \"123\");\r\n+        item = new Item(2l, otherApp);\r\n+        items = Arrays.asList(item);\r\n+        session.save(otherApp);\r\n+        session.save(item);\r\n+        session.save(new Customer(items, 1l, otherApp));\r\n+        session.save(new Customer(items, 2l, otherApp));\r\n+        session.save(new Customer(items, 3l, otherApp));\r\n+\r\n+        List<Customer> customers = userDao.findCustomersOf(app);\r\n+        assertEquals(3, customers.size());\r\n+        assertEquals(\"cdc\", customers.get(0).getApp().getName());\r\n+        assertEquals(\"cdc\", customers.get(1).getApp().getName());\r\n+        assertEquals(\"cdc\", customers.get(2).getApp().getName());\r\n+\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\nindex a936620..559ac5e 100644\r\n--- a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n@@ -8,7 +8,7 @@ import java.util.List;\r\n \r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n+import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\n import br.ime.usp.commendans.itemtoitem.Tuple;\r\n@@ -35,7 +35,7 @@ public class ItemToItemRecommenderFactoryTest {\r\n         factory.addUser(user3);\r\n         factory.addUser(user4);\r\n         \r\n-        ItemToItemRecommender recommender = factory.build();\r\n+        SingleAppRecommender recommender = factory.build();\r\n         HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n         \r\n         List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1).getTuples();\r\ndiff --git a/src/test/resources/hibernate.test.cfg.xml b/src/test/resources/hibernate.test.cfg.xml\r\nnew file mode 100644\r\nindex 0000000..869c0e1\r\n--- /dev/null\r\n+++ b/src/test/resources/hibernate.test.cfg.xml\r\n@@ -0,0 +1,30 @@\r\n+<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n+<!DOCTYPE hibernate-configuration PUBLIC\r\n+        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n+        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n+<hibernate-configuration>\r\n+    <session-factory>\r\n+    \r\n+    	<!-- connection pool configs -->\r\n+	    <property name=\"c3p0.acquire_increment\">1</property> \r\n+		<property name=\"c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n+		<property name=\"c3p0.max_size\">15</property> \r\n+		<property name=\"c3p0.min_size\">1</property> \r\n+		<property name=\"c3p0.timeout\">600</property>\r\n+    \r\n+        <property name=\"connection.url\">jdbc:mysql://localhost/commendans_test</property>\r\n+        <property name=\"connection.driver_class\">com.mysql.jdbc.Driver</property>\r\n+        <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\r\n+        <property name=\"connection.username\">root</property>\r\n+        <property name=\"connection.password\"></property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n+        <property name=\"show_sql\">true</property>\r\n+        <property name=\"format_sql\">false</property>\r\n+        <property name=\"hibernate.generate_statistics\">true</property>\r\n+\r\n+        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n+\r\n+    </session-factory>\r\n+</hibernate-configuration>\r\n'),(26,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/Recommender.java b/src/main/java/br/ime/usp/commendans/Recommender.java\r\nindex f9067dc..51ed54a 100644\r\n--- a/src/main/java/br/ime/usp/commendans/Recommender.java\r\n+++ b/src/main/java/br/ime/usp/commendans/Recommender.java\r\n@@ -4,5 +4,5 @@ import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n public interface Recommender {\r\n-    public ItemVector recommendendItemsFor(Item item);\r\n+    public ItemVector recommendedItemsFor(Item item);\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\nindex d1b8fd1..f9a37ed 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n@@ -8,37 +8,39 @@ import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n import br.ime.usp.commendans.dao.ItemDao;\r\n import br.ime.usp.commendans.infra.TupleJsonSerializer;\r\n-import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n import br.ime.usp.commendans.itemtoitem.Tuple;\r\n import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n \r\n @Resource\r\n public class ItemToItemController {\r\n-    private final SingleAppRecommender itemToItem;\r\n     private final ItemDao itemDao;\r\n     private final Result result;\r\n     private final TupleJsonSerializer serializer;\r\n+    private final GeneralRecommender recommender;\r\n \r\n-    public ItemToItemController(SingleAppRecommender itemToItem, ItemDao itemDao, Result result, TupleJsonSerializer serializer) {\r\n-        this.itemToItem = itemToItem;\r\n+    public ItemToItemController(GeneralRecommender recommender, \r\n+            ItemDao itemDao, Result result, \r\n+            TupleJsonSerializer serializer) {\r\n+        this.recommender = recommender;\r\n         this.itemDao = itemDao;\r\n         this.result = result;\r\n         this.serializer = serializer;\r\n     }\r\n     \r\n     @Get(\"/recommend/item/{itemId}\")\r\n-    public void recommend(Long itemId) {\r\n+    public void recommend(Long itemId, String accessKey) {\r\n         Item item = itemDao.find(itemId);\r\n-        ItemVector recommendend = itemToItem.recommendendItemsFor(item);\r\n-        serializeResult(recommendend.getTuples());\r\n+        ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n+        serializeResult(recommended.getTuples());\r\n     }\r\n     \r\n     @Get(\"/recommend/items/\")\r\n-    public void recommend(List<Long> itemsIds) {\r\n+    public void recommend(List<Long> itemsIds, String accessKey) {\r\n         List<Item> items = itemDao.find(itemsIds);\r\n-        List<Tuple> recommendend = itemToItem.recommendendItemsFor(items).getTuples();\r\n-        serializeResult(recommendend);\r\n+        ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n+        serializeResult(recommended.getTuples());\r\n     }\r\n \r\n     private void serializeResult(List<Tuple> recommendend) {\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/ApplicationDao.java b/src/main/java/br/ime/usp/commendans/dao/ApplicationDao.java\r\nnew file mode 100644\r\nindex 0000000..d78e95b\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/ApplicationDao.java\r\n@@ -0,0 +1,25 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.hibernate.Session;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.Application;\r\n+\r\n+@Component\r\n+public class ApplicationDao {\r\n+    \r\n+    private final Session session;\r\n+\r\n+    public ApplicationDao(Session session) {\r\n+        this.session = session;\r\n+    }\r\n+    \r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public List<Application> list() {\r\n+        return session.createCriteria(Application.class).list();\r\n+    }\r\n+\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java b/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\nindex 6936e21..eea09c0 100644\r\n--- a/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\n@@ -19,10 +19,10 @@ public class CustomerDao {\r\n     \r\n     @SuppressWarnings(\"unchecked\")\r\n     public List<Customer> list() {\r\n-        Query query = session.createQuery(\"select customer from Customer customer join fetch customer.items\");\r\n         return session.createCriteria(Customer.class).list();\r\n     }\r\n \r\n+    @SuppressWarnings(\"unchecked\")\r\n     public List<Customer> findCustomersOf(Application app) {\r\n         Query query = session.createQuery(\"select customer from Customer customer \" +\r\n         		\"join fetch customer.items \" +\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java b/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java\r\ndeleted file mode 100644\r\nindex 82935aa..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/infra/ItemToItemRecommenderCreator.java\r\n+++ /dev/null\r\n@@ -1,38 +0,0 @@\r\n-package br.ime.usp.commendans.infra;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.annotation.PostConstruct;\r\n-\r\n-import br.com.caelum.vraptor.ioc.Component;\r\n-import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n-import br.ime.usp.commendans.dao.CustomerDao;\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n-import br.ime.usp.commendans.model.Customer;\r\n-\r\n-@Component\r\n-public class ItemToItemRecommenderCreator implements ComponentFactory<ItemToItemRecommender> {\r\n-    private final CustomerDao dao;\r\n-    private final ItemToItemRecommenderFactory factory;\r\n-    private ItemToItemRecommender itemToItemRecommender;\r\n-\r\n-    public ItemToItemRecommenderCreator(CustomerDao dao, ItemToItemRecommenderFactory factory) {\r\n-        this.dao = dao;\r\n-        this.factory = factory;\r\n-    }\r\n-\r\n-    @Override\r\n-    public ItemToItemRecommender getInstance() {\r\n-        return itemToItemRecommender;\r\n-    }\r\n-    \r\n-    @PostConstruct\r\n-    public void create() {\r\n-        List<Customer> users = dao.list();\r\n-        for (Customer user : users) {\r\n-            factory.addUser(user);\r\n-        }\r\n-        this.itemToItemRecommender = factory.build();\r\n-    }\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java b/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java\r\nindex 9485fa6..e0bcba3 100644\r\n--- a/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java\r\n@@ -6,21 +6,24 @@ import javax.annotation.PostConstruct;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n+import br.ime.usp.commendans.dao.ApplicationDao;\r\n import br.ime.usp.commendans.dao.CustomerDao;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n+import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n \r\n @Component\r\n public class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n-    private final CustomerDao dao;\r\n+    private final CustomerDao customerDao;\r\n     private final ItemToItemRecommenderFactory factory;\r\n-    private SingleAppRecommender itemToItemRecommender;\r\n     private GeneralRecommender recommender;\r\n+    private final ApplicationDao appDao;\r\n \r\n-    public RecommenderCreator(CustomerDao dao, ItemToItemRecommenderFactory factory) {\r\n-        this.dao = dao;\r\n+    public RecommenderCreator(CustomerDao dao, ApplicationDao appDao, ItemToItemRecommenderFactory factory) {\r\n+        this.customerDao = dao;\r\n+        this.appDao = appDao;\r\n         this.factory = factory;\r\n     }\r\n \r\n@@ -31,11 +34,17 @@ public class RecommenderCreator implements ComponentFactory<GeneralRecommender>\r\n     \r\n     @PostConstruct\r\n     public void create() {\r\n-        List<Customer> users = dao.list();\r\n-        this.itemToItemRecommender = buildSingleAppRecommender(users);\r\n+        List<Application> apps = appDao.list();\r\n+        for (Application app : apps) {\r\n+            List<Customer> customers = customerDao.findCustomersOf(app);\r\n+            SingleAppRecommender recommender = buildSingleAppRecommender(customers);\r\n+            app.use(recommender);\r\n+        }\r\n+        this.recommender = new GeneralRecommender(apps);\r\n     }\r\n \r\n     private SingleAppRecommender buildSingleAppRecommender(List<Customer> users) {\r\n+        factory.clean();\r\n         for (Customer user : users) {\r\n             factory.addUser(user);\r\n         }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommender.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommender.java\r\ndeleted file mode 100644\r\nindex cd1949c..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommender.java\r\n+++ /dev/null\r\n@@ -1,46 +0,0 @@\r\n-package br.ime.usp.commendans.itemtoitem;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import br.ime.usp.commendans.Recommender;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class ItemToItemRecommender implements Recommender {\r\n-\r\n-    private final Map<Item, ItemVector> associations;\r\n-\r\n-    public ItemToItemRecommender(\r\n-            HashMap<Item, ItemToItemsAssociation> associations) {\r\n-        this.associations = parse(associations);\r\n-    }\r\n-\r\n-    private Map<Item, ItemVector> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n-        HashMap<Item, ItemVector> map = new HashMap<Item, ItemVector>();\r\n-        Set<Item> items = associations.keySet();\r\n-        for (Item item : items) {\r\n-            ItemToItemsAssociation association = associations.get(item);\r\n-            List<Tuple> tuples = association.toTupleList();\r\n-            map.put(item, new ItemVector(tuples));\r\n-        }\r\n-        return map;\r\n-    }\r\n-\r\n-    @Override\r\n-    public ItemVector recommendendItemsFor(Item item) {\r\n-        return associations.get(item);\r\n-    }\r\n-\r\n-    public ItemVector recommendendItemsFor(List<Item> items) {\r\n-        ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n-        for (Item item : items) {\r\n-            ItemVector other = recommendendItemsFor(item);\r\n-            vector = vector.merge(other);\r\n-        }\r\n-        return vector;\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\nindex 68792a3..b11e0ab 100644\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\n@@ -62,4 +62,8 @@ public class ItemToItemRecommenderFactory {\r\n         return associations;\r\n     }\r\n \r\n+    public void clean() {\r\n+        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n+    }\r\n+\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommender.java b/src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommender.java\r\nindex eb1229e..142aed2 100644\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommender.java\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommender.java\r\n@@ -30,14 +30,14 @@ public class SingleAppRecommender implements Recommender {\r\n     }\r\n \r\n     @Override\r\n-    public ItemVector recommendendItemsFor(Item item) {\r\n+    public ItemVector recommendedItemsFor(Item item) {\r\n         return associations.get(item);\r\n     }\r\n \r\n-    public ItemVector recommendendItemsFor(List<Item> items) {\r\n+    public ItemVector recommendedItemsFor(List<Item> items) {\r\n         ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n         for (Item item : items) {\r\n-            ItemVector other = recommendendItemsFor(item);\r\n+            ItemVector other = recommendedItemsFor(item);\r\n             vector = vector.merge(other);\r\n         }\r\n         return vector;\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Application.java b/src/main/java/br/ime/usp/commendans/model/Application.java\r\nindex 2dfd9dc..9693d76 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/Application.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Application.java\r\n@@ -1,30 +1,65 @@\r\n package br.ime.usp.commendans.model;\r\n \r\n+import java.util.List;\r\n+\r\n import javax.persistence.Entity;\r\n import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n+import javax.persistence.Transient;\r\n+\r\n+import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n+import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n \r\n @Entity\r\n public class Application {\r\n-    \r\n-    @Id @GeneratedValue\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n     private Long id;\r\n-    \r\n+\r\n     private String name;\r\n-    \r\n+\r\n     private String accessKey;\r\n \r\n+    @Transient\r\n+    private SingleAppRecommender recommender;\r\n+\r\n     @Deprecated\r\n     protected Application() {\r\n     }\r\n-    \r\n+\r\n     public Application(String name, String accessKey) {\r\n         this.name = name;\r\n         this.accessKey = accessKey;\r\n     }\r\n-    \r\n+\r\n     public String getName() {\r\n         return name;\r\n     }\r\n \r\n+    public void use(SingleAppRecommender recommender) {\r\n+        this.recommender = recommender;\r\n+    }\r\n+\r\n+    public Long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public ItemVector recommendedItemsFor(Item item) {\r\n+        return recommender.recommendedItemsFor(item);\r\n+    }\r\n+\r\n+    public ItemVector recommendedItemsFor(List<Item> items) {\r\n+        return recommender.recommendedItemsFor(items);\r\n+    }\r\n+\r\n+    public String getAccessKey() {\r\n+        return accessKey;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return \"Application [id=\" + id + \", name=\" + name + \", accessKey=\"\r\n+                + accessKey + \"]\";\r\n+    }\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/recommender/GeneralRecommender.java b/src/main/java/br/ime/usp/commendans/recommender/GeneralRecommender.java\r\nindex 26830e8..12c91db 100644\r\n--- a/src/main/java/br/ime/usp/commendans/recommender/GeneralRecommender.java\r\n+++ b/src/main/java/br/ime/usp/commendans/recommender/GeneralRecommender.java\r\n@@ -1,5 +1,32 @@\r\n package br.ime.usp.commendans.recommender;\r\n \r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n+import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n public class GeneralRecommender {\r\n \r\n+    private Map<String, Application> appsMap;\r\n+\r\n+    public GeneralRecommender(List<Application> apps) {\r\n+        appsMap = new HashMap<String, Application>();\r\n+        for (Application app : apps) {\r\n+            appsMap.put(app.getAccessKey(), app);\r\n+        }\r\n+    }\r\n+\r\n+    public ItemVector recommendedItemsFor(Item item, String accessKey) {\r\n+        Application application = appsMap.get(accessKey);\r\n+        return application.recommendedItemsFor(item);\r\n+    }\r\n+\r\n+    public ItemVector recommendedItemsFor(List<Item> items, String accessKey) {\r\n+        Application application = appsMap.get(accessKey);\r\n+        return application.recommendedItemsFor(items);\r\n+    }\r\n+\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/util/DataImporter.java b/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\nindex d8fc076..5f471fa 100644\r\n--- a/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\n+++ b/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\n@@ -42,6 +42,7 @@ public class DataImporter {\r\n         BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n         String line = safeReadLine(reader);\r\n         Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        session.save(cdc);\r\n         \r\n         while (line != null) {\r\n             logger.debug(line);\r\ndiff --git a/src/main/resources/hibernate.cfg.xml b/src/main/resources/hibernate.cfg.xml\r\nindex 98c999a..bba46f1 100644\r\n--- a/src/main/resources/hibernate.cfg.xml\r\n+++ b/src/main/resources/hibernate.cfg.xml\r\n@@ -18,7 +18,7 @@\r\n         <property name=\"connection.username\">root</property>\r\n         <property name=\"connection.password\"></property>\r\n         <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n-        <property name=\"show_sql\">false</property>\r\n+        <property name=\"show_sql\">true</property>\r\n         <property name=\"format_sql\">false</property>\r\n         <property name=\"hibernate.generate_statistics\">true</property>\r\n \r\ndiff --git a/src/main/webapp/WEB-INF/web.xml b/src/main/webapp/WEB-INF/web.xml\r\nindex 3db1738..de895b7 100644\r\n--- a/src/main/webapp/WEB-INF/web.xml\r\n+++ b/src/main/webapp/WEB-INF/web.xml\r\n@@ -33,7 +33,7 @@\r\n 	\r\n 	<context-param>\r\n         <param-name>environment</param-name>\r\n-        <param-value>heroku</param-value>\r\n+        <param-value>dev</param-value>\r\n     </context-param>\r\n \r\n </web-app>\r\ndiff --git a/src/test/java/br/ime/usp/commendans/dao/ApplicationDaoTest.java b/src/test/java/br/ime/usp/commendans/dao/ApplicationDaoTest.java\r\nnew file mode 100644\r\nindex 0000000..6a14774\r\n--- /dev/null\r\n+++ b/src/test/java/br/ime/usp/commendans/dao/ApplicationDaoTest.java\r\n@@ -0,0 +1,36 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.model.Application;\r\n+\r\n+public class ApplicationDaoTest extends DaoTest {\r\n+    private static ApplicationDao applicationDao;\r\n+\r\n+    @Before\r\n+    public void setUp() {\r\n+        applicationDao = new ApplicationDao(session);\r\n+        session.beginTransaction();\r\n+    }\r\n+    \r\n+    @After\r\n+    public void tearDown() {\r\n+        session.getTransaction().rollback();\r\n+        session.clear();\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void shouldListApps() throws Exception {\r\n+        session.save(new Application(\"cdc\", \"123\"));\r\n+        session.save(new Application(\"caelum\", \"1234\"));\r\n+        List<Application> apps = applicationDao.list();\r\n+        assertEquals(2, apps.size());\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/test/java/br/ime/usp/commendans/dao/CustomerDaoTest.java b/src/test/java/br/ime/usp/commendans/dao/CustomerDaoTest.java\r\nindex 14e28b3..38ac3a6 100644\r\n--- a/src/test/java/br/ime/usp/commendans/dao/CustomerDaoTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/dao/CustomerDaoTest.java\r\n@@ -5,47 +5,38 @@ import static org.junit.Assert.assertEquals;\r\n import java.util.Arrays;\r\n import java.util.List;\r\n \r\n-import org.hibernate.Session;\r\n-import org.hibernate.SessionFactory;\r\n-import org.hibernate.cfg.Configuration;\r\n import org.junit.After;\r\n import org.junit.Before;\r\n-import org.junit.BeforeClass;\r\n import org.junit.Test;\r\n \r\n import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n-public class CustomerDaoTest {\r\n+public class CustomerDaoTest extends DaoTest {\r\n \r\n-    private static Session session;\r\n     private static CustomerDao userDao;\r\n     private static Application app;\r\n \r\n-    @BeforeClass\r\n-    public static void setUpClass() {\r\n-        SessionFactory sf = new Configuration().configure(\r\n-                \"/hibernate.test.cfg.xml\").buildSessionFactory();\r\n-        session = sf.openSession();\r\n-        userDao = new CustomerDao(session);\r\n-        app = new Application(\"cdc\", \"123\");\r\n-        session.save(app);\r\n-    }\r\n-    \r\n     @Before\r\n     public void setUp() {\r\n+        userDao = new CustomerDao(session);\r\n+        app = new Application(\"cdc\", \"123\");\r\n         session.beginTransaction();\r\n+        session.save(app);\r\n     }\r\n     \r\n     @After\r\n     public void tearDown() {\r\n         session.getTransaction().rollback();\r\n+        session.clear();\r\n     }\r\n \r\n     @Test\r\n     public void shouldFindUsers() {\r\n-        List<Item> items = Arrays.asList();\r\n+        Item item = new Item(1l, app);\r\n+        session.save(item);\r\n+        List<Item> items = Arrays.asList(item);\r\n         session.save(new Customer(items, 1l, app));\r\n         session.save(new Customer(items, 2l, app));\r\n         session.save(new Customer(items, 3l, app));\r\n@@ -56,6 +47,7 @@ public class CustomerDaoTest {\r\n     @Test\r\n     public void shouldFindUsersOfSpecificApp() throws Exception {\r\n         Item item = new Item(1l, app);\r\n+        session.save(item);\r\n         List<Item> items = Arrays.asList(item);\r\n         session.save(new Customer(items, 1l, app));\r\n         session.save(new Customer(items, 2l, app));\r\n@@ -67,14 +59,13 @@ public class CustomerDaoTest {\r\n         session.save(item);\r\n         session.save(new Customer(items, 1l, otherApp));\r\n         session.save(new Customer(items, 2l, otherApp));\r\n-        session.save(new Customer(items, 3l, otherApp));\r\n+        session.save(new Customer(items, 3l, otherApp));    \r\n \r\n         List<Customer> customers = userDao.findCustomersOf(app);\r\n         assertEquals(3, customers.size());\r\n         assertEquals(\"cdc\", customers.get(0).getApp().getName());\r\n         assertEquals(\"cdc\", customers.get(1).getApp().getName());\r\n         assertEquals(\"cdc\", customers.get(2).getApp().getName());\r\n-\r\n     }\r\n \r\n }\r\ndiff --git a/src/test/java/br/ime/usp/commendans/dao/DaoTest.java b/src/test/java/br/ime/usp/commendans/dao/DaoTest.java\r\nnew file mode 100644\r\nindex 0000000..57ba227\r\n--- /dev/null\r\n+++ b/src/test/java/br/ime/usp/commendans/dao/DaoTest.java\r\n@@ -0,0 +1,19 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import org.hibernate.SessionFactory;\r\n+import org.hibernate.cfg.Configuration;\r\n+import org.hibernate.classic.Session;\r\n+import org.junit.BeforeClass;\r\n+\r\n+public class DaoTest {\r\n+\r\n+    protected static Session session;\r\n+        \r\n+    @BeforeClass\r\n+    public static void setUpClass() {\r\n+        SessionFactory sf = new Configuration().configure(\r\n+                \"/hibernate.test.cfg.xml\").buildSessionFactory();\r\n+        session = sf.openSession();\r\n+    }\r\n+\r\n+}\r\n\\ No newline at end of file\r\ndiff --git a/src/test/java/br/ime/usp/commendans/dao/UserDaoTest.java b/src/test/java/br/ime/usp/commendans/dao/UserDaoTest.java\r\ndeleted file mode 100644\r\nindex 2bb6dbd..0000000\r\n--- a/src/test/java/br/ime/usp/commendans/dao/UserDaoTest.java\r\n+++ /dev/null\r\n@@ -1,18 +0,0 @@\r\n-package br.ime.usp.commendans.dao;\r\n-\r\n-import org.hibernate.Session;\r\n-import org.hibernate.SessionFactory;\r\n-import org.hibernate.cfg.Configuration;\r\n-import org.junit.Test;\r\n-\r\n-public class UserDaoTest {\r\n-\r\n-    @Test\r\n-    public void shouldFindUsers() {\r\n-        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n-        Session session = sf.openSession();\r\n-        CustomerDao userDao = new CustomerDao(session);\r\n-        userDao.list();\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\nindex 559ac5e..47a8134 100644\r\n--- a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n@@ -38,7 +38,7 @@ public class ItemToItemRecommenderFactoryTest {\r\n         SingleAppRecommender recommender = factory.build();\r\n         HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n         \r\n-        List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1).getTuples();\r\n+        List<Tuple> recommendedItems = recommender.recommendedItemsFor(item1).getTuples();\r\n         ItemToItemsAssociation association = associations.get(item1);\r\n         assertEquals(0.0, association.associationValue(item1), 0.001);\r\n         assertEquals(1.0, association.associationValue(item2), 0.001);\r\n@@ -51,7 +51,7 @@ public class ItemToItemRecommenderFactoryTest {\r\n         assertEquals(item2, recommendedItems.get(1).getItem());\r\n         assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n         \r\n-        recommendedItems = recommender.recommendendItemsFor(item2).getTuples();\r\n+        recommendedItems = recommender.recommendedItemsFor(item2).getTuples();\r\n         association = associations.get(item2);\r\n         assertEquals(1.0, association.associationValue(item1), 0.001);\r\n         assertEquals(0.0, association.associationValue(item2), 0.001);\r\n@@ -63,7 +63,7 @@ public class ItemToItemRecommenderFactoryTest {\r\n         assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n         assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n         \r\n-        recommendedItems = recommender.recommendendItemsFor(item3).getTuples();\r\n+        recommendedItems = recommender.recommendedItemsFor(item3).getTuples();\r\n         association = associations.get(item3);\r\n         assertEquals(2.0, association.associationValue(item1), 0.001);\r\n         assertEquals(1.0, association.associationValue(item2), 0.001);\r\n'),(27,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/TupleJsonSerializer.java b/src/main/java/br/ime/usp/commendans/infra/TupleJsonSerializer.java\r\nindex cda60ec..8dd66cd 100644\r\n--- a/src/main/java/br/ime/usp/commendans/infra/TupleJsonSerializer.java\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/TupleJsonSerializer.java\r\n@@ -31,7 +31,7 @@ public class TupleJsonSerializer {\r\n     \r\n     private class IncludeAllowedAttributes implements ExclusionStrategy {\r\n \r\n-        private List<String> allowedAttributes = Arrays.asList(\"item\", \"id\", \"value\");\r\n+        private List<String> allowedAttributes = Arrays.asList(\"item\", \"appItemId\", \"value\");\r\n \r\n         @Override\r\n         public boolean shouldSkipClass(Class<?> arg0) {\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Application.java b/src/main/java/br/ime/usp/commendans/model/Application.java\r\nindex 9693d76..638e2d4 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/Application.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Application.java\r\n@@ -13,6 +13,7 @@ import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n @Entity\r\n public class Application {\r\n \r\n+\r\n     @Id\r\n     @GeneratedValue\r\n     private Long id;\r\n@@ -62,4 +63,28 @@ public class Application {\r\n         return \"Application [id=\" + id + \", name=\" + name + \", accessKey=\"\r\n                 + accessKey + \"]\";\r\n     }\r\n+    @Override\r\n+    public int hashCode() {\r\n+        final int prime = 31;\r\n+        int result = 1;\r\n+        result = prime * result + ((id == null) ? 0 : id.hashCode());\r\n+        return result;\r\n+    }\r\n+    \r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (getClass() != obj.getClass())\r\n+            return false;\r\n+        Application other = (Application) obj;\r\n+        if (id == null) {\r\n+            if (other.id != null)\r\n+                return false;\r\n+        } else if (!id.equals(other.id))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Item.java b/src/main/java/br/ime/usp/commendans/model/Item.java\r\nindex 0b7d11b..a881266 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/Item.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Item.java\r\n@@ -1,14 +1,17 @@\r\n package br.ime.usp.commendans.model;\r\n \r\n import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n import javax.persistence.ManyToOne;\r\n \r\n @Entity\r\n public class Item {\r\n-    @Id\r\n+    @Id @GeneratedValue\r\n     private Long id;\r\n     \r\n+    private Long appItemId;\r\n+    \r\n     @ManyToOne\r\n     private Application app;\r\n \r\n@@ -16,31 +19,53 @@ public class Item {\r\n     protected Item() {\r\n     }\r\n     \r\n-    public Item(Long id, Application app) {\r\n-        this.id = id;\r\n+    public Item(Long appItemId, Application app) {\r\n+        this.appItemId = appItemId;\r\n         this.app = app;\r\n     }\r\n     \r\n-    @Override\r\n-    public int hashCode() {\r\n-        return id.hashCode();\r\n-    }\r\n-\r\n-    @Override\r\n-    public boolean equals(Object obj) {\r\n-        if (obj instanceof Item) {\r\n-            Item other = (Item) obj;\r\n-            return other.getId().equals(this.id);\r\n-        }\r\n-        return false;\r\n+    public Long getAppItemId() {\r\n+        return appItemId;\r\n     }\r\n     \r\n-    public Long getId() {\r\n-        return id;\r\n+    public Application getApp() {\r\n+        return app;\r\n     }\r\n     \r\n     @Override\r\n     public String toString() {\r\n         return \"Item \" + id;\r\n     }\r\n+\r\n+    @Override\r\n+    public int hashCode() {\r\n+        final int prime = 31;\r\n+        int result = 1;\r\n+        result = prime * result + ((app == null) ? 0 : app.hashCode());\r\n+        result = prime * result\r\n+                + ((appItemId == null) ? 0 : appItemId.hashCode());\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (getClass() != obj.getClass())\r\n+            return false;\r\n+        Item other = (Item) obj;\r\n+        if (app == null) {\r\n+            if (other.app != null)\r\n+                return false;\r\n+        } else if (!app.equals(other.app))\r\n+            return false;\r\n+        if (appItemId == null) {\r\n+            if (other.appItemId != null)\r\n+                return false;\r\n+        } else if (!appItemId.equals(other.appItemId))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n }\r\ndiff --git a/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java b/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java\r\nindex a647659..b5c7c8e 100644\r\n--- a/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java\r\n@@ -17,7 +17,7 @@ public class TupleJsonSerializerTest {\r\n         TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n         Application cdc = new Application(\"Casa do Código\", \"123\");\r\n         String json = serializer.toJson(new Tuple(new Item(1l, cdc), 10.0));\r\n-        assertEquals(\"{\\\"item\\\":{\\\"id\\\":1},\\\"value\\\":10.0}\", json);\r\n+        assertEquals(\"{\\\"item\\\":{\\\"appItemId\\\":1},\\\"value\\\":10.0}\", json);\r\n     }\r\n     \r\n     @Test\r\n@@ -25,7 +25,7 @@ public class TupleJsonSerializerTest {\r\n         TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n         Application cdc = new Application(\"Casa do Código\", \"123\");\r\n         String json = serializer.toJson(Arrays.asList(new Tuple(new Item(1l, cdc), 10.0)));\r\n-        assertEquals(\"[{\\\"item\\\":{\\\"id\\\":1},\\\"value\\\":10.0}]\", json);\r\n+        assertEquals(\"[{\\\"item\\\":{\\\"appItemId\\\":1},\\\"value\\\":10.0}]\", json);\r\n     }\r\n \r\n }\r\n'),(28,'\r\ndiff --git a/src/main/resources/hibernate-heroku.cfg.xml b/src/main/resources/hibernate-heroku.cfg.xml\r\nindex 2a3e7d9..cdc5fb7 100644\r\n--- a/src/main/resources/hibernate-heroku.cfg.xml\r\n+++ b/src/main/resources/hibernate-heroku.cfg.xml\r\n@@ -18,6 +18,7 @@\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n \r\n     </session-factory>\r\n </hibernate-configuration>\r\n'),(29,'\r\ndiff --git a/pom.xml b/pom.xml\r\nindex 6ad222e..9d60e71 100644\r\n--- a/pom.xml\r\n+++ b/pom.xml\r\n@@ -52,7 +52,7 @@\r\n 				<artifactId>maven-war-plugin</artifactId>\r\n 				<version>2.1.1</version>\r\n 				<configuration>\r\n-    					<webXml>src/main/webapp/WEB-INF/web-heroku.xml</webXml>        \r\n+   					<webXml>src/main/webapp/WEB-INF/web-heroku.xml</webXml>        \r\n   				</configuration>\r\n 			</plugin>\r\n 			<plugin>\r\ndiff --git a/src/main/java/br/ime/usp/commendans/runner/Runner.java b/src/main/java/br/ime/usp/commendans/runner/Runner.java\r\nindex aac2b87..0a37ecf 100644\r\n--- a/src/main/java/br/ime/usp/commendans/runner/Runner.java\r\n+++ b/src/main/java/br/ime/usp/commendans/runner/Runner.java\r\n@@ -14,7 +14,7 @@ public class Runner {\r\n         Server server = new Server(Integer.valueOf(webPort));\r\n         WebAppContext root = new WebAppContext();\r\n         root.setContextPath(\"/\");\r\n-        root.setDescriptor(webappDirLocation + \"/WEB-INF/web.xml\");\r\n+        root.setDescriptor(webappDirLocation + \"/WEB-INF/web-heroku.xml\");\r\n         root.setResourceBase(webappDirLocation);\r\n         root.setParentLoaderPriority(true);\r\n         server.setHandler(root);\r\n'),(30,'\r\ndiff --git a/src/main/resources/hibernate-heroku.cfg.xml b/src/main/resources/hibernate-heroku.cfg.xml\r\nindex cdc5fb7..d245567 100644\r\n--- a/src/main/resources/hibernate-heroku.cfg.xml\r\n+++ b/src/main/resources/hibernate-heroku.cfg.xml\r\n@@ -14,7 +14,7 @@\r\n     \r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n-        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n'),(31,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\nindex f9a37ed..ec616db 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n@@ -29,16 +29,16 @@ public class ItemToItemController {\r\n         this.serializer = serializer;\r\n     }\r\n     \r\n-    @Get(\"/recommend/item/{itemId}\")\r\n-    public void recommend(Long itemId, String accessKey) {\r\n-        Item item = itemDao.find(itemId);\r\n+    @Get(\"/recommend/item/{appItemId}\")\r\n+    public void recommend(Long appItemId, String accessKey) {\r\n+        Item item = itemDao.findByAppItemId(appItemId);\r\n         ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n         serializeResult(recommended.getTuples());\r\n     }\r\n     \r\n     @Get(\"/recommend/items/\")\r\n     public void recommend(List<Long> itemsIds, String accessKey) {\r\n-        List<Item> items = itemDao.find(itemsIds);\r\n+        List<Item> items = itemDao.findAppItemIds(itemsIds);\r\n         ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n         serializeResult(recommended.getTuples());\r\n     }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/ItemDao.java b/src/main/java/br/ime/usp/commendans/dao/ItemDao.java\r\nindex 8e2675e..8dfc102 100644\r\n--- a/src/main/java/br/ime/usp/commendans/dao/ItemDao.java\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/ItemDao.java\r\n@@ -2,6 +2,7 @@ package br.ime.usp.commendans.dao;\r\n \r\n import java.util.List;\r\n \r\n+import org.hibernate.Query;\r\n import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n@@ -16,14 +17,16 @@ public class ItemDao {\r\n         this.session = session;\r\n     }\r\n \r\n-    public Item find(Long itemId) {\r\n-        return (Item) session.load(Item.class, itemId);\r\n+    public Item findByAppItemId(Long appItemId) {\r\n+        Query query = session.createQuery(\"select item from Item item where item.appItemId = :id\");\r\n+        query.setLong(\"id\", appItemId);\r\n+        return (Item) query.uniqueResult();\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n-    public List<Item> find(List<Long> itemsIds) {\r\n+    public List<Item> findAppItemIds(List<Long> itemsIds) {\r\n         return session\r\n-                .createQuery(\"select item from Item item where item.id in :ids\")\r\n+                .createQuery(\"select item from Item item where item.appItemId in :ids\")\r\n                 .setParameterList(\"ids\", itemsIds)\r\n                 .list();\r\n     }\r\ndiff --git a/src/test/java/br/ime/usp/commendans/dao/ItemDaoTest.java b/src/test/java/br/ime/usp/commendans/dao/ItemDaoTest.java\r\nnew file mode 100644\r\nindex 0000000..82086d7\r\n--- /dev/null\r\n+++ b/src/test/java/br/ime/usp/commendans/dao/ItemDaoTest.java\r\n@@ -0,0 +1,37 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class ItemDaoTest extends DaoTest {\r\n+    \r\n+    private ItemDao itemDao;\r\n+\r\n+    @Before\r\n+    public void setUp() {\r\n+        itemDao = new ItemDao(session);\r\n+        session.beginTransaction();\r\n+    }\r\n+    \r\n+    @After\r\n+    public void tearDown() {\r\n+        session.getTransaction().rollback();\r\n+        session.clear();\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void shouldFindByAppItemId() throws Exception {\r\n+        Application app = new Application(\"cdc\", \"123\");\r\n+        session.save(app);\r\n+        session.save(new Item(11l, app));\r\n+        Item item = itemDao.findByAppItemId(11l);\r\n+        assertEquals(11l, item.getAppItemId().longValue());\r\n+    }\r\n+\r\n+}\r\n'),(32,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\nindex ec616db..f2111a6 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n@@ -1,15 +1,18 @@\r\n package br.ime.usp.commendans.controller;\r\n \r\n+import java.util.ArrayList;\r\n import java.util.List;\r\n \r\n import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n+import br.ime.usp.commendans.dao.ApplicationDao;\r\n import br.ime.usp.commendans.dao.ItemDao;\r\n import br.ime.usp.commendans.infra.TupleJsonSerializer;\r\n import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n import br.ime.usp.commendans.itemtoitem.Tuple;\r\n+import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n \r\n@@ -19,33 +22,52 @@ public class ItemToItemController {\r\n     private final Result result;\r\n     private final TupleJsonSerializer serializer;\r\n     private final GeneralRecommender recommender;\r\n+    private final ApplicationDao appDao;\r\n \r\n     public ItemToItemController(GeneralRecommender recommender, \r\n-            ItemDao itemDao, Result result, \r\n+            ItemDao itemDao, ApplicationDao appDao, Result result, \r\n             TupleJsonSerializer serializer) {\r\n         this.recommender = recommender;\r\n         this.itemDao = itemDao;\r\n+        this.appDao = appDao;\r\n         this.result = result;\r\n         this.serializer = serializer;\r\n     }\r\n     \r\n     @Get(\"/recommend/item/{appItemId}\")\r\n     public void recommend(Long appItemId, String accessKey) {\r\n-        Item item = itemDao.findByAppItemId(appItemId);\r\n-        ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n-        serializeResult(recommended.getTuples());\r\n+        if (validKey(accessKey)) {\r\n+            Application app = appDao.findByAccessKey(accessKey);\r\n+            Item item = itemDao.findByAppItemId(appItemId, app);\r\n+            ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n+            serializeResult(recommended);\r\n+        }\r\n     }\r\n     \r\n+\r\n     @Get(\"/recommend/items/\")\r\n     public void recommend(List<Long> itemsIds, String accessKey) {\r\n-        List<Item> items = itemDao.findAppItemIds(itemsIds);\r\n-        ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n-        serializeResult(recommended.getTuples());\r\n+        if (validKey(accessKey)) {\r\n+            Application app = appDao.findByAccessKey(accessKey);\r\n+            List<Item> items = itemDao.findAppItemIds(itemsIds, app);\r\n+            ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n+            serializeResult(recommended);\r\n+        }\r\n+    }\r\n+\r\n+    private boolean validKey(String accessKey) {\r\n+        Application app = appDao.findByAccessKey(accessKey);\r\n+        if (app == null) {\r\n+            result.notFound();\r\n+            return false;\r\n+        }\r\n+        return true;\r\n     }\r\n \r\n-    private void serializeResult(List<Tuple> recommendend) {\r\n+    private void serializeResult(ItemVector recommended) {\r\n+        List<Tuple> tuples = recommended == null ? new ArrayList<Tuple>() : recommended.getTuples();\r\n         result.use(Results.http())\r\n             .addHeader(\"content-type\", \"application/json\")\r\n-            .body(serializer.toJson(recommendend));\r\n+            .body(serializer.toJson(tuples));\r\n     }\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/ApplicationDao.java b/src/main/java/br/ime/usp/commendans/dao/ApplicationDao.java\r\nindex d78e95b..9dab8f2 100644\r\n--- a/src/main/java/br/ime/usp/commendans/dao/ApplicationDao.java\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/ApplicationDao.java\r\n@@ -2,6 +2,7 @@ package br.ime.usp.commendans.dao;\r\n \r\n import java.util.List;\r\n \r\n+import org.hibernate.Query;\r\n import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n@@ -21,5 +22,11 @@ public class ApplicationDao {\r\n         return session.createCriteria(Application.class).list();\r\n     }\r\n \r\n+    public Application findByAccessKey(String key) {\r\n+        Query query = session.createQuery(\"select app from Application app where app.accessKey=:key\");\r\n+        query.setParameter(\"key\", key);\r\n+        return (Application) query.uniqueResult();\r\n+    }\r\n+\r\n \r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/ItemDao.java b/src/main/java/br/ime/usp/commendans/dao/ItemDao.java\r\nindex 8dfc102..ea0c31e 100644\r\n--- a/src/main/java/br/ime/usp/commendans/dao/ItemDao.java\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/ItemDao.java\r\n@@ -6,6 +6,7 @@ import org.hibernate.Query;\r\n import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n @Component\r\n@@ -17,17 +18,19 @@ public class ItemDao {\r\n         this.session = session;\r\n     }\r\n \r\n-    public Item findByAppItemId(Long appItemId) {\r\n-        Query query = session.createQuery(\"select item from Item item where item.appItemId = :id\");\r\n+    public Item findByAppItemId(Long appItemId, Application app) {\r\n+        Query query = session.createQuery(\"select item from Item item where item.appItemId = :id and item.app.id = :appId\");\r\n         query.setLong(\"id\", appItemId);\r\n+        query.setLong(\"appId\", app.getId());\r\n         return (Item) query.uniqueResult();\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n-    public List<Item> findAppItemIds(List<Long> itemsIds) {\r\n+    public List<Item> findAppItemIds(List<Long> itemsIds, Application app) {\r\n         return session\r\n-                .createQuery(\"select item from Item item where item.appItemId in :ids\")\r\n+                .createQuery(\"select item from Item item where item.appItemId in :ids and item.app.id = :appId\")\r\n                 .setParameterList(\"ids\", itemsIds)\r\n+                .setParameter(\"appId\", app.getId())\r\n                 .list();\r\n     }\r\n \r\ndiff --git a/src/test/java/br/ime/usp/commendans/dao/ApplicationDaoTest.java b/src/test/java/br/ime/usp/commendans/dao/ApplicationDaoTest.java\r\nindex 6a14774..76124d0 100644\r\n--- a/src/test/java/br/ime/usp/commendans/dao/ApplicationDaoTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/dao/ApplicationDaoTest.java\r\n@@ -32,5 +32,13 @@ public class ApplicationDaoTest extends DaoTest {\r\n         List<Application> apps = applicationDao.list();\r\n         assertEquals(2, apps.size());\r\n     }\r\n+    \r\n+    @Test\r\n+    public void shouldFindAppByAccessKey() throws Exception {\r\n+        session.save(new Application(\"cdc\", \"123\"));\r\n+        session.save(new Application(\"caelum\", \"1234\"));\r\n+        Application app = applicationDao.findByAccessKey(\"1234\");\r\n+        assertEquals(\"caelum\", app.getName());\r\n+    }\r\n \r\n }\r\ndiff --git a/src/test/java/br/ime/usp/commendans/dao/ItemDaoTest.java b/src/test/java/br/ime/usp/commendans/dao/ItemDaoTest.java\r\nindex 82086d7..d88fd2b 100644\r\n--- a/src/test/java/br/ime/usp/commendans/dao/ItemDaoTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/dao/ItemDaoTest.java\r\n@@ -28,10 +28,14 @@ public class ItemDaoTest extends DaoTest {\r\n     @Test\r\n     public void shouldFindByAppItemId() throws Exception {\r\n         Application app = new Application(\"cdc\", \"123\");\r\n+        Application app2 = new Application(\"caelum\", \"1234\");\r\n         session.save(app);\r\n+        session.save(app2);\r\n         session.save(new Item(11l, app));\r\n-        Item item = itemDao.findByAppItemId(11l);\r\n+        session.save(new Item(11l, app2));\r\n+        Item item = itemDao.findByAppItemId(11l, app);\r\n         assertEquals(11l, item.getAppItemId().longValue());\r\n+        assertEquals(\"cdc\", item.getApp().getName());\r\n     }\r\n \r\n }\r\n'),(33,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/RecommenderComponent.java b/src/main/java/br/ime/usp/commendans/infra/RecommenderComponent.java\r\ndeleted file mode 100644\r\nindex 04cdd7a..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/infra/RecommenderComponent.java\r\n+++ /dev/null\r\n@@ -1,6 +0,0 @@\r\n-package br.ime.usp.commendans.infra;\r\n-\r\n-\r\n-public class RecommenderComponent {\r\n-    \r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java b/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java\r\nindex e0bcba3..60905fd 100644\r\n--- a/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java\r\n@@ -4,24 +4,25 @@ import java.util.List;\r\n \r\n import javax.annotation.PostConstruct;\r\n \r\n+import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n import br.ime.usp.commendans.dao.ApplicationDao;\r\n import br.ime.usp.commendans.dao.CustomerDao;\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n+import br.ime.usp.commendans.itemtoitem.SingleAppRecommenderFactory;\r\n import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n \r\n-@Component\r\n+@Component @ApplicationScoped\r\n public class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n     private final CustomerDao customerDao;\r\n-    private final ItemToItemRecommenderFactory factory;\r\n+    private final SingleAppRecommenderFactory factory;\r\n     private GeneralRecommender recommender;\r\n     private final ApplicationDao appDao;\r\n \r\n-    public RecommenderCreator(CustomerDao dao, ApplicationDao appDao, ItemToItemRecommenderFactory factory) {\r\n+    public RecommenderCreator(CustomerDao dao, ApplicationDao appDao, SingleAppRecommenderFactory factory) {\r\n         this.customerDao = dao;\r\n         this.appDao = appDao;\r\n         this.factory = factory;\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\ndeleted file mode 100644\r\nindex b11e0ab..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemRecommenderFactory.java\r\n+++ /dev/null\r\n@@ -1,69 +0,0 @@\r\n-package br.ime.usp.commendans.itemtoitem;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n-import br.com.caelum.vraptor.ioc.Component;\r\n-import br.ime.usp.commendans.model.Customer;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-@Component @ApplicationScoped\r\n-public class ItemToItemRecommenderFactory {\r\n-\r\n-    private Map<Item, List<Customer>> customerByItemBought;\r\n-    private HashMap<Item, ItemToItemsAssociation> associations;\r\n-    \r\n-    public ItemToItemRecommenderFactory() {\r\n-        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n-    }\r\n-    \r\n-    public void addUser(Customer user) {\r\n-        for (Item item : user.itemsBought()) {\r\n-            store(item, user);\r\n-        }\r\n-    }\r\n-\r\n-    private void store(Item item, Customer user) {\r\n-        List<Customer> users = customerByItemBought.get(item);\r\n-        if (users == null) {\r\n-            users = new ArrayList<Customer>();\r\n-        }\r\n-        users.add(user);\r\n-        customerByItemBought.put(item, users);\r\n-    }\r\n-    \r\n-    \r\n-    public SingleAppRecommender build() {\r\n-        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n-        Set<Item> items = customerByItemBought.keySet();\r\n-        for (Item item : items) {\r\n-            associate(item);\r\n-        }\r\n-        return new SingleAppRecommender(associations);\r\n-    }\r\n-\r\n-    private void associate(Item item) {\r\n-        ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n-        List<Customer> customers = customerByItemBought.get(item);\r\n-        for (Customer user : customers) {\r\n-            List<Item> boughtTogether = user.itemsBought();\r\n-            for (Item i : boughtTogether) {\r\n-                association.associate(i);\r\n-            }\r\n-        }\r\n-        associations.put(item, association);\r\n-    }\r\n-    \r\n-    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n-        return associations;\r\n-    }\r\n-\r\n-    public void clean() {\r\n-        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommenderFactory.java b/src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommenderFactory.java\r\nnew file mode 100644\r\nindex 0000000..21a99d6\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommenderFactory.java\r\n@@ -0,0 +1,69 @@\r\n+package br.ime.usp.commendans.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+@Component @ApplicationScoped\r\n+public class SingleAppRecommenderFactory {\r\n+\r\n+    private Map<Item, List<Customer>> customerByItemBought;\r\n+    private HashMap<Item, ItemToItemsAssociation> associations;\r\n+    \r\n+    public SingleAppRecommenderFactory() {\r\n+        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n+    }\r\n+    \r\n+    public void addUser(Customer user) {\r\n+        for (Item item : user.itemsBought()) {\r\n+            store(item, user);\r\n+        }\r\n+    }\r\n+\r\n+    private void store(Item item, Customer user) {\r\n+        List<Customer> users = customerByItemBought.get(item);\r\n+        if (users == null) {\r\n+            users = new ArrayList<Customer>();\r\n+        }\r\n+        users.add(user);\r\n+        customerByItemBought.put(item, users);\r\n+    }\r\n+    \r\n+    \r\n+    public SingleAppRecommender build() {\r\n+        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n+        Set<Item> items = customerByItemBought.keySet();\r\n+        for (Item item : items) {\r\n+            associate(item);\r\n+        }\r\n+        return new SingleAppRecommender(associations);\r\n+    }\r\n+\r\n+    private void associate(Item item) {\r\n+        ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n+        List<Customer> customers = customerByItemBought.get(item);\r\n+        for (Customer user : customers) {\r\n+            List<Item> boughtTogether = user.itemsBought();\r\n+            for (Item i : boughtTogether) {\r\n+                association.associate(i);\r\n+            }\r\n+        }\r\n+        associations.put(item, association);\r\n+    }\r\n+    \r\n+    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n+        return associations;\r\n+    }\r\n+\r\n+    public void clean() {\r\n+        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java b/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\ndeleted file mode 100644\r\nindex 47a8134..0000000\r\n--- a/src/test/java/br/ime/usp/commendans/factory/ItemToItemRecommenderFactoryTest.java\r\n+++ /dev/null\r\n@@ -1,87 +0,0 @@\r\n-package br.ime.usp.commendans.factory;\r\n-\r\n-import static org.junit.Assert.assertEquals;\r\n-\r\n-import java.util.Arrays;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\n-import br.ime.usp.commendans.itemtoitem.Tuple;\r\n-import br.ime.usp.commendans.model.Application;\r\n-import br.ime.usp.commendans.model.Customer;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class ItemToItemRecommenderFactoryTest {\r\n-\r\n-    @Test\r\n-    public void shouldBuildRecommenderBookExample() {\r\n-        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n-        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n-        Item item1 = new Item(1l, cdc);\r\n-        Item item2 = new Item(2l, cdc);\r\n-        Item item3 = new Item(3l, cdc);\r\n-        Item item4 = new Item(4l, cdc);\r\n-        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l, cdc);\r\n-        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l, cdc);\r\n-        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l, cdc);\r\n-        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l, cdc);\r\n-        factory.addUser(user1);\r\n-        factory.addUser(user2);\r\n-        factory.addUser(user3);\r\n-        factory.addUser(user4);\r\n-        \r\n-        SingleAppRecommender recommender = factory.build();\r\n-        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n-        \r\n-        List<Tuple> recommendedItems = recommender.recommendedItemsFor(item1).getTuples();\r\n-        ItemToItemsAssociation association = associations.get(item1);\r\n-        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n-        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n-        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n-        \r\n-        assertEquals(2, recommendedItems.size());\r\n-        assertEquals(item3, recommendedItems.get(0).getItem());\r\n-        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n-        assertEquals(item2, recommendedItems.get(1).getItem());\r\n-        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n-        \r\n-        recommendedItems = recommender.recommendedItemsFor(item2).getTuples();\r\n-        association = associations.get(item2);\r\n-        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n-        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n-        \r\n-        assertEquals(3, recommendedItems.size());\r\n-        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n-        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n-        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n-        \r\n-        recommendedItems = recommender.recommendedItemsFor(item3).getTuples();\r\n-        association = associations.get(item3);\r\n-        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n-        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n-        \r\n-        assertEquals(3, recommendedItems.size());\r\n-        assertEquals(item1, recommendedItems.get(0).getItem());\r\n-        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n-        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n-        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n-        \r\n-        association = associations.get(item4);\r\n-        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n-        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n-        \r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/test/java/br/ime/usp/commendans/factory/SingleAppRecommenderFactoryTest.java b/src/test/java/br/ime/usp/commendans/factory/SingleAppRecommenderFactoryTest.java\r\nnew file mode 100644\r\nindex 0000000..cb1b2bf\r\n--- /dev/null\r\n+++ b/src/test/java/br/ime/usp/commendans/factory/SingleAppRecommenderFactoryTest.java\r\n@@ -0,0 +1,87 @@\r\n+package br.ime.usp.commendans.factory;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\n+import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n+import br.ime.usp.commendans.itemtoitem.SingleAppRecommenderFactory;\r\n+import br.ime.usp.commendans.itemtoitem.Tuple;\r\n+import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class SingleAppRecommenderFactoryTest {\r\n+\r\n+    @Test\r\n+    public void shouldBuildRecommenderFromCollectiveIntelligenceInActionExample() {\r\n+        SingleAppRecommenderFactory factory = new SingleAppRecommenderFactory();\r\n+        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n+        Item item1 = new Item(1l, cdc);\r\n+        Item item2 = new Item(2l, cdc);\r\n+        Item item3 = new Item(3l, cdc);\r\n+        Item item4 = new Item(4l, cdc);\r\n+        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l, cdc);\r\n+        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l, cdc);\r\n+        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l, cdc);\r\n+        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l, cdc);\r\n+        factory.addUser(user1);\r\n+        factory.addUser(user2);\r\n+        factory.addUser(user3);\r\n+        factory.addUser(user4);\r\n+        \r\n+        SingleAppRecommender recommender = factory.build();\r\n+        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n+        \r\n+        List<Tuple> recommendedItems = recommender.recommendedItemsFor(item1).getTuples();\r\n+        ItemToItemsAssociation association = associations.get(item1);\r\n+        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(2, recommendedItems.size());\r\n+        assertEquals(item3, recommendedItems.get(0).getItem());\r\n+        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(item2, recommendedItems.get(1).getItem());\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        \r\n+        recommendedItems = recommender.recommendedItemsFor(item2).getTuples();\r\n+        association = associations.get(item2);\r\n+        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(3, recommendedItems.size());\r\n+        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n+        \r\n+        recommendedItems = recommender.recommendedItemsFor(item3).getTuples();\r\n+        association = associations.get(item3);\r\n+        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(3, recommendedItems.size());\r\n+        assertEquals(item1, recommendedItems.get(0).getItem());\r\n+        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n+        \r\n+        association = associations.get(item4);\r\n+        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n+        \r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/test/java/br/ime/usp/commendans/itemtoitem/ItemVectorTest.java b/src/test/java/br/ime/usp/commendans/itemtoitem/ItemVectorTest.java\r\nindex 59eb600..14e300c 100644\r\n--- a/src/test/java/br/ime/usp/commendans/itemtoitem/ItemVectorTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/itemtoitem/ItemVectorTest.java\r\n@@ -14,7 +14,7 @@ import br.ime.usp.commendans.model.Item;\r\n public class ItemVectorTest {\r\n \r\n     @Test\r\n-    public void test() {\r\n+    public void shouldMergeTuples() {\r\n         Application cdc = new Application(\"Casa do Código\", \"123\");\r\n         Item item1 = new Item(1l, cdc);\r\n         Item item2 = new Item(2l, cdc);\r\n'),(34,'\r\ndiff --git a/pom.xml b/pom.xml\r\nindex 9d60e71..bd9262b 100644\r\n--- a/pom.xml\r\n+++ b/pom.xml\r\n@@ -83,7 +83,7 @@\r\n                             <extraJvmArguments>-Xmx512m</extraJvmArguments>\r\n                             <programs>\r\n                                 <program>\r\n-                                    <mainClass>br.ime.usp.commendans.runner.Runner</mainClass>\r\n+                                    <mainClass>br.ime.usp.commendans.infra.JettyRunner</mainClass>\r\n                                     <name>webapp</name>\r\n                                 </program>\r\n                             </programs>\r\ndiff --git a/src/main/java/br/ime/usp/commendans/Recommender.java b/src/main/java/br/ime/usp/commendans/Recommender.java\r\ndeleted file mode 100644\r\nindex 51ed54a..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/Recommender.java\r\n+++ /dev/null\r\n@@ -1,8 +0,0 @@\r\n-package br.ime.usp.commendans;\r\n-\r\n-import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public interface Recommender {\r\n-    public ItemVector recommendedItemsFor(Item item);\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/components/SessionCreator.java b/src/main/java/br/ime/usp/commendans/components/SessionCreator.java\r\ndeleted file mode 100644\r\nindex 6ca9a2a..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/components/SessionCreator.java\r\n+++ /dev/null\r\n@@ -1,38 +0,0 @@\r\n-package br.ime.usp.commendans.components;\r\n-\r\n-import javax.annotation.PostConstruct;\r\n-import javax.annotation.PreDestroy;\r\n-\r\n-import org.hibernate.Session;\r\n-import org.hibernate.SessionFactory;\r\n-\r\n-import br.com.caelum.vraptor.ioc.Component;\r\n-import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n-import br.com.caelum.vraptor.ioc.RequestScoped;\r\n-\r\n-@Component @RequestScoped\r\n-public class SessionCreator implements ComponentFactory<Session> {\r\n-    \r\n-    private final SessionFactory sf;\r\n-    private org.hibernate.classic.Session session;\r\n-\r\n-    public SessionCreator(SessionFactory sf) {\r\n-        this.sf = sf;\r\n-    }\r\n-\r\n-    @Override\r\n-    public Session getInstance() {\r\n-        return session;\r\n-    }\r\n-    \r\n-    @PostConstruct\r\n-    public void create() {\r\n-        session = sf.openSession();\r\n-    }\r\n-    \r\n-    @PreDestroy\r\n-    public void destroy() {\r\n-        session.close();\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java b/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java\r\ndeleted file mode 100644\r\nindex d4f6138..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/components/SessionFactoryCreator.java\r\n+++ /dev/null\r\n@@ -1,71 +0,0 @@\r\n-package br.ime.usp.commendans.components;\r\n-\r\n-import java.net.URI;\r\n-import java.net.URISyntaxException;\r\n-\r\n-import javax.annotation.PostConstruct;\r\n-import javax.annotation.PreDestroy;\r\n-import javax.servlet.ServletContext;\r\n-\r\n-import org.apache.log4j.Logger;\r\n-import org.hibernate.SessionFactory;\r\n-import org.hibernate.cfg.Configuration;\r\n-\r\n-import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n-import br.com.caelum.vraptor.ioc.Component;\r\n-import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n-\r\n-@Component @ApplicationScoped\r\n-public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n-\r\n-    private SessionFactory sessionFactory;\r\n-    private static Logger LOG = Logger.getLogger(SessionFactoryCreator.class);\r\n-    private String env;\r\n-    \r\n-    public SessionFactoryCreator(ServletContext context) {\r\n-        env = context.getInitParameter(\"environment\");\r\n-    }\r\n-\r\n-    @Override\r\n-    public SessionFactory getInstance() {\r\n-        return sessionFactory;\r\n-    }\r\n-    \r\n-    @PreDestroy\r\n-    public void destroy() {\r\n-        sessionFactory.close();\r\n-    }\r\n-    \r\n-    @PostConstruct\r\n-    public void create() {\r\n-        if (env.equals(\"heroku\")) {\r\n-            \r\n-            URI dbUri;\r\n-            try {\r\n-                dbUri = new URI(System.getenv(\"DATABASE_URL\"));\r\n-            } catch (URISyntaxException e) {\r\n-                throw new RuntimeException(e);\r\n-            }\r\n-\r\n-            String username = dbUri.getUserInfo().split(\":\")[0];\r\n-            String password = dbUri.getUserInfo().split(\":\")[1];\r\n-            String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + \':\' + dbUri.getPort()  + dbUri.getPath();\r\n-            \r\n-            LOG.info(\"using heroku specific confs\");\r\n-            LOG.info(\"username: \" + username);\r\n-            LOG.info(\"password: \" + password);\r\n-            LOG.info(\"dbUrl: \" + dbUrl);\r\n-            Configuration configuration = new Configuration().configure(\"/hibernate-heroku.cfg.xml\");\r\n-            configuration.setProperty(\"hibernate.connection.url\", dbUrl);\r\n-            configuration.setProperty(\"hibernate.connection.driver_class\", \"org.postgresql.Driver\");\r\n-            configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\r\n-            configuration.setProperty(\"hibernate.connection.username\", username);\r\n-            configuration.setProperty(\"hibernate.connection.password\", password);\r\n-            \r\n-            sessionFactory = configuration.buildSessionFactory();\r\n-        } else {\r\n-            sessionFactory = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n-        }\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/IndexController.java b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\nindex 715d829..563d4f4 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n@@ -6,7 +6,7 @@ import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n-import br.ime.usp.commendans.util.DataImporter;\r\n+import br.ime.usp.commendans.infra.DataImporter;\r\n \r\n \r\n @Resource\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\nindex f2111a6..1ba6e0b 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n@@ -10,11 +10,11 @@ import br.com.caelum.vraptor.view.Results;\r\n import br.ime.usp.commendans.dao.ApplicationDao;\r\n import br.ime.usp.commendans.dao.ItemDao;\r\n import br.ime.usp.commendans.infra.TupleJsonSerializer;\r\n-import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n-import br.ime.usp.commendans.itemtoitem.Tuple;\r\n import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n \r\n @Resource\r\n public class ItemToItemController {\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/DataImporter.java b/src/main/java/br/ime/usp/commendans/infra/DataImporter.java\r\nnew file mode 100644\r\nindex 0000000..b8abd25\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/DataImporter.java\r\n@@ -0,0 +1,88 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+import org.hibernate.Session;\r\n+import org.hibernate.SessionFactory;\r\n+import org.hibernate.cfg.Configuration;\r\n+\r\n+import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class DataImporter {\r\n+    \r\n+    private final Session session;\r\n+    private static Logger logger = Logger.getLogger(DataImporter.class);\r\n+\r\n+    public DataImporter(Session session) {\r\n+        this.session = session;\r\n+    }\r\n+\r\n+    public static void main(String[] args) throws IOException {\r\n+        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n+        Session session = sf.openSession();\r\n+        DataImporter dataImporter = new DataImporter(session);\r\n+        dataImporter.importData(\"/orders.csv\");\r\n+    }\r\n+\r\n+    public void importData(String file) {\r\n+        HashMap<Long, Customer> users = new HashMap<Long, Customer>();\r\n+        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n+        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n+        String line = safeReadLine(reader);\r\n+        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        session.save(cdc);\r\n+        \r\n+        while (line != null) {\r\n+            logger.debug(line);\r\n+            List<String> row = Arrays.asList(line.split(\",\"));\r\n+            long id = Long.parseLong(row.get(0));\r\n+            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n+            Customer user = users.get(id);\r\n+            if (user == null) {\r\n+                user = new Customer(new ArrayList<Item>(), id, cdc);\r\n+            }\r\n+            Item item = items.get(itemId);\r\n+            if (item == null) {\r\n+                item = new Item(itemId, cdc);\r\n+            }\r\n+            user.add(item);\r\n+            line = safeReadLine(reader);\r\n+            users.put(id, user);\r\n+            items.put(itemId, item);\r\n+        }\r\n+        \r\n+        logger.debug(\"persisting\");\r\n+        session.getTransaction().begin();\r\n+        for (Item item : items.values()) {\r\n+            session.save(item);\r\n+        }\r\n+        \r\n+        Collection<Customer> allUsers = users.values();\r\n+        for (Customer user : allUsers) {\r\n+            session.save(user);\r\n+        }\r\n+        session.getTransaction().commit();\r\n+        logger.debug(\"finished persisting\");\r\n+    }\r\n+\r\n+    private String safeReadLine(BufferedReader reader) {\r\n+        try {\r\n+            return reader.readLine();\r\n+        } catch (IOException e) {\r\n+            throw new RuntimeException(\"could not read file\", e);\r\n+        }\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/JettyRunner.java b/src/main/java/br/ime/usp/commendans/infra/JettyRunner.java\r\nnew file mode 100644\r\nindex 0000000..ee2d4fa\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/JettyRunner.java\r\n@@ -0,0 +1,25 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import org.eclipse.jetty.server.Server;\r\n+import org.eclipse.jetty.webapp.WebAppContext;\r\n+\r\n+public class JettyRunner {\r\n+    \r\n+    public static void main(String[] args) throws Exception {\r\n+        String webappDirLocation = \"src/main/webapp/\";\r\n+        String webPort = System.getenv(\"PORT\");\r\n+        if (webPort == null || webPort.isEmpty()) {\r\n+            webPort = \"8080\";\r\n+        }\r\n+        Server server = new Server(Integer.valueOf(webPort));\r\n+        WebAppContext root = new WebAppContext();\r\n+        root.setContextPath(\"/\");\r\n+        root.setDescriptor(webappDirLocation + \"/WEB-INF/web-heroku.xml\");\r\n+        root.setResourceBase(webappDirLocation);\r\n+        root.setParentLoaderPriority(true);\r\n+        server.setHandler(root);\r\n+        server.start();\r\n+        server.join();\r\n+    }\r\n+    \r\n+}\r\n\\ No newline at end of file\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java b/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java\r\nindex 60905fd..f424219 100644\r\n--- a/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java\r\n@@ -9,11 +9,11 @@ import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n import br.ime.usp.commendans.dao.ApplicationDao;\r\n import br.ime.usp.commendans.dao.CustomerDao;\r\n-import br.ime.usp.commendans.itemtoitem.SingleAppRecommenderFactory;\r\n-import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommenderFactory;\r\n \r\n @Component @ApplicationScoped\r\n public class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/SessionCreator.java b/src/main/java/br/ime/usp/commendans/infra/SessionCreator.java\r\nnew file mode 100644\r\nindex 0000000..0d955f5\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/SessionCreator.java\r\n@@ -0,0 +1,38 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import javax.annotation.PostConstruct;\r\n+import javax.annotation.PreDestroy;\r\n+\r\n+import org.hibernate.Session;\r\n+import org.hibernate.SessionFactory;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n+import br.com.caelum.vraptor.ioc.RequestScoped;\r\n+\r\n+@Component @RequestScoped\r\n+public class SessionCreator implements ComponentFactory<Session> {\r\n+    \r\n+    private final SessionFactory sf;\r\n+    private org.hibernate.classic.Session session;\r\n+\r\n+    public SessionCreator(SessionFactory sf) {\r\n+        this.sf = sf;\r\n+    }\r\n+\r\n+    @Override\r\n+    public Session getInstance() {\r\n+        return session;\r\n+    }\r\n+    \r\n+    @PostConstruct\r\n+    public void create() {\r\n+        session = sf.openSession();\r\n+    }\r\n+    \r\n+    @PreDestroy\r\n+    public void destroy() {\r\n+        session.close();\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/SessionFactoryCreator.java b/src/main/java/br/ime/usp/commendans/infra/SessionFactoryCreator.java\r\nnew file mode 100644\r\nindex 0000000..e6af812\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/SessionFactoryCreator.java\r\n@@ -0,0 +1,71 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import java.net.URI;\r\n+import java.net.URISyntaxException;\r\n+\r\n+import javax.annotation.PostConstruct;\r\n+import javax.annotation.PreDestroy;\r\n+import javax.servlet.ServletContext;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+import org.hibernate.SessionFactory;\r\n+import org.hibernate.cfg.Configuration;\r\n+\r\n+import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n+\r\n+@Component @ApplicationScoped\r\n+public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n+\r\n+    private SessionFactory sessionFactory;\r\n+    private static Logger LOG = Logger.getLogger(SessionFactoryCreator.class);\r\n+    private String env;\r\n+    \r\n+    public SessionFactoryCreator(ServletContext context) {\r\n+        env = context.getInitParameter(\"environment\");\r\n+    }\r\n+\r\n+    @Override\r\n+    public SessionFactory getInstance() {\r\n+        return sessionFactory;\r\n+    }\r\n+    \r\n+    @PreDestroy\r\n+    public void destroy() {\r\n+        sessionFactory.close();\r\n+    }\r\n+    \r\n+    @PostConstruct\r\n+    public void create() {\r\n+        if (env.equals(\"heroku\")) {\r\n+            \r\n+            URI dbUri;\r\n+            try {\r\n+                dbUri = new URI(System.getenv(\"DATABASE_URL\"));\r\n+            } catch (URISyntaxException e) {\r\n+                throw new RuntimeException(e);\r\n+            }\r\n+\r\n+            String username = dbUri.getUserInfo().split(\":\")[0];\r\n+            String password = dbUri.getUserInfo().split(\":\")[1];\r\n+            String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + \':\' + dbUri.getPort()  + dbUri.getPath();\r\n+            \r\n+            LOG.info(\"using heroku specific confs\");\r\n+            LOG.info(\"username: \" + username);\r\n+            LOG.info(\"password: \" + password);\r\n+            LOG.info(\"dbUrl: \" + dbUrl);\r\n+            Configuration configuration = new Configuration().configure(\"/hibernate-heroku.cfg.xml\");\r\n+            configuration.setProperty(\"hibernate.connection.url\", dbUrl);\r\n+            configuration.setProperty(\"hibernate.connection.driver_class\", \"org.postgresql.Driver\");\r\n+            configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\r\n+            configuration.setProperty(\"hibernate.connection.username\", username);\r\n+            configuration.setProperty(\"hibernate.connection.password\", password);\r\n+            \r\n+            sessionFactory = configuration.buildSessionFactory();\r\n+        } else {\r\n+            sessionFactory = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n+        }\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/TupleJsonSerializer.java b/src/main/java/br/ime/usp/commendans/infra/TupleJsonSerializer.java\r\nindex 8dd66cd..628d189 100644\r\n--- a/src/main/java/br/ime/usp/commendans/infra/TupleJsonSerializer.java\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/TupleJsonSerializer.java\r\n@@ -4,7 +4,7 @@ import java.util.Arrays;\r\n import java.util.List;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n-import br.ime.usp.commendans.itemtoitem.Tuple;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n \r\n import com.google.gson.ExclusionStrategy;\r\n import com.google.gson.FieldAttributes;\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemsAssociation.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemsAssociation.java\r\ndeleted file mode 100644\r\nindex a9e46dd..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemToItemsAssociation.java\r\n+++ /dev/null\r\n@@ -1,59 +0,0 @@\r\n-package br.ime.usp.commendans.itemtoitem;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collections;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class ItemToItemsAssociation {\r\n-    private Item item;\r\n-    private Map<Item, Double> associations;\r\n-\r\n-    public ItemToItemsAssociation(Item item) {\r\n-        this.item = item;\r\n-        this.associations = new HashMap<Item, Double>();\r\n-    }\r\n-\r\n-    public void associate(Item i) {\r\n-        if (i.equals(this.item))\r\n-            return;\r\n-        Double v = associations.get(i);\r\n-        if (v == null) {\r\n-            v = 0.0;\r\n-        }\r\n-        v += 1.0;\r\n-        associations.put(i, v);\r\n-    }\r\n-    \r\n-    public double associationValue(Item i) {\r\n-        Double v = associations.get(i);\r\n-        if (v == null) {\r\n-            return 0.0;\r\n-        }\r\n-        return v;\r\n-    }\r\n-    \r\n-    \r\n-    @Override\r\n-    public String toString() {\r\n-        String res = this.item.toString() + \" => {\" + associations.toString() + \"}\";\r\n-        return res;\r\n-    }\r\n-\r\n-    public List<Tuple> toTupleList() {\r\n-        Set<Item> items = associations.keySet();\r\n-        ArrayList<Tuple> tuples = new ArrayList<Tuple>();\r\n-        for (Item item : items) {\r\n-            Double value = associations.get(item);\r\n-            tuples.add(new Tuple(item, value));\r\n-        }\r\n-        Collections.sort(tuples);\r\n-        Collections.reverse(tuples);\r\n-        return tuples;\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemVector.java b/src/main/java/br/ime/usp/commendans/itemtoitem/ItemVector.java\r\ndeleted file mode 100644\r\nindex a44262c..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/ItemVector.java\r\n+++ /dev/null\r\n@@ -1,48 +0,0 @@\r\n-package br.ime.usp.commendans.itemtoitem;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collections;\r\n-import java.util.HashSet;\r\n-import java.util.List;\r\n-import java.util.Set;\r\n-\r\n-public class ItemVector {\r\n-\r\n-    private Set<Tuple> tuples;\r\n-\r\n-    public ItemVector(Set<Tuple> tuples) {\r\n-        this.tuples = tuples;\r\n-    }\r\n-\r\n-    public ItemVector(List<Tuple> tuples) {\r\n-        this(new HashSet<Tuple>(tuples));\r\n-    }\r\n-\r\n-    public List<Tuple> getTuples() {\r\n-        ArrayList<Tuple> tuples = new ArrayList<Tuple>(this.tuples);\r\n-        Collections.sort(tuples);\r\n-        Collections.reverse(tuples);\r\n-        return Collections.unmodifiableList(tuples);\r\n-    }\r\n-    \r\n-    public ItemVector merge(ItemVector other) {\r\n-        Set<Tuple> tuples = new HashSet<Tuple>();\r\n-        Set<Tuple> tuplesToRemove = new HashSet<Tuple>();\r\n-        for (Tuple tuple : this.tuples) {\r\n-            for (Tuple t : other.getTuples()) {\r\n-                if (t.getItem().equals(tuple.getItem())) {\r\n-                    Tuple newTuple = new Tuple(t.getItem(), tuple.getValue() + t.getValue());\r\n-                    tuples.add(newTuple);\r\n-                    tuplesToRemove.add(t);\r\n-                    tuplesToRemove.add(tuple);\r\n-                    break;\r\n-                }\r\n-            }\r\n-        }\r\n-        tuples.addAll(this.tuples);\r\n-        tuples.addAll(other.getTuples());\r\n-        tuples.removeAll(tuplesToRemove);\r\n-        return new ItemVector(tuples);\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommender.java b/src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommender.java\r\ndeleted file mode 100644\r\nindex 142aed2..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommender.java\r\n+++ /dev/null\r\n@@ -1,46 +0,0 @@\r\n-package br.ime.usp.commendans.itemtoitem;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import br.ime.usp.commendans.Recommender;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class SingleAppRecommender implements Recommender {\r\n-\r\n-    private final Map<Item, ItemVector> associations;\r\n-\r\n-    public SingleAppRecommender(\r\n-            HashMap<Item, ItemToItemsAssociation> associations) {\r\n-        this.associations = parse(associations);\r\n-    }\r\n-\r\n-    private Map<Item, ItemVector> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n-        HashMap<Item, ItemVector> map = new HashMap<Item, ItemVector>();\r\n-        Set<Item> items = associations.keySet();\r\n-        for (Item item : items) {\r\n-            ItemToItemsAssociation association = associations.get(item);\r\n-            List<Tuple> tuples = association.toTupleList();\r\n-            map.put(item, new ItemVector(tuples));\r\n-        }\r\n-        return map;\r\n-    }\r\n-\r\n-    @Override\r\n-    public ItemVector recommendedItemsFor(Item item) {\r\n-        return associations.get(item);\r\n-    }\r\n-\r\n-    public ItemVector recommendedItemsFor(List<Item> items) {\r\n-        ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n-        for (Item item : items) {\r\n-            ItemVector other = recommendedItemsFor(item);\r\n-            vector = vector.merge(other);\r\n-        }\r\n-        return vector;\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommenderFactory.java b/src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommenderFactory.java\r\ndeleted file mode 100644\r\nindex 21a99d6..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/SingleAppRecommenderFactory.java\r\n+++ /dev/null\r\n@@ -1,69 +0,0 @@\r\n-package br.ime.usp.commendans.itemtoitem;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n-import br.com.caelum.vraptor.ioc.Component;\r\n-import br.ime.usp.commendans.model.Customer;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-@Component @ApplicationScoped\r\n-public class SingleAppRecommenderFactory {\r\n-\r\n-    private Map<Item, List<Customer>> customerByItemBought;\r\n-    private HashMap<Item, ItemToItemsAssociation> associations;\r\n-    \r\n-    public SingleAppRecommenderFactory() {\r\n-        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n-    }\r\n-    \r\n-    public void addUser(Customer user) {\r\n-        for (Item item : user.itemsBought()) {\r\n-            store(item, user);\r\n-        }\r\n-    }\r\n-\r\n-    private void store(Item item, Customer user) {\r\n-        List<Customer> users = customerByItemBought.get(item);\r\n-        if (users == null) {\r\n-            users = new ArrayList<Customer>();\r\n-        }\r\n-        users.add(user);\r\n-        customerByItemBought.put(item, users);\r\n-    }\r\n-    \r\n-    \r\n-    public SingleAppRecommender build() {\r\n-        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n-        Set<Item> items = customerByItemBought.keySet();\r\n-        for (Item item : items) {\r\n-            associate(item);\r\n-        }\r\n-        return new SingleAppRecommender(associations);\r\n-    }\r\n-\r\n-    private void associate(Item item) {\r\n-        ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n-        List<Customer> customers = customerByItemBought.get(item);\r\n-        for (Customer user : customers) {\r\n-            List<Item> boughtTogether = user.itemsBought();\r\n-            for (Item i : boughtTogether) {\r\n-                association.associate(i);\r\n-            }\r\n-        }\r\n-        associations.put(item, association);\r\n-    }\r\n-    \r\n-    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n-        return associations;\r\n-    }\r\n-\r\n-    public void clean() {\r\n-        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/itemtoitem/Tuple.java b/src/main/java/br/ime/usp/commendans/itemtoitem/Tuple.java\r\ndeleted file mode 100644\r\nindex e735a7f..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/itemtoitem/Tuple.java\r\n+++ /dev/null\r\n@@ -1,63 +0,0 @@\r\n-package br.ime.usp.commendans.itemtoitem;\r\n-\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class Tuple implements Comparable<Tuple> {\r\n-    private Item item;\r\n-    private Double value;\r\n-\r\n-    public Tuple(Item item, Double value) {\r\n-        this.item = item;\r\n-        this.value = value;\r\n-    }\r\n-\r\n-    public Item getItem() {\r\n-        return item;\r\n-    }\r\n-\r\n-    public Double getValue() {\r\n-        return value;\r\n-    }\r\n-\r\n-    @Override\r\n-    public int compareTo(Tuple o) {\r\n-        return (int) (value - o.getValue());\r\n-    }\r\n-    \r\n-    @Override\r\n-    public int hashCode() {\r\n-        final int prime = 31;\r\n-        int result = 1;\r\n-        result = prime * result + ((item == null) ? 0 : item.hashCode());\r\n-        result = prime * result + ((value == null) ? 0 : value.hashCode());\r\n-        return result;\r\n-    }\r\n-\r\n-    @Override\r\n-    public boolean equals(Object obj) {\r\n-        if (this == obj)\r\n-            return true;\r\n-        if (obj == null)\r\n-            return false;\r\n-        if (getClass() != obj.getClass())\r\n-            return false;\r\n-        Tuple other = (Tuple) obj;\r\n-        if (item == null) {\r\n-            if (other.item != null)\r\n-                return false;\r\n-        } else if (!item.equals(other.item))\r\n-            return false;\r\n-        if (value == null) {\r\n-            if (other.value != null)\r\n-                return false;\r\n-        } else if (!value.equals(other.value))\r\n-            return false;\r\n-        return true;\r\n-    }\r\n-\r\n-    @Override\r\n-    public String toString() {\r\n-        return \"[Tuple: item=\" + item + \"]\";\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Application.java b/src/main/java/br/ime/usp/commendans/model/Application.java\r\nindex 638e2d4..d5fa3fa 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/Application.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Application.java\r\n@@ -7,8 +7,8 @@ import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n import javax.persistence.Transient;\r\n \r\n-import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n-import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n \r\n @Entity\r\n public class Application {\r\ndiff --git a/src/main/java/br/ime/usp/commendans/recommender/GeneralRecommender.java b/src/main/java/br/ime/usp/commendans/recommender/GeneralRecommender.java\r\nindex 12c91db..ded62be 100644\r\n--- a/src/main/java/br/ime/usp/commendans/recommender/GeneralRecommender.java\r\n+++ b/src/main/java/br/ime/usp/commendans/recommender/GeneralRecommender.java\r\n@@ -4,9 +4,9 @@ import java.util.HashMap;\r\n import java.util.List;\r\n import java.util.Map;\r\n \r\n-import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n \r\n public class GeneralRecommender {\r\n \r\ndiff --git a/src/main/java/br/ime/usp/commendans/recommender/Recommender.java b/src/main/java/br/ime/usp/commendans/recommender/Recommender.java\r\nnew file mode 100644\r\nindex 0000000..ae9d8b6\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/recommender/Recommender.java\r\n@@ -0,0 +1,8 @@\r\n+package br.ime.usp.commendans.recommender;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n+\r\n+public interface Recommender {\r\n+    public ItemVector recommendedItemsFor(Item item);\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/ItemToItemsAssociation.java b/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/ItemToItemsAssociation.java\r\nnew file mode 100644\r\nindex 0000000..e293ca9\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/ItemToItemsAssociation.java\r\n@@ -0,0 +1,59 @@\r\n+package br.ime.usp.commendans.recommender.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class ItemToItemsAssociation {\r\n+    private Item item;\r\n+    private Map<Item, Double> associations;\r\n+\r\n+    public ItemToItemsAssociation(Item item) {\r\n+        this.item = item;\r\n+        this.associations = new HashMap<Item, Double>();\r\n+    }\r\n+\r\n+    public void associate(Item i) {\r\n+        if (i.equals(this.item))\r\n+            return;\r\n+        Double v = associations.get(i);\r\n+        if (v == null) {\r\n+            v = 0.0;\r\n+        }\r\n+        v += 1.0;\r\n+        associations.put(i, v);\r\n+    }\r\n+    \r\n+    public double associationValue(Item i) {\r\n+        Double v = associations.get(i);\r\n+        if (v == null) {\r\n+            return 0.0;\r\n+        }\r\n+        return v;\r\n+    }\r\n+    \r\n+    \r\n+    @Override\r\n+    public String toString() {\r\n+        String res = this.item.toString() + \" => {\" + associations.toString() + \"}\";\r\n+        return res;\r\n+    }\r\n+\r\n+    public List<Tuple> toTupleList() {\r\n+        Set<Item> items = associations.keySet();\r\n+        ArrayList<Tuple> tuples = new ArrayList<Tuple>();\r\n+        for (Item item : items) {\r\n+            Double value = associations.get(item);\r\n+            tuples.add(new Tuple(item, value));\r\n+        }\r\n+        Collections.sort(tuples);\r\n+        Collections.reverse(tuples);\r\n+        return tuples;\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/ItemVector.java b/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/ItemVector.java\r\nnew file mode 100644\r\nindex 0000000..3c8a540\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/ItemVector.java\r\n@@ -0,0 +1,48 @@\r\n+package br.ime.usp.commendans.recommender.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+public class ItemVector {\r\n+\r\n+    private Set<Tuple> tuples;\r\n+\r\n+    public ItemVector(Set<Tuple> tuples) {\r\n+        this.tuples = tuples;\r\n+    }\r\n+\r\n+    public ItemVector(List<Tuple> tuples) {\r\n+        this(new HashSet<Tuple>(tuples));\r\n+    }\r\n+\r\n+    public List<Tuple> getTuples() {\r\n+        ArrayList<Tuple> tuples = new ArrayList<Tuple>(this.tuples);\r\n+        Collections.sort(tuples);\r\n+        Collections.reverse(tuples);\r\n+        return Collections.unmodifiableList(tuples);\r\n+    }\r\n+    \r\n+    public ItemVector merge(ItemVector other) {\r\n+        Set<Tuple> tuples = new HashSet<Tuple>();\r\n+        Set<Tuple> tuplesToRemove = new HashSet<Tuple>();\r\n+        for (Tuple tuple : this.tuples) {\r\n+            for (Tuple t : other.getTuples()) {\r\n+                if (t.getItem().equals(tuple.getItem())) {\r\n+                    Tuple newTuple = new Tuple(t.getItem(), tuple.getValue() + t.getValue());\r\n+                    tuples.add(newTuple);\r\n+                    tuplesToRemove.add(t);\r\n+                    tuplesToRemove.add(tuple);\r\n+                    break;\r\n+                }\r\n+            }\r\n+        }\r\n+        tuples.addAll(this.tuples);\r\n+        tuples.addAll(other.getTuples());\r\n+        tuples.removeAll(tuplesToRemove);\r\n+        return new ItemVector(tuples);\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommender.java b/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommender.java\r\nnew file mode 100644\r\nindex 0000000..66b6604\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommender.java\r\n@@ -0,0 +1,46 @@\r\n+package br.ime.usp.commendans.recommender.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.recommender.Recommender;\r\n+\r\n+public class SingleAppRecommender implements Recommender {\r\n+\r\n+    private final Map<Item, ItemVector> associations;\r\n+\r\n+    public SingleAppRecommender(\r\n+            HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        this.associations = parse(associations);\r\n+    }\r\n+\r\n+    private Map<Item, ItemVector> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        HashMap<Item, ItemVector> map = new HashMap<Item, ItemVector>();\r\n+        Set<Item> items = associations.keySet();\r\n+        for (Item item : items) {\r\n+            ItemToItemsAssociation association = associations.get(item);\r\n+            List<Tuple> tuples = association.toTupleList();\r\n+            map.put(item, new ItemVector(tuples));\r\n+        }\r\n+        return map;\r\n+    }\r\n+\r\n+    @Override\r\n+    public ItemVector recommendedItemsFor(Item item) {\r\n+        return associations.get(item);\r\n+    }\r\n+\r\n+    public ItemVector recommendedItemsFor(List<Item> items) {\r\n+        ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n+        for (Item item : items) {\r\n+            ItemVector other = recommendedItemsFor(item);\r\n+            vector = vector.merge(other);\r\n+        }\r\n+        return vector;\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommenderFactory.java b/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommenderFactory.java\r\nnew file mode 100644\r\nindex 0000000..4de3e64\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommenderFactory.java\r\n@@ -0,0 +1,69 @@\r\n+package br.ime.usp.commendans.recommender.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+@Component @ApplicationScoped\r\n+public class SingleAppRecommenderFactory {\r\n+\r\n+    private Map<Item, List<Customer>> customerByItemBought;\r\n+    private HashMap<Item, ItemToItemsAssociation> associations;\r\n+    \r\n+    public SingleAppRecommenderFactory() {\r\n+        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n+    }\r\n+    \r\n+    public void addUser(Customer user) {\r\n+        for (Item item : user.itemsBought()) {\r\n+            store(item, user);\r\n+        }\r\n+    }\r\n+\r\n+    private void store(Item item, Customer user) {\r\n+        List<Customer> users = customerByItemBought.get(item);\r\n+        if (users == null) {\r\n+            users = new ArrayList<Customer>();\r\n+        }\r\n+        users.add(user);\r\n+        customerByItemBought.put(item, users);\r\n+    }\r\n+    \r\n+    \r\n+    public SingleAppRecommender build() {\r\n+        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n+        Set<Item> items = customerByItemBought.keySet();\r\n+        for (Item item : items) {\r\n+            associate(item);\r\n+        }\r\n+        return new SingleAppRecommender(associations);\r\n+    }\r\n+\r\n+    private void associate(Item item) {\r\n+        ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n+        List<Customer> customers = customerByItemBought.get(item);\r\n+        for (Customer user : customers) {\r\n+            List<Item> boughtTogether = user.itemsBought();\r\n+            for (Item i : boughtTogether) {\r\n+                association.associate(i);\r\n+            }\r\n+        }\r\n+        associations.put(item, association);\r\n+    }\r\n+    \r\n+    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n+        return associations;\r\n+    }\r\n+\r\n+    public void clean() {\r\n+        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/Tuple.java b/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/Tuple.java\r\nnew file mode 100644\r\nindex 0000000..58a34e9\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/Tuple.java\r\n@@ -0,0 +1,63 @@\r\n+package br.ime.usp.commendans.recommender.itemtoitem;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class Tuple implements Comparable<Tuple> {\r\n+    private Item item;\r\n+    private Double value;\r\n+\r\n+    public Tuple(Item item, Double value) {\r\n+        this.item = item;\r\n+        this.value = value;\r\n+    }\r\n+\r\n+    public Item getItem() {\r\n+        return item;\r\n+    }\r\n+\r\n+    public Double getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    @Override\r\n+    public int compareTo(Tuple o) {\r\n+        return (int) (value - o.getValue());\r\n+    }\r\n+    \r\n+    @Override\r\n+    public int hashCode() {\r\n+        final int prime = 31;\r\n+        int result = 1;\r\n+        result = prime * result + ((item == null) ? 0 : item.hashCode());\r\n+        result = prime * result + ((value == null) ? 0 : value.hashCode());\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (getClass() != obj.getClass())\r\n+            return false;\r\n+        Tuple other = (Tuple) obj;\r\n+        if (item == null) {\r\n+            if (other.item != null)\r\n+                return false;\r\n+        } else if (!item.equals(other.item))\r\n+            return false;\r\n+        if (value == null) {\r\n+            if (other.value != null)\r\n+                return false;\r\n+        } else if (!value.equals(other.value))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return \"[Tuple: item=\" + item + \"]\";\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/runner/Runner.java b/src/main/java/br/ime/usp/commendans/runner/Runner.java\r\ndeleted file mode 100644\r\nindex 0a37ecf..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/runner/Runner.java\r\n+++ /dev/null\r\n@@ -1,25 +0,0 @@\r\n-package br.ime.usp.commendans.runner;\r\n-\r\n-import org.eclipse.jetty.server.Server;\r\n-import org.eclipse.jetty.webapp.WebAppContext;\r\n-\r\n-public class Runner {\r\n-    \r\n-    public static void main(String[] args) throws Exception {\r\n-        String webappDirLocation = \"src/main/webapp/\";\r\n-        String webPort = System.getenv(\"PORT\");\r\n-        if (webPort == null || webPort.isEmpty()) {\r\n-            webPort = \"8080\";\r\n-        }\r\n-        Server server = new Server(Integer.valueOf(webPort));\r\n-        WebAppContext root = new WebAppContext();\r\n-        root.setContextPath(\"/\");\r\n-        root.setDescriptor(webappDirLocation + \"/WEB-INF/web-heroku.xml\");\r\n-        root.setResourceBase(webappDirLocation);\r\n-        root.setParentLoaderPriority(true);\r\n-        server.setHandler(root);\r\n-        server.start();\r\n-        server.join();\r\n-    }\r\n-    \r\n-}\r\n\\ No newline at end of file\r\ndiff --git a/src/main/java/br/ime/usp/commendans/util/DataImporter.java b/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\ndeleted file mode 100644\r\nindex 5f471fa..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/util/DataImporter.java\r\n+++ /dev/null\r\n@@ -1,88 +0,0 @@\r\n-package br.ime.usp.commendans.util;\r\n-\r\n-import java.io.BufferedReader;\r\n-import java.io.IOException;\r\n-import java.io.InputStream;\r\n-import java.io.InputStreamReader;\r\n-import java.util.ArrayList;\r\n-import java.util.Arrays;\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-\r\n-import org.apache.log4j.Logger;\r\n-import org.hibernate.Session;\r\n-import org.hibernate.SessionFactory;\r\n-import org.hibernate.cfg.Configuration;\r\n-\r\n-import br.ime.usp.commendans.model.Application;\r\n-import br.ime.usp.commendans.model.Customer;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class DataImporter {\r\n-    \r\n-    private final Session session;\r\n-    private static Logger logger = Logger.getLogger(DataImporter.class);\r\n-\r\n-    public DataImporter(Session session) {\r\n-        this.session = session;\r\n-    }\r\n-\r\n-    public static void main(String[] args) throws IOException {\r\n-        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n-        Session session = sf.openSession();\r\n-        DataImporter dataImporter = new DataImporter(session);\r\n-        dataImporter.importData(\"/orders.csv\");\r\n-    }\r\n-\r\n-    public void importData(String file) {\r\n-        HashMap<Long, Customer> users = new HashMap<Long, Customer>();\r\n-        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n-        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n-        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n-        String line = safeReadLine(reader);\r\n-        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n-        session.save(cdc);\r\n-        \r\n-        while (line != null) {\r\n-            logger.debug(line);\r\n-            List<String> row = Arrays.asList(line.split(\",\"));\r\n-            long id = Long.parseLong(row.get(0));\r\n-            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n-            Customer user = users.get(id);\r\n-            if (user == null) {\r\n-                user = new Customer(new ArrayList<Item>(), id, cdc);\r\n-            }\r\n-            Item item = items.get(itemId);\r\n-            if (item == null) {\r\n-                item = new Item(itemId, cdc);\r\n-            }\r\n-            user.add(item);\r\n-            line = safeReadLine(reader);\r\n-            users.put(id, user);\r\n-            items.put(itemId, item);\r\n-        }\r\n-        \r\n-        logger.debug(\"persisting\");\r\n-        session.getTransaction().begin();\r\n-        for (Item item : items.values()) {\r\n-            session.save(item);\r\n-        }\r\n-        \r\n-        Collection<Customer> allUsers = users.values();\r\n-        for (Customer user : allUsers) {\r\n-            session.save(user);\r\n-        }\r\n-        session.getTransaction().commit();\r\n-        logger.debug(\"finished persisting\");\r\n-    }\r\n-\r\n-    private String safeReadLine(BufferedReader reader) {\r\n-        try {\r\n-            return reader.readLine();\r\n-        } catch (IOException e) {\r\n-            throw new RuntimeException(\"could not read file\", e);\r\n-        }\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/test/java/br/ime/usp/commendans/components/SessionFactoryCreatorTest.java b/src/test/java/br/ime/usp/commendans/components/SessionFactoryCreatorTest.java\r\nindex fa62e46..f1ac9a9 100644\r\n--- a/src/test/java/br/ime/usp/commendans/components/SessionFactoryCreatorTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/components/SessionFactoryCreatorTest.java\r\n@@ -8,6 +8,8 @@ import javax.servlet.ServletContext;\r\n import org.junit.Ignore;\r\n import org.junit.Test;\r\n \r\n+import br.ime.usp.commendans.infra.SessionFactoryCreator;\r\n+\r\n public class SessionFactoryCreatorTest {\r\n \r\n     @Test @Ignore\r\ndiff --git a/src/test/java/br/ime/usp/commendans/factory/SingleAppRecommenderFactoryTest.java b/src/test/java/br/ime/usp/commendans/factory/SingleAppRecommenderFactoryTest.java\r\ndeleted file mode 100644\r\nindex cb1b2bf..0000000\r\n--- a/src/test/java/br/ime/usp/commendans/factory/SingleAppRecommenderFactoryTest.java\r\n+++ /dev/null\r\n@@ -1,87 +0,0 @@\r\n-package br.ime.usp.commendans.factory;\r\n-\r\n-import static org.junit.Assert.assertEquals;\r\n-\r\n-import java.util.Arrays;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\n-import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n-import br.ime.usp.commendans.itemtoitem.SingleAppRecommenderFactory;\r\n-import br.ime.usp.commendans.itemtoitem.Tuple;\r\n-import br.ime.usp.commendans.model.Application;\r\n-import br.ime.usp.commendans.model.Customer;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class SingleAppRecommenderFactoryTest {\r\n-\r\n-    @Test\r\n-    public void shouldBuildRecommenderFromCollectiveIntelligenceInActionExample() {\r\n-        SingleAppRecommenderFactory factory = new SingleAppRecommenderFactory();\r\n-        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n-        Item item1 = new Item(1l, cdc);\r\n-        Item item2 = new Item(2l, cdc);\r\n-        Item item3 = new Item(3l, cdc);\r\n-        Item item4 = new Item(4l, cdc);\r\n-        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l, cdc);\r\n-        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l, cdc);\r\n-        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l, cdc);\r\n-        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l, cdc);\r\n-        factory.addUser(user1);\r\n-        factory.addUser(user2);\r\n-        factory.addUser(user3);\r\n-        factory.addUser(user4);\r\n-        \r\n-        SingleAppRecommender recommender = factory.build();\r\n-        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n-        \r\n-        List<Tuple> recommendedItems = recommender.recommendedItemsFor(item1).getTuples();\r\n-        ItemToItemsAssociation association = associations.get(item1);\r\n-        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n-        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n-        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n-        \r\n-        assertEquals(2, recommendedItems.size());\r\n-        assertEquals(item3, recommendedItems.get(0).getItem());\r\n-        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n-        assertEquals(item2, recommendedItems.get(1).getItem());\r\n-        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n-        \r\n-        recommendedItems = recommender.recommendedItemsFor(item2).getTuples();\r\n-        association = associations.get(item2);\r\n-        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n-        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n-        \r\n-        assertEquals(3, recommendedItems.size());\r\n-        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n-        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n-        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n-        \r\n-        recommendedItems = recommender.recommendedItemsFor(item3).getTuples();\r\n-        association = associations.get(item3);\r\n-        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n-        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n-        \r\n-        assertEquals(3, recommendedItems.size());\r\n-        assertEquals(item1, recommendedItems.get(0).getItem());\r\n-        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n-        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n-        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n-        \r\n-        association = associations.get(item4);\r\n-        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n-        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n-        \r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java b/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java\r\nindex b5c7c8e..9f29425 100644\r\n--- a/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java\r\n@@ -6,9 +6,9 @@ import java.util.Arrays;\r\n \r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.itemtoitem.Tuple;\r\n import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n \r\n public class TupleJsonSerializerTest {\r\n \r\ndiff --git a/src/test/java/br/ime/usp/commendans/itemtoitem/ItemVectorTest.java b/src/test/java/br/ime/usp/commendans/itemtoitem/ItemVectorTest.java\r\ndeleted file mode 100644\r\nindex 14e300c..0000000\r\n--- a/src/test/java/br/ime/usp/commendans/itemtoitem/ItemVectorTest.java\r\n+++ /dev/null\r\n@@ -1,42 +0,0 @@\r\n-package br.ime.usp.commendans.itemtoitem;\r\n-\r\n-import static org.junit.Assert.assertEquals;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.HashSet;\r\n-import java.util.List;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import br.ime.usp.commendans.model.Application;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class ItemVectorTest {\r\n-\r\n-    @Test\r\n-    public void shouldMergeTuples() {\r\n-        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n-        Item item1 = new Item(1l, cdc);\r\n-        Item item2 = new Item(2l, cdc);\r\n-        Item item3 = new Item(3l, cdc);\r\n-        Item item4 = new Item(4l, cdc);\r\n-        List<Tuple> tuples = asList(new Tuple(item1, 11.0), new Tuple(item2, 8.0), new Tuple(item3, 2.0));\r\n-        ItemVector itemVector1 = new ItemVector(new HashSet<Tuple>(tuples));\r\n-        tuples = asList(new Tuple(item4, 10.0), new Tuple(item3, 7.0));\r\n-        ItemVector itemVector2 = new ItemVector(new HashSet<Tuple>(tuples));\r\n-        \r\n-        ItemVector merge = itemVector1.merge(itemVector2);\r\n-        List<Tuple> expected = asList(new Tuple(item1, 11.0), new Tuple(item4, 10.0), new Tuple(item3, 9.0), new Tuple(item2, 8.0));\r\n-        assertEquals(expected, merge.getTuples());\r\n-        \r\n-    }\r\n-\r\n-    private List<Tuple> asList(Tuple ... tuples) {\r\n-        ArrayList<Tuple> tuplesList = new ArrayList<Tuple>();\r\n-        for (int i = 0; i < tuples.length; i++) {\r\n-            tuplesList.add(tuples[i]);\r\n-        }\r\n-        return tuplesList;\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/test/java/br/ime/usp/commendans/recommender/itemtoitem/ItemVectorTest.java b/src/test/java/br/ime/usp/commendans/recommender/itemtoitem/ItemVectorTest.java\r\nnew file mode 100644\r\nindex 0000000..2034813\r\n--- /dev/null\r\n+++ b/src/test/java/br/ime/usp/commendans/recommender/itemtoitem/ItemVectorTest.java\r\n@@ -0,0 +1,44 @@\r\n+package br.ime.usp.commendans.recommender.itemtoitem;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n+\r\n+public class ItemVectorTest {\r\n+\r\n+    @Test\r\n+    public void shouldMergeTuples() {\r\n+        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        Item item1 = new Item(1l, cdc);\r\n+        Item item2 = new Item(2l, cdc);\r\n+        Item item3 = new Item(3l, cdc);\r\n+        Item item4 = new Item(4l, cdc);\r\n+        List<Tuple> tuples = asList(new Tuple(item1, 11.0), new Tuple(item2, 8.0), new Tuple(item3, 2.0));\r\n+        ItemVector itemVector1 = new ItemVector(new HashSet<Tuple>(tuples));\r\n+        tuples = asList(new Tuple(item4, 10.0), new Tuple(item3, 7.0));\r\n+        ItemVector itemVector2 = new ItemVector(new HashSet<Tuple>(tuples));\r\n+        \r\n+        ItemVector merge = itemVector1.merge(itemVector2);\r\n+        List<Tuple> expected = asList(new Tuple(item1, 11.0), new Tuple(item4, 10.0), new Tuple(item3, 9.0), new Tuple(item2, 8.0));\r\n+        assertEquals(expected, merge.getTuples());\r\n+        \r\n+    }\r\n+\r\n+    private List<Tuple> asList(Tuple ... tuples) {\r\n+        ArrayList<Tuple> tuplesList = new ArrayList<Tuple>();\r\n+        for (int i = 0; i < tuples.length; i++) {\r\n+            tuplesList.add(tuples[i]);\r\n+        }\r\n+        return tuplesList;\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/test/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommenderFactoryTest.java b/src/test/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommenderFactoryTest.java\r\nnew file mode 100644\r\nindex 0000000..fb3df08\r\n--- /dev/null\r\n+++ b/src/test/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommenderFactoryTest.java\r\n@@ -0,0 +1,87 @@\r\n+package br.ime.usp.commendans.recommender.itemtoitem;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.ItemToItemsAssociation;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommenderFactory;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n+\r\n+public class SingleAppRecommenderFactoryTest {\r\n+\r\n+    @Test\r\n+    public void shouldBuildRecommenderFromCollectiveIntelligenceInActionExample() {\r\n+        SingleAppRecommenderFactory factory = new SingleAppRecommenderFactory();\r\n+        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n+        Item item1 = new Item(1l, cdc);\r\n+        Item item2 = new Item(2l, cdc);\r\n+        Item item3 = new Item(3l, cdc);\r\n+        Item item4 = new Item(4l, cdc);\r\n+        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l, cdc);\r\n+        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l, cdc);\r\n+        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l, cdc);\r\n+        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l, cdc);\r\n+        factory.addUser(user1);\r\n+        factory.addUser(user2);\r\n+        factory.addUser(user3);\r\n+        factory.addUser(user4);\r\n+        \r\n+        SingleAppRecommender recommender = factory.build();\r\n+        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n+        \r\n+        List<Tuple> recommendedItems = recommender.recommendedItemsFor(item1).getTuples();\r\n+        ItemToItemsAssociation association = associations.get(item1);\r\n+        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(2, recommendedItems.size());\r\n+        assertEquals(item3, recommendedItems.get(0).getItem());\r\n+        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(item2, recommendedItems.get(1).getItem());\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        \r\n+        recommendedItems = recommender.recommendedItemsFor(item2).getTuples();\r\n+        association = associations.get(item2);\r\n+        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(3, recommendedItems.size());\r\n+        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n+        \r\n+        recommendedItems = recommender.recommendedItemsFor(item3).getTuples();\r\n+        association = associations.get(item3);\r\n+        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(3, recommendedItems.size());\r\n+        assertEquals(item1, recommendedItems.get(0).getItem());\r\n+        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n+        \r\n+        association = associations.get(item4);\r\n+        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n+        \r\n+    }\r\n+\r\n+}\r\n'),(35,'\r\ndiff --git a/src/main/resources/log4j.xml b/src/main/resources/log4j.xml\r\nindex b71d2f3..a7feff5 100644\r\n--- a/src/main/resources/log4j.xml\r\n+++ b/src/main/resources/log4j.xml\r\n@@ -23,5 +23,10 @@\r\n 		<appender-ref ref=\"stdout\" />\r\n 	</category>\r\n 	\r\n+	<category name=\"org.eclipse.jetty.util.log\">\r\n+		<priority value=\"DEBUG\" />\r\n+		<appender-ref ref=\"stdout\" />\r\n+	</category>\r\n+	\r\n \r\n </log4j:configuration>\r\n'),(36,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java b/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\nindex eea09c0..8b8838b 100644\r\n--- a/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\n@@ -6,10 +6,11 @@ import org.hibernate.Query;\r\n import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n+import br.com.caelum.vraptor.ioc.PrototypeScoped;\r\n import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Customer;\r\n \r\n-@Component\r\n+@Component @PrototypeScoped\r\n public class CustomerDao {\r\n     private final Session session;\r\n \r\n'),(37,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java b/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java\r\nindex f424219..ab9115d 100644\r\n--- a/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java\r\n@@ -4,6 +4,9 @@ import java.util.List;\r\n \r\n import javax.annotation.PostConstruct;\r\n \r\n+import org.hibernate.Session;\r\n+import org.hibernate.SessionFactory;\r\n+\r\n import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n@@ -22,9 +25,10 @@ public class RecommenderCreator implements ComponentFactory<GeneralRecommender>\r\n     private GeneralRecommender recommender;\r\n     private final ApplicationDao appDao;\r\n \r\n-    public RecommenderCreator(CustomerDao dao, ApplicationDao appDao, SingleAppRecommenderFactory factory) {\r\n-        this.customerDao = dao;\r\n-        this.appDao = appDao;\r\n+    public RecommenderCreator(SingleAppRecommenderFactory factory, SessionFactory sf) {\r\n+        Session session = sf.openSession();\r\n+        this.customerDao = new CustomerDao(session);\r\n+        this.appDao = new ApplicationDao(session);\r\n         this.factory = factory;\r\n     }\r\n \r\n'),(38,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/IndexController.java b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\nindex 563d4f4..9e47c2c 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n@@ -7,6 +7,7 @@ import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n import br.ime.usp.commendans.infra.DataImporter;\r\n+import br.ime.usp.commendans.recommender.RecommenderCreator;\r\n \r\n \r\n @Resource\r\n@@ -14,10 +15,12 @@ public class IndexController {\r\n     \r\n     private final Result result;\r\n     private final Session session;\r\n+    private final RecommenderCreator recommenderCreator;\r\n \r\n-    public IndexController(Result result, Session session) {\r\n+    public IndexController(Result result, Session session, RecommenderCreator recommenderCreator) {\r\n         this.result = result;\r\n         this.session = session;\r\n+        this.recommenderCreator = recommenderCreator;\r\n     }\r\n     \r\n     @Get(\"/\")\r\n@@ -29,6 +32,7 @@ public class IndexController {\r\n     public void importData() {\r\n         DataImporter dataImporter = new DataImporter(session);\r\n         dataImporter.importData(\"/orders.csv\");\r\n+        recommenderCreator.create();\r\n         result.use(Results.http()).body(\"<html><body>finished persisting</body></html>\");\r\n     }\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java b/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java\r\ndeleted file mode 100644\r\nindex ab9115d..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/infra/RecommenderCreator.java\r\n+++ /dev/null\r\n@@ -1,58 +0,0 @@\r\n-package br.ime.usp.commendans.infra;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.annotation.PostConstruct;\r\n-\r\n-import org.hibernate.Session;\r\n-import org.hibernate.SessionFactory;\r\n-\r\n-import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n-import br.com.caelum.vraptor.ioc.Component;\r\n-import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n-import br.ime.usp.commendans.dao.ApplicationDao;\r\n-import br.ime.usp.commendans.dao.CustomerDao;\r\n-import br.ime.usp.commendans.model.Application;\r\n-import br.ime.usp.commendans.model.Customer;\r\n-import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n-import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n-import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommenderFactory;\r\n-\r\n-@Component @ApplicationScoped\r\n-public class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n-    private final CustomerDao customerDao;\r\n-    private final SingleAppRecommenderFactory factory;\r\n-    private GeneralRecommender recommender;\r\n-    private final ApplicationDao appDao;\r\n-\r\n-    public RecommenderCreator(SingleAppRecommenderFactory factory, SessionFactory sf) {\r\n-        Session session = sf.openSession();\r\n-        this.customerDao = new CustomerDao(session);\r\n-        this.appDao = new ApplicationDao(session);\r\n-        this.factory = factory;\r\n-    }\r\n-\r\n-    @Override\r\n-    public GeneralRecommender getInstance() {\r\n-        return recommender;\r\n-    }\r\n-    \r\n-    @PostConstruct\r\n-    public void create() {\r\n-        List<Application> apps = appDao.list();\r\n-        for (Application app : apps) {\r\n-            List<Customer> customers = customerDao.findCustomersOf(app);\r\n-            SingleAppRecommender recommender = buildSingleAppRecommender(customers);\r\n-            app.use(recommender);\r\n-        }\r\n-        this.recommender = new GeneralRecommender(apps);\r\n-    }\r\n-\r\n-    private SingleAppRecommender buildSingleAppRecommender(List<Customer> users) {\r\n-        factory.clean();\r\n-        for (Customer user : users) {\r\n-            factory.addUser(user);\r\n-        }\r\n-        return factory.build();\r\n-    }\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/recommender/RecommenderCreator.java b/src/main/java/br/ime/usp/commendans/recommender/RecommenderCreator.java\r\nnew file mode 100644\r\nindex 0000000..1c1e560\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/recommender/RecommenderCreator.java\r\n@@ -0,0 +1,57 @@\r\n+package br.ime.usp.commendans.recommender;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.annotation.PostConstruct;\r\n+\r\n+import org.hibernate.Session;\r\n+import org.hibernate.SessionFactory;\r\n+\r\n+import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n+import br.ime.usp.commendans.dao.ApplicationDao;\r\n+import br.ime.usp.commendans.dao.CustomerDao;\r\n+import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommenderFactory;\r\n+\r\n+@Component @ApplicationScoped\r\n+public class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n+    private final CustomerDao customerDao;\r\n+    private final SingleAppRecommenderFactory factory;\r\n+    private GeneralRecommender recommender;\r\n+    private final ApplicationDao appDao;\r\n+\r\n+    public RecommenderCreator(SingleAppRecommenderFactory factory, SessionFactory sf) {\r\n+        Session session = sf.openSession();\r\n+        this.customerDao = new CustomerDao(session);\r\n+        this.appDao = new ApplicationDao(session);\r\n+        this.factory = factory;\r\n+    }\r\n+\r\n+    @Override\r\n+    public GeneralRecommender getInstance() {\r\n+        return recommender;\r\n+    }\r\n+    \r\n+    @PostConstruct\r\n+    public void create() {\r\n+        List<Application> apps = appDao.list();\r\n+        for (Application app : apps) {\r\n+            List<Customer> customers = customerDao.findCustomersOf(app);\r\n+            SingleAppRecommender recommender = buildSingleAppRecommender(customers);\r\n+            app.use(recommender);\r\n+        }\r\n+        this.recommender = new GeneralRecommender(apps);\r\n+    }\r\n+    \r\n+    private SingleAppRecommender buildSingleAppRecommender(List<Customer> users) {\r\n+        factory.clean();\r\n+        for (Customer user : users) {\r\n+            factory.addUser(user);\r\n+        }\r\n+        return factory.build();\r\n+    }\r\n+}\r\n'),(39,'\r\ndiff --git a/src/main/resources/hibernate-heroku.cfg.xml b/src/main/resources/hibernate-heroku.cfg.xml\r\nindex d245567..cdc5fb7 100644\r\n--- a/src/main/resources/hibernate-heroku.cfg.xml\r\n+++ b/src/main/resources/hibernate-heroku.cfg.xml\r\n@@ -14,7 +14,7 @@\r\n     \r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n-        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n'),(40,'\r\ndiff --git a/script/new_sale.sh b/script/new_sale.sh\r\nnew file mode 100644\r\nindex 0000000..7e95f9a\r\n--- /dev/null\r\n+++ b/script/new_sale.sh\r\n@@ -0,0 +1 @@\r\n+curl --data \"clientAppUserId=66666666&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\" http://localhost:8080/commendans/app/123/addSale\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java b/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\nnew file mode 100644\r\nindex 0000000..6b50130\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\n@@ -0,0 +1,57 @@\r\n+package br.ime.usp.commendans.controller;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import br.com.caelum.vraptor.Post;\r\n+import br.com.caelum.vraptor.Resource;\r\n+import br.com.caelum.vraptor.Result;\r\n+import br.com.caelum.vraptor.view.Results;\r\n+import br.ime.usp.commendans.dao.ClientAppDao;\r\n+import br.ime.usp.commendans.dao.CustomerDao;\r\n+import br.ime.usp.commendans.dao.ItemDao;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.GroupedItems;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+@Resource\r\n+public class ClientAppController {\r\n+\r\n+    private final Result result;\r\n+    private final ClientAppDao appDao;\r\n+    private final ItemDao itemDao;\r\n+    private final CustomerDao customerDao;\r\n+\r\n+    public ClientAppController(Result result, ClientAppDao appDao, ItemDao itemDao, CustomerDao customerDao) {\r\n+        this.result = result;\r\n+        this.appDao = appDao;\r\n+        this.itemDao = itemDao;\r\n+        this.customerDao = customerDao;\r\n+    }\r\n+    \r\n+    //clientAppUserId=100&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\r\n+    @Post(\"app/{key}/addSale\")\r\n+    public void addSale(String key, Long clientAppUserId, List<Long> itemsIds) {\r\n+        ClientApp app = appDao.findByAccessKey(key);\r\n+        GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n+        \r\n+        ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n+        \r\n+        for (Item item : newItems) {\r\n+            itemDao.save(item);\r\n+        }\r\n+        \r\n+        Customer customer = customerDao.find(app, clientAppUserId);\r\n+        List<Item> allItems = groupedItems.getItems();\r\n+        if (customer == null) {\r\n+            customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n+        }\r\n+        for (Item item : allItems) {\r\n+            customer.add(item);\r\n+        }\r\n+        customerDao.save(customer);\r\n+        result.use(Results.json()).from(true).serialize();\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\nindex 1ba6e0b..b6a3b70 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n@@ -7,10 +7,10 @@ import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n-import br.ime.usp.commendans.dao.ApplicationDao;\r\n+import br.ime.usp.commendans.dao.ClientAppDao;\r\n import br.ime.usp.commendans.dao.ItemDao;\r\n import br.ime.usp.commendans.infra.TupleJsonSerializer;\r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n@@ -22,10 +22,10 @@ public class ItemToItemController {\r\n     private final Result result;\r\n     private final TupleJsonSerializer serializer;\r\n     private final GeneralRecommender recommender;\r\n-    private final ApplicationDao appDao;\r\n+    private final ClientAppDao appDao;\r\n \r\n     public ItemToItemController(GeneralRecommender recommender, \r\n-            ItemDao itemDao, ApplicationDao appDao, Result result, \r\n+            ItemDao itemDao, ClientAppDao appDao, Result result, \r\n             TupleJsonSerializer serializer) {\r\n         this.recommender = recommender;\r\n         this.itemDao = itemDao;\r\n@@ -37,7 +37,7 @@ public class ItemToItemController {\r\n     @Get(\"/recommend/item/{appItemId}\")\r\n     public void recommend(Long appItemId, String accessKey) {\r\n         if (validKey(accessKey)) {\r\n-            Application app = appDao.findByAccessKey(accessKey);\r\n+            ClientApp app = appDao.findByAccessKey(accessKey);\r\n             Item item = itemDao.findByAppItemId(appItemId, app);\r\n             ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n             serializeResult(recommended);\r\n@@ -48,15 +48,15 @@ public class ItemToItemController {\r\n     @Get(\"/recommend/items/\")\r\n     public void recommend(List<Long> itemsIds, String accessKey) {\r\n         if (validKey(accessKey)) {\r\n-            Application app = appDao.findByAccessKey(accessKey);\r\n-            List<Item> items = itemDao.findAppItemIds(itemsIds, app);\r\n+            ClientApp app = appDao.findByAccessKey(accessKey);\r\n+            List<Item> items = itemDao.findItems(itemsIds, app).getItems();\r\n             ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n             serializeResult(recommended);\r\n         }\r\n     }\r\n \r\n     private boolean validKey(String accessKey) {\r\n-        Application app = appDao.findByAccessKey(accessKey);\r\n+        ClientApp app = appDao.findByAccessKey(accessKey);\r\n         if (app == null) {\r\n             result.notFound();\r\n             return false;\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/ApplicationDao.java b/src/main/java/br/ime/usp/commendans/dao/ApplicationDao.java\r\ndeleted file mode 100644\r\nindex 9dab8f2..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/dao/ApplicationDao.java\r\n+++ /dev/null\r\n@@ -1,32 +0,0 @@\r\n-package br.ime.usp.commendans.dao;\r\n-\r\n-import java.util.List;\r\n-\r\n-import org.hibernate.Query;\r\n-import org.hibernate.Session;\r\n-\r\n-import br.com.caelum.vraptor.ioc.Component;\r\n-import br.ime.usp.commendans.model.Application;\r\n-\r\n-@Component\r\n-public class ApplicationDao {\r\n-    \r\n-    private final Session session;\r\n-\r\n-    public ApplicationDao(Session session) {\r\n-        this.session = session;\r\n-    }\r\n-    \r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public List<Application> list() {\r\n-        return session.createCriteria(Application.class).list();\r\n-    }\r\n-\r\n-    public Application findByAccessKey(String key) {\r\n-        Query query = session.createQuery(\"select app from Application app where app.accessKey=:key\");\r\n-        query.setParameter(\"key\", key);\r\n-        return (Application) query.uniqueResult();\r\n-    }\r\n-\r\n-\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/ClientAppDao.java b/src/main/java/br/ime/usp/commendans/dao/ClientAppDao.java\r\nnew file mode 100644\r\nindex 0000000..267505d\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/ClientAppDao.java\r\n@@ -0,0 +1,32 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.hibernate.Query;\r\n+import org.hibernate.Session;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n+\r\n+@Component\r\n+public class ClientAppDao {\r\n+    \r\n+    private final Session session;\r\n+\r\n+    public ClientAppDao(Session session) {\r\n+        this.session = session;\r\n+    }\r\n+    \r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public List<ClientApp> list() {\r\n+        return session.createCriteria(ClientApp.class).list();\r\n+    }\r\n+\r\n+    public ClientApp findByAccessKey(String key) {\r\n+        Query query = session.createQuery(\"select app from ClientApp app where app.accessKey=:key\");\r\n+        query.setParameter(\"key\", key);\r\n+        return (ClientApp) query.uniqueResult();\r\n+    }\r\n+\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java b/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\nindex 8b8838b..6ac4b08 100644\r\n--- a/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\n@@ -7,7 +7,7 @@ import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.PrototypeScoped;\r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Customer;\r\n \r\n @Component @PrototypeScoped\r\n@@ -24,11 +24,24 @@ public class CustomerDao {\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n-    public List<Customer> findCustomersOf(Application app) {\r\n+    public List<Customer> findCustomersOf(ClientApp app) {\r\n         Query query = session.createQuery(\"select customer from Customer customer \" +\r\n         		\"join fetch customer.items \" +\r\n         		\"where customer.app.name like :appName\");\r\n         query.setParameter(\"appName\", app.getName());\r\n         return query.list();\r\n     }\r\n+\r\n+    public void save(Customer customer) {\r\n+        session.saveOrUpdate(customer);\r\n+    }\r\n+\r\n+    public Customer find(ClientApp app, Long customerId) {\r\n+        Query query = session.createQuery(\"select customer from Customer customer \" +\r\n+                \"where customer.app.id like :appId \" +\r\n+                \"and customer.clientAppCustomerId = :customerId\");\r\n+        query.setParameter(\"appId\", app.getId());\r\n+        query.setParameter(\"customerId\", customerId);\r\n+        return (Customer) query.uniqueResult();\r\n+    }\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/ItemDao.java b/src/main/java/br/ime/usp/commendans/dao/ItemDao.java\r\nindex ea0c31e..333ce30 100644\r\n--- a/src/main/java/br/ime/usp/commendans/dao/ItemDao.java\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/ItemDao.java\r\n@@ -6,7 +6,8 @@ import org.hibernate.Query;\r\n import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n+import br.ime.usp.commendans.model.GroupedItems;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n @Component\r\n@@ -18,7 +19,7 @@ public class ItemDao {\r\n         this.session = session;\r\n     }\r\n \r\n-    public Item findByAppItemId(Long appItemId, Application app) {\r\n+    public Item findByAppItemId(Long appItemId, ClientApp app) {\r\n         Query query = session.createQuery(\"select item from Item item where item.appItemId = :id and item.app.id = :appId\");\r\n         query.setLong(\"id\", appItemId);\r\n         query.setLong(\"appId\", app.getId());\r\n@@ -26,12 +27,17 @@ public class ItemDao {\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n-    public List<Item> findAppItemIds(List<Long> itemsIds, Application app) {\r\n-        return session\r\n+    public GroupedItems findItems(List<Long> itemsIds, ClientApp app) {\r\n+        List<Item> items = session\r\n                 .createQuery(\"select item from Item item where item.appItemId in :ids and item.app.id = :appId\")\r\n                 .setParameterList(\"ids\", itemsIds)\r\n                 .setParameter(\"appId\", app.getId())\r\n                 .list();\r\n+        return new GroupedItems(items);\r\n+    }\r\n+\r\n+    public void save(Item item) {\r\n+        session.save(item);\r\n     }\r\n \r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/DataImporter.java b/src/main/java/br/ime/usp/commendans/infra/DataImporter.java\r\nindex b8abd25..fa73cd2 100644\r\n--- a/src/main/java/br/ime/usp/commendans/infra/DataImporter.java\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/DataImporter.java\r\n@@ -15,7 +15,7 @@ import org.hibernate.Session;\r\n import org.hibernate.SessionFactory;\r\n import org.hibernate.cfg.Configuration;\r\n \r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n@@ -41,7 +41,7 @@ public class DataImporter {\r\n         InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n         BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n         String line = safeReadLine(reader);\r\n-        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        ClientApp cdc = new ClientApp(\"Casa do Código\", \"123\");\r\n         session.save(cdc);\r\n         \r\n         while (line != null) {\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Application.java b/src/main/java/br/ime/usp/commendans/model/Application.java\r\ndeleted file mode 100644\r\nindex d5fa3fa..0000000\r\n--- a/src/main/java/br/ime/usp/commendans/model/Application.java\r\n+++ /dev/null\r\n@@ -1,90 +0,0 @@\r\n-package br.ime.usp.commendans.model;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Transient;\r\n-\r\n-import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n-import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n-\r\n-@Entity\r\n-public class Application {\r\n-\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private Long id;\r\n-\r\n-    private String name;\r\n-\r\n-    private String accessKey;\r\n-\r\n-    @Transient\r\n-    private SingleAppRecommender recommender;\r\n-\r\n-    @Deprecated\r\n-    protected Application() {\r\n-    }\r\n-\r\n-    public Application(String name, String accessKey) {\r\n-        this.name = name;\r\n-        this.accessKey = accessKey;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void use(SingleAppRecommender recommender) {\r\n-        this.recommender = recommender;\r\n-    }\r\n-\r\n-    public Long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public ItemVector recommendedItemsFor(Item item) {\r\n-        return recommender.recommendedItemsFor(item);\r\n-    }\r\n-\r\n-    public ItemVector recommendedItemsFor(List<Item> items) {\r\n-        return recommender.recommendedItemsFor(items);\r\n-    }\r\n-\r\n-    public String getAccessKey() {\r\n-        return accessKey;\r\n-    }\r\n-\r\n-    @Override\r\n-    public String toString() {\r\n-        return \"Application [id=\" + id + \", name=\" + name + \", accessKey=\"\r\n-                + accessKey + \"]\";\r\n-    }\r\n-    @Override\r\n-    public int hashCode() {\r\n-        final int prime = 31;\r\n-        int result = 1;\r\n-        result = prime * result + ((id == null) ? 0 : id.hashCode());\r\n-        return result;\r\n-    }\r\n-    \r\n-    @Override\r\n-    public boolean equals(Object obj) {\r\n-        if (this == obj)\r\n-            return true;\r\n-        if (obj == null)\r\n-            return false;\r\n-        if (getClass() != obj.getClass())\r\n-            return false;\r\n-        Application other = (Application) obj;\r\n-        if (id == null) {\r\n-            if (other.id != null)\r\n-                return false;\r\n-        } else if (!id.equals(other.id))\r\n-            return false;\r\n-        return true;\r\n-    }\r\n-}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/ClientApp.java b/src/main/java/br/ime/usp/commendans/model/ClientApp.java\r\nnew file mode 100644\r\nindex 0000000..10e5450\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/model/ClientApp.java\r\n@@ -0,0 +1,90 @@\r\n+package br.ime.usp.commendans.model;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Transient;\r\n+\r\n+import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n+\r\n+@Entity\r\n+public class ClientApp {\r\n+\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private Long id;\r\n+\r\n+    private String name;\r\n+\r\n+    private String accessKey;\r\n+\r\n+    @Transient\r\n+    private SingleAppRecommender recommender;\r\n+\r\n+    @Deprecated\r\n+    protected ClientApp() {\r\n+    }\r\n+\r\n+    public ClientApp(String name, String accessKey) {\r\n+        this.name = name;\r\n+        this.accessKey = accessKey;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void use(SingleAppRecommender recommender) {\r\n+        this.recommender = recommender;\r\n+    }\r\n+\r\n+    public Long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public ItemVector recommendedItemsFor(Item item) {\r\n+        return recommender.recommendedItemsFor(item);\r\n+    }\r\n+\r\n+    public ItemVector recommendedItemsFor(List<Item> items) {\r\n+        return recommender.recommendedItemsFor(items);\r\n+    }\r\n+\r\n+    public String getAccessKey() {\r\n+        return accessKey;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return \"Application [id=\" + id + \", name=\" + name + \", accessKey=\"\r\n+                + accessKey + \"]\";\r\n+    }\r\n+    @Override\r\n+    public int hashCode() {\r\n+        final int prime = 31;\r\n+        int result = 1;\r\n+        result = prime * result + ((id == null) ? 0 : id.hashCode());\r\n+        return result;\r\n+    }\r\n+    \r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (getClass() != obj.getClass())\r\n+            return false;\r\n+        ClientApp other = (ClientApp) obj;\r\n+        if (id == null) {\r\n+            if (other.id != null)\r\n+                return false;\r\n+        } else if (!id.equals(other.id))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Customer.java b/src/main/java/br/ime/usp/commendans/model/Customer.java\r\nindex 888ca2f..fac631b 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/Customer.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Customer.java\r\n@@ -14,21 +14,21 @@ public class Customer {\r\n     @Id @GeneratedValue\r\n     private Long id;\r\n     \r\n-    private Long appId;\r\n+    private Long clientAppCustomerId;\r\n \r\n-    @ManyToMany()\r\n+    @ManyToMany\r\n     private List<Item> items;\r\n     \r\n     @ManyToOne\r\n-    private Application app;\r\n+    private ClientApp app;\r\n     \r\n     @Deprecated\r\n     public Customer() {\r\n     }\r\n \r\n-    public Customer(List<Item> items, Long appId, Application app) {\r\n+    public Customer(List<Item> items, Long clientAppCustomerId, ClientApp app) {\r\n         this.items = items;\r\n-        this.appId = appId;\r\n+        this.clientAppCustomerId = clientAppCustomerId;\r\n         this.app = app;\r\n     }\r\n \r\n@@ -38,15 +38,19 @@ public class Customer {\r\n     \r\n     @Override\r\n     public String toString() {\r\n-        return \"User \" + appId + \" from \" + app;\r\n+        return \"User \" + clientAppCustomerId + \" from \" + app;\r\n     }\r\n \r\n     public void add(Item item) {\r\n         items.add(item);\r\n     }\r\n     \r\n-    public Application getApp() {\r\n+    public ClientApp getApp() {\r\n         return app;\r\n     }\r\n     \r\n+    public Long getClientAppCustomerId() {\r\n+        return clientAppCustomerId;\r\n+    }\r\n+    \r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/GroupedItems.java b/src/main/java/br/ime/usp/commendans/model/GroupedItems.java\r\nnew file mode 100644\r\nindex 0000000..395f07a\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/model/GroupedItems.java\r\n@@ -0,0 +1,31 @@\r\n+package br.ime.usp.commendans.model;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+public class GroupedItems {\r\n+\r\n+    private final List<Item> items;\r\n+\r\n+    public GroupedItems(List<Item> items) {\r\n+        this.items = new ArrayList(items);\r\n+    }\r\n+\r\n+    public ArrayList<Item> addRemaining(List<Long> ids, ClientApp app) {\r\n+        ArrayList<Item> added = new ArrayList<Item>();\r\n+        for (Long id : ids) {\r\n+            Item item = new Item(id, app);\r\n+            if (!items.contains(item)) {\r\n+                items.add(item);\r\n+                added.add(item);\r\n+            }\r\n+        }\r\n+        return added;\r\n+\r\n+    }\r\n+\r\n+    public List<Item> getItems() {\r\n+        return items;\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/GroupedItemsTest.java b/src/main/java/br/ime/usp/commendans/model/GroupedItemsTest.java\r\nnew file mode 100644\r\nindex 0000000..3017369\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/model/GroupedItemsTest.java\r\n@@ -0,0 +1,30 @@\r\n+package br.ime.usp.commendans.model;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class GroupedItemsTest {\r\n+\r\n+    @Test\r\n+    public void shouldAddReaminingItems() {\r\n+        Item item1 = new Item(1l, null);\r\n+        Item item2 = new Item(2l, null);\r\n+        GroupedItems groupedItems = new GroupedItems(Arrays.asList(item1, item2));\r\n+        List<Long> ids = Arrays.asList(1l, 2l, 3l, 4l);\r\n+        groupedItems.addRemaining(ids, null);\r\n+        \r\n+        List<Item> items = groupedItems.getItems();\r\n+        \r\n+        assertEquals(4, items.size());\r\n+        assertTrue(items.contains(item1));\r\n+        assertTrue(items.contains(item2));\r\n+        assertTrue(items.contains(new Item(3l, null)));\r\n+        assertTrue(items.contains(new Item(4l, null)));\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Item.java b/src/main/java/br/ime/usp/commendans/model/Item.java\r\nindex a881266..9cb474a 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/Item.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Item.java\r\n@@ -13,13 +13,13 @@ public class Item {\r\n     private Long appItemId;\r\n     \r\n     @ManyToOne\r\n-    private Application app;\r\n+    private ClientApp app;\r\n \r\n     @Deprecated\r\n     protected Item() {\r\n     }\r\n     \r\n-    public Item(Long appItemId, Application app) {\r\n+    public Item(Long appItemId, ClientApp app) {\r\n         this.appItemId = appItemId;\r\n         this.app = app;\r\n     }\r\n@@ -28,7 +28,7 @@ public class Item {\r\n         return appItemId;\r\n     }\r\n     \r\n-    public Application getApp() {\r\n+    public ClientApp getApp() {\r\n         return app;\r\n     }\r\n     \r\ndiff --git a/src/main/java/br/ime/usp/commendans/recommender/GeneralRecommender.java b/src/main/java/br/ime/usp/commendans/recommender/GeneralRecommender.java\r\nindex ded62be..56b4131 100644\r\n--- a/src/main/java/br/ime/usp/commendans/recommender/GeneralRecommender.java\r\n+++ b/src/main/java/br/ime/usp/commendans/recommender/GeneralRecommender.java\r\n@@ -4,28 +4,28 @@ import java.util.HashMap;\r\n import java.util.List;\r\n import java.util.Map;\r\n \r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n \r\n public class GeneralRecommender {\r\n \r\n-    private Map<String, Application> appsMap;\r\n+    private Map<String, ClientApp> appsMap;\r\n \r\n-    public GeneralRecommender(List<Application> apps) {\r\n-        appsMap = new HashMap<String, Application>();\r\n-        for (Application app : apps) {\r\n+    public GeneralRecommender(List<ClientApp> apps) {\r\n+        appsMap = new HashMap<String, ClientApp>();\r\n+        for (ClientApp app : apps) {\r\n             appsMap.put(app.getAccessKey(), app);\r\n         }\r\n     }\r\n \r\n     public ItemVector recommendedItemsFor(Item item, String accessKey) {\r\n-        Application application = appsMap.get(accessKey);\r\n+        ClientApp application = appsMap.get(accessKey);\r\n         return application.recommendedItemsFor(item);\r\n     }\r\n \r\n     public ItemVector recommendedItemsFor(List<Item> items, String accessKey) {\r\n-        Application application = appsMap.get(accessKey);\r\n+        ClientApp application = appsMap.get(accessKey);\r\n         return application.recommendedItemsFor(items);\r\n     }\r\n \r\ndiff --git a/src/main/java/br/ime/usp/commendans/recommender/RecommenderCreator.java b/src/main/java/br/ime/usp/commendans/recommender/RecommenderCreator.java\r\nindex 1c1e560..fd6ed64 100644\r\n--- a/src/main/java/br/ime/usp/commendans/recommender/RecommenderCreator.java\r\n+++ b/src/main/java/br/ime/usp/commendans/recommender/RecommenderCreator.java\r\n@@ -10,9 +10,9 @@ import org.hibernate.SessionFactory;\r\n import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n-import br.ime.usp.commendans.dao.ApplicationDao;\r\n+import br.ime.usp.commendans.dao.ClientAppDao;\r\n import br.ime.usp.commendans.dao.CustomerDao;\r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommenderFactory;\r\n@@ -22,12 +22,12 @@ public class RecommenderCreator implements ComponentFactory<GeneralRecommender>\r\n     private final CustomerDao customerDao;\r\n     private final SingleAppRecommenderFactory factory;\r\n     private GeneralRecommender recommender;\r\n-    private final ApplicationDao appDao;\r\n+    private final ClientAppDao appDao;\r\n \r\n     public RecommenderCreator(SingleAppRecommenderFactory factory, SessionFactory sf) {\r\n         Session session = sf.openSession();\r\n         this.customerDao = new CustomerDao(session);\r\n-        this.appDao = new ApplicationDao(session);\r\n+        this.appDao = new ClientAppDao(session);\r\n         this.factory = factory;\r\n     }\r\n \r\n@@ -38,8 +38,8 @@ public class RecommenderCreator implements ComponentFactory<GeneralRecommender>\r\n     \r\n     @PostConstruct\r\n     public void create() {\r\n-        List<Application> apps = appDao.list();\r\n-        for (Application app : apps) {\r\n+        List<ClientApp> apps = appDao.list();\r\n+        for (ClientApp app : apps) {\r\n             List<Customer> customers = customerDao.findCustomersOf(app);\r\n             SingleAppRecommender recommender = buildSingleAppRecommender(customers);\r\n             app.use(recommender);\r\ndiff --git a/src/main/resources/hibernate-heroku.cfg.xml b/src/main/resources/hibernate-heroku.cfg.xml\r\nindex cdc5fb7..382bccf 100644\r\n--- a/src/main/resources/hibernate-heroku.cfg.xml\r\n+++ b/src/main/resources/hibernate-heroku.cfg.xml\r\n@@ -18,7 +18,7 @@\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n-        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.ClientApp\" />\r\n \r\n     </session-factory>\r\n </hibernate-configuration>\r\ndiff --git a/src/main/resources/hibernate.cfg.xml b/src/main/resources/hibernate.cfg.xml\r\nindex bba46f1..ce61709 100644\r\n--- a/src/main/resources/hibernate.cfg.xml\r\n+++ b/src/main/resources/hibernate.cfg.xml\r\n@@ -24,7 +24,7 @@\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n-        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.ClientApp\" />\r\n \r\n     </session-factory>\r\n </hibernate-configuration>\r\ndiff --git a/src/test/java/br/ime/usp/commendans/dao/ApplicationDaoTest.java b/src/test/java/br/ime/usp/commendans/dao/ApplicationDaoTest.java\r\ndeleted file mode 100644\r\nindex 76124d0..0000000\r\n--- a/src/test/java/br/ime/usp/commendans/dao/ApplicationDaoTest.java\r\n+++ /dev/null\r\n@@ -1,44 +0,0 @@\r\n-package br.ime.usp.commendans.dao;\r\n-\r\n-import static org.junit.Assert.assertEquals;\r\n-\r\n-import java.util.List;\r\n-\r\n-import org.junit.After;\r\n-import org.junit.Before;\r\n-import org.junit.Test;\r\n-\r\n-import br.ime.usp.commendans.model.Application;\r\n-\r\n-public class ApplicationDaoTest extends DaoTest {\r\n-    private static ApplicationDao applicationDao;\r\n-\r\n-    @Before\r\n-    public void setUp() {\r\n-        applicationDao = new ApplicationDao(session);\r\n-        session.beginTransaction();\r\n-    }\r\n-    \r\n-    @After\r\n-    public void tearDown() {\r\n-        session.getTransaction().rollback();\r\n-        session.clear();\r\n-    }\r\n-    \r\n-    @Test\r\n-    public void shouldListApps() throws Exception {\r\n-        session.save(new Application(\"cdc\", \"123\"));\r\n-        session.save(new Application(\"caelum\", \"1234\"));\r\n-        List<Application> apps = applicationDao.list();\r\n-        assertEquals(2, apps.size());\r\n-    }\r\n-    \r\n-    @Test\r\n-    public void shouldFindAppByAccessKey() throws Exception {\r\n-        session.save(new Application(\"cdc\", \"123\"));\r\n-        session.save(new Application(\"caelum\", \"1234\"));\r\n-        Application app = applicationDao.findByAccessKey(\"1234\");\r\n-        assertEquals(\"caelum\", app.getName());\r\n-    }\r\n-\r\n-}\r\ndiff --git a/src/test/java/br/ime/usp/commendans/dao/ClientAppDaoTest.java b/src/test/java/br/ime/usp/commendans/dao/ClientAppDaoTest.java\r\nnew file mode 100644\r\nindex 0000000..a7e466d\r\n--- /dev/null\r\n+++ b/src/test/java/br/ime/usp/commendans/dao/ClientAppDaoTest.java\r\n@@ -0,0 +1,44 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n+\r\n+public class ClientAppDaoTest extends DaoTest {\r\n+    private static ClientAppDao applicationDao;\r\n+\r\n+    @Before\r\n+    public void setUp() {\r\n+        applicationDao = new ClientAppDao(session);\r\n+        session.beginTransaction();\r\n+    }\r\n+    \r\n+    @After\r\n+    public void tearDown() {\r\n+        session.getTransaction().rollback();\r\n+        session.clear();\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void shouldListApps() throws Exception {\r\n+        session.save(new ClientApp(\"cdc\", \"123\"));\r\n+        session.save(new ClientApp(\"caelum\", \"1234\"));\r\n+        List<ClientApp> apps = applicationDao.list();\r\n+        assertEquals(2, apps.size());\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void shouldFindAppByAccessKey() throws Exception {\r\n+        session.save(new ClientApp(\"cdc\", \"123\"));\r\n+        session.save(new ClientApp(\"caelum\", \"1234\"));\r\n+        ClientApp app = applicationDao.findByAccessKey(\"1234\");\r\n+        assertEquals(\"caelum\", app.getName());\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/test/java/br/ime/usp/commendans/dao/CustomerDaoTest.java b/src/test/java/br/ime/usp/commendans/dao/CustomerDaoTest.java\r\nindex 38ac3a6..f20f993 100644\r\n--- a/src/test/java/br/ime/usp/commendans/dao/CustomerDaoTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/dao/CustomerDaoTest.java\r\n@@ -9,19 +9,19 @@ import org.junit.After;\r\n import org.junit.Before;\r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n public class CustomerDaoTest extends DaoTest {\r\n \r\n     private static CustomerDao userDao;\r\n-    private static Application app;\r\n+    private static ClientApp app;\r\n \r\n     @Before\r\n     public void setUp() {\r\n         userDao = new CustomerDao(session);\r\n-        app = new Application(\"cdc\", \"123\");\r\n+        app = new ClientApp(\"cdc\", \"123\");\r\n         session.beginTransaction();\r\n         session.save(app);\r\n     }\r\n@@ -46,26 +46,39 @@ public class CustomerDaoTest extends DaoTest {\r\n \r\n     @Test\r\n     public void shouldFindUsersOfSpecificApp() throws Exception {\r\n+        saveCustomers();    \r\n+\r\n+        List<Customer> customers = userDao.findCustomersOf(app);\r\n+        assertEquals(3, customers.size());\r\n+        assertEquals(\"cdc\", customers.get(0).getApp().getName());\r\n+        assertEquals(\"cdc\", customers.get(1).getApp().getName());\r\n+        assertEquals(\"cdc\", customers.get(2).getApp().getName());\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void shouldFindCustomerWithIdAndApp() throws Exception {\r\n+        saveCustomers();    \r\n+        \r\n+        Customer c = userDao.find(app, 1l);\r\n+        assertEquals(\"cdc\", c.getApp().getName());\r\n+        assertEquals(1l, c.getClientAppCustomerId().longValue());\r\n+    }\r\n+\r\n+    private void saveCustomers() {\r\n         Item item = new Item(1l, app);\r\n         session.save(item);\r\n         List<Item> items = Arrays.asList(item);\r\n         session.save(new Customer(items, 1l, app));\r\n         session.save(new Customer(items, 2l, app));\r\n         session.save(new Customer(items, 3l, app));\r\n-        Application otherApp = new Application(\"gnarus\", \"123\");\r\n+        ClientApp otherApp = new ClientApp(\"gnarus\", \"123\");\r\n         item = new Item(2l, otherApp);\r\n         items = Arrays.asList(item);\r\n         session.save(otherApp);\r\n         session.save(item);\r\n         session.save(new Customer(items, 1l, otherApp));\r\n         session.save(new Customer(items, 2l, otherApp));\r\n-        session.save(new Customer(items, 3l, otherApp));    \r\n-\r\n-        List<Customer> customers = userDao.findCustomersOf(app);\r\n-        assertEquals(3, customers.size());\r\n-        assertEquals(\"cdc\", customers.get(0).getApp().getName());\r\n-        assertEquals(\"cdc\", customers.get(1).getApp().getName());\r\n-        assertEquals(\"cdc\", customers.get(2).getApp().getName());\r\n+        session.save(new Customer(items, 3l, otherApp));\r\n     }\r\n \r\n }\r\ndiff --git a/src/test/java/br/ime/usp/commendans/dao/ItemDaoTest.java b/src/test/java/br/ime/usp/commendans/dao/ItemDaoTest.java\r\nindex d88fd2b..9cb5f73 100644\r\n--- a/src/test/java/br/ime/usp/commendans/dao/ItemDaoTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/dao/ItemDaoTest.java\r\n@@ -6,7 +6,7 @@ import org.junit.After;\r\n import org.junit.Before;\r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n public class ItemDaoTest extends DaoTest {\r\n@@ -27,8 +27,8 @@ public class ItemDaoTest extends DaoTest {\r\n     \r\n     @Test\r\n     public void shouldFindByAppItemId() throws Exception {\r\n-        Application app = new Application(\"cdc\", \"123\");\r\n-        Application app2 = new Application(\"caelum\", \"1234\");\r\n+        ClientApp app = new ClientApp(\"cdc\", \"123\");\r\n+        ClientApp app2 = new ClientApp(\"caelum\", \"1234\");\r\n         session.save(app);\r\n         session.save(app2);\r\n         session.save(new Item(11l, app));\r\ndiff --git a/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java b/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java\r\nindex 9f29425..515b1ae 100644\r\n--- a/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/infra/TupleJsonSerializerTest.java\r\n@@ -6,7 +6,7 @@ import java.util.Arrays;\r\n \r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n \r\n@@ -15,7 +15,7 @@ public class TupleJsonSerializerTest {\r\n     @Test\r\n     public void shouldSerializeATuple() {\r\n         TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n-        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        ClientApp cdc = new ClientApp(\"Casa do Código\", \"123\");\r\n         String json = serializer.toJson(new Tuple(new Item(1l, cdc), 10.0));\r\n         assertEquals(\"{\\\"item\\\":{\\\"appItemId\\\":1},\\\"value\\\":10.0}\", json);\r\n     }\r\n@@ -23,7 +23,7 @@ public class TupleJsonSerializerTest {\r\n     @Test\r\n     public void shouldSerializeATupleList() {\r\n         TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n-        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        ClientApp cdc = new ClientApp(\"Casa do Código\", \"123\");\r\n         String json = serializer.toJson(Arrays.asList(new Tuple(new Item(1l, cdc), 10.0)));\r\n         assertEquals(\"[{\\\"item\\\":{\\\"appItemId\\\":1},\\\"value\\\":10.0}]\", json);\r\n     }\r\ndiff --git a/src/test/java/br/ime/usp/commendans/recommender/itemtoitem/ItemVectorTest.java b/src/test/java/br/ime/usp/commendans/recommender/itemtoitem/ItemVectorTest.java\r\nindex 2034813..2222ff6 100644\r\n--- a/src/test/java/br/ime/usp/commendans/recommender/itemtoitem/ItemVectorTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/recommender/itemtoitem/ItemVectorTest.java\r\n@@ -8,7 +8,7 @@ import java.util.List;\r\n \r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n import br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n@@ -17,7 +17,7 @@ public class ItemVectorTest {\r\n \r\n     @Test\r\n     public void shouldMergeTuples() {\r\n-        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        ClientApp cdc = new ClientApp(\"Casa do Código\", \"123\");\r\n         Item item1 = new Item(1l, cdc);\r\n         Item item2 = new Item(2l, cdc);\r\n         Item item3 = new Item(3l, cdc);\r\ndiff --git a/src/test/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommenderFactoryTest.java b/src/test/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommenderFactoryTest.java\r\nindex fb3df08..e348d75 100644\r\n--- a/src/test/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommenderFactoryTest.java\r\n+++ b/src/test/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommenderFactoryTest.java\r\n@@ -8,7 +8,7 @@ import java.util.List;\r\n \r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.itemtoitem.ItemToItemsAssociation;\r\n@@ -21,7 +21,7 @@ public class SingleAppRecommenderFactoryTest {\r\n     @Test\r\n     public void shouldBuildRecommenderFromCollectiveIntelligenceInActionExample() {\r\n         SingleAppRecommenderFactory factory = new SingleAppRecommenderFactory();\r\n-        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n+        ClientApp cdc = new ClientApp(\"casadocodigo\", \"1234\");\r\n         Item item1 = new Item(1l, cdc);\r\n         Item item2 = new Item(2l, cdc);\r\n         Item item3 = new Item(3l, cdc);\r\ndiff --git a/src/test/resources/hibernate.test.cfg.xml b/src/test/resources/hibernate.test.cfg.xml\r\nindex 869c0e1..9116980 100644\r\n--- a/src/test/resources/hibernate.test.cfg.xml\r\n+++ b/src/test/resources/hibernate.test.cfg.xml\r\n@@ -24,7 +24,7 @@\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n-        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.ClientApp\" />\r\n \r\n     </session-factory>\r\n </hibernate-configuration>\r\n'),(41,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java b/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\nindex 6b50130..29ffe3c 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\n@@ -3,6 +3,7 @@ package br.ime.usp.commendans.controller;\r\n import java.util.ArrayList;\r\n import java.util.List;\r\n \r\n+import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Post;\r\n import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n@@ -53,5 +54,16 @@ public class ClientAppController {\r\n         customerDao.save(customer);\r\n         result.use(Results.json()).from(true).serialize();\r\n     }\r\n+    \r\n+    @Get(\"app/new\")\r\n+    public void clientAppForm() {\r\n+    }\r\n+    \r\n+    @Post(\"app/new\")\r\n+    public void saveApp(String name) {\r\n+        String accessKey = \"123\" + name;\r\n+        appDao.save(new ClientApp(name, accessKey));\r\n+        result.include(\"key\", accessKey);\r\n+    }\r\n \r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\nindex b6a3b70..64c0824 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n@@ -13,6 +13,7 @@ import br.ime.usp.commendans.infra.TupleJsonSerializer;\r\n import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n+import br.ime.usp.commendans.recommender.RecommenderCreator;\r\n import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n import br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n \r\n@@ -23,15 +24,17 @@ public class ItemToItemController {\r\n     private final TupleJsonSerializer serializer;\r\n     private final GeneralRecommender recommender;\r\n     private final ClientAppDao appDao;\r\n+    private final RecommenderCreator recommenderCreator;\r\n \r\n     public ItemToItemController(GeneralRecommender recommender, \r\n             ItemDao itemDao, ClientAppDao appDao, Result result, \r\n-            TupleJsonSerializer serializer) {\r\n+            TupleJsonSerializer serializer, RecommenderCreator recommenderCreator) {\r\n         this.recommender = recommender;\r\n         this.itemDao = itemDao;\r\n         this.appDao = appDao;\r\n         this.result = result;\r\n         this.serializer = serializer;\r\n+        this.recommenderCreator = recommenderCreator;\r\n     }\r\n     \r\n     @Get(\"/recommend/item/{appItemId}\")\r\n@@ -54,6 +57,12 @@ public class ItemToItemController {\r\n             serializeResult(recommended);\r\n         }\r\n     }\r\n+    \r\n+    @Get(\"/recalculate/\")\r\n+    public void recalculate() {\r\n+        recommenderCreator.create();\r\n+        result.use(Results.http()).body(\"ok\");\r\n+    }\r\n \r\n     private boolean validKey(String accessKey) {\r\n         ClientApp app = appDao.findByAccessKey(accessKey);\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/ClientAppDao.java b/src/main/java/br/ime/usp/commendans/dao/ClientAppDao.java\r\nindex 267505d..3b4c444 100644\r\n--- a/src/main/java/br/ime/usp/commendans/dao/ClientAppDao.java\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/ClientAppDao.java\r\n@@ -28,5 +28,17 @@ public class ClientAppDao {\r\n         return (ClientApp) query.uniqueResult();\r\n     }\r\n \r\n+    public void save(ClientApp clientApp) {\r\n+        session.save(clientApp);\r\n+    }\r\n+\r\n+    public void commit() {\r\n+        session.getTransaction().commit();\r\n+    }\r\n+\r\n+    public void beginTransaction() {\r\n+        session.beginTransaction();\r\n+    }\r\n+\r\n \r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java b/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\nindex 6ac4b08..05e56c2 100644\r\n--- a/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\n@@ -33,7 +33,7 @@ public class CustomerDao {\r\n     }\r\n \r\n     public void save(Customer customer) {\r\n-        session.saveOrUpdate(customer);\r\n+        session.save(customer);\r\n     }\r\n \r\n     public Customer find(ClientApp app, Long customerId) {\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/HibernateTransactionInterceptor.java b/src/main/java/br/ime/usp/commendans/infra/HibernateTransactionInterceptor.java\r\nnew file mode 100644\r\nindex 0000000..0de9145\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/HibernateTransactionInterceptor.java\r\n@@ -0,0 +1,65 @@\r\n+/***\r\n+ * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\r\n+ * All rights reserved.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import org.hibernate.Session;\r\n+import org.hibernate.Transaction;\r\n+\r\n+import br.com.caelum.vraptor.Intercepts;\r\n+import br.com.caelum.vraptor.Validator;\r\n+import br.com.caelum.vraptor.core.InterceptorStack;\r\n+import br.com.caelum.vraptor.interceptor.Interceptor;\r\n+import br.com.caelum.vraptor.resource.ResourceMethod;\r\n+\r\n+/**\r\n+ * An interceptor that manages Hibernate Transaction. All requests are intercepted\r\n+ * and a transaction is created before execution. If the request has no erros, the transaction\r\n+ * will commited, or a rollback occurs otherwise.\r\n+ * \r\n+ * @author Lucas Cavalcanti\r\n+ */\r\n+@Intercepts\r\n+public class HibernateTransactionInterceptor implements Interceptor {\r\n+\r\n+    private final Session session;\r\n+    private final Validator validator;\r\n+\r\n+    public HibernateTransactionInterceptor(Session session, Validator validator) {\r\n+        this.session = session;\r\n+        this.validator = validator;\r\n+    }\r\n+\r\n+    //TODO I think that transaction null check is unnecessary, since we never get null transation (garcia-jj)\r\n+    public void intercept(InterceptorStack stack, ResourceMethod method, Object instance) {\r\n+        Transaction transaction = null;\r\n+        try {\r\n+            transaction = session.beginTransaction();\r\n+            stack.next(method, instance);\r\n+            if (!validator.hasErrors() && transaction != null) {\r\n+                transaction.commit();\r\n+            }\r\n+        } finally {\r\n+            if (transaction != null && transaction.isActive()) {\r\n+                transaction.rollback();\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public boolean accepts(ResourceMethod method) {\r\n+        return true; // Will intercept all requests\r\n+    }\r\n+}\r\n\\ No newline at end of file\r\ndiff --git a/src/main/webapp/WEB-INF/jsp/clientApp/clientAppForm.jsp b/src/main/webapp/WEB-INF/jsp/clientApp/clientAppForm.jsp\r\nnew file mode 100644\r\nindex 0000000..fd302c4\r\n--- /dev/null\r\n+++ b/src/main/webapp/WEB-INF/jsp/clientApp/clientAppForm.jsp\r\n@@ -0,0 +1,17 @@\r\n+<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n+    pageEncoding=\"UTF-8\"%>\r\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n+<html>\r\n+<head>\r\n+<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n+<title>Insert title here</title>\r\n+</head>\r\n+<body>\r\n+\r\n+	<form method=\"post\">\r\n+		App name: <input type=\"text\" name=\"name\" /> <br>\r\n+		<input type=\"submit\"/> \r\n+	</form>\r\n+\r\n+</body>\r\n+</html>\r\n\\ No newline at end of file\r\ndiff --git a/src/main/webapp/WEB-INF/jsp/clientApp/saveApp.jsp b/src/main/webapp/WEB-INF/jsp/clientApp/saveApp.jsp\r\nnew file mode 100644\r\nindex 0000000..10c665e\r\n--- /dev/null\r\n+++ b/src/main/webapp/WEB-INF/jsp/clientApp/saveApp.jsp\r\n@@ -0,0 +1,19 @@\r\n+<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n+    pageEncoding=\"UTF-8\"%>\r\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n+<html>\r\n+<head>\r\n+<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n+<title>Insert title here</title>\r\n+</head>\r\n+<body>\r\n+\r\n+<p>\r\n+	App saved!\r\n+</p>\r\n+<p>\r\n+	Store your access key: ${key}\r\n+</p>\r\n+\r\n+</body>\r\n+</html>\r\n\\ No newline at end of file\r\n'),(42,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java b/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\nindex 05e56c2..c271c8a 100644\r\n--- a/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\n@@ -26,7 +26,6 @@ public class CustomerDao {\r\n     @SuppressWarnings(\"unchecked\")\r\n     public List<Customer> findCustomersOf(ClientApp app) {\r\n         Query query = session.createQuery(\"select customer from Customer customer \" +\r\n-        		\"join fetch customer.items \" +\r\n         		\"where customer.app.name like :appName\");\r\n         query.setParameter(\"appName\", app.getName());\r\n         return query.list();\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/Customer.java b/src/main/java/br/ime/usp/commendans/model/Customer.java\r\nindex fac631b..d8caee1 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/Customer.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/Customer.java\r\n@@ -3,6 +3,7 @@ package br.ime.usp.commendans.model;\r\n import java.util.List;\r\n \r\n import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n import javax.persistence.ManyToMany;\r\n@@ -16,7 +17,7 @@ public class Customer {\r\n     \r\n     private Long clientAppCustomerId;\r\n \r\n-    @ManyToMany\r\n+    @ManyToMany(fetch=FetchType.EAGER)\r\n     private List<Item> items;\r\n     \r\n     @ManyToOne\r\n'),(43,'\r\ndiff --git a/pom.xml b/pom.xml\r\nindex bd9262b..0cf583e 100644\r\n--- a/pom.xml\r\n+++ b/pom.xml\r\n@@ -220,6 +220,18 @@\r\n 			<artifactId>postgresql</artifactId>\r\n 			<version>9.1-901.jdbc4</version>\r\n 		</dependency>\r\n+		<dependency>\r\n+			<groupId>org.glassfish.web</groupId>\r\n+			<artifactId>jstl-impl</artifactId>\r\n+			<version>1.2</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+			<groupId>org.glassfish.web</groupId>\r\n+			<artifactId>el</artifactId>\r\n+			<version>2.2.1-b03</version>\r\n+		</dependency>\r\n+		            \r\n+		            \r\n             \r\n 		<!-- Provided dependencies -->\r\n 	</dependencies>\r\n'),(44,'\r\ndiff --git a/pom.xml b/pom.xml\r\nindex 0cf583e..060fc91 100644\r\n--- a/pom.xml\r\n+++ b/pom.xml\r\n@@ -216,22 +216,16 @@\r\n 			<version>2.1.v20100127</version>\r\n 		</dependency>\r\n 		<dependency>\r\n+			<groupId>org.mortbay.jetty</groupId>\r\n+			<artifactId>jsp-api-2.1</artifactId>\r\n+			<version>7.0.0pre2</version>\r\n+		</dependency>\r\n+		            \r\n+		<dependency>\r\n 			<groupId>postgresql</groupId>\r\n 			<artifactId>postgresql</artifactId>\r\n 			<version>9.1-901.jdbc4</version>\r\n 		</dependency>\r\n-		<dependency>\r\n-			<groupId>org.glassfish.web</groupId>\r\n-			<artifactId>jstl-impl</artifactId>\r\n-			<version>1.2</version>\r\n-		</dependency>\r\n-		<dependency>\r\n-			<groupId>org.glassfish.web</groupId>\r\n-			<artifactId>el</artifactId>\r\n-			<version>2.2.1-b03</version>\r\n-		</dependency>\r\n-		            \r\n-		            \r\n             \r\n 		<!-- Provided dependencies -->\r\n 	</dependencies>\r\n'),(45,'\r\ndiff --git a/pom.xml b/pom.xml\r\nindex 060fc91..56b2afc 100644\r\n--- a/pom.xml\r\n+++ b/pom.xml\r\n@@ -212,11 +212,6 @@\r\n 		</dependency>\r\n 		<dependency>\r\n 			<groupId>org.mortbay.jetty</groupId>\r\n-			<artifactId>jsp-2.1-glassfish</artifactId>\r\n-			<version>2.1.v20100127</version>\r\n-		</dependency>\r\n-		<dependency>\r\n-			<groupId>org.mortbay.jetty</groupId>\r\n 			<artifactId>jsp-api-2.1</artifactId>\r\n 			<version>7.0.0pre2</version>\r\n 		</dependency>\r\n@@ -226,6 +221,41 @@\r\n 			<artifactId>postgresql</artifactId>\r\n 			<version>9.1-901.jdbc4</version>\r\n 		</dependency>\r\n+		\r\n+		<dependency>\r\n+		   <groupId>javax.servlet</groupId>\r\n+		   <artifactId>servlet-api</artifactId>\r\n+		   <version>2.5</version>\r\n+		   <scope>provided</scope>\r\n+		</dependency>\r\n+		\r\n+<dependency>\r\n+	<groupId>org.mortbay.jetty</groupId>\r\n+	<artifactId>jsp-2.1-glassfish</artifactId>\r\n+	<version>2.1.v20100127</version>\r\n+</dependency>\r\n+<dependency>\r\n+   <groupId>javax.servlet</groupId>\r\n+   <artifactId>servlet-api</artifactId>\r\n+   <version>2.5</version>\r\n+   <scope>provided</scope>\r\n+</dependency>\r\n+<dependency>\r\n+   <groupId>javax.servlet.jsp</groupId>\r\n+   <artifactId>jsp-api</artifactId>\r\n+   <version>2.1</version>\r\n+   <scope>compile</scope>\r\n+</dependency>\r\n+<dependency>\r\n+   <groupId>javax.servlet</groupId>\r\n+   <artifactId>jstl</artifactId>\r\n+   <version>1.2</version>\r\n+</dependency>\r\n+<dependency>\r\n+   <groupId>org.apache.tomcat</groupId>\r\n+   <artifactId>jasper-el</artifactId>\r\n+   <version>6.0.26</version>\r\n+</dependency>\r\n             \r\n 		<!-- Provided dependencies -->\r\n 	</dependencies>\r\n'),(46,'\r\ndiff --git a/pom.xml b/pom.xml\r\nindex 56b2afc..601ede5 100644\r\n--- a/pom.xml\r\n+++ b/pom.xml\r\n@@ -229,33 +229,33 @@\r\n 		   <scope>provided</scope>\r\n 		</dependency>\r\n 		\r\n-<dependency>\r\n-	<groupId>org.mortbay.jetty</groupId>\r\n-	<artifactId>jsp-2.1-glassfish</artifactId>\r\n-	<version>2.1.v20100127</version>\r\n-</dependency>\r\n-<dependency>\r\n-   <groupId>javax.servlet</groupId>\r\n-   <artifactId>servlet-api</artifactId>\r\n-   <version>2.5</version>\r\n-   <scope>provided</scope>\r\n-</dependency>\r\n-<dependency>\r\n-   <groupId>javax.servlet.jsp</groupId>\r\n-   <artifactId>jsp-api</artifactId>\r\n-   <version>2.1</version>\r\n-   <scope>compile</scope>\r\n-</dependency>\r\n-<dependency>\r\n-   <groupId>javax.servlet</groupId>\r\n-   <artifactId>jstl</artifactId>\r\n-   <version>1.2</version>\r\n-</dependency>\r\n-<dependency>\r\n-   <groupId>org.apache.tomcat</groupId>\r\n-   <artifactId>jasper-el</artifactId>\r\n-   <version>6.0.26</version>\r\n-</dependency>\r\n+		<dependency>\r\n+			<groupId>org.mortbay.jetty</groupId>\r\n+			<artifactId>jsp-2.1-glassfish</artifactId>\r\n+			<version>2.1.v20100127</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		   <groupId>javax.servlet</groupId>\r\n+		   <artifactId>servlet-api</artifactId>\r\n+		   <version>2.5</version>\r\n+		   <scope>provided</scope>\r\n+		</dependency>\r\n+		<dependency>\r\n+		   <groupId>javax.servlet.jsp</groupId>\r\n+		   <artifactId>jsp-api</artifactId>\r\n+		   <version>2.1</version>\r\n+		   <scope>compile</scope>\r\n+		</dependency>\r\n+		<dependency>\r\n+		   <groupId>javax.servlet</groupId>\r\n+		   <artifactId>jstl</artifactId>\r\n+		   <version>1.2</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		   <groupId>org.apache.tomcat</groupId>\r\n+		   <artifactId>jasper-el</artifactId>\r\n+		   <version>6.0.26</version>\r\n+		</dependency>\r\n             \r\n 		<!-- Provided dependencies -->\r\n 	</dependencies>\r\ndiff --git a/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java b/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\nindex c271c8a..771d5a0 100644\r\n--- a/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\n+++ b/src/main/java/br/ime/usp/commendans/dao/CustomerDao.java\r\n@@ -37,7 +37,7 @@ public class CustomerDao {\r\n \r\n     public Customer find(ClientApp app, Long customerId) {\r\n         Query query = session.createQuery(\"select customer from Customer customer \" +\r\n-                \"where customer.app.id like :appId \" +\r\n+                \"where customer.app.id = :appId \" +\r\n                 \"and customer.clientAppCustomerId = :customerId\");\r\n         query.setParameter(\"appId\", app.getId());\r\n         query.setParameter(\"customerId\", customerId);\r\n'),(47,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/DataImporter.java b/src/main/java/br/ime/usp/commendans/infra/DataImporter.java\r\nindex fa73cd2..5896616 100644\r\n--- a/src/main/java/br/ime/usp/commendans/infra/DataImporter.java\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/DataImporter.java\r\n@@ -64,7 +64,6 @@ public class DataImporter {\r\n         }\r\n         \r\n         logger.debug(\"persisting\");\r\n-        session.getTransaction().begin();\r\n         for (Item item : items.values()) {\r\n             session.save(item);\r\n         }\r\n@@ -73,7 +72,6 @@ public class DataImporter {\r\n         for (Customer user : allUsers) {\r\n             session.save(user);\r\n         }\r\n-        session.getTransaction().commit();\r\n         logger.debug(\"finished persisting\");\r\n     }\r\n \r\n'),(48,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/ClientApp.java b/src/main/java/br/ime/usp/commendans/model/ClientApp.java\r\nindex 10e5450..7793549 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/ClientApp.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/ClientApp.java\r\n@@ -2,6 +2,7 @@ package br.ime.usp.commendans.model;\r\n \r\n import java.util.List;\r\n \r\n+import javax.persistence.Column;\r\n import javax.persistence.Entity;\r\n import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n@@ -13,13 +14,13 @@ import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n @Entity\r\n public class ClientApp {\r\n \r\n-\r\n     @Id\r\n     @GeneratedValue\r\n     private Long id;\r\n \r\n     private String name;\r\n \r\n+    @Column(unique=true)\r\n     private String accessKey;\r\n \r\n     @Transient\r\n'),(49,'\r\ndiff --git a/ivy.xml b/ivy.xml\r\nindex 11425c9..d48f65b 100644\r\n--- a/ivy.xml\r\n+++ b/ivy.xml\r\n@@ -33,10 +33,11 @@\r\n \r\n 		<!-- commendans dependencies -->\r\n 		<dependency org=\"com.google.code.gson\" name=\"gson\" rev=\"2.2.2\"/>\r\n-		<dependency org=\"com.google.code.gson\" name=\"gson\" rev=\"2.2.2\"/>\r\n 		\r\n 		<dependency org=\"org.eclipse.jetty\" name=\"jetty-webapp\" rev=\"7.4.4.v20110707\"/>\r\n 		<dependency org=\"org.mortbay.jetty\" name=\"jsp-2.1-glassfish\" rev=\"2.1.v20100127\" />\r\n+		<dependency org=\"commons-codec\" name=\"commons-codec\" rev=\"1.7\"/>\r\n+            \r\n 		\r\n 		<!-- Test dependencies -->\r\n 		<dependency org=\"junit\" name=\"junit\" rev=\"4.8.2\" conf=\"test->default\" />\r\ndiff --git a/pom.xml b/pom.xml\r\nindex 601ede5..c80f0cd 100644\r\n--- a/pom.xml\r\n+++ b/pom.xml\r\n@@ -230,6 +230,13 @@\r\n 		</dependency>\r\n 		\r\n 		<dependency>\r\n+			<groupId>commons-codec</groupId>\r\n+			<artifactId>commons-codec</artifactId>\r\n+			<version>1.7</version>\r\n+		</dependency>\r\n+		            \r\n+		\r\n+		<dependency>\r\n 			<groupId>org.mortbay.jetty</groupId>\r\n 			<artifactId>jsp-2.1-glassfish</artifactId>\r\n 			<version>2.1.v20100127</version>\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java b/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\nindex 29ffe3c..335babb 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\n@@ -3,6 +3,8 @@ package br.ime.usp.commendans.controller;\r\n import java.util.ArrayList;\r\n import java.util.List;\r\n \r\n+import org.apache.commons.codec.digest.DigestUtils;\r\n+\r\n import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Post;\r\n import br.com.caelum.vraptor.Resource;\r\n@@ -62,6 +64,7 @@ public class ClientAppController {\r\n     @Post(\"app/new\")\r\n     public void saveApp(String name) {\r\n         String accessKey = \"123\" + name;\r\n+        accessKey = DigestUtils.sha256Hex(accessKey);\r\n         appDao.save(new ClientApp(name, accessKey));\r\n         result.include(\"key\", accessKey);\r\n     }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/IndexController.java b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\nindex 9e47c2c..64ca95c 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n@@ -1,5 +1,6 @@\r\n package br.ime.usp.commendans.controller;\r\n \r\n+import org.apache.commons.codec.digest.DigestUtils;\r\n import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.Get;\r\n@@ -33,6 +34,9 @@ public class IndexController {\r\n         DataImporter dataImporter = new DataImporter(session);\r\n         dataImporter.importData(\"/orders.csv\");\r\n         recommenderCreator.create();\r\n-        result.use(Results.http()).body(\"<html><body>finished persisting</body></html>\");\r\n+        String name = \"Casa do Código\";\r\n+        String accessKey = \"123\" + name;\r\n+        accessKey = DigestUtils.sha256Hex(accessKey);\r\n+        result.use(Results.http()).body(\"<html><body>finished persisting, key: \"+accessKey+\"</body></html>\");\r\n     }\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/DataImporter.java b/src/main/java/br/ime/usp/commendans/infra/DataImporter.java\r\nindex 5896616..e67a5b6 100644\r\n--- a/src/main/java/br/ime/usp/commendans/infra/DataImporter.java\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/DataImporter.java\r\n@@ -10,6 +10,7 @@ import java.util.Collection;\r\n import java.util.HashMap;\r\n import java.util.List;\r\n \r\n+import org.apache.commons.codec.digest.DigestUtils;\r\n import org.apache.log4j.Logger;\r\n import org.hibernate.Session;\r\n import org.hibernate.SessionFactory;\r\n@@ -41,7 +42,12 @@ public class DataImporter {\r\n         InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n         BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n         String line = safeReadLine(reader);\r\n-        ClientApp cdc = new ClientApp(\"Casa do Código\", \"123\");\r\n+        \r\n+        String name = \"Casa do Código\";\r\n+        String accessKey = \"123\" + name;\r\n+        accessKey = DigestUtils.sha256Hex(accessKey);\r\n+        \r\n+        ClientApp cdc = new ClientApp(\"Casa do Código\", accessKey);\r\n         session.save(cdc);\r\n         \r\n         while (line != null) {\r\n'),(50,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/IndexController.java b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\nindex 64ca95c..0af70da 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n@@ -24,7 +24,7 @@ public class IndexController {\r\n         this.recommenderCreator = recommenderCreator;\r\n     }\r\n     \r\n-    @Get(\"/\")\r\n+    @Get(\"/helloworld\")\r\n     public void index() {\r\n         result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n     }\r\n'),(51,'\r\ndiff --git a/src/main/webapp/index.html b/src/main/webapp/index.html\r\ndeleted file mode 100644\r\nindex 23d3089..0000000\r\n--- a/src/main/webapp/index.html\r\n+++ /dev/null\r\n@@ -1,5 +0,0 @@\r\n-<html>\r\n-	<body>\r\n-		<h1>Hello</h1>\r\n-	</body>\r\n-</html>\r\n\\ No newline at end of file\r\n'),(52,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java b/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\nindex 335babb..2b44754 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\n@@ -63,7 +63,7 @@ public class ClientAppController {\r\n     \r\n     @Post(\"app/new\")\r\n     public void saveApp(String name) {\r\n-        String accessKey = \"123\" + name;\r\n+        String accessKey = \"askjdaklsjdlkadsjqpoipoweut\" + name;\r\n         accessKey = DigestUtils.sha256Hex(accessKey);\r\n         appDao.save(new ClientApp(name, accessKey));\r\n         result.include(\"key\", accessKey);\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/DataImporter.java b/src/main/java/br/ime/usp/commendans/infra/DataImporter.java\r\nindex e67a5b6..1279b14 100644\r\n--- a/src/main/java/br/ime/usp/commendans/infra/DataImporter.java\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/DataImporter.java\r\n@@ -44,7 +44,7 @@ public class DataImporter {\r\n         String line = safeReadLine(reader);\r\n         \r\n         String name = \"Casa do Código\";\r\n-        String accessKey = \"123\" + name;\r\n+        String accessKey = \"askjdaklsjdlkadsjqpoipoweut\" + name;\r\n         accessKey = DigestUtils.sha256Hex(accessKey);\r\n         \r\n         ClientApp cdc = new ClientApp(\"Casa do Código\", accessKey);\r\ndiff --git a/src/main/java/br/ime/usp/commendans/model/ClientApp.java b/src/main/java/br/ime/usp/commendans/model/ClientApp.java\r\nindex 7793549..2eddbd2 100644\r\n--- a/src/main/java/br/ime/usp/commendans/model/ClientApp.java\r\n+++ b/src/main/java/br/ime/usp/commendans/model/ClientApp.java\r\n@@ -8,8 +8,8 @@ import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n import javax.persistence.Transient;\r\n \r\n+import br.ime.usp.commendans.recommender.Recommender;\r\n import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n-import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n \r\n @Entity\r\n public class ClientApp {\r\n@@ -24,7 +24,7 @@ public class ClientApp {\r\n     private String accessKey;\r\n \r\n     @Transient\r\n-    private SingleAppRecommender recommender;\r\n+    private Recommender recommender;\r\n \r\n     @Deprecated\r\n     protected ClientApp() {\r\n@@ -39,7 +39,7 @@ public class ClientApp {\r\n         return name;\r\n     }\r\n \r\n-    public void use(SingleAppRecommender recommender) {\r\n+    public void use(Recommender recommender) {\r\n         this.recommender = recommender;\r\n     }\r\n \r\ndiff --git a/src/main/java/br/ime/usp/commendans/recommender/Recommender.java b/src/main/java/br/ime/usp/commendans/recommender/Recommender.java\r\nindex ae9d8b6..9e81038 100644\r\n--- a/src/main/java/br/ime/usp/commendans/recommender/Recommender.java\r\n+++ b/src/main/java/br/ime/usp/commendans/recommender/Recommender.java\r\n@@ -1,8 +1,12 @@\r\n package br.ime.usp.commendans.recommender;\r\n \r\n+import java.util.List;\r\n+\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n \r\n public interface Recommender {\r\n     public ItemVector recommendedItemsFor(Item item);\r\n+\r\n+    public ItemVector recommendedItemsFor(List<Item> items);\r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommender.java b/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommender.java\r\nindex 66b6604..9a3f3ab 100644\r\n--- a/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommender.java\r\n+++ b/src/main/java/br/ime/usp/commendans/recommender/itemtoitem/SingleAppRecommender.java\r\n@@ -34,6 +34,7 @@ public class SingleAppRecommender implements Recommender {\r\n         return associations.get(item);\r\n     }\r\n \r\n+    @Override\r\n     public ItemVector recommendedItemsFor(List<Item> items) {\r\n         ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n         for (Item item : items) {\r\n'),(53,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java b/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\nindex 2b44754..8145050 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\n@@ -40,20 +40,16 @@ public class ClientAppController {\r\n         GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n         \r\n         ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n-        \r\n-        for (Item item : newItems) {\r\n+        for (Item item : newItems)\r\n             itemDao.save(item);\r\n-        }\r\n         \r\n         Customer customer = customerDao.find(app, clientAppUserId);\r\n-        List<Item> allItems = groupedItems.getItems();\r\n-        if (customer == null) {\r\n+        if (customer == null)\r\n             customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n-        }\r\n-        for (Item item : allItems) {\r\n+        for (Item item : groupedItems.getItems())\r\n             customer.add(item);\r\n-        }\r\n         customerDao.save(customer);\r\n+                \r\n         result.use(Results.json()).from(true).serialize();\r\n     }\r\n     \r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\nindex 64c0824..acc6c63 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n@@ -47,7 +47,6 @@ public class ItemToItemController {\r\n         }\r\n     }\r\n     \r\n-\r\n     @Get(\"/recommend/items/\")\r\n     public void recommend(List<Long> itemsIds, String accessKey) {\r\n         if (validKey(accessKey)) {\r\n'),(54,'\r\ndiff --git a/script/new_sale.sh b/script/new_sale.sh\r\nindex 7e95f9a..acd5f15 100644\r\n--- a/script/new_sale.sh\r\n+++ b/script/new_sale.sh\r\n@@ -1 +1 @@\r\n-curl --data \"clientAppUserId=66666666&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\" http://localhost:8080/commendans/app/123/addSale\r\n+curl --data \"clientAppUserId=66666666&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3&accessKey=04775f2e51279e3fbab3ed1527c364df1b919ce98f4c86ba1bb2db94058b8c6a\" http://localhost:8080/commendans/app/addSale\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java b/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\nindex 8145050..d6b04f6 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\n@@ -34,23 +34,25 @@ public class ClientAppController {\r\n     }\r\n     \r\n     //clientAppUserId=100&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\r\n-    @Post(\"app/{key}/addSale\")\r\n-    public void addSale(String key, Long clientAppUserId, List<Long> itemsIds) {\r\n-        ClientApp app = appDao.findByAccessKey(key);\r\n-        GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n-        \r\n-        ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n-        for (Item item : newItems)\r\n-            itemDao.save(item);\r\n-        \r\n-        Customer customer = customerDao.find(app, clientAppUserId);\r\n-        if (customer == null)\r\n-            customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n-        for (Item item : groupedItems.getItems())\r\n-            customer.add(item);\r\n-        customerDao.save(customer);\r\n-                \r\n-        result.use(Results.json()).from(true).serialize();\r\n+    @Post(\"app/addSale\")\r\n+    public void addSale(String accessKey, Long clientAppUserId, List<Long> itemsIds) {\r\n+        if (validKey(accessKey)) {\r\n+            ClientApp app = appDao.findByAccessKey(accessKey);\r\n+            GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n+            \r\n+            ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n+            for (Item item : newItems)\r\n+                itemDao.save(item);\r\n+            \r\n+            Customer customer = customerDao.find(app, clientAppUserId);\r\n+            if (customer == null)\r\n+                customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n+            for (Item item : groupedItems.getItems())\r\n+                customer.add(item);\r\n+            customerDao.save(customer);\r\n+                    \r\n+            result.use(Results.json()).from(true).serialize();\r\n+        }\r\n     }\r\n     \r\n     @Get(\"app/new\")\r\n@@ -64,5 +66,14 @@ public class ClientAppController {\r\n         appDao.save(new ClientApp(name, accessKey));\r\n         result.include(\"key\", accessKey);\r\n     }\r\n+    \r\n+    private boolean validKey(String accessKey) {\r\n+        ClientApp app = appDao.findByAccessKey(accessKey);\r\n+        if (app == null) {\r\n+            result.notFound();\r\n+            return false;\r\n+        }\r\n+        return true;\r\n+    }\r\n \r\n }\r\n'),(55,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java b/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\nindex d6b04f6..0e456d2 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ClientAppController.java\r\n@@ -13,6 +13,7 @@ import br.com.caelum.vraptor.view.Results;\r\n import br.ime.usp.commendans.dao.ClientAppDao;\r\n import br.ime.usp.commendans.dao.CustomerDao;\r\n import br.ime.usp.commendans.dao.ItemDao;\r\n+import br.ime.usp.commendans.infra.ValidAccessKey;\r\n import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.model.GroupedItems;\r\n@@ -34,25 +35,24 @@ public class ClientAppController {\r\n     }\r\n     \r\n     //clientAppUserId=100&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\r\n-    @Post(\"app/addSale\")\r\n+    @ValidAccessKey(paramName=\"accessKey\")\r\n+    @Post(\"app/addSale\") \r\n     public void addSale(String accessKey, Long clientAppUserId, List<Long> itemsIds) {\r\n-        if (validKey(accessKey)) {\r\n-            ClientApp app = appDao.findByAccessKey(accessKey);\r\n-            GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n-            \r\n-            ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n-            for (Item item : newItems)\r\n-                itemDao.save(item);\r\n-            \r\n-            Customer customer = customerDao.find(app, clientAppUserId);\r\n-            if (customer == null)\r\n-                customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n-            for (Item item : groupedItems.getItems())\r\n-                customer.add(item);\r\n-            customerDao.save(customer);\r\n-                    \r\n-            result.use(Results.json()).from(true).serialize();\r\n-        }\r\n+        ClientApp app = appDao.findByAccessKey(accessKey);\r\n+        GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n+        \r\n+        ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n+        for (Item item : newItems)\r\n+            itemDao.save(item);\r\n+        \r\n+        Customer customer = customerDao.find(app, clientAppUserId);\r\n+        if (customer == null)\r\n+            customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n+        for (Item item : groupedItems.getItems())\r\n+            customer.add(item);\r\n+        customerDao.save(customer);\r\n+                \r\n+        result.use(Results.json()).from(true).serialize();\r\n     }\r\n     \r\n     @Get(\"app/new\")\r\n@@ -66,14 +66,5 @@ public class ClientAppController {\r\n         appDao.save(new ClientApp(name, accessKey));\r\n         result.include(\"key\", accessKey);\r\n     }\r\n-    \r\n-    private boolean validKey(String accessKey) {\r\n-        ClientApp app = appDao.findByAccessKey(accessKey);\r\n-        if (app == null) {\r\n-            result.notFound();\r\n-            return false;\r\n-        }\r\n-        return true;\r\n-    }\r\n \r\n }\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\nindex acc6c63..d6d5b44 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/ItemToItemController.java\r\n@@ -10,6 +10,7 @@ import br.com.caelum.vraptor.view.Results;\r\n import br.ime.usp.commendans.dao.ClientAppDao;\r\n import br.ime.usp.commendans.dao.ItemDao;\r\n import br.ime.usp.commendans.infra.TupleJsonSerializer;\r\n+import br.ime.usp.commendans.infra.ValidAccessKey;\r\n import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n@@ -37,24 +38,23 @@ public class ItemToItemController {\r\n         this.recommenderCreator = recommenderCreator;\r\n     }\r\n     \r\n-    @Get(\"/recommend/item/{appItemId}\")\r\n+    @ValidAccessKey(paramName = \"accessKey\")\r\n+    @Get(\"/recommend/item/{appItemId}\") \r\n     public void recommend(Long appItemId, String accessKey) {\r\n-        if (validKey(accessKey)) {\r\n-            ClientApp app = appDao.findByAccessKey(accessKey);\r\n-            Item item = itemDao.findByAppItemId(appItemId, app);\r\n-            ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n-            serializeResult(recommended);\r\n-        }\r\n+        ClientApp app = appDao.findByAccessKey(accessKey);\r\n+        Item item = itemDao.findByAppItemId(appItemId, app);\r\n+        ItemVector recommended = recommender.recommendedItemsFor(item,\r\n+                accessKey);\r\n+        serializeResult(recommended);\r\n     }\r\n     \r\n+    @ValidAccessKey(paramName = \"accessKey\")\r\n     @Get(\"/recommend/items/\")\r\n     public void recommend(List<Long> itemsIds, String accessKey) {\r\n-        if (validKey(accessKey)) {\r\n-            ClientApp app = appDao.findByAccessKey(accessKey);\r\n-            List<Item> items = itemDao.findItems(itemsIds, app).getItems();\r\n-            ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n-            serializeResult(recommended);\r\n-        }\r\n+        ClientApp app = appDao.findByAccessKey(accessKey);\r\n+        List<Item> items = itemDao.findItems(itemsIds, app).getItems();\r\n+        ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n+        serializeResult(recommended);\r\n     }\r\n     \r\n     @Get(\"/recalculate/\")\r\n@@ -63,15 +63,6 @@ public class ItemToItemController {\r\n         result.use(Results.http()).body(\"ok\");\r\n     }\r\n \r\n-    private boolean validKey(String accessKey) {\r\n-        ClientApp app = appDao.findByAccessKey(accessKey);\r\n-        if (app == null) {\r\n-            result.notFound();\r\n-            return false;\r\n-        }\r\n-        return true;\r\n-    }\r\n-\r\n     private void serializeResult(ItemVector recommended) {\r\n         List<Tuple> tuples = recommended == null ? new ArrayList<Tuple>() : recommended.getTuples();\r\n         result.use(Results.http())\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/ValidAccessKey.java b/src/main/java/br/ime/usp/commendans/infra/ValidAccessKey.java\r\nnew file mode 100644\r\nindex 0000000..09ab762\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/ValidAccessKey.java\r\n@@ -0,0 +1,14 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import java.lang.annotation.ElementType;\r\n+import java.lang.annotation.Retention;\r\n+import java.lang.annotation.RetentionPolicy;\r\n+import java.lang.annotation.Target;\r\n+\r\n+@Target(ElementType.METHOD)\r\n+@Retention(RetentionPolicy.RUNTIME)\r\n+public @interface ValidAccessKey {\r\n+\r\n+    String paramName();\r\n+\r\n+}\r\ndiff --git a/src/main/java/br/ime/usp/commendans/infra/ValidAccessKeyInterceptor.java b/src/main/java/br/ime/usp/commendans/infra/ValidAccessKeyInterceptor.java\r\nnew file mode 100644\r\nindex 0000000..f2df0b8\r\n--- /dev/null\r\n+++ b/src/main/java/br/ime/usp/commendans/infra/ValidAccessKeyInterceptor.java\r\n@@ -0,0 +1,54 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+import javax.servlet.http.HttpServletRequest;\r\n+\r\n+import br.com.caelum.vraptor.InterceptionException;\r\n+import br.com.caelum.vraptor.Intercepts;\r\n+import br.com.caelum.vraptor.Result;\r\n+import br.com.caelum.vraptor.core.InterceptorStack;\r\n+import br.com.caelum.vraptor.interceptor.Interceptor;\r\n+import br.com.caelum.vraptor.resource.ResourceMethod;\r\n+import br.ime.usp.commendans.dao.ClientAppDao;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n+\r\n+@Intercepts\r\n+public class ValidAccessKeyInterceptor implements Interceptor {\r\n+    \r\n+    private final ClientAppDao appDao;\r\n+    private final Result result;\r\n+    private final HttpServletRequest request;\r\n+    private String paramName;\r\n+\r\n+    public ValidAccessKeyInterceptor(HttpServletRequest request, ClientAppDao appDao, Result result) {\r\n+        this.request = request;\r\n+        this.appDao = appDao;\r\n+        this.result = result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean accepts(ResourceMethod method) {\r\n+        Annotation[] annotations = method.getMethod().getAnnotations();\r\n+        for (Annotation annotation : annotations) {\r\n+            if (annotation.annotationType().equals(ValidAccessKey.class)) {\r\n+                ValidAccessKey k = (ValidAccessKey) annotation;\r\n+                paramName = k.paramName();\r\n+            }\r\n+        }\r\n+        return method.containsAnnotation(ValidAccessKey.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void intercept(InterceptorStack stack, ResourceMethod method,\r\n+            Object arg) throws InterceptionException {\r\n+        String accessKey = request.getParameter(paramName);\r\n+        ClientApp app = appDao.findByAccessKey(accessKey);\r\n+        if (app == null) {\r\n+            result.notFound();\r\n+        } else {\r\n+            stack.next(method, arg);\r\n+        }\r\n+    }\r\n+\r\n+}\r\ndiff --git a/src/main/resources/import.sql b/src/main/resources/import.sql\r\nnew file mode 100644\r\nindex 0000000..2cb1e56\r\n--- /dev/null\r\n+++ b/src/main/resources/import.sql\r\n@@ -0,0 +1,4 @@\r\n+INSERT INTO `ClientApp` VALUES (1,\'04775f2e51279e3fbab3ed1527c364df1b919ce98f4c86ba1bb2db94058b8c6a\',\'Casa do Código\');\r\n+INSERT INTO `Customer` VALUES (1,121954,1),(2,121955,1),(3,121952,1),(4,121953,1),(5,121958,1),(6,121959,1),(7,121956,1),(8,121957,1),(9,121962,1),(10,121960,1),(11,121961,1),(12,121966,1),(13,121967,1),(14,121965,1),(15,121971,1),(16,121968,1),(17,121975,1),(18,121974,1),(19,121973,1),(20,121972,1),(21,121979,1),(22,121976,1),(23,121983,1),(24,121980,1),(25,121920,1),(26,121921,1),(27,121922,1),(28,121923,1),(29,121925,1),(30,121926,1),(31,121927,1),(32,121928,1),(33,121929,1),(34,121930,1),(35,121931,1),(36,121932,1),(37,121933,1),(38,121934,1),(39,121935,1),(40,121937,1),(41,121936,1),(42,121939,1),(43,121941,1),(44,121940,1),(45,121943,1),(46,121942,1),(47,121945,1),(48,121944,1),(49,121947,1),(50,121946,1),(51,121949,1),(52,121951,1),(53,121950,1),(54,121894,1),(55,121895,1),(56,121892,1),(57,121893,1),(58,121890,1),(59,121891,1),(60,121888,1),(61,121889,1),(62,121902,1),(63,121903,1),(64,121900,1),(65,121901,1),(66,121899,1),(67,121896,1),(68,121910,1),(69,121909,1),(70,121908,1),(71,121907,1),(72,121906,1),(73,121905,1),(74,121904,1),(75,121918,1),(76,121917,1),(77,121916,1),(78,121915,1),(79,121914,1),(80,121913,1),(81,121912,1),(82,121860,1),(83,121861,1),(84,121862,1),(85,121863,1),(86,121856,1),(87,121857,1),(88,121858,1),(89,121859,1),(90,121868,1),(91,121869,1),(92,121870,1),(93,121864,1),(94,121865,1),(95,121866,1),(96,121867,1),(97,121877,1),(98,121876,1),(99,121879,1),(100,121878,1),(101,121872,1),(102,121875,1),(103,121874,1),(104,121885,1),(105,121884,1),(106,121887,1),(107,121886,1),(108,121880,1),(109,121883,1),(110,121882,1),(111,121997,1),(112,121999,1),(113,121998,1),(114,121993,1),(115,121992,1),(116,121995,1),(117,121994,1),(118,121989,1),(119,121988,1),(120,121991,1),(121,121990,1),(122,121984,1),(123,121987,1),(124,121986,1),(125,122004,1),(126,122005,1),(127,122006,1),(128,122000,1),(129,122001,1),(130,122002,1),(131,122003,1),(132,121352,1),(133,121353,1),(134,121354,1),(135,121355,1),(136,121356,1),(137,121357,1),(138,121358,1),(139,121359,1),(140,121344,1),(141,121345,1),(142,121346,1),(143,121347,1),(144,121348,1),(145,121349,1),(146,121350,1),(147,121351,1),(148,121369,1),(149,121368,1),(150,121371,1),(151,121370,1),(152,121373,1),(153,121372,1),(154,121375,1),(155,121374,1),(156,121361,1),(157,121360,1),(158,121363,1),(159,121362,1),(160,121365,1),(161,121367,1),(162,121366,1),(163,121386,1),(164,121387,1),(165,121384,1),(166,121385,1),(167,121390,1),(168,121391,1),(169,121388,1),(170,121389,1),(171,121378,1),(172,121379,1),(173,121376,1),(174,121377,1),(175,121382,1),(176,121383,1),(177,121380,1),(178,121403,1),(179,121402,1),(180,121401,1),(181,121400,1),(182,121405,1),(183,121404,1),(184,121394,1),(185,121393,1),(186,121392,1),(187,121399,1),(188,121398,1),(189,121397,1),(190,121396,1),(191,121420,1),(192,121421,1),(193,121422,1),(194,121423,1),(195,121416,1),(196,121417,1),(197,121418,1),(198,121419,1),(199,121413,1),(200,121414,1),(201,121415,1),(202,121408,1),(203,121409,1),(204,121410,1),(205,121411,1),(206,121437,1),(207,121436,1),(208,121439,1),(209,121433,1),(210,121432,1),(211,121435,1),(212,121434,1),(213,121429,1),(214,121428,1),(215,121431,1),(216,121430,1),(217,121424,1),(218,121427,1),(219,121426,1),(220,121455,1),(221,121452,1),(222,121453,1),(223,121450,1),(224,121451,1),(225,121448,1),(226,121449,1),(227,121446,1),(228,121447,1),(229,121444,1),(230,121445,1),(231,121442,1),(232,121443,1),(233,121440,1),(234,121441,1),(235,121470,1),(236,121469,1),(237,121468,1),(238,121467,1),(239,121466,1),(240,121465,1),(241,121464,1),(242,121463,1),(243,121462,1),(244,121461,1),(245,121460,1),(246,121459,1),(247,121458,1),(248,121457,1),(249,121473,1),(250,121475,1),(251,121474,1),(252,121477,1),(253,121476,1),(254,121479,1),(255,121478,1),(256,121481,1),(257,121483,1),(258,121482,1),(259,121485,1),(260,121487,1),(261,121486,1),(262,121488,1),(263,121489,1),(264,121490,1),(265,121491,1),(266,121492,1),(267,121493,1),(268,121494,1),(269,121495,1),(270,121497,1),(271,121498,1),(272,121499,1),(273,121500,1),(274,121501,1),(275,121502,1),(276,121503,1),(277,121507,1),(278,121506,1),(279,121505,1),(280,121504,1),(281,121511,1),(282,121510,1),(283,121509,1),(284,121508,1),(285,121515,1),(286,121514,1),(287,121513,1),(288,121512,1),(289,121519,1),(290,121518,1),(291,121517,1),(292,121516,1),(293,121522,1),(294,121523,1),(295,121520,1),(296,121521,1),(297,121526,1),(298,121527,1),(299,121524,1),(300,121525,1),(301,121530,1),(302,121531,1),(303,121528,1),(304,121529,1),(305,121534,1),(306,121535,1),(307,121533,1),(308,121541,1),(309,121540,1),(310,121543,1),(311,121542,1),(312,121537,1),(313,121536,1),(314,121539,1),(315,121538,1),(316,121549,1),(317,121548,1),(318,121551,1),(319,121550,1),(320,121545,1),(321,121544,1),(322,121547,1),(323,121546,1),(324,121556,1),(325,121557,1),(326,121558,1),(327,121553,1),(328,121554,1),(329,121555,1),(330,121564,1),(331,121565,1),(332,121566,1),(333,121567,1),(334,121560,1),(335,121562,1),(336,121563,1),(337,121575,1),(338,121574,1),(339,121573,1),(340,121572,1),(341,121571,1),(342,121570,1),(343,121569,1),(344,121568,1),(345,121583,1),(346,121582,1),(347,121581,1),(348,121580,1),(349,121579,1),(350,121578,1),(351,121577,1),(352,121576,1),(353,121590,1),(354,121588,1),(355,121589,1),(356,121586,1),(357,121587,1),(358,121584,1),(359,121585,1),(360,121598,1),(361,121599,1),(362,121596,1),(363,121597,1),(364,121594,1),(365,121595,1),(366,121592,1),(367,121593,1),(368,121627,1),(369,121626,1),(370,121625,1),(371,121624,1),(372,121630,1),(373,121629,1),(374,121628,1),(375,121619,1),(376,121618,1),(377,121617,1),(378,121616,1),(379,121623,1),(380,121622,1),(381,121621,1),(382,121620,1),(383,121610,1),(384,121611,1),(385,121608,1),(386,121609,1),(387,121614,1),(388,121615,1),(389,121612,1),(390,121613,1),(391,121602,1),(392,121603,1),(393,121600,1),(394,121606,1),(395,121607,1),(396,121604,1),(397,121605,1),(398,121657,1),(399,121656,1),(400,121659,1),(401,121658,1),(402,121661,1),(403,121660,1),(404,121663,1),(405,121662,1),(406,121649,1),(407,121648,1),(408,121651,1),(409,121653,1),(410,121652,1),(411,121640,1),(412,121642,1),(413,121643,1),(414,121644,1),(415,121645,1),(416,121646,1),(417,121647,1),(418,121632,1),(419,121633,1),(420,121634,1),(421,121635,1),(422,121636,1),(423,121637,1),(424,121638,1),(425,121639,1),(426,121693,1),(427,121692,1),(428,121691,1),(429,121690,1),(430,121689,1),(431,121688,1),(432,121687,1),(433,121686,1),(434,121685,1),(435,121684,1),(436,121683,1),(437,121682,1),(438,121681,1),(439,121680,1),(440,121678,1),(441,121679,1),(442,121676,1),(443,121677,1),(444,121675,1),(445,121672,1),(446,121673,1),(447,121670,1),(448,121671,1),(449,121668,1),(450,121669,1),(451,121667,1),(452,121664,1),(453,121665,1),(454,121724,1),(455,121727,1),(456,121721,1),(457,121720,1),(458,121722,1),(459,121716,1),(460,121719,1),(461,121718,1),(462,121713,1),(463,121712,1),(464,121715,1),(465,121714,1),(466,121708,1),(467,121709,1),(468,121710,1),(469,121711,1),(470,121704,1),(471,121705,1),(472,121706,1),(473,121700,1),(474,121701,1),(475,121702,1),(476,121703,1),(477,121696,1),(478,121697,1),(479,121698,1),(480,121699,1),(481,121747,1),(482,121744,1),(483,121750,1),(484,121748,1),(485,121749,1),(486,121754,1),(487,121755,1),(488,121752,1),(489,121753,1),(490,121758,1),(491,121759,1),(492,121756,1),(493,121729,1),(494,121728,1),(495,121735,1),(496,121733,1),(497,121732,1),(498,121737,1),(499,121736,1),(500,121743,1),(501,121742,1),(502,121741,1),(503,121740,1),(504,121776,1),(505,121777,1),(506,121778,1),(507,121779,1),(508,121780,1),(509,121781,1),(510,121782,1),(511,121783,1),(512,121784,1),(513,121785,1),(514,121786,1),(515,121787,1),(516,121788,1),(517,121789,1),(518,121790,1),(519,121791,1),(520,121761,1),(521,121760,1),(522,121765,1),(523,121764,1),(524,121766,1),(525,121769,1),(526,121768,1),(527,121771,1),(528,121770,1),(529,121773,1),(530,121775,1),(531,121774,1),(532,121814,1),(533,121815,1),(534,121812,1),(535,121813,1),(536,121810,1),(537,121811,1),(538,121808,1),(539,121822,1),(540,121823,1),(541,121821,1),(542,121819,1),(543,121816,1),(544,121817,1),(545,121799,1),(546,121798,1),(547,121797,1),(548,121796,1),(549,121795,1),(550,121794,1),(551,121793,1),(552,121792,1),(553,121807,1),(554,121806,1),(555,121804,1),(556,121803,1),(557,121802,1),(558,121801,1),(559,121800,1),(560,121844,1),(561,121845,1),(562,121846,1),(563,121840,1),(564,121841,1),(565,121842,1),(566,121843,1),(567,121852,1),(568,121853,1),(569,121855,1),(570,121848,1),(571,121851,1),(572,121829,1),(573,121828,1),(574,121831,1),(575,121830,1),(576,121825,1),(577,121824,1),(578,121826,1),(579,121837,1),(580,121836,1),(581,121839,1),(582,121838,1),(583,121833,1),(584,121832,1),(585,121834,1),(586,121059,1),(587,121058,1),(588,121057,1),(589,121056,1),(590,121063,1),(591,121062,1),(592,121061,1),(593,121060,1),(594,121067,1),(595,121066,1),(596,121065,1),(597,121064,1),(598,121071,1),(599,121070,1),(600,121069,1),(601,121068,1),(602,121074,1),(603,121075,1),(604,121072,1),(605,121073,1),(606,121078,1),(607,121079,1),(608,121076,1),(609,121077,1),(610,121082,1),(611,121083,1),(612,121080,1),(613,121081,1),(614,121086,1),(615,121087,1),(616,121084,1),(617,121085,1),(618,121042,1),(619,121045,1),(620,121046,1),(621,121049,1),(622,121050,1),(623,121051,1),(624,121052,1),(625,121054,1),(626,121055,1),(627,121149,1),(628,121151,1),(629,121150,1),(630,121145,1),(631,121144,1),(632,121147,1),(633,121146,1),(634,121141,1),(635,121140,1),(636,121143,1),(637,121142,1),(638,121137,1),(639,121136,1),(640,121139,1),(641,121138,1),(642,121132,1),(643,121133,1),(644,121134,1),(645,121135,1),(646,121129,1),(647,121130,1),(648,121131,1),(649,121124,1),(650,121125,1),(651,121126,1),(652,121127,1),(653,121122,1),(654,121123,1),(655,121119,1),(656,121118,1),(657,121117,1),(658,121116,1),(659,121115,1),(660,121114,1),(661,121113,1),(662,121110,1),(663,121109,1),(664,121108,1),(665,121107,1),(666,121106,1),(667,121105,1),(668,121104,1),(669,121102,1),(670,121103,1),(671,121100,1),(672,121101,1),(673,121098,1),(674,121099,1),(675,121097,1),(676,121094,1),(677,121092,1),(678,121093,1),(679,121090,1),(680,121088,1),(681,121089,1),(682,121208,1),(683,121211,1),(684,121213,1),(685,121212,1),(686,121215,1),(687,121201,1),(688,121200,1),(689,121203,1),(690,121202,1),(691,121205,1),(692,121204,1),(693,121207,1),(694,121206,1),(695,121192,1),(696,121193,1),(697,121195,1),(698,121197,1),(699,121198,1),(700,121199,1),(701,121184,1),(702,121185,1),(703,121186,1),(704,121187,1),(705,121188,1),(706,121189,1),(707,121190,1),(708,121191,1),(709,121179,1),(710,121178,1),(711,121177,1),(712,121183,1),(713,121182,1),(714,121181,1),(715,121180,1),(716,121171,1),(717,121170,1),(718,121174,1),(719,121173,1),(720,121172,1),(721,121163,1),(722,121160,1),(723,121161,1),(724,121166,1),(725,121167,1),(726,121164,1),(727,121154,1),(728,121155,1),(729,121152,1),(730,121153,1),(731,121158,1),(732,121159,1),(733,121156,1),(734,121157,1),(735,121268,1),(736,121269,1),(737,121270,1),(738,121271,1),(739,121264,1),(740,121265,1),(741,121266,1),(742,121267,1),(743,121276,1),(744,121277,1),(745,121278,1),(746,121279,1),(747,121272,1),(748,121273,1),(749,121275,1),(750,121253,1),(751,121252,1),(752,121255,1),(753,121254,1),(754,121248,1),(755,121251,1),(756,121250,1),(757,121261,1),(758,121263,1),(759,121262,1),(760,121257,1),(761,121256,1),(762,121258,1),(763,121238,1),(764,121239,1),(765,121236,1),(766,121237,1),(767,121234,1),(768,121235,1),(769,121233,1),(770,121246,1),(771,121247,1),(772,121244,1),(773,121245,1),(774,121243,1),(775,121240,1),(776,121241,1),(777,121223,1),(778,121222,1),(779,121221,1),(780,121220,1),(781,121219,1),(782,121218,1),(783,121217,1),(784,121216,1),(785,121231,1),(786,121230,1),(787,121229,1),(788,121228,1),(789,121227,1),(790,121225,1),(791,121224,1),(792,121328,1),(793,121330,1),(794,121333,1),(795,121334,1),(796,121335,1),(797,121336,1),(798,121337,1),(799,121338,1),(800,121339,1),(801,121340,1),(802,121341,1),(803,121342,1),(804,121343,1),(805,121313,1),(806,121312,1),(807,121315,1),(808,121314,1),(809,121317,1),(810,121316,1),(811,121319,1),(812,121318,1),(813,121321,1),(814,121320,1),(815,121323,1),(816,121322,1),(817,121325,1),(818,121324,1),(819,121327,1),(820,121298,1),(821,121299,1),(822,121296,1),(823,121297,1),(824,121302,1),(825,121303,1),(826,121300,1),(827,121306,1),(828,121307,1),(829,121304,1),(830,121305,1),(831,121311,1),(832,121308,1),(833,121309,1),(834,121283,1),(835,121282,1),(836,121281,1),(837,121280,1),(838,121287,1),(839,121286,1),(840,121285,1),(841,121284,1),(842,121291,1),(843,121290,1),(844,121289,1),(845,121288,1),(846,121292,1);\r\n+INSERT INTO `Item` VALUES (1,1,1),(2,2,1),(3,3,1),(4,4,1),(5,5,1),(6,6,1),(7,7,1),(8,8,1),(9,9,1);\r\n+INSERT INTO `Customer_Item` VALUES (1,1),(2,3),(3,3),(4,2),(5,8),(6,9),(7,4),(8,9),(9,3),(10,8),(11,2),(12,3),(13,6),(13,3),(14,3),(15,3),(16,3),(17,3),(18,1),(18,5),(19,3),(19,7),(20,6),(21,3),(22,1),(23,7),(23,2),(24,9),(25,3),(26,9),(27,9),(28,2),(29,7),(30,4),(31,8),(32,9),(33,3),(34,3),(34,6),(35,3),(36,1),(37,9),(37,4),(38,1),(38,4),(38,6),(39,6),(40,2),(41,9),(42,3),(42,6),(43,2),(44,7),(45,2),(46,4),(47,1),(48,3),(49,3),(50,3),(51,3),(52,3),(53,4),(54,2),(55,1),(56,1),(57,9),(58,4),(59,9),(59,3),(60,3),(61,5),(61,2),(61,9),(62,2),(63,9),(64,9),(65,8),(66,3),(67,6),(68,1),(68,3),(69,9),(70,9),(71,3),(71,7),(72,3),(73,2),(74,3),(75,3),(76,3),(77,9),(78,4),(79,9),(80,2),(80,1),(81,9),(82,8),(83,3),(84,9),(85,4),(86,3),(87,9),(88,3),(89,9),(90,3),(90,1),(91,2),(91,9),(91,3),(91,1),(92,9),(93,3),(94,6),(95,9),(96,5),(96,8),(96,1),(96,1),(96,4),(97,4),(97,9),(98,6),(98,9),(99,2),(100,3),(101,9),(102,3),(103,6),(104,3),(105,9),(106,9),(107,1),(108,6),(109,3),(110,1),(111,4),(112,8),(113,3),(114,2),(115,2),(116,7),(117,6),(118,3),(119,9),(120,9),(121,3),(122,4),(123,1),(124,1),(125,2),(126,3),(127,6),(128,5),(129,3),(130,3),(130,6),(131,6),(132,9),(133,8),(134,6),(135,9),(136,9),(137,8),(138,9),(139,9),(140,9),(141,9),(142,6),(143,2),(144,9),(145,7),(146,6),(146,7),(146,9),(147,4),(147,9),(147,1),(147,2),(147,1),(147,3),(148,9),(149,9),(150,6),(151,3),(152,6),(153,3),(154,6),(154,9),(155,3),(156,9),(156,8),(156,1),(157,9),(158,9),(159,8),(159,2),(160,9),(161,9),(162,4),(162,5),(163,3),(164,3),(165,9),(166,9),(167,9),(168,9),(169,6),(170,8),(170,2),(171,2),(171,4),(172,9),(173,9),(174,9),(175,1),(176,5),(177,1),(178,3),(179,6),(180,5),(181,8),(182,3),(183,2),(184,9),(185,3),(186,3),(187,3),(188,4),(189,9),(190,9),(191,4),(191,9),(192,1),(193,6),(194,9),(195,3),(196,9),(197,3),(198,2),(199,4),(200,9),(201,6),(202,2),(203,9),(204,9),(205,3),(206,3),(207,4),(208,6),(209,9),(209,1),(209,3),(210,9),(211,1),(212,5),(213,2),(213,3),(214,9),(215,6),(216,3),(217,1),(217,3),(218,3),(219,3),(220,3),(221,9),(222,9),(223,5),(224,4),(225,6),(226,3),(226,2),(227,9),(228,6),(229,6),(230,3),(231,8),(231,9),(231,6),(231,7),(232,1),(232,6),(233,7),(233,3),(233,6),(234,6),(235,8),(235,9),(236,9),(237,1),(237,6),(238,9),(239,6),(240,9),(241,9),(242,9),(243,9),(244,2),(245,3),(246,9),(247,3),(248,9),(249,9),(250,8),(250,7),(250,1),(250,9),(250,6),(251,5),(251,7),(251,8),(251,9),(252,4),(253,9),(254,4),(255,1),(255,9),(255,4),(256,8),(257,9),(258,9),(259,9),(260,5),(261,1),(262,9),(263,9),(264,9),(265,9),(266,1),(267,9),(268,7),(269,7),(270,1),(271,3),(272,9),(273,4),(274,3),(275,2),(275,9),(276,1),(277,1),(278,6),(279,9),(280,3),(281,9),(282,7),(283,9),(284,2),(284,9),(284,4),(285,9),(286,4),(286,9),(287,1),(288,9),(289,1),(290,5),(291,3),(292,4),(292,3),(293,9),(294,4),(294,1),(295,4),(296,9),(297,4),(298,2),(299,9),(300,2),(300,9),(301,7),(302,3),(303,6),(304,4),(305,2),(306,1),(306,2),(306,3),(307,9),(308,1),(309,9),(310,1),(311,3),(312,3),(313,2),(313,9),(313,6),(314,3),(315,6),(315,2),(316,7),(317,7),(318,5),(319,3),(320,3),(321,1),(322,3),(323,1),(324,2),(324,3),(324,6),(324,7),(325,3),(326,4),(327,7),(328,9),(329,7),(330,4),(331,9),(332,4),(333,2),(333,9),(334,3),(335,9),(336,9),(337,4),(338,1),(339,9),(339,1),(339,7),(339,8),(339,4),(339,6),(339,3),(339,2),(340,2),(340,9),(340,3),(341,1),(342,4),(343,5),(344,8),(345,7),(346,6),(347,1),(348,6),(349,7),(349,8),(350,9),(351,7),(352,8),(353,6),(354,5),(355,9),(356,9),(357,9),(358,7),(358,1),(358,9),(359,3),(360,3),(361,1),(362,1),(362,3),(362,6),(363,6),(363,9),(363,1),(363,7),(364,4),(365,4),(366,3),(367,9),(368,8),(368,7),(368,6),(368,4),(369,3),(370,6),(371,4),(372,2),(372,1),(373,3),(374,3),(375,9),(375,3),(376,2),(377,2),(377,3),(378,2),(379,1),(379,6),(380,9),(381,6),(382,7),(383,3),(383,1),(384,1),(385,6),(386,6),(387,4),(387,2),(388,6),(389,3),(390,4),(391,9),(392,2),(392,5),(393,8),(393,4),(393,1),(394,2),(395,7),(396,6),(397,6),(397,3),(398,1),(398,3),(399,9),(399,4),(400,7),(401,9),(401,3),(402,1),(403,6),(404,6),(405,8),(406,9),(407,6),(408,3),(409,9),(410,6),(411,5),(412,9),(412,8),(413,3),(414,6),(415,3),(416,7),(417,7),(418,9),(419,6),(419,4),(420,7),(421,6),(422,7),(423,2),(423,8),(424,2),(425,7),(426,4),(426,1),(426,9),(427,1),(428,6),(429,6),(430,6),(431,3),(432,2),(433,3),(434,9),(435,9),(436,3),(437,9),(438,9),(439,9),(440,3),(441,6),(442,6),(442,9),(443,8),(444,9),(444,3),(444,2),(444,1),(445,1),(446,9),(447,9),(448,9),(448,1),(449,9),(449,3),(450,9),(451,9),(452,9),(453,8),(454,9),(455,6),(456,3),(457,3),(458,2),(459,6),(460,4),(461,9),(462,2),(462,4),(463,1),(464,6),(465,6),(466,1),(466,4),(467,6),(468,6),(469,2),(470,5),(471,7),(472,1),(472,9),(472,4),(473,1),(474,1),(475,3),(475,6),(476,4),(477,9),(478,6),(479,4),(479,3),(480,9),(481,4),(482,3),(483,5),(484,2),(484,3),(485,3),(486,9),(487,8),(488,9),(489,6),(490,6),(491,3),(492,9),(493,9),(494,6),(495,3),(496,4),(497,3),(498,2),(499,1),(500,3),(501,3),(502,4),(503,9),(504,9),(505,1),(506,6),(507,6),(508,9),(509,3),(510,3),(511,9),(512,1),(512,9),(512,3),(513,3),(514,9),(515,5),(516,1),(517,1),(518,6),(518,9),(518,3),(519,3),(520,1),(521,3),(522,4),(523,9),(523,4),(524,3),(524,5),(525,9),(526,2),(527,9),(528,3),(529,9),(530,4),(531,9),(532,4),(532,2),(533,2),(533,9),(533,4),(533,6),(534,6),(534,3),(535,2),(536,3),(537,3),(538,6),(538,3),(538,2),(539,2),(540,4),(541,2),(541,9),(541,8),(542,2),(543,1),(544,1),(545,1),(546,4),(547,9),(548,6),(549,2),(549,6),(549,1),(550,3),(551,9),(552,9),(553,3),(553,1),(554,8),(554,2),(554,4),(555,2),(556,6),(557,2),(558,6),(559,2),(560,3),(561,2),(562,4),(563,1),(564,3),(565,3),(566,8),(567,2),(568,3),(569,2),(569,8),(570,6),(571,6),(572,2),(573,5),(574,1),(575,6),(576,2),(576,8),(576,9),(577,9),(578,3),(578,6),(578,2),(579,9),(580,9),(581,9),(582,3),(583,4),(584,5),(584,2),(584,8),(585,9),(586,1),(587,1),(588,2),(589,2),(590,4),(591,4),(592,1),(592,5),(592,2),(592,4),(593,4),(594,2),(595,3),(596,3),(597,4),(597,2),(598,1),(599,1),(600,1),(601,1),(602,5),(603,2),(604,1),(605,1),(606,3),(607,1),(607,3),(608,4),(609,4),(609,2),(610,2),(611,4),(612,5),(612,4),(612,2),(613,2),(614,1),(615,3),(615,1),(615,2),(616,1),(617,4),(618,1),(619,2),(620,1),(621,1),(622,1),(623,1),(624,1),(625,1),(626,1),(627,3),(628,2),(629,1),(630,1),(631,1),(632,1),(633,2),(633,1),(634,1),(635,4),(636,1),(637,2),(637,1),(638,3),(639,5),(640,2),(641,3),(642,2),(643,4),(644,1),(645,3),(646,1),(647,3),(648,1),(649,3),(650,3),(651,2),(652,3),(653,2),(654,3),(655,3),(656,2),(657,1),(658,2),(659,1),(660,4),(661,4),(662,3),(663,2),(664,3),(665,4),(666,6),(667,3),(668,3),(669,3),(670,1),(671,1),(672,4),(673,3),(674,3),(675,3),(676,6),(677,2),(677,1),(678,4),(679,3),(680,1),(681,2),(681,6),(681,1),(682,2),(683,6),(684,4),(685,1),(686,4),(687,2),(688,3),(688,2),(689,2),(690,2),(690,3),(691,1),(692,3),(693,4),(694,1),(695,5),(696,2),(697,2),(698,3),(699,5),(700,2),(701,2),(702,3),(703,2),(704,3),(705,3),(706,2),(707,2),(708,3),(709,3),(710,4),(711,4),(712,4),(713,6),(714,3),(715,2),(716,3),(716,1),(717,2),(718,4),(719,2),(719,1),(720,6),(721,2),(722,6),(722,1),(722,2),(723,2),(724,3),(724,2),(724,5),(725,2),(726,4),(727,6),(728,4),(729,3),(730,3),(731,4),(732,1),(733,2),(734,1),(735,9),(736,9),(737,9),(738,2),(739,9),(740,7),(740,8),(740,9),(741,8),(742,1),(743,7),(744,8),(744,2),(745,5),(746,9),(747,9),(748,7),(748,8),(748,9),(749,1),(750,1),(751,6),(752,4),(753,4),(754,6),(755,3),(756,3),(757,5),(758,7),(758,8),(758,9),(758,3),(759,1),(759,4),(760,1),(761,1),(762,4),(763,5),(763,2),(764,4),(765,4),(766,4),(767,5),(767,4),(767,2),(768,4),(768,1),(769,4),(770,1),(771,3),(772,1),(773,4),(774,4),(775,2),(776,4),(777,4),(778,4),(779,5),(780,4),(781,4),(782,4),(783,6),(784,6),(784,4),(785,6),(786,4),(787,4),(787,2),(788,2),(788,3),(789,4),(790,5),(791,4),(792,3),(793,4),(794,9),(795,9),(796,9),(796,6),(797,9),(798,4),(799,9),(800,9),(801,9),(802,9),(803,9),(803,3),(804,9),(805,7),(805,6),(805,2),(805,8),(805,1),(806,1),(807,9),(808,1),(809,1),(810,3),(811,2),(812,8),(813,6),(814,2),(814,5),(815,9),(816,9),(817,9),(818,9),(819,9),(820,3),(821,9),(822,9),(823,4),(824,9),(825,9),(826,8),(826,6),(827,6),(828,2),(829,9),(830,6),(831,2),(831,1),(832,1),(832,9),(833,8),(834,6),(835,3),(835,9),(836,9),(837,7),(838,3),(839,9),(840,2),(840,5),(841,4),(841,2),(842,7),(842,6),(842,1),(843,6),(844,6),(845,9),(846,9);\r\n'),(56,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/IndexController.java b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\nindex 0af70da..e72f54a 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n@@ -24,9 +24,8 @@ public class IndexController {\r\n         this.recommenderCreator = recommenderCreator;\r\n     }\r\n     \r\n-    @Get(\"/helloworld\")\r\n+    @Get(\"/\")\r\n     public void index() {\r\n-        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n     }\r\n     \r\n     @Get(\"/import/askjdhakjshdakjshd\")\r\ndiff --git a/src/main/webapp/WEB-INF/jsp/index/index.jsp b/src/main/webapp/WEB-INF/jsp/index/index.jsp\r\nnew file mode 100644\r\nindex 0000000..2e5705f\r\n--- /dev/null\r\n+++ b/src/main/webapp/WEB-INF/jsp/index/index.jsp\r\n@@ -0,0 +1,55 @@\r\n+<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n+    pageEncoding=\"UTF-8\"%>\r\n+<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\r\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n+<html>\r\n+<head>\r\n+<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n+<title>Commendans</title>\r\n+</head>\r\n+<body>\r\n+\r\n+	<p>Welcome to commendans, an REST recommendation service.<p>\r\n+	\r\n+	<p>You may register your client app <a href=\'<c:url value=\"/app/new\" />\'>here</a></p>\r\n+	\r\n+	<p>Some routes implemented:</p>\r\n+	<ul>\r\n+		<li><pre>GET <c:url value=\"/recommend/item/\" />{appItemId}</pre>\r\n+			<ul>\r\n+				<li><strong>Returns a sorted array of recommendations given an item of your app (identified with id <code>appItemId</code>)</strong></li>\r\n+				<li>Parameters:</li>\r\n+				<ul>\r\n+					<li><pre>accessKey: {your-access-key}</pre></li>\r\n+				</ul>\r\n+			</ul>\r\n+		</li>\r\n+		<li><pre>GET <c:url value=\"/recommend/items/\" /></pre>\r\n+			<ul>\r\n+				<li><strong>Returns a sorted array of recommendations given an array of items of your app (identified with ids array <code>items</code>)</strong></li>\r\n+				<li>Parameters:</li>\r\n+				<ul>\r\n+					<li><pre>accessKey: {your-access-key}</pre></li>\r\n+					<li><pre>items[0]: {some-item-id}</pre></li>\r\n+					<li><pre>items[1]: {some-item-id}</pre></li>\r\n+					<li><pre>items[...]: ...</pre></li>\r\n+				</ul>\r\n+			</ul>\r\n+		</li>\r\n+		<li><pre>POST <c:url value=\"/app/addSale\" /></pre>\r\n+			<ul>\r\n+				<li><strong>Register a event of your app, given a user id and a list of items bought (or liked, or visited, whatever)</strong></li>\r\n+				<li>Parameters:</li>\r\n+				<ul>\r\n+					<li><pre>accessKey: {your-access-key}</pre></li>\r\n+					<li><pre>clientAppUserId: {some-user-id}</pre></li>\r\n+					<li><pre>items[0]: {some-item-id}</pre></li>\r\n+					<li><pre>items[1]: {some-item-id}</pre></li>\r\n+					<li><pre>items[...]: ...</pre></li>\r\n+				</ul>\r\n+			</ul>\r\n+		</li>\r\n+	</ul>\r\n+\r\n+</body>\r\n+</html>\r\n\\ No newline at end of file\r\n'),(57,'\r\ndiff --git a/src/main/java/br/ime/usp/commendans/controller/IndexController.java b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\nindex e72f54a..c443794 100644\r\n--- a/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n+++ b/src/main/java/br/ime/usp/commendans/controller/IndexController.java\r\n@@ -1,13 +1,11 @@\r\n package br.ime.usp.commendans.controller;\r\n \r\n-import org.apache.commons.codec.digest.DigestUtils;\r\n import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n-import br.ime.usp.commendans.infra.DataImporter;\r\n import br.ime.usp.commendans.recommender.RecommenderCreator;\r\n \r\n \r\n@@ -30,12 +28,12 @@ public class IndexController {\r\n     \r\n     @Get(\"/import/askjdhakjshdakjshd\")\r\n     public void importData() {\r\n-        DataImporter dataImporter = new DataImporter(session);\r\n-        dataImporter.importData(\"/orders.csv\");\r\n-        recommenderCreator.create();\r\n-        String name = \"Casa do Código\";\r\n-        String accessKey = \"123\" + name;\r\n-        accessKey = DigestUtils.sha256Hex(accessKey);\r\n-        result.use(Results.http()).body(\"<html><body>finished persisting, key: \"+accessKey+\"</body></html>\");\r\n+//        DataImporter dataImporter = new DataImporter(session);\r\n+//        dataImporter.importData(\"/orders.csv\");\r\n+//        recommenderCreator.create();\r\n+//        String name = \"Casa do Código\";\r\n+//        String accessKey = \"123\" + name;\r\n+//        accessKey = DigestUtils.sha256Hex(accessKey);\r\n+        result.use(Results.http()).body(\"<html><body>get outta here</body></html>\");\r\n     }\r\n }\r\n'),(58,'\r\ndiff --git a/README.md b/README.md\r\nnew file mode 100644\r\nindex 0000000..ef90156\r\n--- /dev/null\r\n+++ b/README.md\r\n@@ -0,0 +1,7 @@\r\n+commendans\r\n+==========\r\n+commendans is a REST recommendation service.\r\n+\r\n+Registering your app as client, you will get a access key and then you can send to commendans items that your app users bought (or liked, or viewed, whatever) and then get recommendations for other items.\r\n+\r\n+commendans is currently online here: http://commendans.herokuapp.com/\r\n\\ No newline at end of file\r\n');
/*!40000 ALTER TABLE `Diff` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `FanOutResult`
--

DROP TABLE IF EXISTS `FanOutResult`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `FanOutResult` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `fanOut` int(11) NOT NULL,
  `sourceCode_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK41D6DF587FD44CE8` (`sourceCode_id`),
  CONSTRAINT `FK41D6DF587FD44CE8` FOREIGN KEY (`sourceCode_id`) REFERENCES `SourceCode` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=231 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `FanOutResult`
--

LOCK TABLES `FanOutResult` WRITE;
/*!40000 ALTER TABLE `FanOutResult` DISABLE KEYS */;
INSERT INTO `FanOutResult` VALUES (1,2,17),(2,0,22),(3,0,23),(4,2,24),(5,1,25),(6,0,26),(7,1,27),(8,4,29),(9,0,30),(10,2,31),(11,1,32),(12,0,33),(13,1,34),(14,0,35),(15,0,36),(16,0,37),(17,0,38),(18,0,39),(19,4,40),(20,0,41),(21,7,42),(22,2,43),(23,9,44),(24,11,45),(25,3,46),(26,1,47),(27,9,48),(28,2,49),(29,7,50),(30,9,51),(31,11,52),(32,3,53),(33,4,54),(34,15,55),(35,9,59),(36,0,60),(37,0,61),(38,0,62),(39,15,64),(40,2,67),(41,9,68),(42,4,69),(43,3,70),(44,6,71),(45,0,72),(46,4,73),(47,9,74),(48,9,75),(49,10,76),(50,7,77),(51,5,78),(52,5,80),(53,9,81),(54,6,82),(55,7,83),(56,7,84),(57,4,85),(58,3,87),(59,4,88),(60,3,91),(61,1,92),(62,9,99),(63,4,100),(64,9,101),(65,17,102),(66,3,107),(67,3,110),(68,9,112),(69,9,114),(70,9,115),(71,3,116),(72,0,117),(73,6,118),(74,9,119),(75,4,120),(76,0,121),(77,17,122),(78,4,126),(79,9,127),(80,3,128),(81,9,129),(82,6,130),(83,4,132),(84,6,133),(85,9,134),(86,9,136),(87,9,138),(88,4,139),(89,10,140),(90,1,141),(91,5,142),(92,4,143),(93,18,144),(94,10,145),(95,7,146),(96,8,147),(97,9,150),(98,5,151),(99,7,152),(100,9,153),(101,9,154),(102,2,155),(103,5,156),(104,0,157),(105,10,160),(106,10,161),(107,2,163),(108,10,164),(109,3,165),(110,5,166),(111,0,167),(112,9,168),(113,0,169),(114,9,170),(115,9,171),(116,6,172),(117,7,173),(118,18,174),(119,5,177),(120,8,178),(121,3,179),(122,0,180),(123,10,181),(124,10,182),(125,7,183),(126,4,184),(127,7,185),(128,3,188),(129,10,190),(130,5,191),(131,5,192),(132,13,193),(133,5,194),(134,6,195),(135,5,196),(136,5,197),(137,0,198),(138,9,199),(139,0,200),(140,9,201),(141,0,202),(142,10,203),(143,8,204),(144,0,206),(145,0,207),(146,0,208),(147,4,209),(148,13,210),(149,18,211),(150,3,212),(151,9,213),(152,3,214),(153,9,215),(154,10,216),(155,0,217),(156,0,218),(157,0,219),(158,0,220),(159,0,221),(160,7,222),(161,7,223),(162,2,224),(163,10,225),(164,7,226),(165,9,227),(166,9,228),(167,5,229),(168,0,230),(169,0,231),(170,3,232),(171,0,233),(172,7,234),(173,0,235),(174,8,236),(175,10,237),(176,5,239),(177,11,240),(178,5,241),(179,0,242),(180,11,243),(181,13,246),(182,13,247),(183,0,248),(184,5,249),(185,6,250),(186,7,251),(187,18,252),(188,0,253),(189,7,254),(190,5,255),(191,5,256),(192,5,257),(193,4,258),(194,7,259),(195,11,260),(196,0,263),(197,5,264),(198,8,265),(199,5,266),(200,7,267),(201,8,268),(202,10,269),(203,13,271),(204,14,272),(205,5,273),(206,6,274),(207,7,275),(208,6,278),(209,5,279),(210,6,284),(211,18,285),(212,7,286),(213,14,289),(214,7,290),(215,19,291),(216,7,292),(217,14,294),(218,19,295),(219,7,296),(220,3,297),(221,9,298),(222,14,299),(223,14,300),(224,14,302),(225,14,303),(226,14,304),(227,1,305),(228,12,306),(229,7,308),(230,4,310);
/*!40000 ALTER TABLE `FanOutResult` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `LComResult`
--

DROP TABLE IF EXISTS `LComResult`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `LComResult` (
  `Id` bigint(20) NOT NULL AUTO_INCREMENT,
  `lcom` double NOT NULL,
  `source_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK76130612400AE875` (`source_id`),
  CONSTRAINT `FK76130612400AE875` FOREIGN KEY (`source_id`) REFERENCES `SourceCode` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=231 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `LComResult`
--

LOCK TABLES `LComResult` WRITE;
/*!40000 ALTER TABLE `LComResult` DISABLE KEYS */;
INSERT INTO `LComResult` VALUES (1,0,17),(2,1,22),(3,1,23),(4,0,24),(5,1,25),(6,1,26),(7,1,27),(8,1,29),(9,1,30),(10,0,31),(11,1,32),(12,1,33),(13,1,34),(14,1,35),(15,1,36),(16,1,37),(17,1,38),(18,1,39),(19,1,40),(20,1,41),(21,0,42),(22,-1,43),(23,0.5,44),(24,0.666666666666667,45),(25,0.2,46),(26,0,47),(27,1,48),(28,-1,49),(29,0,50),(30,0.5,51),(31,0.666666666666667,52),(32,0.333333333333333,53),(33,0.5,54),(34,0.166666666666667,55),(35,1,59),(36,1,60),(37,1,61),(38,1,62),(39,0.166666666666667,64),(40,-1,67),(41,0.333333333333333,68),(42,0.333333333333333,69),(43,0,70),(44,0.444444444444444,71),(45,1,72),(46,0.666666666666667,73),(47,0.25,74),(48,0.5,75),(49,0.4,76),(50,0.2,77),(51,0.285714285714286,78),(52,1,80),(53,1,81),(54,1,82),(55,1,83),(56,0.25,84),(57,1,85),(58,0.375,87),(59,0.5,88),(60,1,91),(61,1,92),(62,0.5,99),(63,0.166666666666667,100),(64,0.5,101),(65,0.5,102),(66,1,107),(67,1,110),(68,0.5,112),(69,0.5,114),(70,0.5,115),(71,0,116),(72,1,117),(73,0.444444444444444,118),(74,0.5,119),(75,0.5,120),(76,1,121),(77,0.5,122),(78,1,126),(79,1,127),(80,0.333333333333333,128),(81,0.5,129),(82,0.444444444444444,130),(83,0.166666666666667,132),(84,0.444444444444444,133),(85,0.5,134),(86,1,136),(87,0.416666666666667,138),(88,0.5,139),(89,0.8,140),(90,0,141),(91,0.6,142),(92,0.583333333333333,143),(93,0.5,144),(94,1,145),(95,1,146),(96,1,147),(97,0.5,150),(98,0,151),(99,0.6875,152),(100,0.416666666666667,153),(101,0.25,154),(102,0.666666666666667,155),(103,0.666666666666667,156),(104,1,157),(105,0.266666666666667,160),(106,1,161),(107,-1,163),(108,0.5,164),(109,0,165),(110,0,166),(111,1,167),(112,0.5625,168),(113,1,169),(114,0.428571428571429,170),(115,0.25,171),(116,0.722222222222222,172),(117,0.333333333333333,173),(118,0.5,174),(119,0.333333333333333,177),(120,0.25,178),(121,0,179),(122,1,180),(123,1,181),(124,0.8,182),(125,0.727272727272727,183),(126,0.571428571428571,184),(127,1,185),(128,1,188),(129,0.5,190),(130,0,191),(131,0.333333333333333,192),(132,0.52,193),(133,0,194),(134,0,195),(135,0.25,196),(136,0.333333333333333,197),(137,1,198),(138,0.5625,199),(139,1,200),(140,0.428571428571429,201),(141,1,202),(142,1,203),(143,1,204),(144,1,206),(145,1,207),(146,1,208),(147,0.166666666666667,209),(148,0.52,210),(149,0.5,211),(150,1,212),(151,0.5625,213),(152,0.375,214),(153,0.5,215),(154,0.8,216),(155,1,217),(156,1,218),(157,1,219),(158,1,220),(159,1,221),(160,0.727272727272727,222),(161,0.333333333333333,223),(162,-1,224),(163,0.4,225),(164,0.25,226),(165,0.25,227),(166,0.428571428571429,228),(167,0.285714285714286,229),(168,1,230),(169,1,231),(170,1,232),(171,1,233),(172,1,234),(173,1,235),(174,1,236),(175,1,237),(176,0,239),(177,0.625,240),(178,0.222222222222222,241),(179,1,242),(180,0.625,243),(181,0,246),(182,0.52,247),(183,1,248),(184,0,249),(185,0,250),(186,0,251),(187,0.5,252),(188,1,253),(189,0.727272727272727,254),(190,0.678571428571429,255),(191,0,256),(192,1,257),(193,0.571428571428571,258),(194,0.333333333333333,259),(195,0.625,260),(196,1,263),(197,0.25,264),(198,0.25,265),(199,0.333333333333333,266),(200,1,267),(201,1,268),(202,1,269),(203,0.375,271),(204,0.583333333333333,272),(205,0,273),(206,0,274),(207,0.333333333333333,275),(208,0,278),(209,0.678571428571429,279),(210,0,284),(211,0.5,285),(212,0.727272727272727,286),(213,0.375,289),(214,0.222222222222222,290),(215,0.5,291),(216,0.222222222222222,292),(217,0.375,294),(218,0.5,295),(219,0.727272727272727,296),(220,-1,297),(221,0.25,298),(222,0.375,299),(223,0.583333333333333,300),(224,0.4,302),(225,0.375,303),(226,0.566666666666667,304),(227,1,305),(228,0.333333333333333,306),(229,0.333333333333333,308),(230,0.555555555555556,310);
/*!40000 ALTER TABLE `LComResult` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `LinesOfCodeResult`
--

DROP TABLE IF EXISTS `LinesOfCodeResult`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `LinesOfCodeResult` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `linesOfCode` int(11) NOT NULL,
  `methodName` varchar(1024) DEFAULT NULL,
  `sourceCode_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK4539A2207FD44CE8` (`sourceCode_id`),
  CONSTRAINT `FK4539A2207FD44CE8` FOREIGN KEY (`sourceCode_id`) REFERENCES `SourceCode` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=539 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `LinesOfCodeResult`
--

LOCK TABLES `LinesOfCodeResult` WRITE;
/*!40000 ALTER TABLE `LinesOfCodeResult` DISABLE KEYS */;
INSERT INTO `LinesOfCodeResult` VALUES (1,3,'index/0',17),(2,3,'index/0',24),(3,2,'addUser/1[User]',25),(4,5,'test/0',29),(5,3,'index/0',31),(6,2,'addUser/1[User]',32),(7,5,'test/0',40),(8,9,'parse/1[HashMap<Item, ItemToItemsAssociation>]',42),(9,4,'recommendendItemsFor/1[Item]',42),(10,0,'recommendendItemsFor/1[Item]',43),(11,7,'store/2[Item,User]',44),(12,5,'addUser/1[User]',44),(13,16,'build/0',44),(14,2,'getAssociations/0',44),(15,2,'getItem/0',45),(16,3,'compareTo/1[Tuple]',45),(17,6,'associationValue/1[Item]',45),(18,2,'getValue/0',45),(19,9,'associate/1[Item]',45),(20,10,'toTupleList/0',45),(21,4,'toString/0',45),(22,3,'hashCode/0',46),(23,2,'getId/0',46),(24,3,'toString/0',46),(25,7,'equals/1[Object]',46),(26,2,'itemsBought/0',47),(27,63,'test/0',48),(28,0,'recommendendItemsFor/1[Item]',49),(29,9,'parse/1[HashMap<Item, ItemToItemsAssociation>]',50),(30,4,'recommendendItemsFor/1[Item]',50),(31,7,'store/2[Item,User]',51),(32,5,'addUser/1[User]',51),(33,16,'build/0',51),(34,2,'getAssociations/0',51),(35,2,'getItem/0',52),(36,3,'compareTo/1[Tuple]',52),(37,6,'associationValue/1[Item]',52),(38,2,'getValue/0',52),(39,9,'associate/1[Item]',52),(40,10,'toTupleList/0',52),(41,4,'toString/0',52),(42,3,'hashCode/0',53),(43,2,'getId/0',53),(44,3,'toString/0',53),(45,7,'equals/1[Object]',53),(46,2,'getItems/0',54),(47,2,'add/1[Item]',54),(48,3,'toString/0',54),(49,2,'itemsBought/0',54),(50,38,'importData/1[String]',55),(51,6,'main/1[String[]]',55),(52,63,'test/0',59),(53,39,'importData/1[String]',64),(54,6,'main/1[String[]]',64),(55,0,'recommendendItemsFor/1[Item]',67),(56,7,'recommend/1[List<Long>]',68),(57,7,'recommend/1[Long]',68),(58,2,'find/1[Long]',69),(59,6,'find/1[List<Long>]',69),(60,4,'list/0',70),(61,3,'getInstance/0',71),(62,7,'create/0',71),(63,2,'toJson/1[List<Tuple>]',73),(64,2,'toJson/1[Tuple]',73),(65,7,'recommendendItemsFor/1[List<Item>]',74),(66,9,'parse/1[HashMap<Item, ItemToItemsAssociation>]',74),(67,3,'recommendendItemsFor/1[Item]',74),(68,7,'store/2[Item,User]',75),(69,5,'addUser/1[User]',75),(70,16,'build/0',75),(71,2,'getAssociations/0',75),(72,6,'associationValue/1[Item]',76),(73,9,'associate/1[Item]',76),(74,10,'toTupleList/0',76),(75,4,'toString/0',76),(76,5,'getTuples/0',77),(77,18,'merge/1[ItemVector]',77),(78,2,'remove/1[Tuple]',77),(79,2,'getItem/0',78),(80,3,'compareTo/1[Tuple]',78),(81,2,'getValue/0',78),(82,7,'hashCode/0',78),(83,3,'toString/0',78),(84,20,'equals/1[Object]',78),(85,6,'test/0',80),(86,63,'shouldBuildRecommender/0',81),(87,5,'shouldSerializeATuple/0',82),(88,5,'shouldSerializeATupleList/0',82),(89,15,'test/0',83),(90,6,'asList/1[Tuple]',83),(91,5,'getTuples/0',84),(92,18,'merge/1[ItemVector]',84),(93,6,'shouldFindUsers/0',85),(94,3,'destroy/0',87),(95,3,'getInstance/0',87),(96,3,'create/0',87),(97,3,'destroy/0',88),(98,3,'getInstance/0',88),(99,17,'create/0',88),(100,6,'shouldGetSessionFactory/0',91),(101,4,'shouldGetSessionFactory/0',92),(102,3,'destroy/0',99),(103,3,'getInstance/0',99),(104,31,'create/0',99),(105,3,'index/0',100),(106,5,'importData/0',100),(107,4,'serializedResult/1[List<Tuple>]',101),(108,5,'recommend/1[List<Long>]',101),(109,5,'recommend/1[Long]',101),(110,38,'importData/1[String]',102),(111,6,'safeReadLine/1[BufferedReader]',102),(112,5,'main/1[String[]]',102),(113,6,'shouldGetSessionFactory/0',107),(114,15,'main/1[String[]]',110),(115,3,'destroy/0',112),(116,3,'getInstance/0',112),(117,31,'create/0',112),(118,3,'destroy/0',114),(119,3,'getInstance/0',114),(120,31,'create/0',114),(121,3,'destroy/0',115),(122,3,'getInstance/0',115),(123,30,'create/0',115),(124,4,'list/0',116),(125,3,'getInstance/0',118),(126,7,'create/0',118),(127,5,'addUser/1[Customer]',119),(128,16,'build/0',119),(129,7,'store/2[Item,Customer]',119),(130,2,'getAssociations/0',119),(131,2,'getItems/0',120),(132,2,'add/1[Item]',120),(133,3,'toString/0',120),(134,2,'itemsBought/0',120),(135,38,'importData/1[String]',122),(136,6,'safeReadLine/1[BufferedReader]',122),(137,5,'main/1[String[]]',122),(138,6,'shouldFindUsers/0',126),(139,63,'shouldBuildRecommender/0',127),(140,3,'index/0',128),(141,5,'importData/0',128),(142,4,'serializeResult/1[List<Tuple>]',129),(143,5,'recommend/1[List<Long>]',129),(144,5,'recommend/1[Long]',129),(145,3,'getInstance/0',130),(146,7,'create/0',130),(147,3,'index/0',132),(148,5,'importData/0',132),(149,3,'getInstance/0',133),(150,7,'create/0',133),(151,5,'addUser/1[Customer]',134),(152,15,'build/0',134),(153,7,'store/2[Item,Customer]',134),(154,2,'getAssociations/0',134),(155,63,'shouldBuildRecommenderBookExample/0',136),(156,4,'addUser/1[Customer]',138),(157,10,'associate/1[Item]',138),(158,7,'build/0',138),(159,7,'store/2[Item,Customer]',138),(160,2,'getAssociations/0',138),(161,2,'add/1[Item]',139),(162,3,'toString/0',139),(163,2,'itemsBought/0',139),(164,3,'shouldSkipClass/1[Class<?>]',140),(165,5,'shouldSkipField/1[FieldAttributes]',140),(166,2,'toJson/1[List<Tuple>]',140),(167,2,'toJson/1[Tuple]',140),(168,2,'add/1[Item]',142),(169,3,'toString/0',142),(170,2,'itemsBought/0',142),(171,3,'hashCode/0',143),(172,2,'getId/0',143),(173,3,'toString/0',143),(174,7,'equals/1[Object]',143),(175,39,'importData/1[String]',144),(176,6,'safeReadLine/1[BufferedReader]',144),(177,5,'main/1[String[]]',144),(178,64,'shouldBuildRecommenderBookExample/0',145),(179,6,'shouldSerializeATuple/0',146),(180,6,'shouldSerializeATupleList/0',146),(181,16,'test/0',147),(182,6,'asList/1[Tuple]',147),(183,4,'serializeResult/1[List<Tuple>]',150),(184,5,'recommend/1[List<Long>]',150),(185,5,'recommend/1[Long]',150),(186,4,'list/0',151),(187,6,'findCustomersOf/1[Application]',151),(188,3,'getInstance/0',152),(189,4,'create/0',152),(190,5,'buildSingleAppRecommender/1[List<Customer>]',152),(191,4,'addUser/1[Customer]',153),(192,10,'associate/1[Item]',153),(193,7,'build/0',153),(194,7,'store/2[Item,Customer]',153),(195,2,'getAssociations/0',153),(196,7,'recommendendItemsFor/1[List<Item>]',154),(197,9,'parse/1[HashMap<Item, ItemToItemsAssociation>]',154),(198,3,'recommendendItemsFor/1[Item]',154),(199,2,'getName/0',155),(200,2,'add/1[Item]',156),(201,2,'getApp/0',156),(202,3,'toString/0',156),(203,2,'itemsBought/0',156),(204,8,'setUpClass/0',160),(205,8,'shouldFindUsers/0',160),(206,3,'tearDown/0',160),(207,3,'setUp/0',160),(208,22,'shouldFindUsersOfSpecificApp/0',160),(209,64,'shouldBuildRecommenderBookExample/0',161),(210,0,'recommendedItemsFor/1[Item]',163),(211,5,'recommend/2[Long,String]',164),(212,4,'serializeResult/1[List<Tuple>]',164),(213,5,'recommend/2[List<Long>,String]',164),(214,3,'list/0',165),(215,3,'list/0',166),(216,7,'findCustomersOf/1[Application]',166),(217,3,'getInstance/0',168),(218,9,'create/0',168),(219,6,'buildSingleAppRecommender/1[List<Customer>]',168),(220,4,'addUser/1[Customer]',170),(221,10,'associate/1[Item]',170),(222,7,'build/0',170),(223,7,'store/2[Item,Customer]',170),(224,2,'getAssociations/0',170),(225,2,'clean/0',170),(226,3,'recommendedItemsFor/1[Item]',171),(227,9,'parse/1[HashMap<Item, ItemToItemsAssociation>]',171),(228,7,'recommendedItemsFor/1[List<Item>]',171),(229,2,'recommendedItemsFor/1[Item]',172),(230,2,'getName/0',172),(231,2,'use/1[SingleAppRecommender]',172),(232,2,'recommendedItemsFor/1[List<Item>]',172),(233,2,'getId/0',172),(234,4,'toString/0',172),(235,2,'getAccessKey/0',172),(236,3,'recommendedItemsFor/2[List<Item>,String]',173),(237,3,'recommendedItemsFor/2[Item,String]',173),(238,40,'importData/1[String]',174),(239,6,'safeReadLine/1[BufferedReader]',174),(240,5,'main/1[String[]]',174),(241,4,'tearDown/0',177),(242,4,'setUp/0',177),(243,6,'shouldListApps/0',177),(244,10,'shouldFindUsers/0',178),(245,4,'tearDown/0',178),(246,6,'setUp/0',178),(247,22,'shouldFindUsersOfSpecificApp/0',178),(248,5,'setUpClass/0',179),(249,64,'shouldBuildRecommenderBookExample/0',181),(250,3,'shouldSkipClass/1[Class<?>]',182),(251,5,'shouldSkipField/1[FieldAttributes]',182),(252,2,'toJson/1[List<Tuple>]',182),(253,2,'toJson/1[Tuple]',182),(254,2,'recommendedItemsFor/1[Item]',183),(255,2,'getName/0',183),(256,2,'use/1[SingleAppRecommender]',183),(257,2,'recommendedItemsFor/1[List<Item>]',183),(258,6,'hashCode/0',183),(259,2,'getId/0',183),(260,15,'equals/1[Object]',183),(261,4,'toString/0',183),(262,2,'getAccessKey/0',183),(263,2,'getAppItemId/0',184),(264,8,'hashCode/0',184),(265,2,'getApp/0',184),(266,20,'equals/1[Object]',184),(267,3,'toString/0',184),(268,6,'shouldSerializeATuple/0',185),(269,6,'shouldSerializeATupleList/0',185),(270,15,'main/1[String[]]',188),(271,5,'recommend/2[Long,String]',190),(272,4,'serializeResult/1[List<Tuple>]',190),(273,5,'recommend/2[List<Long>,String]',190),(274,4,'findByAppItemId/1[Long]',191),(275,6,'findAppItemIds/1[List<Long>]',191),(276,7,'shouldFindByAppItemId/0',192),(277,4,'tearDown/0',192),(278,4,'setUp/0',192),(279,8,'recommend/2[Long,String]',193),(280,5,'serializeResult/1[ItemVector]',193),(281,7,'validKey/1[String]',193),(282,8,'recommend/2[List<Long>,String]',193),(283,3,'list/0',194),(284,4,'findByAccessKey/1[String]',194),(285,5,'findByAppItemId/2[Long,Application]',195),(286,7,'findAppItemIds/2[List<Long>,Application]',195),(287,4,'tearDown/0',196),(288,4,'setUp/0',196),(289,6,'shouldFindAppByAccessKey/0',196),(290,6,'shouldListApps/0',196),(291,11,'shouldFindByAppItemId/0',197),(292,4,'tearDown/0',197),(293,4,'setUp/0',197),(294,3,'getInstance/0',199),(295,9,'create/0',199),(296,6,'buildSingleAppRecommender/1[List<Customer>]',199),(297,4,'addUser/1[Customer]',201),(298,10,'associate/1[Item]',201),(299,7,'build/0',201),(300,7,'store/2[Item,Customer]',201),(301,2,'getAssociations/0',201),(302,2,'clean/0',201),(303,64,'shouldBuildRecommenderFromCollectiveIntelligenceInActionExample/0',203),(304,16,'shouldMergeTuples/0',204),(305,6,'asList/1[Tuple]',204),(306,3,'index/0',209),(307,5,'importData/0',209),(308,8,'recommend/2[Long,String]',210),(309,5,'serializeResult/1[ItemVector]',210),(310,7,'validKey/1[String]',210),(311,8,'recommend/2[List<Long>,String]',210),(312,40,'importData/1[String]',211),(313,6,'safeReadLine/1[BufferedReader]',211),(314,5,'main/1[String[]]',211),(315,15,'main/1[String[]]',212),(316,3,'getInstance/0',213),(317,9,'create/0',213),(318,6,'buildSingleAppRecommender/1[List<Customer>]',213),(319,3,'destroy/0',214),(320,3,'getInstance/0',214),(321,3,'create/0',214),(322,3,'destroy/0',215),(323,3,'getInstance/0',215),(324,30,'create/0',215),(325,3,'shouldSkipClass/1[Class<?>]',216),(326,5,'shouldSkipField/1[FieldAttributes]',216),(327,2,'toJson/1[List<Tuple>]',216),(328,2,'toJson/1[Tuple]',216),(329,2,'recommendedItemsFor/1[Item]',222),(330,2,'getName/0',222),(331,2,'use/1[SingleAppRecommender]',222),(332,2,'recommendedItemsFor/1[List<Item>]',222),(333,6,'hashCode/0',222),(334,2,'getId/0',222),(335,15,'equals/1[Object]',222),(336,4,'toString/0',222),(337,2,'getAccessKey/0',222),(338,3,'recommendedItemsFor/2[List<Item>,String]',223),(339,3,'recommendedItemsFor/2[Item,String]',223),(340,0,'recommendedItemsFor/1[Item]',224),(341,6,'associationValue/1[Item]',225),(342,9,'associate/1[Item]',225),(343,10,'toTupleList/0',225),(344,4,'toString/0',225),(345,5,'getTuples/0',226),(346,18,'merge/1[ItemVector]',226),(347,3,'recommendedItemsFor/1[Item]',227),(348,9,'parse/1[HashMap<Item, ItemToItemsAssociation>]',227),(349,7,'recommendedItemsFor/1[List<Item>]',227),(350,4,'addUser/1[Customer]',228),(351,10,'associate/1[Item]',228),(352,7,'build/0',228),(353,7,'store/2[Item,Customer]',228),(354,2,'getAssociations/0',228),(355,2,'clean/0',228),(356,2,'getItem/0',229),(357,3,'compareTo/1[Tuple]',229),(358,2,'getValue/0',229),(359,7,'hashCode/0',229),(360,3,'toString/0',229),(361,20,'equals/1[Object]',229),(362,6,'shouldGetSessionFactory/0',232),(363,6,'shouldSerializeATuple/0',234),(364,6,'shouldSerializeATupleList/0',234),(365,16,'shouldMergeTuples/0',236),(366,6,'asList/1[Tuple]',236),(367,64,'shouldBuildRecommenderFromCollectiveIntelligenceInActionExample/0',237),(368,3,'list/0',239),(369,7,'findCustomersOf/1[Application]',239),(370,3,'getInstance/0',240),(371,9,'create/0',240),(372,6,'buildSingleAppRecommender/1[List<Customer>]',240),(373,3,'index/0',241),(374,6,'importData/0',241),(375,3,'getInstance/0',243),(376,9,'create/0',243),(377,6,'buildSingleAppRecommender/1[List<Customer>]',243),(378,21,'addSale/3[String,Long,List<Long>]',246),(379,8,'recommend/2[Long,String]',247),(380,5,'serializeResult/1[ItemVector]',247),(381,7,'validKey/1[String]',247),(382,8,'recommend/2[List<Long>,String]',247),(383,3,'list/0',249),(384,4,'findByAccessKey/1[String]',249),(385,7,'find/2[ClientApp,Long]',250),(386,3,'list/0',250),(387,2,'save/1[Customer]',250),(388,7,'findCustomersOf/1[ClientApp]',250),(389,2,'save/1[Item]',251),(390,8,'findItems/2[List<Long>,ClientApp]',251),(391,5,'findByAppItemId/2[Long,ClientApp]',251),(392,40,'importData/1[String]',252),(393,6,'safeReadLine/1[BufferedReader]',252),(394,5,'main/1[String[]]',252),(395,2,'recommendedItemsFor/1[Item]',254),(396,2,'getName/0',254),(397,2,'use/1[SingleAppRecommender]',254),(398,2,'recommendedItemsFor/1[List<Item>]',254),(399,6,'hashCode/0',254),(400,2,'getId/0',254),(401,15,'equals/1[Object]',254),(402,4,'toString/0',254),(403,2,'getAccessKey/0',254),(404,2,'add/1[Item]',255),(405,2,'getClientAppCustomerId/0',255),(406,2,'getApp/0',255),(407,3,'toString/0',255),(408,2,'itemsBought/0',255),(409,2,'getItems/0',256),(410,11,'addRemaining/2[List<Long>,ClientApp]',256),(411,15,'shouldAddReaminingItems/0',257),(412,2,'getAppItemId/0',258),(413,8,'hashCode/0',258),(414,2,'getApp/0',258),(415,20,'equals/1[Object]',258),(416,3,'toString/0',258),(417,3,'recommendedItemsFor/2[List<Item>,String]',259),(418,3,'recommendedItemsFor/2[Item,String]',259),(419,3,'getInstance/0',260),(420,9,'create/0',260),(421,6,'buildSingleAppRecommender/1[List<Customer>]',260),(422,4,'tearDown/0',264),(423,4,'setUp/0',264),(424,6,'shouldFindAppByAccessKey/0',264),(425,6,'shouldListApps/0',264),(426,10,'shouldFindUsers/0',265),(427,4,'tearDown/0',265),(428,7,'shouldFindCustomerWithIdAndApp/0',265),(429,15,'saveCustomers/0',265),(430,6,'setUp/0',265),(431,9,'shouldFindUsersOfSpecificApp/0',265),(432,11,'shouldFindByAppItemId/0',266),(433,4,'tearDown/0',266),(434,4,'setUp/0',266),(435,6,'shouldSerializeATuple/0',267),(436,6,'shouldSerializeATupleList/0',267),(437,16,'shouldMergeTuples/0',268),(438,6,'asList/1[Tuple]',268),(439,64,'shouldBuildRecommenderFromCollectiveIntelligenceInActionExample/0',269),(440,2,'clientAppForm/0',271),(441,5,'saveApp/1[String]',271),(442,21,'addSale/3[String,Long,List<Long>]',271),(443,4,'recalculate/0',272),(444,8,'recommend/2[Long,String]',272),(445,5,'serializeResult/1[ItemVector]',272),(446,7,'validKey/1[String]',272),(447,8,'recommend/2[List<Long>,String]',272),(448,2,'commit/0',273),(449,3,'list/0',273),(450,4,'findByAccessKey/1[String]',273),(451,2,'save/1[ClientApp]',273),(452,2,'beginTransaction/0',273),(453,7,'find/2[ClientApp,Long]',274),(454,3,'list/0',274),(455,2,'save/1[Customer]',274),(456,7,'findCustomersOf/1[ClientApp]',274),(457,13,'intercept/3[InterceptorStack,ResourceMethod,Object]',275),(458,2,'accepts/1[ResourceMethod]',275),(459,7,'find/2[ClientApp,Long]',278),(460,3,'list/0',278),(461,2,'save/1[Customer]',278),(462,6,'findCustomersOf/1[ClientApp]',278),(463,2,'add/1[Item]',279),(464,2,'getClientAppCustomerId/0',279),(465,2,'getApp/0',279),(466,3,'toString/0',279),(467,2,'itemsBought/0',279),(468,7,'find/2[ClientApp,Long]',284),(469,3,'list/0',284),(470,2,'save/1[Customer]',284),(471,6,'findCustomersOf/1[ClientApp]',284),(472,38,'importData/1[String]',285),(473,6,'safeReadLine/1[BufferedReader]',285),(474,5,'main/1[String[]]',285),(475,2,'recommendedItemsFor/1[Item]',286),(476,2,'getName/0',286),(477,2,'use/1[SingleAppRecommender]',286),(478,2,'recommendedItemsFor/1[List<Item>]',286),(479,6,'hashCode/0',286),(480,2,'getId/0',286),(481,15,'equals/1[Object]',286),(482,4,'toString/0',286),(483,2,'getAccessKey/0',286),(484,2,'clientAppForm/0',289),(485,6,'saveApp/1[String]',289),(486,21,'addSale/3[String,Long,List<Long>]',289),(487,3,'index/0',290),(488,9,'importData/0',290),(489,43,'importData/1[String]',291),(490,6,'safeReadLine/1[BufferedReader]',291),(491,5,'main/1[String[]]',291),(492,3,'index/0',292),(493,9,'importData/0',292),(494,2,'clientAppForm/0',294),(495,6,'saveApp/1[String]',294),(496,21,'addSale/3[String,Long,List<Long>]',294),(497,43,'importData/1[String]',295),(498,6,'safeReadLine/1[BufferedReader]',295),(499,5,'main/1[String[]]',295),(500,2,'recommendedItemsFor/1[Item]',296),(501,2,'use/1[Recommender]',296),(502,2,'getName/0',296),(503,2,'recommendedItemsFor/1[List<Item>]',296),(504,6,'hashCode/0',296),(505,2,'getId/0',296),(506,15,'equals/1[Object]',296),(507,4,'toString/0',296),(508,2,'getAccessKey/0',296),(509,0,'recommendedItemsFor/1[Item]',297),(510,0,'recommendedItemsFor/1[List<Item>]',297),(511,3,'recommendedItemsFor/1[Item]',298),(512,9,'parse/1[HashMap<Item, ItemToItemsAssociation>]',298),(513,8,'recommendedItemsFor/1[List<Item>]',298),(514,2,'clientAppForm/0',299),(515,6,'saveApp/1[String]',299),(516,17,'addSale/3[String,Long,List<Long>]',299),(517,4,'recalculate/0',300),(518,8,'recommend/2[Long,String]',300),(519,5,'serializeResult/1[ItemVector]',300),(520,7,'validKey/1[String]',300),(521,8,'recommend/2[List<Long>,String]',300),(522,2,'clientAppForm/0',302),(523,6,'saveApp/1[String]',302),(524,7,'validKey/1[String]',302),(525,19,'addSale/3[String,Long,List<Long>]',302),(526,2,'clientAppForm/0',303),(527,6,'saveApp/1[String]',303),(528,18,'addSale/3[String,Long,List<Long>]',303),(529,4,'recalculate/0',304),(530,8,'recommend/2[Long,String]',304),(531,5,'serializeResult/1[ItemVector]',304),(532,7,'recommend/2[List<Long>,String]',304),(533,10,'intercept/3[InterceptorStack,ResourceMethod,Object]',306),(534,10,'accepts/1[ResourceMethod]',306),(535,2,'index/0',308),(536,9,'importData/0',308),(537,2,'index/0',310),(538,9,'importData/0',310);
/*!40000 ALTER TABLE `LinesOfCodeResult` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `MethodsCountResult`
--

DROP TABLE IF EXISTS `MethodsCountResult`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `MethodsCountResult` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `constructorMethods` int(11) NOT NULL,
  `crotectedMethods` int(11) NOT NULL,
  `defaultAttributes` int(11) NOT NULL,
  `defaultMethods` int(11) NOT NULL,
  `privateAttributes` int(11) NOT NULL,
  `privateMethods` int(11) NOT NULL,
  `protectedAttributes` int(11) NOT NULL,
  `publicAttributes` int(11) NOT NULL,
  `publicMethods` int(11) NOT NULL,
  `sourceCode_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKD07F31A7FD44CE8` (`sourceCode_id`),
  CONSTRAINT `FKD07F31A7FD44CE8` FOREIGN KEY (`sourceCode_id`) REFERENCES `SourceCode` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=231 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `MethodsCountResult`
--

LOCK TABLES `MethodsCountResult` WRITE;
/*!40000 ALTER TABLE `MethodsCountResult` DISABLE KEYS */;
INSERT INTO `MethodsCountResult` VALUES (1,1,0,0,0,1,1,0,0,1,17),(2,0,0,0,0,0,0,0,0,0,22),(3,0,0,0,0,0,0,0,0,0,23),(4,1,0,0,0,1,1,0,0,1,24),(5,0,0,0,0,0,0,0,0,1,25),(6,0,0,0,0,0,0,0,0,0,26),(7,1,0,0,0,0,0,0,0,0,27),(8,0,0,0,0,0,0,0,0,1,29),(9,0,0,0,0,0,0,0,0,0,30),(10,1,0,0,0,1,1,0,0,1,31),(11,0,0,0,0,0,0,0,0,1,32),(12,0,0,0,0,0,0,0,0,0,33),(13,1,0,0,0,0,0,0,0,0,34),(14,0,0,0,0,0,0,0,0,0,35),(15,0,0,0,0,0,0,0,0,0,36),(16,0,0,0,0,0,0,0,0,0,37),(17,0,0,0,0,0,0,0,0,0,38),(18,0,0,0,0,0,0,0,0,0,39),(19,0,0,0,0,0,0,0,0,1,40),(20,0,0,0,0,0,0,0,0,0,41),(21,1,0,0,0,1,1,0,0,1,42),(22,0,0,0,0,0,0,0,0,1,43),(23,1,0,0,0,2,2,0,0,3,44),(24,2,0,0,0,4,4,0,0,7,45),(25,1,0,0,0,1,1,0,0,4,46),(26,1,0,0,0,1,1,0,0,1,47),(27,0,0,0,0,0,0,0,0,1,48),(28,0,0,0,0,0,0,0,0,1,49),(29,1,0,0,0,1,1,0,0,1,50),(30,1,0,0,0,2,2,0,0,3,51),(31,2,0,0,0,4,4,0,0,7,52),(32,2,0,0,0,1,1,0,0,4,53),(33,2,0,0,0,2,2,0,0,4,54),(34,1,0,0,0,2,2,0,0,1,55),(35,0,0,0,0,0,0,0,0,1,59),(36,0,0,0,0,0,0,0,0,0,60),(37,0,0,0,0,0,0,0,0,0,61),(38,0,0,0,0,0,0,0,0,0,62),(39,1,0,0,0,2,2,0,0,1,64),(40,0,0,0,0,0,0,0,0,1,67),(41,1,0,0,0,4,4,0,0,2,68),(42,1,0,0,0,1,1,0,0,2,69),(43,1,0,0,0,1,1,0,0,1,70),(44,1,0,0,0,3,3,0,0,2,71),(45,0,0,0,0,0,0,0,0,0,72),(46,1,0,0,0,1,1,0,0,2,73),(47,1,0,0,0,1,1,0,0,2,74),(48,1,0,0,0,2,2,0,0,3,75),(49,1,0,0,0,2,2,0,0,4,76),(50,2,0,0,0,1,1,0,0,2,77),(51,1,0,0,0,2,2,0,0,6,78),(52,0,0,0,0,0,0,0,0,1,80),(53,0,0,0,0,0,0,0,0,1,81),(54,0,0,0,0,0,0,0,0,2,82),(55,0,0,0,0,0,0,0,0,1,83),(56,2,0,0,0,1,1,0,0,2,84),(57,0,0,0,0,0,0,0,0,1,85),(58,1,0,0,0,2,2,0,0,3,87),(59,1,0,0,0,2,2,0,0,3,88),(60,0,0,0,0,0,0,0,0,1,91),(61,0,0,0,0,0,0,0,0,1,92),(62,1,0,0,0,3,3,0,0,3,99),(63,1,0,0,0,2,2,0,0,2,100),(64,1,0,0,0,4,4,0,0,2,101),(65,1,0,0,0,2,2,0,0,2,102),(66,0,0,0,0,0,0,0,0,1,107),(67,0,0,0,0,0,0,0,0,1,110),(68,1,0,0,0,3,3,0,0,3,112),(69,1,0,0,0,3,3,0,0,3,114),(70,1,0,0,0,3,3,0,0,3,115),(71,1,0,0,0,1,1,0,0,1,116),(72,0,0,0,0,0,0,0,0,0,117),(73,1,0,0,0,3,3,0,0,2,118),(74,1,0,0,0,2,2,0,0,3,119),(75,2,0,0,0,2,2,0,0,4,120),(76,0,0,0,0,0,0,0,0,0,121),(77,1,0,0,0,2,2,0,0,2,122),(78,0,0,0,0,0,0,0,0,1,126),(79,0,0,0,0,0,0,0,0,1,127),(80,1,0,0,0,2,2,0,0,2,128),(81,1,0,0,0,4,4,0,0,2,129),(82,1,0,0,0,3,3,0,0,2,130),(83,1,0,0,0,2,2,0,0,2,132),(84,1,0,0,0,3,3,0,0,2,133),(85,1,0,0,0,2,2,0,0,3,134),(86,0,0,0,0,0,0,0,0,1,136),(87,1,0,0,0,2,2,0,0,3,138),(88,2,0,0,0,2,2,0,0,3,139),(89,1,0,0,0,2,2,0,0,4,140),(90,1,0,0,0,2,2,0,0,0,141),(91,2,0,0,0,3,3,0,0,3,142),(92,2,0,0,0,2,2,0,0,4,143),(93,1,0,0,0,2,2,0,0,2,144),(94,0,0,0,0,0,0,0,0,1,145),(95,0,0,0,0,0,0,0,0,2,146),(96,0,0,0,0,0,0,0,0,1,147),(97,1,0,0,0,4,4,0,0,2,150),(98,1,0,0,0,1,1,0,0,2,151),(99,1,0,0,0,4,4,0,0,2,152),(100,1,0,0,0,2,2,0,0,3,153),(101,1,0,0,0,1,1,0,0,2,154),(102,2,0,0,0,3,3,0,0,1,155),(103,2,0,0,0,4,4,0,0,4,156),(104,0,0,0,0,0,0,0,0,0,157),(105,0,0,0,0,3,3,0,0,5,160),(106,0,0,0,0,0,0,0,0,1,161),(107,0,0,0,0,0,0,0,0,1,163),(108,1,0,0,0,4,4,0,0,2,164),(109,1,0,0,0,1,1,0,0,1,165),(110,1,0,0,0,1,1,0,0,2,166),(111,0,0,0,0,0,0,0,0,0,167),(112,1,0,0,0,4,4,0,0,2,168),(113,0,0,0,0,0,0,0,0,0,169),(114,1,0,0,0,2,2,0,0,4,170),(115,1,0,0,0,1,1,0,0,2,171),(116,2,0,0,0,4,4,0,0,7,172),(117,1,0,0,0,1,1,0,0,2,173),(118,1,0,0,0,2,2,0,0,2,174),(119,0,0,0,0,1,1,0,0,3,177),(120,0,0,0,0,2,2,0,0,4,178),(121,0,0,0,0,0,0,1,0,1,179),(122,0,0,0,0,0,0,0,0,0,180),(123,0,0,0,0,0,0,0,0,1,181),(124,1,0,0,0,2,2,0,0,4,182),(125,2,0,0,0,4,4,0,0,9,183),(126,2,0,0,0,3,3,0,0,5,184),(127,0,0,0,0,0,0,0,0,2,185),(128,0,0,0,0,0,0,0,0,1,188),(129,1,0,0,0,4,4,0,0,2,190),(130,1,0,0,0,1,1,0,0,2,191),(131,0,0,0,0,1,1,0,0,3,192),(132,1,0,0,0,5,5,0,0,2,193),(133,1,0,0,0,1,1,0,0,2,194),(134,1,0,0,0,1,1,0,0,2,195),(135,0,0,0,0,1,1,0,0,4,196),(136,0,0,0,0,1,1,0,0,3,197),(137,0,0,0,0,0,0,0,0,0,198),(138,1,0,0,0,4,4,0,0,2,199),(139,0,0,0,0,0,0,0,0,0,200),(140,1,0,0,0,2,2,0,0,4,201),(141,0,0,0,0,0,0,0,0,0,202),(142,0,0,0,0,0,0,0,0,1,203),(143,0,0,0,0,0,0,0,0,1,204),(144,0,0,0,0,0,0,0,0,0,206),(145,0,0,0,0,0,0,0,0,0,207),(146,0,0,0,0,0,0,0,0,0,208),(147,1,0,0,0,2,2,0,0,2,209),(148,1,0,0,0,5,5,0,0,2,210),(149,1,0,0,0,2,2,0,0,2,211),(150,0,0,0,0,0,0,0,0,1,212),(151,1,0,0,0,4,4,0,0,2,213),(152,1,0,0,0,2,2,0,0,3,214),(153,1,0,0,0,3,3,0,0,3,215),(154,1,0,0,0,2,2,0,0,4,216),(155,0,0,0,0,0,0,0,0,0,217),(156,0,0,0,0,0,0,0,0,0,218),(157,0,0,0,0,0,0,0,0,0,219),(158,0,0,0,0,0,0,0,0,0,220),(159,0,0,0,0,0,0,0,0,0,221),(160,2,0,0,0,4,4,0,0,9,222),(161,1,0,0,0,1,1,0,0,2,223),(162,0,0,0,0,0,0,0,0,1,224),(163,1,0,0,0,2,2,0,0,4,225),(164,2,0,0,0,1,1,0,0,2,226),(165,1,0,0,0,1,1,0,0,2,227),(166,1,0,0,0,2,2,0,0,4,228),(167,1,0,0,0,2,2,0,0,6,229),(168,0,0,0,0,0,0,0,0,0,230),(169,0,0,0,0,0,0,0,0,0,231),(170,0,0,0,0,0,0,0,0,1,232),(171,0,0,0,0,0,0,0,0,0,233),(172,0,0,0,0,0,0,0,0,2,234),(173,0,0,0,0,0,0,0,0,0,235),(174,0,0,0,0,0,0,0,0,1,236),(175,0,0,0,0,0,0,0,0,1,237),(176,1,0,0,0,1,1,0,0,2,239),(177,1,0,0,0,4,4,0,0,2,240),(178,1,0,0,0,3,3,0,0,2,241),(179,0,0,0,0,0,0,0,0,0,242),(180,1,0,0,0,4,4,0,0,2,243),(181,1,0,0,0,4,4,0,0,1,246),(182,1,0,0,0,5,5,0,0,2,247),(183,0,0,0,0,0,0,0,0,0,248),(184,1,0,0,0,1,1,0,0,2,249),(185,1,0,0,0,1,1,0,0,4,250),(186,1,0,0,0,1,1,0,0,3,251),(187,1,0,0,0,2,2,0,0,2,252),(188,0,0,0,0,0,0,0,0,0,253),(189,2,0,0,0,4,4,0,0,9,254),(190,2,0,0,0,4,4,0,0,5,255),(191,1,0,0,0,1,1,0,0,2,256),(192,0,0,0,0,0,0,0,0,1,257),(193,2,0,0,0,3,3,0,0,5,258),(194,1,0,0,0,1,1,0,0,2,259),(195,1,0,0,0,4,4,0,0,2,260),(196,0,0,0,0,0,0,0,0,0,263),(197,0,0,0,0,1,1,0,0,4,264),(198,0,0,0,0,2,2,0,0,5,265),(199,0,0,0,0,1,1,0,0,3,266),(200,0,0,0,0,0,0,0,0,2,267),(201,0,0,0,0,0,0,0,0,1,268),(202,0,0,0,0,0,0,0,0,1,269),(203,1,0,0,0,4,4,0,0,3,271),(204,1,0,0,0,6,6,0,0,3,272),(205,1,0,0,0,1,1,0,0,5,273),(206,1,0,0,0,1,1,0,0,4,274),(207,1,0,0,0,2,2,0,0,2,275),(208,1,0,0,0,1,1,0,0,4,278),(209,2,0,0,0,4,4,0,0,5,279),(210,1,0,0,0,1,1,0,0,4,284),(211,1,0,0,0,2,2,0,0,2,285),(212,2,0,0,0,4,4,0,0,9,286),(213,1,0,0,0,4,4,0,0,3,289),(214,1,0,0,0,3,3,0,0,2,290),(215,1,0,0,0,2,2,0,0,2,291),(216,1,0,0,0,3,3,0,0,2,292),(217,1,0,0,0,4,4,0,0,3,294),(218,1,0,0,0,2,2,0,0,2,295),(219,2,0,0,0,4,4,0,0,9,296),(220,0,0,0,0,0,0,0,0,2,297),(221,1,0,0,0,1,1,0,0,2,298),(222,1,0,0,0,4,4,0,0,3,299),(223,1,0,0,0,6,6,0,0,3,300),(224,1,0,0,0,4,4,0,0,3,302),(225,1,0,0,0,4,4,0,0,3,303),(226,1,0,0,0,6,6,0,0,3,304),(227,0,0,0,0,0,0,0,0,0,305),(228,1,0,0,0,4,4,0,0,2,306),(229,1,0,0,0,3,3,0,0,2,308),(230,1,0,0,0,3,3,0,0,2,310);
/*!40000 ALTER TABLE `MethodsCountResult` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `MethodsInvocationResult`
--

DROP TABLE IF EXISTS `MethodsInvocationResult`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `MethodsInvocationResult` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `methodName` varchar(255) DEFAULT NULL,
  `methodsInvocation` double NOT NULL,
  `sourceCode_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK17C8447F7FD44CE8` (`sourceCode_id`),
  CONSTRAINT `FK17C8447F7FD44CE8` FOREIGN KEY (`sourceCode_id`) REFERENCES `SourceCode` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=331 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `MethodsInvocationResult`
--

LOCK TABLES `MethodsInvocationResult` WRITE;
/*!40000 ALTER TABLE `MethodsInvocationResult` DISABLE KEYS */;
INSERT INTO `MethodsInvocationResult` VALUES (1,'index/0',3,17),(2,'index/0',3,24),(3,'test/0',1,29),(4,'index/0',3,31),(5,'test/0',1,40),(6,'store/2[Item,User]',3,44),(7,'addUser/1[User]',2,44),(8,'build/0',6,44),(9,'compareTo/1[Tuple]',1,45),(10,'associationValue/1[Item]',1,45),(11,'associate/1[Item]',3,45),(12,'toTupleList/0',5,45),(13,'toString/0',1,45),(14,'hashCode/0',1,46),(15,'equals/1[Object]',2,46),(16,'test/0',12,48),(17,'store/2[Item,User]',3,51),(18,'addUser/1[User]',2,51),(19,'build/0',6,51),(20,'compareTo/1[Tuple]',1,52),(21,'associationValue/1[Item]',1,52),(22,'associate/1[Item]',3,52),(23,'toTupleList/0',5,52),(24,'toString/0',1,52),(25,'hashCode/0',1,53),(26,'equals/1[Object]',2,53),(27,'add/1[Item]',1,54),(28,'importData/1[String]',16,55),(29,'main/1[String[]]',5,55),(30,'test/0',12,59),(31,'importData/1[String]',18,64),(32,'main/1[String[]]',5,64),(33,'recommend/1[List<Long>]',8,68),(34,'recommend/1[Long]',8,68),(35,'find/1[Long]',1,69),(36,'find/1[List<Long>]',3,69),(37,'list/0',3,70),(38,'create/0',3,71),(39,'toJson/1[List<Tuple>]',1,73),(40,'toJson/1[Tuple]',1,73),(41,'store/2[Item,User]',3,75),(42,'addUser/1[User]',2,75),(43,'build/0',6,75),(44,'associationValue/1[Item]',1,76),(45,'associate/1[Item]',3,76),(46,'toTupleList/0',5,76),(47,'toString/0',1,76),(48,'getTuples/0',3,77),(49,'merge/1[ItemVector]',7,77),(50,'remove/1[Tuple]',1,77),(51,'compareTo/1[Tuple]',1,78),(52,'hashCode/0',1,78),(53,'equals/1[Object]',2,78),(54,'test/0',4,80),(55,'shouldBuildRecommender/0',13,81),(56,'shouldSerializeATuple/0',2,82),(57,'shouldSerializeATupleList/0',3,82),(58,'test/0',4,83),(59,'asList/1[Tuple]',1,83),(60,'getTuples/0',3,84),(61,'merge/1[ItemVector]',7,84),(62,'shouldFindUsers/0',4,85),(63,'destroy/0',1,87),(64,'create/0',1,87),(65,'shouldGetSessionFactory/0',5,91),(66,'shouldGetSessionFactory/0',1,92),(67,'index/0',3,100),(68,'importData/0',4,100),(69,'serializedResult/1[List<Tuple>]',5,101),(70,'recommend/1[List<Long>]',4,101),(71,'recommend/1[Long]',4,101),(72,'shouldGetSessionFactory/0',5,107),(73,'main/1[String[]]',10,110),(74,'list/0',3,116),(75,'create/0',3,118),(76,'addUser/1[Customer]',2,119),(77,'build/0',6,119),(78,'store/2[Item,Customer]',3,119),(79,'add/1[Item]',1,120),(80,'shouldFindUsers/0',4,126),(81,'shouldBuildRecommender/0',13,127),(82,'index/0',3,128),(83,'importData/0',3,128),(84,'serializeResult/1[List<Tuple>]',5,129),(85,'recommend/1[List<Long>]',4,129),(86,'recommend/1[Long]',4,129),(87,'create/0',3,130),(88,'index/0',3,132),(89,'importData/0',4,132),(90,'create/0',3,133),(91,'addUser/1[Customer]',2,134),(92,'build/0',5,134),(93,'store/2[Item,Customer]',3,134),(94,'shouldBuildRecommenderBookExample/0',13,136),(95,'addUser/1[Customer]',2,138),(96,'associate/1[Item]',4,138),(97,'build/0',2,138),(98,'store/2[Item,Customer]',3,138),(99,'add/1[Item]',1,139),(100,'add/1[Item]',1,142),(101,'hashCode/0',1,143),(102,'equals/1[Object]',2,143),(103,'shouldBuildRecommenderBookExample/0',13,145),(104,'shouldSerializeATuple/0',2,146),(105,'shouldSerializeATupleList/0',3,146),(106,'test/0',4,147),(107,'asList/1[Tuple]',1,147),(108,'serializeResult/1[List<Tuple>]',5,150),(109,'recommend/1[List<Long>]',4,150),(110,'recommend/1[Long]',4,150),(111,'list/0',3,151),(112,'findCustomersOf/1[Application]',4,151),(113,'create/0',2,152),(114,'buildSingleAppRecommender/1[List<Customer>]',2,152),(115,'addUser/1[Customer]',2,153),(116,'associate/1[Item]',4,153),(117,'build/0',2,153),(118,'store/2[Item,Customer]',3,153),(119,'add/1[Item]',1,156),(120,'setUpClass/0',4,160),(121,'shouldFindUsers/0',5,160),(122,'tearDown/0',2,160),(123,'setUp/0',1,160),(124,'shouldFindUsersOfSpecificApp/0',8,160),(125,'shouldBuildRecommenderBookExample/0',13,161),(126,'recommend/2[Long,String]',4,164),(127,'serializeResult/1[List<Tuple>]',5,164),(128,'recommend/2[List<Long>,String]',4,164),(129,'list/0',2,165),(130,'list/0',2,166),(131,'findCustomersOf/1[Application]',4,166),(132,'create/0',4,168),(133,'buildSingleAppRecommender/1[List<Customer>]',3,168),(134,'addUser/1[Customer]',2,170),(135,'associate/1[Item]',4,170),(136,'build/0',2,170),(137,'store/2[Item,Customer]',3,170),(138,'recommendedItemsFor/1[Item]',1,172),(139,'recommendedItemsFor/1[List<Item>]',1,172),(140,'tearDown/0',3,177),(141,'setUp/0',1,177),(142,'shouldListApps/0',4,177),(143,'shouldFindUsers/0',5,178),(144,'tearDown/0',3,178),(145,'setUp/0',2,178),(146,'shouldFindUsersOfSpecificApp/0',8,178),(147,'setUpClass/0',3,179),(148,'shouldBuildRecommenderBookExample/0',13,181),(149,'recommendedItemsFor/1[Item]',1,183),(150,'recommendedItemsFor/1[List<Item>]',1,183),(151,'hashCode/0',1,183),(152,'equals/1[Object]',2,183),(153,'hashCode/0',1,184),(154,'equals/1[Object]',2,184),(155,'shouldSerializeATuple/0',2,185),(156,'shouldSerializeATupleList/0',3,185),(157,'main/1[String[]]',10,188),(158,'recommend/2[Long,String]',4,190),(159,'serializeResult/1[List<Tuple>]',5,190),(160,'recommend/2[List<Long>,String]',4,190),(161,'findByAppItemId/1[Long]',3,191),(162,'findAppItemIds/1[List<Long>]',3,191),(163,'shouldFindByAppItemId/0',5,192),(164,'tearDown/0',3,192),(165,'setUp/0',1,192),(166,'recommend/2[Long,String]',5,193),(167,'serializeResult/1[ItemVector]',6,193),(168,'validKey/1[String]',2,193),(169,'recommend/2[List<Long>,String]',5,193),(170,'list/0',2,194),(171,'findByAccessKey/1[String]',3,194),(172,'findByAppItemId/2[Long,Application]',4,195),(173,'findAppItemIds/2[List<Long>,Application]',5,195),(174,'tearDown/0',3,196),(175,'setUp/0',1,196),(176,'shouldFindAppByAccessKey/0',4,196),(177,'shouldListApps/0',4,196),(178,'shouldFindByAppItemId/0',7,197),(179,'tearDown/0',3,197),(180,'setUp/0',1,197),(181,'create/0',4,199),(182,'buildSingleAppRecommender/1[List<Customer>]',3,199),(183,'addUser/1[Customer]',2,201),(184,'associate/1[Item]',4,201),(185,'build/0',2,201),(186,'store/2[Item,Customer]',3,201),(187,'shouldBuildRecommenderFromCollectiveIntelligenceInActionExample/0',13,203),(188,'shouldMergeTuples/0',4,204),(189,'asList/1[Tuple]',1,204),(190,'index/0',3,209),(191,'importData/0',4,209),(192,'recommend/2[Long,String]',5,210),(193,'serializeResult/1[ItemVector]',6,210),(194,'validKey/1[String]',2,210),(195,'recommend/2[List<Long>,String]',5,210),(196,'main/1[String[]]',10,212),(197,'create/0',4,213),(198,'buildSingleAppRecommender/1[List<Customer>]',3,213),(199,'destroy/0',1,214),(200,'create/0',1,214),(201,'recommendedItemsFor/1[Item]',1,222),(202,'recommendedItemsFor/1[List<Item>]',1,222),(203,'hashCode/0',1,222),(204,'equals/1[Object]',2,222),(205,'associationValue/1[Item]',1,225),(206,'associate/1[Item]',3,225),(207,'toTupleList/0',5,225),(208,'toString/0',1,225),(209,'getTuples/0',3,226),(210,'merge/1[ItemVector]',7,226),(211,'addUser/1[Customer]',2,228),(212,'associate/1[Item]',4,228),(213,'build/0',2,228),(214,'store/2[Item,Customer]',3,228),(215,'compareTo/1[Tuple]',1,229),(216,'hashCode/0',1,229),(217,'equals/1[Object]',2,229),(218,'shouldGetSessionFactory/0',5,232),(219,'shouldSerializeATuple/0',2,234),(220,'shouldSerializeATupleList/0',3,234),(221,'shouldMergeTuples/0',4,236),(222,'asList/1[Tuple]',1,236),(223,'shouldBuildRecommenderFromCollectiveIntelligenceInActionExample/0',13,237),(224,'list/0',2,239),(225,'findCustomersOf/1[Application]',4,239),(226,'index/0',3,241),(227,'importData/0',5,241),(228,'addSale/3[String,Long,List<Long>]',11,246),(229,'recommend/2[Long,String]',5,247),(230,'serializeResult/1[ItemVector]',6,247),(231,'validKey/1[String]',2,247),(232,'recommend/2[List<Long>,String]',6,247),(233,'list/0',2,249),(234,'findByAccessKey/1[String]',3,249),(235,'find/2[ClientApp,Long]',4,250),(236,'list/0',2,250),(237,'save/1[Customer]',1,250),(238,'findCustomersOf/1[ClientApp]',4,250),(239,'save/1[Item]',1,251),(240,'findItems/2[List<Long>,ClientApp]',5,251),(241,'findByAppItemId/2[Long,ClientApp]',4,251),(242,'recommendedItemsFor/1[Item]',1,254),(243,'recommendedItemsFor/1[List<Item>]',1,254),(244,'hashCode/0',1,254),(245,'equals/1[Object]',2,254),(246,'add/1[Item]',1,255),(247,'addRemaining/2[List<Long>,ClientApp]',2,256),(248,'shouldAddReaminingItems/0',7,257),(249,'hashCode/0',1,258),(250,'equals/1[Object]',2,258),(251,'tearDown/0',3,264),(252,'setUp/0',1,264),(253,'shouldFindAppByAccessKey/0',4,264),(254,'shouldListApps/0',4,264),(255,'shouldFindUsers/0',5,265),(256,'tearDown/0',3,265),(257,'shouldFindCustomerWithIdAndApp/0',7,265),(258,'saveCustomers/0',2,265),(259,'setUp/0',2,265),(260,'shouldFindUsersOfSpecificApp/0',7,265),(261,'shouldFindByAppItemId/0',7,266),(262,'tearDown/0',3,266),(263,'setUp/0',1,266),(264,'shouldSerializeATuple/0',2,267),(265,'shouldSerializeATupleList/0',3,267),(266,'shouldMergeTuples/0',4,268),(267,'asList/1[Tuple]',1,268),(268,'shouldBuildRecommenderFromCollectiveIntelligenceInActionExample/0',13,269),(269,'saveApp/1[String]',2,271),(270,'addSale/3[String,Long,List<Long>]',11,271),(271,'recalculate/0',4,272),(272,'recommend/2[Long,String]',5,272),(273,'serializeResult/1[ItemVector]',6,272),(274,'validKey/1[String]',2,272),(275,'recommend/2[List<Long>,String]',6,272),(276,'commit/0',2,273),(277,'list/0',2,273),(278,'findByAccessKey/1[String]',3,273),(279,'save/1[ClientApp]',1,273),(280,'beginTransaction/0',1,273),(281,'find/2[ClientApp,Long]',4,274),(282,'list/0',2,274),(283,'save/1[Customer]',1,274),(284,'findCustomersOf/1[ClientApp]',4,274),(285,'intercept/3[InterceptorStack,ResourceMethod,Object]',6,275),(286,'find/2[ClientApp,Long]',4,278),(287,'list/0',2,278),(288,'save/1[Customer]',1,278),(289,'findCustomersOf/1[ClientApp]',4,278),(290,'add/1[Item]',1,279),(291,'find/2[ClientApp,Long]',4,284),(292,'list/0',2,284),(293,'save/1[Customer]',1,284),(294,'findCustomersOf/1[ClientApp]',4,284),(295,'recommendedItemsFor/1[Item]',1,286),(296,'recommendedItemsFor/1[List<Item>]',1,286),(297,'hashCode/0',1,286),(298,'equals/1[Object]',2,286),(299,'saveApp/1[String]',3,289),(300,'addSale/3[String,Long,List<Long>]',11,289),(301,'index/0',3,290),(302,'importData/0',6,290),(303,'index/0',3,292),(304,'importData/0',6,292),(305,'saveApp/1[String]',3,294),(306,'addSale/3[String,Long,List<Long>]',11,294),(307,'recommendedItemsFor/1[Item]',1,296),(308,'recommendedItemsFor/1[List<Item>]',1,296),(309,'hashCode/0',1,296),(310,'equals/1[Object]',2,296),(311,'saveApp/1[String]',3,299),(312,'addSale/3[String,Long,List<Long>]',11,299),(313,'recalculate/0',4,300),(314,'recommend/2[Long,String]',5,300),(315,'serializeResult/1[ItemVector]',6,300),(316,'validKey/1[String]',2,300),(317,'recommend/2[List<Long>,String]',6,300),(318,'saveApp/1[String]',3,302),(319,'validKey/1[String]',2,302),(320,'addSale/3[String,Long,List<Long>]',12,302),(321,'saveApp/1[String]',3,303),(322,'addSale/3[String,Long,List<Long>]',11,303),(323,'recalculate/0',4,304),(324,'recommend/2[Long,String]',4,304),(325,'serializeResult/1[ItemVector]',6,304),(326,'recommend/2[List<Long>,String]',5,304),(327,'intercept/3[InterceptorStack,ResourceMethod,Object]',4,306),(328,'accepts/1[ResourceMethod]',6,306),(329,'importData/0',6,308),(330,'importData/0',3,310);
/*!40000 ALTER TABLE `MethodsInvocationResult` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Modification`
--

DROP TABLE IF EXISTS `Modification`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Modification` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `diff` longtext,
  `kind` varchar(255) DEFAULT NULL,
  `artifact_id` int(11) DEFAULT NULL,
  `commit_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKE0FD25BCEB039D68` (`commit_id`),
  KEY `FKE0FD25BC75C60808` (`artifact_id`),
  CONSTRAINT `FKE0FD25BC75C60808` FOREIGN KEY (`artifact_id`) REFERENCES `Artifact` (`id`),
  CONSTRAINT `FKE0FD25BCEB039D68` FOREIGN KEY (`commit_id`) REFERENCES `Commit` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=312 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Modification`
--

LOCK TABLES `Modification` WRITE;
/*!40000 ALTER TABLE `Modification` DISABLE KEYS */;
INSERT INTO `Modification` VALUES (1,'@@ -0,0 +1,19 @@\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<classpath>\r\n+	<classpathentry kind=\"src\" path=\"src/main/java\"/>\r\n+	<classpathentry kind=\"src\" path=\"src/main/resources\"/>\r\n+	<classpathentry kind=\"src\" path=\"src/test/java\"/>\r\n+	<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java\">\r\n+		<attributes>\r\n+			<attribute name=\"owner.project.facets\" value=\"java\"/>\r\n+		</attributes>\r\n+	</classpathentry>\r\n+	<classpathentry kind=\"con\" path=\"org.eclipse.jst.server.core.container/org.eclipse.jst.server.tomcat.runtimeTarget/Apache Tomcat v7.0\">\r\n+		<attributes>\r\n+			<attribute name=\"owner.project.facets\" value=\"jst.web\"/>\r\n+		</attributes>\r\n+	</classpathentry>\r\n+	<classpathentry kind=\"con\" path=\"org.eclipse.jst.j2ee.internal.web.container\"/>\r\n+	<classpathentry kind=\"con\" path=\"org.eclipse.jst.j2ee.internal.module.container\"/>\r\n+	<classpathentry kind=\"output\" path=\"build/classes\"/>\r\n+</classpath>\r\n','NEW',1,1),(2,'@@ -0,0 +1,3 @@\r\n+*.jar\r\n+*.class\r\n+build/\r\n','NEW',2,1),(3,'@@ -0,0 +1,36 @@\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<projectDescription>\r\n+	<name>recommender</name>\r\n+	<comment></comment>\r\n+	<projects>\r\n+	</projects>\r\n+	<buildSpec>\r\n+		<buildCommand>\r\n+			<name>org.eclipse.wst.jsdt.core.javascriptValidator</name>\r\n+			<arguments>\r\n+			</arguments>\r\n+		</buildCommand>\r\n+		<buildCommand>\r\n+			<name>org.eclipse.jdt.core.javabuilder</name>\r\n+			<arguments>\r\n+			</arguments>\r\n+		</buildCommand>\r\n+		<buildCommand>\r\n+			<name>org.eclipse.wst.common.project.facet.core.builder</name>\r\n+			<arguments>\r\n+			</arguments>\r\n+		</buildCommand>\r\n+		<buildCommand>\r\n+			<name>org.eclipse.wst.validation.validationbuilder</name>\r\n+			<arguments>\r\n+			</arguments>\r\n+		</buildCommand>\r\n+	</buildSpec>\r\n+	<natures>\r\n+		<nature>org.eclipse.jem.workbench.JavaEMFNature</nature>\r\n+		<nature>org.eclipse.wst.common.modulecore.ModuleCoreNature</nature>\r\n+		<nature>org.eclipse.wst.common.project.facet.core.nature</nature>\r\n+		<nature>org.eclipse.jdt.core.javanature</nature>\r\n+		<nature>org.eclipse.wst.jsdt.core.jsNature</nature>\r\n+	</natures>\r\n+</projectDescription>\r\n','NEW',3,1),(4,'@@ -0,0 +1,12 @@\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<classpath>\r\n+	<classpathentry kind=\"src\" path=\"src/main/webapp\"/>\r\n+	<classpathentry kind=\"con\" path=\"org.eclipse.wst.jsdt.launching.JRE_CONTAINER\"/>\r\n+	<classpathentry kind=\"con\" path=\"org.eclipse.wst.jsdt.launching.WebProject\">\r\n+		<attributes>\r\n+			<attribute name=\"hide\" value=\"true\"/>\r\n+		</attributes>\r\n+	</classpathentry>\r\n+	<classpathentry kind=\"con\" path=\"org.eclipse.wst.jsdt.launching.baseBrowserLibrary\"/>\r\n+	<classpathentry kind=\"output\" path=\"\"/>\r\n+</classpath>\r\n','NEW',4,1),(5,'@@ -0,0 +1,8 @@\r\n+#Mon Oct 29 08:50:46 BRST 2012\r\n+eclipse.preferences.version=1\r\n+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled\r\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6\r\n+org.eclipse.jdt.core.compiler.compliance=1.6\r\n+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error\r\n+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error\r\n+org.eclipse.jdt.core.compiler.source=1.6\r\n','NEW',5,1),(6,'@@ -0,0 +1,11 @@\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<project-modules id=\"moduleCoreId\" project-version=\"1.5.0\">\r\n+    <wb-module deploy-name=\"recommender\">\r\n+        <wb-resource deploy-path=\"/\" source-path=\"/src/main/webapp\" tag=\"defaultRootSource\"/>\r\n+        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/java\"/>\r\n+        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/resources\"/>\r\n+        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/test/java\"/>\r\n+        <property name=\"context-root\" value=\"recommender\"/>\r\n+        <property name=\"java-output-path\" value=\"/recommender/build/classes\"/>\r\n+    </wb-module>\r\n+</project-modules>\r\n','NEW',6,1),(7,'@@ -0,0 +1,10 @@\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<faceted-project>\r\n+  <runtime name=\"Apache Tomcat v7.0\"/>\r\n+  <fixed facet=\"java\"/>\r\n+  <fixed facet=\"jst.web\"/>\r\n+  <fixed facet=\"wst.jsdt.web\"/>\r\n+  <installed facet=\"java\" version=\"1.6\"/>\r\n+  <installed facet=\"jst.web\" version=\"3.0\"/>\r\n+  <installed facet=\"wst.jsdt.web\" version=\"1.0\"/>\r\n+</faceted-project>\r\n','NEW',7,1),(8,'@@ -0,0 +1 @@\r\n+org.eclipse.wst.jsdt.launching.baseBrowserLibrary\r\n\\ No newline at end of file\r\n','NEW',8,1),(9,'@@ -0,0 +1 @@\r\n+Window\r\n\\ No newline at end of file\r\n','NEW',9,1),(10,'@@ -0,0 +1,19 @@\r\n+webapp.dir=src/main/webapp/\r\n+libs.dir=${webapp.dir}/WEB-INF/lib\r\n+\r\n+ivy.jar.file=ivy-2.2.0.jar\r\n+ivy.file=ivysettings.xml\r\n+\r\n+tmp.root=target\r\n+tmp.dir=${tmp.root}/recommender\r\n+tmp.webinf.dir=${tmp.dir}/WEB-INF\r\n+tmp.classes.dir=${tmp.webinf.dir}/classes\r\n+tmp.test-classes.dir=${tmp.dir}/test-classes\r\n+\r\n+artifacts.dir=${tmp.root}/artifacts/\r\n+war.file=recommender.war\r\n+\r\n+src.dir=src/main/java\r\n+libs.dir=${webapp.dir}/WEB-INF/lib\r\n+resources.dir=src/main/resources\r\n+\r\n','NEW',10,1),(11,'@@ -0,0 +1,60 @@\r\n+<project name=\"Metric Miner\" default=\"war\" basedir=\".\" xmlns:ivy=\"antlib:org.apache.ivy.ant\">\r\n+\r\n+	<property file=\"build.properties\" />\r\n+\r\n+	<path id=\"libs.classpath\" path=\".\">\r\n+		<fileset dir=\"${libs.dir}\">\r\n+			<include name=\"*.jar\" />\r\n+		</fileset>\r\n+	</path>\r\n+\r\n+	<path id=\"compile.classpath\" path=\".\">\r\n+		<path refid=\"libs.classpath\" />\r\n+	</path>\r\n+\r\n+	<target name=\"prepare\">\r\n+		<mkdir dir=\"${tmp.dir}\" />\r\n+		<mkdir dir=\"${tmp.webinf.dir}\" />\r\n+		<mkdir dir=\"${tmp.classes.dir}\" />\r\n+		<mkdir dir=\"${tmp.test-classes.dir}\" />\r\n+	</target>\r\n+\r\n+	<target name=\"clean\">\r\n+		<delete dir=\"${tmp.dir}\" />\r\n+		<delete>\r\n+	    	<fileset dir=\"${libs.dir}\" includes=\"*.jar\"/>\r\n+		</delete>\r\n+	</target>\r\n+	\r\n+	<!-- resolve dependencies -->\r\n+	<target name=\"resolve\" description=\"--> retrieve dependencies with ivy\">\r\n+		<path id=\"ivy.lib.path\">\r\n+			<pathelement location=\"${ivy.jar.file}\" />\r\n+		</path>\r\n+		<taskdef resource=\"org/apache/ivy/ant/antlib.xml\" uri=\"antlib:org.apache.ivy.ant\" classpathref=\"ivy.lib.path\" />\r\n+\r\n+		<delete dir=\"${libs.dir}\" includes=\"**/*.*\" />\r\n+		<ivy:settings file=\"${ivy.file}\" />\r\n+		<ivy:retrieve pattern=\"${webapp.dir}/WEB-INF/lib/[artifact](-[classifier]).[ext]\" sync=\"true\" />\r\n+	</target>\r\n+\r\n+	<target name=\"compile\" depends=\"prepare\">\r\n+		<javac destdir=\"${tmp.classes.dir}\" srcdir=\"${src.dir}\" classpathref=\"compile.classpath\" debug=\"true\" encoding=\"UTF-8\" />\r\n+	</target>\r\n+\r\n+	<target name=\"war\" depends=\"compile\">\r\n+		<delete file=\"${artifacts.dir}/${war.file}\" />\r\n+		<copy todir=\"${tmp.classes.dir}\">\r\n+			<fileset dir=\"${resources.dir}\" />\r\n+		</copy>\r\n+		<move file=\"${tmp.classes.dir}/log4j.server.xml\" tofile=\"${tmp.classes.dir}/log4j.xml\"/>\r\n+\r\n+		<war destfile=\"${artifacts.dir}/${war.file}\" webxml=\"${webapp.dir}/WEB-INF/web.xml\" compress=\"true\">\r\n+			<fileset dir=\"${webapp.dir}\">\r\n+				<exclude name=\"WEB-INF/web.xml\" />\r\n+			</fileset>\r\n+			<classes dir=\"${tmp.classes.dir}\" />\r\n+		</war>\r\n+	</target>\r\n+\r\n+</project>\r\n\\ No newline at end of file\r\n','NEW',11,1),(12,'@@ -0,0 +1,39 @@\r\n+<ivy-module version=\"2.0\">\r\n+	<info organisation=\"caelum\" module=\"MetricMiner\" />\r\n+\r\n+	<configurations>\r\n+		<conf name=\"default\" description=\"dependencies used for compile\" />\r\n+		<conf name=\"test\" description=\"dependencies used for tests\" visibility=\"public\" />\r\n+	</configurations>\r\n+\r\n+	<dependencies>\r\n+		<!-- Hibernate and other stuff -->\r\n+		<dependency org=\"org.hibernate\" name=\"hibernate-core\" rev=\"3.6.10.Final\"/>\r\n+		<dependency org=\"org.hibernate.javax.persistence\" name=\"hibernate-jpa-2.0-api\" rev=\"1.0.0.Final\" conf=\"default\" />\r\n+		<dependency org=\"org.hibernate\" name=\"hibernate-c3p0\" rev=\"3.6.10.Final\" conf=\"default\" />\r\n+		<dependency org=\"javax.transaction\" name=\"jta\" rev=\"1.1\"/>\r\n+		<dependency org=\"mysql\" name=\"mysql-connector-java\" rev=\"5.1.18\"/>\r\n+		<dependency org=\"c3p0\" name=\"c3p0\" rev=\"0.9.1\" conf=\"default\" />\r\n+		<dependency org=\"org.hibernate\" name=\"hibernate-validator\" rev=\"4.3.0.Final\"/>\r\n+		<dependency org=\"net.sf.ehcache\" name=\"ehcache-core\" rev=\"2.5.3\"/>\r\n+		\r\n+\r\n+		<!-- VRaptor dependencies -->\r\n+		<dependency org=\"br.com.caelum\" name=\"vraptor\" rev=\"3.4.1\" conf=\"default\" />\r\n+        <dependency org=\"org.slf4j\" name=\"slf4j-api\" rev=\"1.6.1\"/>\r\n+        <dependency org=\"log4j\" name=\"log4j\" rev=\"1.2.16\"/>\r\n+		<dependency org=\"org.slf4j\" name=\"slf4j-log4j12\" rev=\"1.6.1\"/>\r\n+		<dependency org=\"org.mortbay.jetty\" name=\"servlet-api-2.5\" rev=\"6.1H.14.1\"/>\r\n+		<dependency org=\"org.glassfish.web\" name=\"jstl-impl\" rev=\"1.2\"/>\r\n+		<dependency org=\"org.mortbay.jetty\" name=\"servlet-api\" rev=\"3.0.pre4\"/>\r\n+		<dependency org=\"javassist\" name=\"javassist\" rev=\"3.12.1.GA\"/>\r\n+		<dependency org=\"commons-io\" name=\"commons-io\" rev=\"2.0.1\"/>\r\n+		<dependency org=\"com.google.guava\" name=\"guava\" rev=\"r09\"/>\r\n+\r\n+		<!-- Test dependencies -->\r\n+		<dependency org=\"junit\" name=\"junit\" rev=\"4.8.2\" conf=\"test->default\" />\r\n+		<dependency org=\"org.mockito\" name=\"mockito-all\" rev=\"1.8.5\" conf=\"test->default\" />\r\n+		<dependency org=\"org.hsqldb\" name=\"hsqldb\" rev=\"2.2.8\" conf=\"test->default\" />\r\n+            \r\n+	</dependencies>\r\n+</ivy-module>\r\n','NEW',12,1),(13,'@@ -0,0 +1,13 @@\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<ivysettings>\r\n+  <settings defaultResolver=\"myChain\" />\r\n+  <resolvers>\r\n+    <chain name=\"myChain\" returnFirst=\"true\">\r\n+      <ibiblio name=\"ibiblio\" m2compatible=\"true\" />\r\n+      <ibiblio name=\"jboss\" m2compatible=\"true\" root=\"http://repository.jboss.com/maven2/\" />\r\n+      <ibiblio name=\"jboss2\" m2compatible=\"true\" root=\"http://repository.jboss.com/nexus/content/groups/public/\" />\r\n+      <ibiblio name=\"sonatype-oss-public\" m2compatible=\"true\" root=\"https://oss.sonatype.org/content/groups/public/\" />\r\n+      <ibiblio name=\"terracotta\" m2compatible=\"true\" root=\"http://repo.terracotta.org/maven2/\" />\r\n+    </chain>\r\n+  </resolvers>\r\n+</ivysettings>\r\n\\ No newline at end of file\r\n','NEW',13,1),(14,'@@ -0,0 +1,3 @@\r\n+Manifest-Version: 1.0\r\n+Class-Path: \r\n+\r\n','NEW',14,1),(15,'@@ -0,0 +1,12 @@\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\">\r\n+  <display-name>recommender</display-name>\r\n+  <welcome-file-list>\r\n+    <welcome-file>index.html</welcome-file>\r\n+    <welcome-file>index.htm</welcome-file>\r\n+    <welcome-file>index.jsp</welcome-file>\r\n+    <welcome-file>default.html</welcome-file>\r\n+    <welcome-file>default.htm</welcome-file>\r\n+    <welcome-file>default.jsp</welcome-file>\r\n+  </welcome-file-list>\r\n+</web-app>\r\n\\ No newline at end of file\r\n','NEW',15,1),(16,'@@ -0,0 +1,5 @@\r\n+<html>\r\n+	<body>\r\n+		<h1>Hello</h1>\r\n+	</body>\r\n+</html>\r\n\\ No newline at end of file\r\n','NEW',16,1),(17,'@@ -0,0 +1,22 @@\r\n+package br.ime.usp.recommender;\r\n+\r\n+import br.com.caelum.vraptor.Get;\r\n+import br.com.caelum.vraptor.Resource;\r\n+import br.com.caelum.vraptor.Result;\r\n+import br.com.caelum.vraptor.view.Results;\r\n+\r\n+\r\n+@Resource\r\n+public class IndexController {\r\n+    \r\n+    private final Result result;\r\n+\r\n+    public IndexController(Result result) {\r\n+        this.result = result;\r\n+    }\r\n+    \r\n+    @Get(\"/\")\r\n+    public void index() {\r\n+        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n+    }\r\n+}\r\n','NEW',17,2),(18,'@@ -1,6 +1,6 @@\r\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n <projectDescription>\r\n-	<name>recommender</name>\r\n+	<name>commendans</name>\r\n 	<comment></comment>\r\n 	<projects>\r\n 	</projects>\r\n','DEFAULT',3,3),(19,'@@ -1,11 +1,11 @@\r\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n <project-modules id=\"moduleCoreId\" project-version=\"1.5.0\">\r\n-    <wb-module deploy-name=\"recommender\">\r\n+    <wb-module deploy-name=\"commendans\">\r\n         <wb-resource deploy-path=\"/\" source-path=\"/src/main/webapp\" tag=\"defaultRootSource\"/>\r\n         <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/java\"/>\r\n         <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/resources\"/>\r\n         <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/test/java\"/>\r\n-        <property name=\"context-root\" value=\"recommender\"/>\r\n-        <property name=\"java-output-path\" value=\"/recommender/build/classes\"/>\r\n+        <property name=\"java-output-path\" value=\"/commendans/build/classes\"/>\r\n+        <property name=\"context-root\" value=\"commendans\"/>\r\n     </wb-module>\r\n </project-modules>\r\n','DEFAULT',6,3),(20,'@@ -0,0 +1,3 @@\r\n+#Mon Oct 29 14:36:46 BRST 2012\r\n+eclipse.preferences.version=1\r\n+org.jboss.ide.eclipse.as.core.singledeployable.deployableList=\r\n','NEW',18,3),(21,'@@ -1,5 +1,5 @@\r\n <ivy-module version=\"2.0\">\r\n-	<info organisation=\"caelum\" module=\"MetricMiner\" />\r\n+	<info organisation=\"ime-usp\" module=\"recommender\" />\r\n \r\n 	<configurations>\r\n 		<conf name=\"default\" description=\"dependencies used for compile\" />\r\n','DEFAULT',12,3),(22,'@@ -1,22 +0,0 @@\r\n-package br.ime.usp.recommender;\r\n-\r\n-import br.com.caelum.vraptor.Get;\r\n-import br.com.caelum.vraptor.Resource;\r\n-import br.com.caelum.vraptor.Result;\r\n-import br.com.caelum.vraptor.view.Results;\r\n-\r\n-\r\n-@Resource\r\n-public class IndexController {\r\n-    \r\n-    private final Result result;\r\n-\r\n-    public IndexController(Result result) {\r\n-        this.result = result;\r\n-    }\r\n-    \r\n-    @Get(\"/\")\r\n-    public void index() {\r\n-        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n-    }\r\n-}\r\n','DELETED',17,3),(23,'@@ -0,0 +1,5 @@\r\n+package br.ime.usp.recommender;\r\n+\r\n+public class ItemToItemRecommender {\r\n+\r\n+}\r\n','NEW',19,3),(24,'@@ -0,0 +1,22 @@\r\n+package br.ime.usp.recommender.controller;\r\n+\r\n+import br.com.caelum.vraptor.Get;\r\n+import br.com.caelum.vraptor.Resource;\r\n+import br.com.caelum.vraptor.Result;\r\n+import br.com.caelum.vraptor.view.Results;\r\n+\r\n+\r\n+@Resource\r\n+public class IndexController {\r\n+    \r\n+    private final Result result;\r\n+\r\n+    public IndexController(Result result) {\r\n+        this.result = result;\r\n+    }\r\n+    \r\n+    @Get(\"/\")\r\n+    public void index() {\r\n+        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n+    }\r\n+}\r\n','NEW',20,3),(25,'@@ -0,0 +1,11 @@\r\n+package br.ime.usp.recommender.factory;\r\n+\r\n+import br.ime.usp.recommender.model.User;\r\n+\r\n+public class ItemToItemRecommenderFactory {\r\n+\r\n+    public void addUser(User user) {\r\n+        \r\n+    }\r\n+\r\n+}\r\n','NEW',21,3),(26,'@@ -0,0 +1,5 @@\r\n+package br.ime.usp.recommender.model;\r\n+\r\n+public class Item {\r\n+    \r\n+}\r\n','NEW',22,3),(27,'@@ -0,0 +1,10 @@\r\n+package br.ime.usp.recommender.model;\r\n+\r\n+import java.util.List;\r\n+\r\n+public class User {\r\n+\r\n+    public User(List<Item> items) {\r\n+    }\r\n+\r\n+}\r\n','NEW',23,3),(28,'@@ -1,6 +1,6 @@\r\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n <web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\">\r\n-  <display-name>recommender</display-name>\r\n+  <display-name>commendans</display-name>\r\n   <welcome-file-list>\r\n     <welcome-file>index.html</welcome-file>\r\n     <welcome-file>index.htm</welcome-file>\r\n','DEFAULT',15,3),(29,'@@ -0,0 +1,20 @@\r\n+package br.ime.usp.recommender.factory;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.recommender.model.Item;\r\n+import br.ime.usp.recommender.model.User;\r\n+\r\n+public class ItemToItemRecommenderFactoryTest {\r\n+\r\n+    @Test\r\n+    public void test() {\r\n+        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n+        List<Item> items = new ArrayList<Item>();\r\n+        factory.addUser(new User(items));\r\n+    }\r\n+\r\n+}\r\n','NEW',24,3),(30,'@@ -0,0 +1,5 @@\r\n+package br.ime.usp.commendans;\r\n+\r\n+public class ItemToItemRecommender {\r\n+\r\n+}\r\n','NEW',25,4),(31,'@@ -0,0 +1,22 @@\r\n+package br.ime.usp.commendans.controller;\r\n+\r\n+import br.com.caelum.vraptor.Get;\r\n+import br.com.caelum.vraptor.Resource;\r\n+import br.com.caelum.vraptor.Result;\r\n+import br.com.caelum.vraptor.view.Results;\r\n+\r\n+\r\n+@Resource\r\n+public class IndexController {\r\n+    \r\n+    private final Result result;\r\n+\r\n+    public IndexController(Result result) {\r\n+        this.result = result;\r\n+    }\r\n+    \r\n+    @Get(\"/\")\r\n+    public void index() {\r\n+        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n+    }\r\n+}\r\n','NEW',26,4),(32,'@@ -0,0 +1,11 @@\r\n+package br.ime.usp.commendans.factory;\r\n+\r\n+import br.ime.usp.commendans.model.User;\r\n+\r\n+public class ItemToItemRecommenderFactory {\r\n+\r\n+    public void addUser(User user) {\r\n+        \r\n+    }\r\n+\r\n+}\r\n','NEW',27,4),(33,'@@ -0,0 +1,5 @@\r\n+package br.ime.usp.commendans.model;\r\n+\r\n+public class Item {\r\n+    \r\n+}\r\n','NEW',28,4),(34,'@@ -0,0 +1,10 @@\r\n+package br.ime.usp.commendans.model;\r\n+\r\n+import java.util.List;\r\n+\r\n+public class User {\r\n+\r\n+    public User(List<Item> items) {\r\n+    }\r\n+\r\n+}\r\n','NEW',29,4),(35,'@@ -1,5 +0,0 @@\r\n-package br.ime.usp.recommender;\r\n-\r\n-public class ItemToItemRecommender {\r\n-\r\n-}\r\n','DELETED',19,4),(36,'@@ -1,22 +0,0 @@\r\n-package br.ime.usp.recommender.controller;\r\n-\r\n-import br.com.caelum.vraptor.Get;\r\n-import br.com.caelum.vraptor.Resource;\r\n-import br.com.caelum.vraptor.Result;\r\n-import br.com.caelum.vraptor.view.Results;\r\n-\r\n-\r\n-@Resource\r\n-public class IndexController {\r\n-    \r\n-    private final Result result;\r\n-\r\n-    public IndexController(Result result) {\r\n-        this.result = result;\r\n-    }\r\n-    \r\n-    @Get(\"/\")\r\n-    public void index() {\r\n-        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n-    }\r\n-}\r\n','DELETED',20,4),(37,'@@ -1,11 +0,0 @@\r\n-package br.ime.usp.recommender.factory;\r\n-\r\n-import br.ime.usp.recommender.model.User;\r\n-\r\n-public class ItemToItemRecommenderFactory {\r\n-\r\n-    public void addUser(User user) {\r\n-        \r\n-    }\r\n-\r\n-}\r\n','DELETED',21,4),(38,'@@ -1,5 +0,0 @@\r\n-package br.ime.usp.recommender.model;\r\n-\r\n-public class Item {\r\n-    \r\n-}\r\n','DELETED',22,4),(39,'@@ -1,10 +0,0 @@\r\n-package br.ime.usp.recommender.model;\r\n-\r\n-import java.util.List;\r\n-\r\n-public class User {\r\n-\r\n-    public User(List<Item> items) {\r\n-    }\r\n-\r\n-}\r\n','DELETED',23,4),(40,'@@ -0,0 +1,21 @@\r\n+package br.ime.usp.commendans.factory;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.factory.ItemToItemRecommenderFactory;\r\n+import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.model.User;\r\n+\r\n+public class ItemToItemRecommenderFactoryTest {\r\n+\r\n+    @Test\r\n+    public void test() {\r\n+        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n+        List<Item> items = new ArrayList<Item>();\r\n+        factory.addUser(new User(items));\r\n+    }\r\n+\r\n+}\r\n','NEW',30,4),(41,'@@ -1,20 +0,0 @@\r\n-package br.ime.usp.recommender.factory;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import br.ime.usp.recommender.model.Item;\r\n-import br.ime.usp.recommender.model.User;\r\n-\r\n-public class ItemToItemRecommenderFactoryTest {\r\n-\r\n-    @Test\r\n-    public void test() {\r\n-        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n-        List<Item> items = new ArrayList<Item>();\r\n-        factory.addUser(new User(items));\r\n-    }\r\n-\r\n-}\r\n','DELETED',24,4),(42,'@@ -1,5 +1,38 @@\r\n package br.ime.usp.commendans;\r\n \r\n-public class ItemToItemRecommender {\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.factory.ItemToItemsAssociation;\r\n+import br.ime.usp.commendans.factory.ItemToItemsAssociation.Tuple;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class ItemToItemRecommender implements Recommender {\r\n+\r\n+    private final Map<Item, List<Tuple>> associations;\r\n+\r\n+    public ItemToItemRecommender(\r\n+            HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        this.associations = parse(associations);\r\n+    }\r\n+\r\n+    private Map<Item, List<Tuple>> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        HashMap<Item, List<Tuple>> map = new HashMap<Item, List<Tuple>>();\r\n+        Set<Item> items = associations.keySet();\r\n+        for (Item item : items) {\r\n+            ItemToItemsAssociation association = associations.get(item);\r\n+            List<Tuple> tuples = association.toTupleList();\r\n+            map.put(item, tuples);\r\n+        }\r\n+        return map;\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<Tuple> recommendendItemsFor(Item item) {\r\n+        List<Tuple> tuples = associations.get(item);\r\n+        return tuples;\r\n+    }\r\n \r\n }\r\n','DEFAULT',25,5),(43,'@@ -0,0 +1,10 @@\r\n+package br.ime.usp.commendans;\r\n+\r\n+import java.util.List;\r\n+\r\n+import br.ime.usp.commendans.factory.ItemToItemsAssociation.Tuple;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public interface Recommender {\r\n+    public List<Tuple> recommendendItemsFor(Item item);\r\n+}\r\n','NEW',31,5),(44,'@@ -1,11 +1,61 @@\r\n package br.ime.usp.commendans.factory;\r\n \r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.ItemToItemRecommender;\r\n+import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.model.User;\r\n \r\n public class ItemToItemRecommenderFactory {\r\n \r\n+    private Map<Item, List<User>> usersByItemBought;\r\n+    private HashMap<Item, ItemToItemsAssociation> associations;\r\n+    \r\n+    public ItemToItemRecommenderFactory() {\r\n+        usersByItemBought = new HashMap<Item, List<User>>();\r\n+    }\r\n+    \r\n     public void addUser(User user) {\r\n-        \r\n+        List<Item> items = user.itemsBought();\r\n+        for (Item item : items) {\r\n+            store(item, user);\r\n+        }\r\n+    }\r\n+\r\n+    private void store(Item item, User user) {\r\n+        List<User> users = usersByItemBought.get(item);\r\n+        if (users == null) {\r\n+            users = new ArrayList<User>();\r\n+        }\r\n+        users.add(user);\r\n+        usersByItemBought.put(item, users);\r\n+    }\r\n+    \r\n+    \r\n+    public ItemToItemRecommender build() {\r\n+        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n+        Set<Item> items = usersByItemBought.keySet();\r\n+        for (Item item : items) {\r\n+            ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n+            List<User> users = usersByItemBought.get(item);\r\n+            for (User user : users) {\r\n+                List<Item> boughtTogether = user.itemsBought();\r\n+                System.out.println(item + \" -> \" +boughtTogether);\r\n+                for (Item i : boughtTogether) {\r\n+                    association.associate(i);\r\n+                }\r\n+            }\r\n+            associations.put(item, association);\r\n+        }\r\n+        return new ItemToItemRecommender(associations);\r\n+    }\r\n+    \r\n+    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n+        return associations;\r\n     }\r\n \r\n }\r\n','DEFAULT',27,5),(45,'@@ -0,0 +1,84 @@\r\n+package br.ime.usp.commendans.factory;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class ItemToItemsAssociation {\r\n+    private Item item;\r\n+    private Map<Item, Double> associations;\r\n+\r\n+    public ItemToItemsAssociation(Item item) {\r\n+        this.item = item;\r\n+        this.associations = new HashMap<Item, Double>();\r\n+    }\r\n+\r\n+    public void associate(Item i) {\r\n+        if (i.equals(this.item))\r\n+            return;\r\n+        Double v = associations.get(i);\r\n+        if (v == null) {\r\n+            v = 0.0;\r\n+        }\r\n+        v += 1.0;\r\n+        associations.put(i, v);\r\n+    }\r\n+    \r\n+    public double associationValue(Item i) {\r\n+        Double v = associations.get(i);\r\n+        if (v == null) {\r\n+            return 0.0;\r\n+        }\r\n+        return v;\r\n+    }\r\n+    \r\n+    \r\n+    @Override\r\n+    public String toString() {\r\n+        String res = this.item.toString() + \" => {\" + associations.toString() + \"}\";\r\n+        return res;\r\n+    }\r\n+\r\n+    public List<Tuple> toTupleList() {\r\n+        Set<Item> items = associations.keySet();\r\n+        ArrayList<Tuple> tuples = new ArrayList<Tuple>();\r\n+        for (Item item : items) {\r\n+            Double value = associations.get(item);\r\n+            tuples.add(new Tuple(item, value));\r\n+        }\r\n+        Collections.sort(tuples);\r\n+        Collections.reverse(tuples);\r\n+        return tuples;\r\n+    }\r\n+\r\n+    \r\n+    public class Tuple implements Comparable<Tuple> {\r\n+        private Item item;\r\n+        private Double value;\r\n+\r\n+        public Tuple(Item item, Double value) {\r\n+            this.item = item;\r\n+            this.value = value;\r\n+        }\r\n+\r\n+        public Item getItem() {\r\n+            return item;\r\n+        }\r\n+\r\n+        public Double getValue() {\r\n+            return value;\r\n+        }\r\n+\r\n+        @Override\r\n+        public int compareTo(Tuple o) {\r\n+            return (int) (value - o.getValue());\r\n+        }\r\n+\r\n+    }\r\n+\r\n+}\r\n','NEW',32,5),(46,'@@ -1,5 +1,32 @@\r\n package br.ime.usp.commendans.model;\r\n \r\n public class Item {\r\n+    private Long id;\r\n+\r\n+    public Item(Long id) {\r\n+        this.id = id;\r\n+    }\r\n+    \r\n+    @Override\r\n+    public int hashCode() {\r\n+        return id.hashCode();\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (obj instanceof Item) {\r\n+            Item other = (Item) obj;\r\n+            return other.getId().equals(this.id);\r\n+        }\r\n+        return false;\r\n+    }\r\n+    \r\n+    public Long getId() {\r\n+        return id;\r\n+    }\r\n     \r\n+    @Override\r\n+    public String toString() {\r\n+        return \"Item \" + id;\r\n+    }\r\n }\r\n','DEFAULT',28,5),(47,'@@ -4,7 +4,14 @@ import java.util.List;\r\n \r\n public class User {\r\n \r\n+    private final List<Item> items;\r\n+\r\n     public User(List<Item> items) {\r\n+        this.items = items;\r\n+    }\r\n+\r\n+    public List<Item> itemsBought() {\r\n+        return items;\r\n     }\r\n \r\n }\r\n','DEFAULT',29,5),(48,'@@ -1,11 +1,15 @@\r\n package br.ime.usp.commendans.factory;\r\n \r\n-import java.util.ArrayList;\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.HashMap;\r\n import java.util.List;\r\n \r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.factory.ItemToItemRecommenderFactory;\r\n+import br.ime.usp.commendans.ItemToItemRecommender;\r\n+import br.ime.usp.commendans.factory.ItemToItemsAssociation.Tuple;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.model.User;\r\n \r\n@@ -14,8 +18,66 @@ public class ItemToItemRecommenderFactoryTest {\r\n     @Test\r\n     public void test() {\r\n         ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n-        List<Item> items = new ArrayList<Item>();\r\n-        factory.addUser(new User(items));\r\n+        Item item1 = new Item(1l);\r\n+        Item item2 = new Item(2l);\r\n+        Item item3 = new Item(3l);\r\n+        Item item4 = new Item(4l);\r\n+        User user1 = new User(Arrays.asList(item1, item3));\r\n+        User user2 = new User(Arrays.asList(item2, item4));\r\n+        User user3 = new User(Arrays.asList(item1, item2, item3));\r\n+        User user4 = new User(Arrays.asList(item3, item4));\r\n+        factory.addUser(user1);\r\n+        factory.addUser(user2);\r\n+        factory.addUser(user3);\r\n+        factory.addUser(user4);\r\n+        \r\n+        ItemToItemRecommender recommender = factory.build();\r\n+        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n+        \r\n+        List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1);\r\n+        ItemToItemsAssociation association = associations.get(item1);\r\n+        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(2, recommendedItems.size());\r\n+        assertEquals(item3, recommendedItems.get(0).getItem());\r\n+        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(item2, recommendedItems.get(1).getItem());\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        \r\n+        recommendedItems = recommender.recommendendItemsFor(item2);\r\n+        association = associations.get(item2);\r\n+        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(3, recommendedItems.size());\r\n+        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n+        \r\n+        recommendedItems = recommender.recommendendItemsFor(item3);\r\n+        association = associations.get(item3);\r\n+        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(3, recommendedItems.size());\r\n+        assertEquals(item1, recommendedItems.get(0).getItem());\r\n+        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n+        \r\n+        association = associations.get(item4);\r\n+        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n+        \r\n     }\r\n \r\n }\r\n','DEFAULT',30,5),(49,'@@ -2,7 +2,7 @@ package br.ime.usp.commendans;\r\n \r\n import java.util.List;\r\n \r\n-import br.ime.usp.commendans.factory.ItemToItemsAssociation.Tuple;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation.Tuple;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n public interface Recommender {\r\n','DEFAULT',31,6),(50,'@@ -0,0 +1,38 @@\r\n+package br.ime.usp.commendans.itemtoitem;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.Recommender;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation.Tuple;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class ItemToItemRecommender implements Recommender {\r\n+\r\n+    private final Map<Item, List<Tuple>> associations;\r\n+\r\n+    public ItemToItemRecommender(\r\n+            HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        this.associations = parse(associations);\r\n+    }\r\n+\r\n+    private Map<Item, List<Tuple>> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        HashMap<Item, List<Tuple>> map = new HashMap<Item, List<Tuple>>();\r\n+        Set<Item> items = associations.keySet();\r\n+        for (Item item : items) {\r\n+            ItemToItemsAssociation association = associations.get(item);\r\n+            List<Tuple> tuples = association.toTupleList();\r\n+            map.put(item, tuples);\r\n+        }\r\n+        return map;\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<Tuple> recommendendItemsFor(Item item) {\r\n+        List<Tuple> tuples = associations.get(item);\r\n+        return tuples;\r\n+    }\r\n+\r\n+}\r\n','NEW',33,6),(51,'@@ -0,0 +1,60 @@\r\n+package br.ime.usp.commendans.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.model.User;\r\n+\r\n+public class ItemToItemRecommenderFactory {\r\n+\r\n+    private Map<Item, List<User>> usersByItemBought;\r\n+    private HashMap<Item, ItemToItemsAssociation> associations;\r\n+    \r\n+    public ItemToItemRecommenderFactory() {\r\n+        usersByItemBought = new HashMap<Item, List<User>>();\r\n+    }\r\n+    \r\n+    public void addUser(User user) {\r\n+        List<Item> items = user.itemsBought();\r\n+        for (Item item : items) {\r\n+            store(item, user);\r\n+        }\r\n+    }\r\n+\r\n+    private void store(Item item, User user) {\r\n+        List<User> users = usersByItemBought.get(item);\r\n+        if (users == null) {\r\n+            users = new ArrayList<User>();\r\n+        }\r\n+        users.add(user);\r\n+        usersByItemBought.put(item, users);\r\n+    }\r\n+    \r\n+    \r\n+    public ItemToItemRecommender build() {\r\n+        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n+        Set<Item> items = usersByItemBought.keySet();\r\n+        for (Item item : items) {\r\n+            ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n+            List<User> users = usersByItemBought.get(item);\r\n+            for (User user : users) {\r\n+                List<Item> boughtTogether = user.itemsBought();\r\n+                System.out.println(item + \" -> \" +boughtTogether);\r\n+                for (Item i : boughtTogether) {\r\n+                    association.associate(i);\r\n+                }\r\n+            }\r\n+            associations.put(item, association);\r\n+        }\r\n+        return new ItemToItemRecommender(associations);\r\n+    }\r\n+    \r\n+    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n+        return associations;\r\n+    }\r\n+\r\n+}\r\n','NEW',34,6),(52,'@@ -0,0 +1,84 @@\r\n+package br.ime.usp.commendans.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class ItemToItemsAssociation {\r\n+    private Item item;\r\n+    private Map<Item, Double> associations;\r\n+\r\n+    public ItemToItemsAssociation(Item item) {\r\n+        this.item = item;\r\n+        this.associations = new HashMap<Item, Double>();\r\n+    }\r\n+\r\n+    public void associate(Item i) {\r\n+        if (i.equals(this.item))\r\n+            return;\r\n+        Double v = associations.get(i);\r\n+        if (v == null) {\r\n+            v = 0.0;\r\n+        }\r\n+        v += 1.0;\r\n+        associations.put(i, v);\r\n+    }\r\n+    \r\n+    public double associationValue(Item i) {\r\n+        Double v = associations.get(i);\r\n+        if (v == null) {\r\n+            return 0.0;\r\n+        }\r\n+        return v;\r\n+    }\r\n+    \r\n+    \r\n+    @Override\r\n+    public String toString() {\r\n+        String res = this.item.toString() + \" => {\" + associations.toString() + \"}\";\r\n+        return res;\r\n+    }\r\n+\r\n+    public List<Tuple> toTupleList() {\r\n+        Set<Item> items = associations.keySet();\r\n+        ArrayList<Tuple> tuples = new ArrayList<Tuple>();\r\n+        for (Item item : items) {\r\n+            Double value = associations.get(item);\r\n+            tuples.add(new Tuple(item, value));\r\n+        }\r\n+        Collections.sort(tuples);\r\n+        Collections.reverse(tuples);\r\n+        return tuples;\r\n+    }\r\n+\r\n+    \r\n+    public class Tuple implements Comparable<Tuple> {\r\n+        private Item item;\r\n+        private Double value;\r\n+\r\n+        public Tuple(Item item, Double value) {\r\n+            this.item = item;\r\n+            this.value = value;\r\n+        }\r\n+\r\n+        public Item getItem() {\r\n+            return item;\r\n+        }\r\n+\r\n+        public Double getValue() {\r\n+            return value;\r\n+        }\r\n+\r\n+        @Override\r\n+        public int compareTo(Tuple o) {\r\n+            return (int) (value - o.getValue());\r\n+        }\r\n+\r\n+    }\r\n+\r\n+}\r\n','NEW',35,6),(53,'@@ -1,8 +1,17 @@\r\n package br.ime.usp.commendans.model;\r\n \r\n+import javax.persistence.Entity;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n public class Item {\r\n+    @Id\r\n     private Long id;\r\n \r\n+    @Deprecated\r\n+    protected Item() {\r\n+    }\r\n+    \r\n     public Item(Long id) {\r\n         this.id = id;\r\n     }\r\n','DEFAULT',28,6),(54,'@@ -2,16 +2,44 @@ package br.ime.usp.commendans.model;\r\n \r\n import java.util.List;\r\n \r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToMany;\r\n+\r\n+@Entity\r\n public class User {\r\n+    \r\n+    @Id @GeneratedValue\r\n+    private Long id;\r\n \r\n-    private final List<Item> items;\r\n+    @ManyToMany\r\n+    private List<Item> items;\r\n+    \r\n+    @Deprecated\r\n+    public User() {\r\n+    }\r\n \r\n-    public User(List<Item> items) {\r\n+    public User(List<Item> items, Long id) {\r\n         this.items = items;\r\n+        this.id = id;\r\n     }\r\n \r\n     public List<Item> itemsBought() {\r\n         return items;\r\n     }\r\n+    \r\n+    @Override\r\n+    public String toString() {\r\n+        return \"User \" + id;\r\n+    }\r\n+\r\n+    public void add(Item item) {\r\n+        items.add(item);\r\n+    }\r\n+    \r\n+    public List<Item> getItems() {\r\n+        return items;\r\n+    }\r\n \r\n }\r\n','DEFAULT',29,6),(55,'@@ -0,0 +1,78 @@\r\n+package br.ime.usp.commendans.util;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+import org.hibernate.SessionFactory;\r\n+import org.hibernate.StatelessSession;\r\n+import org.hibernate.cfg.Configuration;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.model.User;\r\n+\r\n+public class DataImporter {\r\n+    \r\n+    private final StatelessSession session;\r\n+    private static Logger logger;\r\n+\r\n+    public DataImporter(StatelessSession session) {\r\n+        this.session = session;\r\n+    }\r\n+\r\n+    public static void main(String[] args) throws IOException {\r\n+        logger = Logger.getLogger(DataImporter.class);\r\n+        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n+        StatelessSession session = sf.openStatelessSession();\r\n+        DataImporter dataImporter = new DataImporter(session);\r\n+        dataImporter.importData(\"/orders.csv\");\r\n+    }\r\n+\r\n+    private void importData(String file) throws IOException {\r\n+        HashMap<Long, User> users = new HashMap<Long, User>();\r\n+        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n+        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n+        String line = reader.readLine();\r\n+        \r\n+        while (line != null) {\r\n+            logger.info(line);\r\n+            List<String> row = Arrays.asList(line.split(\",\"));\r\n+            long id = Long.parseLong(row.get(0));\r\n+            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n+            User user = users.get(id);\r\n+            if (user == null) {\r\n+                user = new User(new ArrayList<Item>(), id);\r\n+            }\r\n+            Item item = items.get(itemId);\r\n+            if (item == null) {\r\n+                item = new Item(itemId);\r\n+            }\r\n+            user.add(item);\r\n+            line = reader.readLine();\r\n+            users.put(id, user);\r\n+            items.put(itemId, item);\r\n+        }\r\n+        \r\n+        logger.info(\"persisting\");\r\n+        session.getTransaction().begin();\r\n+        for (Item item : items.values()) {\r\n+            session.insert(item);\r\n+        }\r\n+        \r\n+        Collection<User> allUsers = users.values();\r\n+        for (User user : allUsers) {\r\n+            session.insert(user);\r\n+        }\r\n+        session.getTransaction().commit();\r\n+        logger.info(\"finished persisting\");\r\n+    }\r\n+\r\n+}\r\n','NEW',36,6),(56,'@@ -0,0 +1,29 @@\r\n+<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n+<!DOCTYPE hibernate-configuration PUBLIC\r\n+        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n+        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n+<hibernate-configuration>\r\n+    <session-factory>\r\n+    \r\n+    	<!-- connection pool configs -->\r\n+	    <property name=\"c3p0.acquire_increment\">1</property> \r\n+		<property name=\"c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n+		<property name=\"c3p0.max_size\">15</property> \r\n+		<property name=\"c3p0.min_size\">1</property> \r\n+		<property name=\"c3p0.timeout\">600</property>\r\n+    \r\n+        <property name=\"connection.url\">jdbc:mysql://localhost/commendans</property>\r\n+        <property name=\"connection.driver_class\">com.mysql.jdbc.Driver</property>\r\n+        <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\r\n+        <property name=\"connection.username\">root</property>\r\n+        <property name=\"connection.password\"></property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n+        <property name=\"show_sql\">false</property>\r\n+        <property name=\"format_sql\">false</property>\r\n+        <property name=\"hibernate.generate_statistics\">true</property>\r\n+\r\n+        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.User\" />\r\n+\r\n+    </session-factory>\r\n+</hibernate-configuration>\r\n','NEW',37,6),(57,'@@ -0,0 +1,27 @@\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\r\n+<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\r\n+\r\n+	<appender name=\"stdout\" class=\"org.apache.log4j.ConsoleAppender\">\r\n+		<layout class=\"org.apache.log4j.PatternLayout\">\r\n+			<param name=\"ConversionPattern\" value=\"%d{HH:mm:ss,SSS} %5p [%-20c{1}] %m%n\" />\r\n+		</layout>\r\n+	</appender>\r\n+\r\n+	<category name=\"org.hibernate\">\r\n+		<priority value=\"DEBUG\" />\r\n+		<appender-ref ref=\"stdout\" />\r\n+	</category>\r\n+	\r\n+	<category name=\"br.ime.usp\">\r\n+		<priority value=\"DEBUG\" />\r\n+		<appender-ref ref=\"stdout\" />\r\n+	</category>\r\n+\r\n+	<category name=\"br.com.caelum.vraptor\">\r\n+		<priority value=\"INFO\" />\r\n+		<appender-ref ref=\"stdout\" />\r\n+	</category>\r\n+	\r\n+\r\n+</log4j:configuration>\r\n','NEW',38,6),(58,'@@ -0,0 +1,1057 @@\r\n+121042,\"Livro 1 - E-book + Impresso\"\r\n+121045,\"Livro 2 - E-book + Impresso\"\r\n+121046,\"Livro 1 - Impresso\"\r\n+121049,\"Livro 1 - E-book + Impresso\"\r\n+121050,\"Livro 1 - Impresso\"\r\n+121051,\"Livro 1 - E-book\"\r\n+121052,\"Livro 1 - Impresso\"\r\n+121054,\"Livro 1 - Impresso\"\r\n+121055,\"Livro 1 - E-book\"\r\n+121056,\"Livro 2 - E-book\"\r\n+121057,\"Livro 2 - E-book + Impresso\"\r\n+121058,\"Livro 1 - E-book\"\r\n+121059,\"Livro 1 - E-book\"\r\n+121060,\"Livro 4 - E-book + Impresso\"\r\n+121061,\"Livro 1 - E-book\"\r\n+121061,\"Livro 5 - E-book\"\r\n+121061,\"Livro 2 - E-book\"\r\n+121061,\"Livro 4 - E-book\"\r\n+121062,\"Livro 4 - E-book\"\r\n+121063,\"Livro 4 - E-book\"\r\n+121064,\"Livro 4 - E-book\"\r\n+121064,\"Livro 2 - E-book\"\r\n+121065,\"Livro 3 - Impresso\"\r\n+121066,\"Livro 3 - E-book\"\r\n+121067,\"Livro 2 - E-book\"\r\n+121068,\"Livro 1 - E-book\"\r\n+121069,\"Livro 1 - E-book\"\r\n+121070,\"Livro 1 - E-book\"\r\n+121071,\"Livro 1 - E-book + Impresso\"\r\n+121072,\"Livro 1 - E-book + Impresso\"\r\n+121073,\"Livro 1 - E-book\"\r\n+121074,\"Livro 5 - E-book\"\r\n+121075,\"Livro 2 - E-book\"\r\n+121076,\"Livro 4 - E-book\"\r\n+121077,\"Livro 4 - E-book\"\r\n+121077,\"Livro 2 - E-book\"\r\n+121078,\"Livro 3 - E-book + Impresso\"\r\n+121079,\"Livro 1 - E-book\"\r\n+121079,\"Livro 3 - E-book\"\r\n+121080,\"Livro 5 - E-book + Impresso\"\r\n+121080,\"Livro 4 - E-book + Impresso\"\r\n+121080,\"Livro 2 - E-book + Impresso\"\r\n+121081,\"Livro 2 - E-book\"\r\n+121082,\"Livro 2 - E-book\"\r\n+121083,\"Livro 4 - E-book\"\r\n+121084,\"Livro 1 - E-book\"\r\n+121085,\"Livro 4 - E-book\"\r\n+121086,\"Livro 1 - E-book + Impresso\"\r\n+121087,\"Livro 3 - E-book\"\r\n+121087,\"Livro 1 - E-book\"\r\n+121087,\"Livro 2 - E-book\"\r\n+121088,\"Livro 1 - E-book\"\r\n+121089,\"Livro 2 - E-book\"\r\n+121089,\"Livro 6 - E-book\"\r\n+121089,\"Livro 1 - E-book\"\r\n+121090,\"Livro 3 - E-book\"\r\n+121092,\"Livro 2 - E-book + Impresso\"\r\n+121092,\"Livro 1 - E-book + Impresso\"\r\n+121093,\"Livro 4 - E-book\"\r\n+121094,\"Livro 6 - E-book + Impresso\"\r\n+121097,\"Livro 3 - E-book\"\r\n+121098,\"Livro 3 - E-book\"\r\n+121099,\"Livro 3 - E-book\"\r\n+121100,\"Livro 1 - E-book\"\r\n+121101,\"Livro 4 - E-book\"\r\n+121102,\"Livro 3 - E-book + Impresso\"\r\n+121103,\"Livro 1 - E-book + Impresso\"\r\n+121104,\"Livro 3 - E-book\"\r\n+121105,\"Livro 3 - E-book\"\r\n+121106,\"Livro 6 - E-book\"\r\n+121107,\"Livro 4 - E-book\"\r\n+121108,\"Livro 3 - E-book\"\r\n+121109,\"Livro 2 - E-book\"\r\n+121110,\"Livro 3 - E-book + Impresso\"\r\n+121113,\"Livro 4 - E-book + Impresso\"\r\n+121114,\"Livro 4 - E-book\"\r\n+121115,\"Livro 1 - E-book\"\r\n+121116,\"Livro 2 - E-book\"\r\n+121117,\"Livro 1 - E-book\"\r\n+121118,\"Livro 2 - Impresso\"\r\n+121119,\"Livro 3 - E-book + Impresso\"\r\n+121122,\"Livro 2 - E-book\"\r\n+121123,\"Livro 3 - E-book\"\r\n+121124,\"Livro 3 - E-book + Impresso\"\r\n+121125,\"Livro 3 - E-book\"\r\n+121126,\"Livro 2 - E-book\"\r\n+121127,\"Livro 3 - E-book + Impresso\"\r\n+121129,\"Livro 1 - E-book\"\r\n+121130,\"Livro 3 - E-book\"\r\n+121131,\"Livro 1 - E-book\"\r\n+121132,\"Livro 2 - E-book\"\r\n+121133,\"Livro 4 - E-book\"\r\n+121134,\"Livro 1 - E-book\"\r\n+121135,\"Livro 3 - E-book\"\r\n+121136,\"Livro 5 - E-book\"\r\n+121137,\"Livro 3 - E-book\"\r\n+121138,\"Livro 3 - E-book + Impresso\"\r\n+121139,\"Livro 2 - E-book\"\r\n+121140,\"Livro 4 - E-book + Impresso\"\r\n+121141,\"Livro 1 - E-book\"\r\n+121142,\"Livro 2 - E-book + Impresso\"\r\n+121142,\"Livro 1 - E-book + Impresso\"\r\n+121143,\"Livro 1 - Impresso\"\r\n+121144,\"Livro 1 - E-book\"\r\n+121145,\"Livro 1 - E-book\"\r\n+121146,\"Livro 2 - E-book\"\r\n+121146,\"Livro 1 - E-book\"\r\n+121147,\"Livro 1 - E-book\"\r\n+121149,\"Livro 3 - E-book\"\r\n+121150,\"Livro 1 - E-book\"\r\n+121151,\"Livro 2 - E-book\"\r\n+121152,\"Livro 3 - E-book\"\r\n+121153,\"Livro 3 - E-book\"\r\n+121154,\"Livro 6 - E-book\"\r\n+121155,\"Livro 4 - E-book\"\r\n+121156,\"Livro 2 - E-book\"\r\n+121157,\"Livro 1 - E-book\"\r\n+121158,\"Livro 4 - E-book + Impresso\"\r\n+121159,\"Livro 1 - E-book + Impresso\"\r\n+121160,\"Livro 6 - E-book\"\r\n+121160,\"Livro 1 - E-book\"\r\n+121160,\"Livro 2 - E-book\"\r\n+121161,\"Livro 2 - E-book\"\r\n+121163,\"Livro 2 - E-book\"\r\n+121164,\"Livro 4 - E-book\"\r\n+121166,\"Livro 3 - E-book\"\r\n+121166,\"Livro 2 - E-book\"\r\n+121166,\"Livro 5 - E-book\"\r\n+121167,\"Livro 2 - E-book + Impresso\"\r\n+121170,\"Livro 2 - E-book\"\r\n+121171,\"Livro 3 - E-book\"\r\n+121171,\"Livro 1 - E-book\"\r\n+121172,\"Livro 6 - E-book\"\r\n+121173,\"Livro 2 - E-book\"\r\n+121173,\"Livro 1 - E-book\"\r\n+121174,\"Livro 4 - E-book\"\r\n+121177,\"Livro 4 - E-book\"\r\n+121178,\"Livro 4 - E-book\"\r\n+121179,\"Livro 3 - E-book\"\r\n+121180,\"Livro 2 - E-book\"\r\n+121181,\"Livro 3 - E-book\"\r\n+121182,\"Livro 6 - E-book\"\r\n+121183,\"Livro 4 - E-book\"\r\n+121184,\"Livro 2 - E-book\"\r\n+121185,\"Livro 3 - E-book\"\r\n+121186,\"Livro 2 - E-book\"\r\n+121187,\"Livro 3 - E-book\"\r\n+121188,\"Livro 3 - E-book\"\r\n+121189,\"Livro 2 - E-book\"\r\n+121190,\"Livro 2 - Impresso\"\r\n+121191,\"Livro 3 - E-book\"\r\n+121192,\"Livro 5 - E-book\"\r\n+121193,\"Livro 2 - E-book\"\r\n+121195,\"Livro 2 - E-book\"\r\n+121197,\"Livro 3 - E-book + Impresso\"\r\n+121198,\"Livro 5 - E-book\"\r\n+121199,\"Livro 2 - E-book\"\r\n+121200,\"Livro 3 - E-book\"\r\n+121200,\"Livro 2 - E-book\"\r\n+121201,\"Livro 2 - E-book\"\r\n+121202,\"Livro 2 - E-book\"\r\n+121202,\"Livro 3 - E-book\"\r\n+121203,\"Livro 2 - E-book\"\r\n+121204,\"Livro 3 - E-book\"\r\n+121205,\"Livro 1 - E-book\"\r\n+121206,\"Livro 1 - E-book\"\r\n+121207,\"Livro 4 - E-book + Impresso\"\r\n+121208,\"Livro 2 - E-book\"\r\n+121211,\"Livro 6 - E-book\"\r\n+121212,\"Livro 1 - E-book\"\r\n+121213,\"Livro 4 - E-book\"\r\n+121215,\"Livro 4 - E-book\"\r\n+121216,\"Livro 6 - E-book\"\r\n+121216,\"Livro 4 - E-book\"\r\n+121217,\"Livro 6 - E-book\"\r\n+121218,\"Livro 4 - E-book\"\r\n+121219,\"Livro 4 - E-book + Impresso\"\r\n+121220,\"Livro 4 - E-book\"\r\n+121221,\"Livro 5 - E-book\"\r\n+121222,\"Livro 4 - E-book\"\r\n+121223,\"Livro 4 - Impresso\"\r\n+121224,\"Livro 4 - E-book\"\r\n+121225,\"Livro 5 - E-book\"\r\n+121227,\"Livro 4 - E-book\"\r\n+121228,\"Livro 2 - E-book\"\r\n+121228,\"Livro 3 - E-book\"\r\n+121229,\"Livro 4 - E-book\"\r\n+121229,\"Livro 2 - E-book\"\r\n+121230,\"Livro 4 - E-book\"\r\n+121231,\"Livro 6 - E-book\"\r\n+121233,\"Livro 4 - E-book\"\r\n+121234,\"Livro 5 - E-book\"\r\n+121234,\"Livro 4 - E-book\"\r\n+121234,\"Livro 2 - E-book\"\r\n+121235,\"Livro 4 - E-book\"\r\n+121235,\"Livro 1 - E-book\"\r\n+121236,\"Livro 4 - E-book\"\r\n+121237,\"Livro 4 - E-book\"\r\n+121238,\"Livro 5 - E-book\"\r\n+121238,\"Livro 2 - E-book\"\r\n+121239,\"Livro 4 - E-book\"\r\n+121240,\"Livro 2 - Impresso\"\r\n+121241,\"Livro 4 - E-book\"\r\n+121243,\"Livro 4 - E-book\"\r\n+121244,\"Livro 1 - E-book\"\r\n+121245,\"Livro 4 - E-book\"\r\n+121246,\"Livro 1 - E-book\"\r\n+121247,\"Livro 3 - E-book\"\r\n+121248,\"Livro 6 - E-book\"\r\n+121250,\"Livro 3 - E-book\"\r\n+121251,\"Livro 3 - E-book\"\r\n+121252,\"Livro 6 - E-book\"\r\n+121253,\"Livro 1 - E-book\"\r\n+121254,\"Livro 4 - Impresso\"\r\n+121255,\"Livro 4 - Impresso\"\r\n+121256,\"Livro 1 - E-book\"\r\n+121257,\"Livro 1 - E-book\"\r\n+121258,\"Livro 4 - E-book + Impresso\"\r\n+121261,\"Livro 5 - E-book\"\r\n+121262,\"Livro 1 - Impresso\"\r\n+121262,\"Livro 4 - E-book + Impresso\"\r\n+121263,\"Livro 7 - E-book + Impresso\"\r\n+121263,\"Livro 8 - E-book + Impresso\"\r\n+121263,\"Livro 9 - E-book + Impresso\"\r\n+121263,\"Livro 3 - E-book + Impresso\"\r\n+121264,\"Livro 9 - E-book\"\r\n+121265,\"Livro 7 - E-book + Impresso\"\r\n+121265,\"Livro 8 - E-book + Impresso\"\r\n+121265,\"Livro 9 - E-book\"\r\n+121266,\"Livro 8 - E-book + Impresso\"\r\n+121267,\"Livro 10 - E-book + Impresso\"\r\n+121268,\"Livro 9 - E-book\"\r\n+121269,\"Livro 9 - Impresso\"\r\n+121270,\"Livro 9 - E-book\"\r\n+121271,\"Livro 2 - E-book\"\r\n+121272,\"Livro 9 - E-book\"\r\n+121273,\"Livro 7 - E-book\"\r\n+121273,\"Livro 8 - E-book\"\r\n+121273,\"Livro 9 - E-book\"\r\n+121275,\"Livro 1 - Impresso\"\r\n+121276,\"Livro 7 - E-book\"\r\n+121277,\"Livro 8 - E-book\"\r\n+121277,\"Livro 2 - E-book\"\r\n+121278,\"Livro 5 - E-book\"\r\n+121279,\"Livro 9 - E-book\"\r\n+121280,\"Livro 7 - E-book\"\r\n+121281,\"Livro 9 - E-book\"\r\n+121282,\"Livro 3 - E-book\"\r\n+121282,\"Livro 9 - E-book\"\r\n+121283,\"Livro 6 - E-book\"\r\n+121284,\"Livro 4 - E-book\"\r\n+121284,\"Livro 2 - E-book\"\r\n+121285,\"Livro 2 - E-book\"\r\n+121285,\"Livro 5 - E-book\"\r\n+121286,\"Livro 9 - E-book\"\r\n+121287,\"Livro 3 - E-book + Impresso\"\r\n+121288,\"Livro 9 - E-book\"\r\n+121289,\"Livro 6 - E-book\"\r\n+121290,\"Livro 6 - E-book\"\r\n+121291,\"Livro 7 - E-book\"\r\n+121291,\"Livro 6 - E-book\"\r\n+121291,\"Livro 1 - E-book\"\r\n+121292,\"Livro 9 - E-book\"\r\n+121296,\"Livro 9 - E-book\"\r\n+121297,\"Livro 4 - E-book\"\r\n+121298,\"Livro 3 - E-book\"\r\n+121299,\"Livro 9 - E-book\"\r\n+121300,\"Livro 8 - E-book + Impresso\"\r\n+121300,\"Livro 6 - Impresso\"\r\n+121302,\"Livro 9 - E-book\"\r\n+121303,\"Livro 9 - E-book\"\r\n+121304,\"Livro 9 - E-book\"\r\n+121305,\"Livro 6 - E-book\"\r\n+121306,\"Livro 6 - E-book\"\r\n+121307,\"Livro 2 - E-book\"\r\n+121308,\"Livro 10 - E-book\"\r\n+121308,\"Livro 9 - E-book\"\r\n+121309,\"Livro 8 - E-book\"\r\n+121311,\"Livro 2 - E-book + Impresso\"\r\n+121311,\"Livro 10 - E-book + Impresso\"\r\n+121312,\"Livro 10 - E-book\"\r\n+121313,\"Livro 7 - E-book\"\r\n+121313,\"Livro 6 - E-book\"\r\n+121313,\"Livro 2 - E-book\"\r\n+121313,\"Livro 8 - E-book\"\r\n+121313,\"Livro 10 - E-book\"\r\n+121314,\"Livro 1 - Impresso\"\r\n+121315,\"Livro 9 - E-book\"\r\n+121316,\"Livro 3 - E-book\"\r\n+121317,\"Livro 10 - E-book\"\r\n+121318,\"Livro 8 - E-book\"\r\n+121319,\"Livro 2 - E-book\"\r\n+121320,\"Livro 2 - E-book\"\r\n+121320,\"Livro 5 - E-book\"\r\n+121321,\"Livro 6 - E-book\"\r\n+121322,\"Livro 9 - E-book + Impresso\"\r\n+121323,\"Livro 9 - E-book\"\r\n+121324,\"Livro 9 - Impresso\"\r\n+121325,\"Livro 9 - E-book\"\r\n+121327,\"Livro 9 - E-book + Impresso\"\r\n+121328,\"Livro 3 - E-book\"\r\n+121330,\"Livro 4 - E-book\"\r\n+121333,\"Livro 9 - E-book\"\r\n+121334,\"Livro 9 - E-book\"\r\n+121335,\"Livro 9 - E-book\"\r\n+121335,\"Livro 6 - E-book\"\r\n+121336,\"Livro 9 - E-book\"\r\n+121337,\"Livro 4 - E-book\"\r\n+121338,\"Livro 9 - E-book + Impresso\"\r\n+121339,\"Livro 9 - Impresso\"\r\n+121340,\"Livro 9 - E-book\"\r\n+121341,\"Livro 9 - E-book\"\r\n+121342,\"Livro 9 - E-book\"\r\n+121342,\"Livro 3 - E-book\"\r\n+121343,\"Livro 9 - Impresso\"\r\n+121344,\"Livro 9 - E-book\"\r\n+121345,\"Livro 9 - E-book\"\r\n+121346,\"Livro 6 - E-book\"\r\n+121347,\"Livro 2 - E-book\"\r\n+121348,\"Livro 9 - E-book\"\r\n+121349,\"Livro 7 - E-book + Impresso\"\r\n+121350,\"Livro 6 - E-book\"\r\n+121350,\"Livro 7 - E-book\"\r\n+121350,\"Livro 9 - E-book\"\r\n+121351,\"Livro 4 - E-book\"\r\n+121351,\"Livro 9 - E-book\"\r\n+121351,\"Livro 10 - E-book\"\r\n+121351,\"Livro 2 - E-book\"\r\n+121351,\"Livro 1 - E-book\"\r\n+121351,\"Livro 3 - E-book\"\r\n+121352,\"Livro 9 - E-book + Impresso\"\r\n+121353,\"Livro 8 - E-book\"\r\n+121354,\"Livro 6 - E-book\"\r\n+121355,\"Livro 9 - E-book\"\r\n+121356,\"Livro 9 - E-book\"\r\n+121357,\"Livro 8 - E-book\"\r\n+121358,\"Livro 9 - E-book\"\r\n+121359,\"Livro 9 - E-book\"\r\n+121360,\"Livro 9 - E-book\"\r\n+121361,\"Livro 9 - E-book\"\r\n+121361,\"Livro 8 - E-book\"\r\n+121361,\"Livro 1 - E-book\"\r\n+121362,\"Livro 8 - E-book + Impresso\"\r\n+121362,\"Livro 2 - E-book + Impresso\"\r\n+121363,\"Livro 9 - E-book\"\r\n+121365,\"Livro 9 - E-book + Impresso\"\r\n+121366,\"Livro 4 - E-book\"\r\n+121366,\"Livro 5 - E-book\"\r\n+121367,\"Livro 9 - E-book\"\r\n+121368,\"Livro 9 - E-book\"\r\n+121369,\"Livro 9 - E-book\"\r\n+121370,\"Livro 3 - E-book\"\r\n+121371,\"Livro 6 - E-book\"\r\n+121372,\"Livro 3 - E-book\"\r\n+121373,\"Livro 6 - E-book + Impresso\"\r\n+121374,\"Livro 3 - E-book\"\r\n+121375,\"Livro 6 - E-book\"\r\n+121375,\"Livro 9 - E-book\"\r\n+121376,\"Livro 9 - E-book\"\r\n+121377,\"Livro 9 - E-book\"\r\n+121378,\"Livro 2 - E-book\"\r\n+121378,\"Livro 4 - E-book\"\r\n+121379,\"Livro 9 - E-book\"\r\n+121380,\"Livro 10 - E-book\"\r\n+121382,\"Livro 10 - E-book\"\r\n+121383,\"Livro 5 - E-book\"\r\n+121384,\"Livro 9 - E-book\"\r\n+121385,\"Livro 9 - E-book\"\r\n+121386,\"Livro 3 - E-book + Impresso\"\r\n+121387,\"Livro 3 - E-book\"\r\n+121388,\"Livro 6 - Impresso\"\r\n+121389,\"Livro 8 - E-book\"\r\n+121389,\"Livro 2 - E-book\"\r\n+121390,\"Livro 9 - E-book\"\r\n+121391,\"Livro 9 - E-book\"\r\n+121392,\"Livro 3 - Impresso\"\r\n+121393,\"Livro 3 - E-book\"\r\n+121394,\"Livro 9 - E-book\"\r\n+121396,\"Livro 9 - E-book\"\r\n+121397,\"Livro 9 - E-book\"\r\n+121398,\"Livro 4 - E-book\"\r\n+121399,\"Livro 3 - E-book\"\r\n+121400,\"Livro 8 - E-book\"\r\n+121401,\"Livro 5 - E-book\"\r\n+121402,\"Livro 6 - E-book\"\r\n+121403,\"Livro 3 - E-book\"\r\n+121404,\"Livro 2 - E-book\"\r\n+121405,\"Livro 3 - E-book\"\r\n+121408,\"Livro 2 - E-book\"\r\n+121409,\"Livro 9 - E-book\"\r\n+121410,\"Livro 9 - Impresso\"\r\n+121411,\"Livro 3 - E-book\"\r\n+121413,\"Livro 4 - E-book\"\r\n+121414,\"Livro 9 - E-book\"\r\n+121415,\"Livro 6 - E-book\"\r\n+121416,\"Livro 3 - E-book\"\r\n+121417,\"Livro 9 - E-book\"\r\n+121418,\"Livro 3 - E-book\"\r\n+121419,\"Livro 2 - E-book\"\r\n+121420,\"Livro 4 - E-book\"\r\n+121420,\"Livro 9 - E-book\"\r\n+121421,\"Livro 1 - E-book\"\r\n+121422,\"Livro 6 - E-book + Impresso\"\r\n+121423,\"Livro 9 - E-book\"\r\n+121424,\"Livro 10 - E-book\"\r\n+121424,\"Livro 3 - E-book\"\r\n+121426,\"Livro 3 - E-book\"\r\n+121427,\"Livro 3 - E-book\"\r\n+121428,\"Livro 9 - E-book\"\r\n+121429,\"Livro 2 - E-book + Impresso\"\r\n+121429,\"Livro 3 - E-book + Impresso\"\r\n+121430,\"Livro 3 - E-book\"\r\n+121431,\"Livro 6 - E-book\"\r\n+121432,\"Livro 9 - E-book\"\r\n+121433,\"Livro 9 - E-book\"\r\n+121433,\"Livro 1 - E-book\"\r\n+121433,\"Livro 3 - E-book\"\r\n+121434,\"Livro 5 - E-book\"\r\n+121435,\"Livro 1 - E-book\"\r\n+121436,\"Livro 4 - E-book\"\r\n+121437,\"Livro 3 - E-book\"\r\n+121439,\"Livro 6 - E-book\"\r\n+121440,\"Livro 7 - E-book\"\r\n+121440,\"Livro 3 - E-book\"\r\n+121440,\"Livro 6 - E-book\"\r\n+121441,\"Livro 6 - E-book\"\r\n+121442,\"Livro 8 - E-book\"\r\n+121442,\"Livro 9 - E-book\"\r\n+121442,\"Livro 6 - E-book\"\r\n+121442,\"Livro 7 - E-book\"\r\n+121443,\"Livro 1 - E-book\"\r\n+121443,\"Livro 6 - E-book\"\r\n+121444,\"Livro 6 - E-book\"\r\n+121445,\"Livro 3 - E-book\"\r\n+121446,\"Livro 9 - E-book + Impresso\"\r\n+121447,\"Livro 6 - E-book\"\r\n+121448,\"Livro 6 - E-book\"\r\n+121449,\"Livro 3 - E-book\"\r\n+121449,\"Livro 2 - E-book\"\r\n+121450,\"Livro 5 - E-book\"\r\n+121451,\"Livro 4 - E-book\"\r\n+121452,\"Livro 9 - E-book\"\r\n+121453,\"Livro 9 - E-book + Impresso\"\r\n+121455,\"Livro 3 - E-book\"\r\n+121457,\"Livro 9 - E-book\"\r\n+121458,\"Livro 3 - E-book\"\r\n+121459,\"Livro 9 - E-book + Impresso\"\r\n+121460,\"Livro 3 - E-book\"\r\n+121461,\"Livro 2 - E-book\"\r\n+121462,\"Livro 9 - E-book\"\r\n+121463,\"Livro 9 - E-book\"\r\n+121464,\"Livro 9 - E-book\"\r\n+121465,\"Livro 9 - E-book + Impresso\"\r\n+121466,\"Livro 6 - E-book\"\r\n+121467,\"Livro 9 - E-book\"\r\n+121468,\"Livro 1 - E-book\"\r\n+121468,\"Livro 6 - E-book\"\r\n+121469,\"Livro 9 - E-book + Impresso\"\r\n+121470,\"Livro 8 - E-book\"\r\n+121470,\"Livro 9 - E-book\"\r\n+121473,\"Livro 9 - Impresso\"\r\n+121474,\"Livro 5 - E-book\"\r\n+121474,\"Livro 7 - E-book\"\r\n+121474,\"Livro 8 - E-book\"\r\n+121474,\"Livro 9 - E-book\"\r\n+121475,\"Livro 8 - E-book\"\r\n+121475,\"Livro 7 - E-book\"\r\n+121475,\"Livro 10 - E-book\"\r\n+121475,\"Livro 9 - E-book\"\r\n+121475,\"Livro 6 - E-book\"\r\n+121476,\"Livro 9 - E-book + Impresso\"\r\n+121477,\"Livro 4 - E-book\"\r\n+121478,\"Livro 10 - E-book\"\r\n+121478,\"Livro 9 - E-book\"\r\n+121478,\"Livro 4 - E-book\"\r\n+121479,\"Livro 4 - E-book + Impresso\"\r\n+121481,\"Livro 8 - E-book\"\r\n+121482,\"Livro 9 - E-book\"\r\n+121483,\"Livro 9 - E-book\"\r\n+121485,\"Livro 9 - E-book + Impresso\"\r\n+121486,\"Livro 10 - E-book\"\r\n+121487,\"Livro 5 - E-book + Impresso\"\r\n+121488,\"Livro 9 - E-book\"\r\n+121489,\"Livro 9 - E-book\"\r\n+121490,\"Livro 9 - E-book\"\r\n+121491,\"Livro 9 - E-book\"\r\n+121492,\"Livro 1 - E-book + Impresso\"\r\n+121493,\"Livro 9 - E-book\"\r\n+121494,\"Livro 7 - E-book\"\r\n+121495,\"Livro 7 - E-book\"\r\n+121497,\"Livro 1 - E-book\"\r\n+121498,\"Livro 3 - Impresso\"\r\n+121499,\"Livro 9 - Impresso\"\r\n+121500,\"Livro 4 - E-book\"\r\n+121501,\"Livro 3 - E-book + Impresso\"\r\n+121502,\"Livro 2 - Impresso\"\r\n+121502,\"Livro 9 - Impresso\"\r\n+121503,\"Livro 10 - E-book\"\r\n+121504,\"Livro 3 - E-book\"\r\n+121505,\"Livro 9 - E-book\"\r\n+121506,\"Livro 6 - E-book\"\r\n+121507,\"Livro 1 - E-book\"\r\n+121508,\"Livro 2 - E-book\"\r\n+121508,\"Livro 9 - E-book\"\r\n+121508,\"Livro 4 - E-book\"\r\n+121509,\"Livro 9 - E-book\"\r\n+121510,\"Livro 7 - E-book\"\r\n+121511,\"Livro 9 - Impresso\"\r\n+121512,\"Livro 9 - Impresso\"\r\n+121513,\"Livro 10 - E-book\"\r\n+121514,\"Livro 4 - E-book\"\r\n+121514,\"Livro 9 - E-book\"\r\n+121515,\"Livro 9 - E-book\"\r\n+121516,\"Livro 4 - E-book\"\r\n+121516,\"Livro 3 - E-book\"\r\n+121517,\"Livro 3 - E-book\"\r\n+121518,\"Livro 5 - E-book\"\r\n+121519,\"Livro 1 - E-book + Impresso\"\r\n+121520,\"Livro 4 - E-book + Impresso\"\r\n+121521,\"Livro 9 - E-book\"\r\n+121522,\"Livro 9 - E-book\"\r\n+121523,\"Livro 4 - E-book\"\r\n+121523,\"Livro 10 - E-book\"\r\n+121524,\"Livro 9 - E-book\"\r\n+121525,\"Livro 2 - E-book\"\r\n+121525,\"Livro 9 - E-book\"\r\n+121526,\"Livro 4 - E-book\"\r\n+121527,\"Livro 2 - E-book\"\r\n+121528,\"Livro 6 - E-book\"\r\n+121529,\"Livro 4 - E-book\"\r\n+121530,\"Livro 7 - E-book\"\r\n+121531,\"Livro 3 - E-book\"\r\n+121533,\"Livro 9 - E-book\"\r\n+121534,\"Livro 2 - E-book\"\r\n+121535,\"Livro 10 - E-book\"\r\n+121535,\"Livro 2 - E-book\"\r\n+121535,\"Livro 3 - E-book\"\r\n+121536,\"Livro 2 - E-book\"\r\n+121536,\"Livro 9 - E-book\"\r\n+121536,\"Livro 6 - E-book\"\r\n+121537,\"Livro 3 - E-book\"\r\n+121538,\"Livro 6 - E-book\"\r\n+121538,\"Livro 2 - E-book\"\r\n+121539,\"Livro 3 - E-book + Impresso\"\r\n+121540,\"Livro 9 - E-book\"\r\n+121541,\"Livro 1 - E-book + Impresso\"\r\n+121542,\"Livro 3 - Impresso\"\r\n+121543,\"Livro 10 - E-book + Impresso\"\r\n+121544,\"Livro 1 - E-book\"\r\n+121545,\"Livro 3 - E-book\"\r\n+121546,\"Livro 10 - E-book\"\r\n+121547,\"Livro 3 - E-book + Impresso\"\r\n+121548,\"Livro 7 - E-book\"\r\n+121549,\"Livro 7 - E-book\"\r\n+121550,\"Livro 3 - E-book\"\r\n+121551,\"Livro 5 - E-book\"\r\n+121553,\"Livro 7 - E-book\"\r\n+121554,\"Livro 9 - E-book\"\r\n+121555,\"Livro 7 - E-book\"\r\n+121556,\"Livro 2 - E-book\"\r\n+121556,\"Livro 3 - E-book\"\r\n+121556,\"Livro 6 - E-book\"\r\n+121556,\"Livro 7 - E-book\"\r\n+121557,\"Livro 3 - E-book\"\r\n+121558,\"Livro 4 - E-book\"\r\n+121560,\"Livro 3 - E-book + Impresso\"\r\n+121562,\"Livro 9 - E-book\"\r\n+121563,\"Livro 9 - E-book + Impresso\"\r\n+121564,\"Livro 4 - E-book\"\r\n+121565,\"Livro 9 - Impresso\"\r\n+121566,\"Livro 4 - E-book + Impresso\"\r\n+121567,\"Livro 2 - E-book\"\r\n+121567,\"Livro 9 - E-book + Impresso\"\r\n+121568,\"Livro 8 - E-book\"\r\n+121569,\"Livro 5 - E-book\"\r\n+121570,\"Livro 4 - E-book\"\r\n+121571,\"Livro 10 - E-book\"\r\n+121572,\"Livro 2 - E-book\"\r\n+121572,\"Livro 9 - E-book\"\r\n+121572,\"Livro 3 - E-book\"\r\n+121573,\"Livro 9 - E-book\"\r\n+121573,\"Livro 1 - E-book\"\r\n+121573,\"Livro 7 - E-book\"\r\n+121573,\"Livro 8 - E-book\"\r\n+121573,\"Livro 4 - E-book\"\r\n+121573,\"Livro 6 - E-book\"\r\n+121573,\"Livro 3 - E-book\"\r\n+121573,\"Livro 2 - E-book\"\r\n+121574,\"Livro 1 - E-book\"\r\n+121575,\"Livro 4 - E-book\"\r\n+121576,\"Livro 8 - E-book\"\r\n+121577,\"Livro 7 - E-book\"\r\n+121578,\"Livro 9 - E-book\"\r\n+121579,\"Livro 7 - E-book\"\r\n+121579,\"Livro 8 - E-book\"\r\n+121580,\"Livro 6 - E-book\"\r\n+121581,\"Livro 1 - Impresso\"\r\n+121582,\"Livro 6 - E-book\"\r\n+121583,\"Livro 7 - E-book\"\r\n+121584,\"Livro 7 - E-book\"\r\n+121584,\"Livro 10 - E-book\"\r\n+121584,\"Livro 9 - E-book\"\r\n+121585,\"Livro 3 - E-book\"\r\n+121586,\"Livro 9 - E-book\"\r\n+121587,\"Livro 9 - E-book\"\r\n+121588,\"Livro 5 - E-book\"\r\n+121589,\"Livro 9 - E-book\"\r\n+121590,\"Livro 6 - E-book\"\r\n+121592,\"Livro 3 - E-book\"\r\n+121593,\"Livro 9 - E-book + Impresso\"\r\n+121594,\"Livro 4 - E-book\"\r\n+121595,\"Livro 4 - E-book\"\r\n+121596,\"Livro 10 - E-book\"\r\n+121596,\"Livro 3 - E-book\"\r\n+121596,\"Livro 6 - E-book\"\r\n+121597,\"Livro 6 - E-book\"\r\n+121597,\"Livro 9 - E-book\"\r\n+121597,\"Livro 10 - E-book\"\r\n+121597,\"Livro 7 - E-book\"\r\n+121598,\"Livro 3 - E-book\"\r\n+121599,\"Livro 1 - E-book\"\r\n+121600,\"Livro 8 - E-book\"\r\n+121600,\"Livro 4 - E-book\"\r\n+121600,\"Livro 1 - E-book\"\r\n+121602,\"Livro 9 - E-book\"\r\n+121603,\"Livro 2 - Impresso\"\r\n+121603,\"Livro 5 - E-book + Impresso\"\r\n+121604,\"Livro 6 - E-book\"\r\n+121605,\"Livro 6 - E-book\"\r\n+121605,\"Livro 3 - E-book\"\r\n+121606,\"Livro 2 - E-book\"\r\n+121607,\"Livro 7 - E-book\"\r\n+121608,\"Livro 6 - E-book\"\r\n+121609,\"Livro 6 - E-book\"\r\n+121610,\"Livro 3 - E-book + Impresso\"\r\n+121610,\"Livro 10 - E-book + Impresso\"\r\n+121611,\"Livro 10 - E-book\"\r\n+121612,\"Livro 3 - E-book\"\r\n+121613,\"Livro 4 - E-book\"\r\n+121614,\"Livro 4 - E-book\"\r\n+121614,\"Livro 2 - E-book\"\r\n+121615,\"Livro 6 - E-book\"\r\n+121616,\"Livro 2 - E-book\"\r\n+121617,\"Livro 2 - E-book + Impresso\"\r\n+121617,\"Livro 3 - E-book + Impresso\"\r\n+121618,\"Livro 2 - E-book\"\r\n+121619,\"Livro 9 - E-book\"\r\n+121619,\"Livro 3 - E-book\"\r\n+121620,\"Livro 7 - E-book\"\r\n+121621,\"Livro 6 - E-book\"\r\n+121622,\"Livro 9 - E-book + Impresso\"\r\n+121623,\"Livro 1 - E-book\"\r\n+121623,\"Livro 6 - E-book\"\r\n+121624,\"Livro 4 - E-book\"\r\n+121625,\"Livro 6 - E-book\"\r\n+121626,\"Livro 3 - E-book\"\r\n+121627,\"Livro 8 - E-book\"\r\n+121627,\"Livro 7 - E-book\"\r\n+121627,\"Livro 6 - E-book\"\r\n+121627,\"Livro 4 - E-book + Impresso\"\r\n+121628,\"Livro 3 - Impresso\"\r\n+121629,\"Livro 3 - E-book\"\r\n+121630,\"Livro 2 - E-book\"\r\n+121630,\"Livro 10 - E-book\"\r\n+121632,\"Livro 9 - E-book\"\r\n+121633,\"Livro 6 - E-book\"\r\n+121633,\"Livro 4 - E-book\"\r\n+121634,\"Livro 7 - E-book\"\r\n+121635,\"Livro 6 - E-book\"\r\n+121636,\"Livro 7 - E-book\"\r\n+121637,\"Livro 2 - E-book\"\r\n+121637,\"Livro 8 - E-book\"\r\n+121638,\"Livro 2 - E-book\"\r\n+121639,\"Livro 7 - E-book + Impresso\"\r\n+121640,\"Livro 5 - E-book\"\r\n+121642,\"Livro 9 - E-book + Impresso\"\r\n+121642,\"Livro 8 - E-book\"\r\n+121643,\"Livro 3 - E-book\"\r\n+121644,\"Livro 6 - E-book + Impresso\"\r\n+121645,\"Livro 3 - E-book\"\r\n+121646,\"Livro 7 - E-book\"\r\n+121647,\"Livro 7 - E-book\"\r\n+121648,\"Livro 6 - E-book\"\r\n+121649,\"Livro 9 - E-book\"\r\n+121651,\"Livro 3 - E-book\"\r\n+121652,\"Livro 6 - E-book\"\r\n+121653,\"Livro 9 - E-book\"\r\n+121656,\"Livro 9 - E-book + Impresso\"\r\n+121656,\"Livro 4 - E-book + Impresso\"\r\n+121657,\"Livro 10 - E-book\"\r\n+121657,\"Livro 3 - E-book\"\r\n+121658,\"Livro 9 - E-book\"\r\n+121658,\"Livro 3 - E-book\"\r\n+121659,\"Livro 7 - E-book\"\r\n+121660,\"Livro 6 - E-book\"\r\n+121661,\"Livro 1 - E-book\"\r\n+121662,\"Livro 8 - E-book\"\r\n+121663,\"Livro 6 - E-book\"\r\n+121664,\"Livro 9 - Impresso\"\r\n+121665,\"Livro 8 - E-book + Impresso\"\r\n+121667,\"Livro 9 - E-book\"\r\n+121668,\"Livro 9 - E-book\"\r\n+121668,\"Livro 3 - E-book\"\r\n+121669,\"Livro 9 - E-book + Impresso\"\r\n+121670,\"Livro 9 - E-book + Impresso\"\r\n+121671,\"Livro 9 - E-book\"\r\n+121671,\"Livro 10 - E-book\"\r\n+121672,\"Livro 1 - E-book\"\r\n+121673,\"Livro 9 - E-book\"\r\n+121675,\"Livro 9 - E-book\"\r\n+121675,\"Livro 3 - E-book\"\r\n+121675,\"Livro 2 - E-book\"\r\n+121675,\"Livro 10 - E-book\"\r\n+121676,\"Livro 6 - E-book\"\r\n+121676,\"Livro 9 - E-book\"\r\n+121677,\"Livro 8 - E-book\"\r\n+121678,\"Livro 3 - E-book + Impresso\"\r\n+121679,\"Livro 6 - E-book\"\r\n+121680,\"Livro 9 - E-book\"\r\n+121681,\"Livro 9 - E-book + Impresso\"\r\n+121682,\"Livro 9 - E-book\"\r\n+121683,\"Livro 3 - E-book\"\r\n+121684,\"Livro 9 - E-book\"\r\n+121685,\"Livro 9 - E-book\"\r\n+121686,\"Livro 3 - E-book\"\r\n+121687,\"Livro 2 - E-book + Impresso\"\r\n+121688,\"Livro 3 - E-book\"\r\n+121689,\"Livro 6 - E-book\"\r\n+121690,\"Livro 6 - E-book\"\r\n+121691,\"Livro 6 - E-book\"\r\n+121692,\"Livro 1 - E-book\"\r\n+121693,\"Livro 4 - E-book\"\r\n+121693,\"Livro 10 - E-book\"\r\n+121693,\"Livro 9 - E-book\"\r\n+121696,\"Livro 9 - E-book\"\r\n+121697,\"Livro 6 - E-book\"\r\n+121698,\"Livro 4 - E-book\"\r\n+121698,\"Livro 3 - E-book\"\r\n+121699,\"Livro 9 - E-book\"\r\n+121700,\"Livro 10 - E-book\"\r\n+121701,\"Livro 1 - Impresso\"\r\n+121702,\"Livro 3 - E-book\"\r\n+121702,\"Livro 6 - E-book\"\r\n+121703,\"Livro 4 - E-book\"\r\n+121704,\"Livro 5 - E-book\"\r\n+121705,\"Livro 7 - E-book\"\r\n+121706,\"Livro 1 - E-book\"\r\n+121706,\"Livro 9 - E-book\"\r\n+121706,\"Livro 4 - E-book\"\r\n+121708,\"Livro 1 - E-book\"\r\n+121708,\"Livro 4 - E-book\"\r\n+121709,\"Livro 6 - E-book\"\r\n+121710,\"Livro 6 - E-book\"\r\n+121711,\"Livro 2 - E-book\"\r\n+121712,\"Livro 1 - E-book\"\r\n+121713,\"Livro 2 - E-book\"\r\n+121713,\"Livro 4 - E-book\"\r\n+121714,\"Livro 6 - E-book + Impresso\"\r\n+121715,\"Livro 6 - E-book\"\r\n+121716,\"Livro 6 - E-book\"\r\n+121718,\"Livro 9 - E-book\"\r\n+121719,\"Livro 4 - E-book + Impresso\"\r\n+121720,\"Livro 3 - E-book\"\r\n+121721,\"Livro 3 - E-book + Impresso\"\r\n+121722,\"Livro 2 - E-book + Impresso\"\r\n+121724,\"Livro 9 - E-book\"\r\n+121727,\"Livro 6 - E-book\"\r\n+121728,\"Livro 6 - E-book\"\r\n+121729,\"Livro 9 - E-book\"\r\n+121732,\"Livro 3 - Impresso\"\r\n+121733,\"Livro 4 - Impresso\"\r\n+121735,\"Livro 3 - E-book\"\r\n+121736,\"Livro 1 - E-book\"\r\n+121737,\"Livro 2 - E-book\"\r\n+121740,\"Livro 9 - E-book\"\r\n+121741,\"Livro 4 - E-book\"\r\n+121742,\"Livro 3 - E-book\"\r\n+121743,\"Livro 3 - E-book\"\r\n+121744,\"Livro 3 - E-book\"\r\n+121747,\"Livro 4 - E-book + Impresso\"\r\n+121748,\"Livro 2 - E-book\"\r\n+121748,\"Livro 3 - E-book\"\r\n+121749,\"Livro 3 - E-book\"\r\n+121750,\"Livro 5 - E-book\"\r\n+121752,\"Livro 9 - E-book\"\r\n+121753,\"Livro 6 - E-book\"\r\n+121754,\"Livro 9 - E-book\"\r\n+121755,\"Livro 8 - E-book\"\r\n+121756,\"Livro 9 - Impresso\"\r\n+121758,\"Livro 6 - E-book\"\r\n+121759,\"Livro 3 - E-book\"\r\n+121760,\"Livro 3 - E-book\"\r\n+121761,\"Livro 1 - E-book\"\r\n+121764,\"Livro 9 - E-book + Impresso\"\r\n+121764,\"Livro 4 - E-book + Impresso\"\r\n+121765,\"Livro 4 - E-book\"\r\n+121766,\"Livro 3 - E-book\"\r\n+121766,\"Livro 5 - E-book\"\r\n+121768,\"Livro 2 - E-book\"\r\n+121769,\"Livro 9 - E-book\"\r\n+121770,\"Livro 3 - E-book\"\r\n+121771,\"Livro 9 - E-book + Impresso\"\r\n+121773,\"Livro 9 - E-book\"\r\n+121774,\"Livro 9 - E-book\"\r\n+121775,\"Livro 4 - E-book\"\r\n+121776,\"Livro 9 - E-book\"\r\n+121777,\"Livro 1 - E-book\"\r\n+121778,\"Livro 6 - E-book + Impresso\"\r\n+121779,\"Livro 6 - E-book\"\r\n+121780,\"Livro 9 - E-book\"\r\n+121781,\"Livro 3 - E-book + Impresso\"\r\n+121782,\"Livro 3 - E-book\"\r\n+121783,\"Livro 9 - E-book\"\r\n+121784,\"Livro 10 - E-book\"\r\n+121784,\"Livro 9 - E-book\"\r\n+121784,\"Livro 3 - E-book\"\r\n+121785,\"Livro 3 - E-book\"\r\n+121786,\"Livro 9 - E-book\"\r\n+121787,\"Livro 5 - E-book\"\r\n+121788,\"Livro 1 - E-book\"\r\n+121789,\"Livro 1 - Impresso\"\r\n+121790,\"Livro 6 - E-book + Impresso\"\r\n+121790,\"Livro 9 - E-book + Impresso\"\r\n+121790,\"Livro 3 - Impresso\"\r\n+121791,\"Livro 3 - E-book\"\r\n+121792,\"Livro 9 - E-book\"\r\n+121793,\"Livro 9 - E-book\"\r\n+121794,\"Livro 3 - E-book\"\r\n+121795,\"Livro 2 - E-book\"\r\n+121795,\"Livro 6 - E-book\"\r\n+121795,\"Livro 1 - E-book\"\r\n+121796,\"Livro 6 - E-book\"\r\n+121797,\"Livro 9 - E-book + Impresso\"\r\n+121798,\"Livro 4 - E-book\"\r\n+121799,\"Livro 10 - E-book\"\r\n+121800,\"Livro 2 - E-book\"\r\n+121801,\"Livro 6 - E-book\"\r\n+121802,\"Livro 2 - E-book\"\r\n+121803,\"Livro 6 - E-book\"\r\n+121804,\"Livro 2 - E-book + Impresso\"\r\n+121806,\"Livro 8 - E-book\"\r\n+121806,\"Livro 2 - E-book\"\r\n+121806,\"Livro 4 - E-book\"\r\n+121807,\"Livro 3 - E-book\"\r\n+121807,\"Livro 10 - E-book\"\r\n+121808,\"Livro 6 - E-book\"\r\n+121808,\"Livro 3 - E-book\"\r\n+121808,\"Livro 2 - E-book\"\r\n+121810,\"Livro 3 - E-book\"\r\n+121811,\"Livro 3 - E-book + Impresso\"\r\n+121812,\"Livro 6 - E-book\"\r\n+121812,\"Livro 3 - E-book\"\r\n+121813,\"Livro 2 - E-book\"\r\n+121814,\"Livro 4 - E-book\"\r\n+121814,\"Livro 2 - E-book\"\r\n+121815,\"Livro 2 - E-book\"\r\n+121815,\"Livro 9 - E-book\"\r\n+121815,\"Livro 4 - E-book\"\r\n+121815,\"Livro 6 - E-book\"\r\n+121816,\"Livro 1 - E-book\"\r\n+121817,\"Livro 1 - E-book\"\r\n+121819,\"Livro 2 - E-book\"\r\n+121821,\"Livro 2 - E-book\"\r\n+121821,\"Livro 9 - E-book\"\r\n+121821,\"Livro 8 - E-book\"\r\n+121822,\"Livro 2 - E-book\"\r\n+121823,\"Livro 4 - E-book\"\r\n+121824,\"Livro 9 - E-book\"\r\n+121825,\"Livro 2 - E-book\"\r\n+121825,\"Livro 8 - E-book\"\r\n+121825,\"Livro 9 - E-book + Impresso\"\r\n+121826,\"Livro 3 - E-book\"\r\n+121826,\"Livro 6 - E-book\"\r\n+121826,\"Livro 2 - E-book\"\r\n+121828,\"Livro 5 - E-book\"\r\n+121829,\"Livro 2 - E-book\"\r\n+121830,\"Livro 6 - E-book\"\r\n+121831,\"Livro 1 - E-book\"\r\n+121832,\"Livro 5 - E-book\"\r\n+121832,\"Livro 2 - E-book\"\r\n+121832,\"Livro 8 - E-book\"\r\n+121833,\"Livro 4 - E-book\"\r\n+121834,\"Livro 9 - E-book\"\r\n+121836,\"Livro 9 - E-book\"\r\n+121837,\"Livro 9 - E-book + Impresso\"\r\n+121838,\"Livro 3 - E-book + Impresso\"\r\n+121839,\"Livro 9 - E-book + Impresso\"\r\n+121840,\"Livro 1 - E-book\"\r\n+121841,\"Livro 3 - E-book\"\r\n+121842,\"Livro 3 - E-book\"\r\n+121843,\"Livro 8 - E-book\"\r\n+121844,\"Livro 3 - E-book\"\r\n+121845,\"Livro 2 - E-book\"\r\n+121846,\"Livro 4 - E-book\"\r\n+121848,\"Livro 6 - E-book\"\r\n+121851,\"Livro 6 - E-book + Impresso\"\r\n+121852,\"Livro 2 - Impresso\"\r\n+121853,\"Livro 3 - E-book\"\r\n+121855,\"Livro 2 - E-book\"\r\n+121855,\"Livro 8 - E-book\"\r\n+121856,\"Livro 3 - E-book\"\r\n+121857,\"Livro 9 - E-book\"\r\n+121858,\"Livro 3 - E-book\"\r\n+121859,\"Livro 9 - E-book\"\r\n+121860,\"Livro 8 - E-book\"\r\n+121861,\"Livro 3 - E-book\"\r\n+121862,\"Livro 9 - E-book\"\r\n+121863,\"Livro 4 - Impresso\"\r\n+121864,\"Livro 3 - E-book\"\r\n+121865,\"Livro 6 - E-book\"\r\n+121866,\"Livro 9 - E-book\"\r\n+121867,\"Livro 5 - E-book + Impresso\"\r\n+121867,\"Livro 8 - E-book + Impresso\"\r\n+121867,\"Livro 10 - E-book + Impresso\"\r\n+121867,\"Livro 1 - Impresso\"\r\n+121867,\"Livro 4 - Impresso\"\r\n+121868,\"Livro 3 - E-book\"\r\n+121868,\"Livro 1 - E-book\"\r\n+121869,\"Livro 2 - E-book\"\r\n+121869,\"Livro 9 - E-book\"\r\n+121869,\"Livro 3 - E-book\"\r\n+121869,\"Livro 10 - E-book\"\r\n+121870,\"Livro 9 - E-book\"\r\n+121872,\"Livro 9 - E-book\"\r\n+121874,\"Livro 6 - E-book\"\r\n+121875,\"Livro 3 - E-book\"\r\n+121876,\"Livro 6 - E-book\"\r\n+121876,\"Livro 9 - E-book\"\r\n+121877,\"Livro 4 - Impresso\"\r\n+121877,\"Livro 9 - Impresso\"\r\n+121878,\"Livro 3 - E-book\"\r\n+121879,\"Livro 2 - E-book\"\r\n+121880,\"Livro 6 - E-book\"\r\n+121882,\"Livro 1 - E-book\"\r\n+121883,\"Livro 3 - Impresso\"\r\n+121884,\"Livro 9 - E-book + Impresso\"\r\n+121885,\"Livro 3 - E-book\"\r\n+121886,\"Livro 10 - E-book\"\r\n+121887,\"Livro 9 - E-book\"\r\n+121888,\"Livro 3 - E-book\"\r\n+121889,\"Livro 5 - E-book\"\r\n+121889,\"Livro 2 - E-book\"\r\n+121889,\"Livro 9 - E-book\"\r\n+121890,\"Livro 4 - E-book\"\r\n+121891,\"Livro 9 - E-book\"\r\n+121891,\"Livro 3 - E-book\"\r\n+121892,\"Livro 10 - E-book\"\r\n+121893,\"Livro 9 - E-book\"\r\n+121894,\"Livro 2 - E-book\"\r\n+121895,\"Livro 1 - E-book\"\r\n+121896,\"Livro 6 - E-book + Impresso\"\r\n+121899,\"Livro 3 - E-book\"\r\n+121900,\"Livro 9 - E-book\"\r\n+121901,\"Livro 8 - E-book\"\r\n+121902,\"Livro 2 - E-book + Impresso\"\r\n+121903,\"Livro 9 - E-book\"\r\n+121904,\"Livro 3 - E-book\"\r\n+121905,\"Livro 2 - E-book\"\r\n+121906,\"Livro 3 - E-book\"\r\n+121907,\"Livro 3 - Impresso\"\r\n+121907,\"Livro 7 - E-book + Impresso\"\r\n+121908,\"Livro 9 - E-book\"\r\n+121909,\"Livro 9 - Impresso\"\r\n+121910,\"Livro 10 - E-book\"\r\n+121910,\"Livro 3 - E-book\"\r\n+121912,\"Livro 9 - E-book\"\r\n+121913,\"Livro 2 - E-book\"\r\n+121913,\"Livro 1 - E-book\"\r\n+121914,\"Livro 9 - E-book\"\r\n+121915,\"Livro 4 - E-book\"\r\n+121916,\"Livro 9 - E-book\"\r\n+121917,\"Livro 3 - E-book + Impresso\"\r\n+121918,\"Livro 3 - E-book\"\r\n+121920,\"Livro 3 - E-book\"\r\n+121921,\"Livro 9 - E-book\"\r\n+121922,\"Livro 9 - E-book\"\r\n+121923,\"Livro 2 - E-book\"\r\n+121925,\"Livro 7 - E-book\"\r\n+121926,\"Livro 4 - E-book\"\r\n+121927,\"Livro 8 - E-book\"\r\n+121928,\"Livro 9 - E-book + Impresso\"\r\n+121929,\"Livro 3 - Impresso\"\r\n+121930,\"Livro 3 - E-book\"\r\n+121930,\"Livro 6 - E-book\"\r\n+121931,\"Livro 3 - E-book\"\r\n+121932,\"Livro 10 - E-book\"\r\n+121933,\"Livro 9 - Impresso\"\r\n+121933,\"Livro 4 - E-book\"\r\n+121934,\"Livro 10 - E-book\"\r\n+121934,\"Livro 4 - E-book\"\r\n+121934,\"Livro 6 - E-book\"\r\n+121935,\"Livro 6 - E-book\"\r\n+121936,\"Livro 9 - E-book\"\r\n+121937,\"Livro 2 - E-book\"\r\n+121939,\"Livro 3 - E-book\"\r\n+121939,\"Livro 6 - E-book\"\r\n+121940,\"Livro 7 - E-book\"\r\n+121941,\"Livro 2 - Impresso\"\r\n+121942,\"Livro 4 - E-book\"\r\n+121943,\"Livro 2 - E-book\"\r\n+121944,\"Livro 3 - E-book\"\r\n+121945,\"Livro 1 - E-book\"\r\n+121946,\"Livro 3 - E-book + Impresso\"\r\n+121947,\"Livro 3 - E-book\"\r\n+121949,\"Livro 3 - Impresso\"\r\n+121950,\"Livro 4 - E-book\"\r\n+121951,\"Livro 3 - Impresso\"\r\n+121952,\"Livro 3 - Impresso\"\r\n+121953,\"Livro 2 - E-book + Impresso\"\r\n+121954,\"Livro 1 - E-book\"\r\n+121955,\"Livro 3 - E-book\"\r\n+121956,\"Livro 4 - E-book\"\r\n+121957,\"Livro 9 - E-book\"\r\n+121958,\"Livro 8 - E-book\"\r\n+121959,\"Livro 9 - E-book\"\r\n+121960,\"Livro 8 - E-book\"\r\n+121961,\"Livro 2 - E-book\"\r\n+121962,\"Livro 3 - E-book\"\r\n+121965,\"Livro 3 - E-book\"\r\n+121966,\"Livro 3 - E-book\"\r\n+121967,\"Livro 6 - E-book + Impresso\"\r\n+121967,\"Livro 3 - E-book + Impresso\"\r\n+121968,\"Livro 3 - E-book + Impresso\"\r\n+121971,\"Livro 3 - E-book\"\r\n+121972,\"Livro 6 - E-book\"\r\n+121973,\"Livro 3 - E-book\"\r\n+121973,\"Livro 7 - E-book\"\r\n+121974,\"Livro 1 - E-book + Impresso\"\r\n+121974,\"Livro 5 - E-book + Impresso\"\r\n+121975,\"Livro 3 - E-book\"\r\n+121976,\"Livro 1 - E-book\"\r\n+121979,\"Livro 3 - E-book\"\r\n+121980,\"Livro 9 - E-book\"\r\n+121983,\"Livro 7 - E-book\"\r\n+121983,\"Livro 2 - E-book\"\r\n+121984,\"Livro 4 - E-book + Impresso\"\r\n+121986,\"Livro 10 - E-book\"\r\n+121987,\"Livro 1 - E-book + Impresso\"\r\n+121988,\"Livro 9 - E-book\"\r\n+121989,\"Livro 3 - E-book\"\r\n+121990,\"Livro 3 - E-book\"\r\n+121991,\"Livro 9 - E-book + Impresso\"\r\n+121992,\"Livro 2 - E-book\"\r\n+121993,\"Livro 2 - E-book\"\r\n+121994,\"Livro 6 - E-book + Impresso\"\r\n+121995,\"Livro 7 - E-book\"\r\n+121997,\"Livro 4 - E-book\"\r\n+121998,\"Livro 3 - E-book\"\r\n+121999,\"Livro 8 - E-book\"\r\n+122000,\"Livro 5 - E-book\"\r\n+122001,\"Livro 3 - E-book\"\r\n+122002,\"Livro 3 - E-book\"\r\n+122002,\"Livro 6 - E-book\"\r\n+122003,\"Livro 6 - E-book\"\r\n+122004,\"Livro 2 - E-book\"\r\n+122005,\"Livro 3 - E-book\"\r\n+122006,\"Livro 6 - E-book\"\r\n','NEW',39,6),(59,'@@ -8,8 +8,10 @@ import java.util.List;\r\n \r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.ItemToItemRecommender;\r\n-import br.ime.usp.commendans.factory.ItemToItemsAssociation.Tuple;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation.Tuple;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.model.User;\r\n \r\n@@ -22,10 +24,10 @@ public class ItemToItemRecommenderFactoryTest {\r\n         Item item2 = new Item(2l);\r\n         Item item3 = new Item(3l);\r\n         Item item4 = new Item(4l);\r\n-        User user1 = new User(Arrays.asList(item1, item3));\r\n-        User user2 = new User(Arrays.asList(item2, item4));\r\n-        User user3 = new User(Arrays.asList(item1, item2, item3));\r\n-        User user4 = new User(Arrays.asList(item3, item4));\r\n+        User user1 = new User(Arrays.asList(item1, item3), 1l);\r\n+        User user2 = new User(Arrays.asList(item2, item4), 2l);\r\n+        User user3 = new User(Arrays.asList(item1, item2, item3), 3l);\r\n+        User user4 = new User(Arrays.asList(item3, item4), 4l);\r\n         factory.addUser(user1);\r\n         factory.addUser(user2);\r\n         factory.addUser(user3);\r\n','DEFAULT',30,6),(60,'@@ -1,38 +0,0 @@\r\n-package br.ime.usp.commendans;\r\n-\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import br.ime.usp.commendans.factory.ItemToItemsAssociation;\r\n-import br.ime.usp.commendans.factory.ItemToItemsAssociation.Tuple;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class ItemToItemRecommender implements Recommender {\r\n-\r\n-    private final Map<Item, List<Tuple>> associations;\r\n-\r\n-    public ItemToItemRecommender(\r\n-            HashMap<Item, ItemToItemsAssociation> associations) {\r\n-        this.associations = parse(associations);\r\n-    }\r\n-\r\n-    private Map<Item, List<Tuple>> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n-        HashMap<Item, List<Tuple>> map = new HashMap<Item, List<Tuple>>();\r\n-        Set<Item> items = associations.keySet();\r\n-        for (Item item : items) {\r\n-            ItemToItemsAssociation association = associations.get(item);\r\n-            List<Tuple> tuples = association.toTupleList();\r\n-            map.put(item, tuples);\r\n-        }\r\n-        return map;\r\n-    }\r\n-\r\n-    @Override\r\n-    public List<Tuple> recommendendItemsFor(Item item) {\r\n-        List<Tuple> tuples = associations.get(item);\r\n-        return tuples;\r\n-    }\r\n-\r\n-}\r\n','DELETED',25,7),(61,'@@ -1,61 +0,0 @@\r\n-package br.ime.usp.commendans.factory;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import br.ime.usp.commendans.ItemToItemRecommender;\r\n-import br.ime.usp.commendans.model.Item;\r\n-import br.ime.usp.commendans.model.User;\r\n-\r\n-public class ItemToItemRecommenderFactory {\r\n-\r\n-    private Map<Item, List<User>> usersByItemBought;\r\n-    private HashMap<Item, ItemToItemsAssociation> associations;\r\n-    \r\n-    public ItemToItemRecommenderFactory() {\r\n-        usersByItemBought = new HashMap<Item, List<User>>();\r\n-    }\r\n-    \r\n-    public void addUser(User user) {\r\n-        List<Item> items = user.itemsBought();\r\n-        for (Item item : items) {\r\n-            store(item, user);\r\n-        }\r\n-    }\r\n-\r\n-    private void store(Item item, User user) {\r\n-        List<User> users = usersByItemBought.get(item);\r\n-        if (users == null) {\r\n-            users = new ArrayList<User>();\r\n-        }\r\n-        users.add(user);\r\n-        usersByItemBought.put(item, users);\r\n-    }\r\n-    \r\n-    \r\n-    public ItemToItemRecommender build() {\r\n-        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n-        Set<Item> items = usersByItemBought.keySet();\r\n-        for (Item item : items) {\r\n-            ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n-            List<User> users = usersByItemBought.get(item);\r\n-            for (User user : users) {\r\n-                List<Item> boughtTogether = user.itemsBought();\r\n-                System.out.println(item + \" -> \" +boughtTogether);\r\n-                for (Item i : boughtTogether) {\r\n-                    association.associate(i);\r\n-                }\r\n-            }\r\n-            associations.put(item, association);\r\n-        }\r\n-        return new ItemToItemRecommender(associations);\r\n-    }\r\n-    \r\n-    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n-        return associations;\r\n-    }\r\n-\r\n-}\r\n','DELETED',27,7),(62,'@@ -1,84 +0,0 @@\r\n-package br.ime.usp.commendans.factory;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collections;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class ItemToItemsAssociation {\r\n-    private Item item;\r\n-    private Map<Item, Double> associations;\r\n-\r\n-    public ItemToItemsAssociation(Item item) {\r\n-        this.item = item;\r\n-        this.associations = new HashMap<Item, Double>();\r\n-    }\r\n-\r\n-    public void associate(Item i) {\r\n-        if (i.equals(this.item))\r\n-            return;\r\n-        Double v = associations.get(i);\r\n-        if (v == null) {\r\n-            v = 0.0;\r\n-        }\r\n-        v += 1.0;\r\n-        associations.put(i, v);\r\n-    }\r\n-    \r\n-    public double associationValue(Item i) {\r\n-        Double v = associations.get(i);\r\n-        if (v == null) {\r\n-            return 0.0;\r\n-        }\r\n-        return v;\r\n-    }\r\n-    \r\n-    \r\n-    @Override\r\n-    public String toString() {\r\n-        String res = this.item.toString() + \" => {\" + associations.toString() + \"}\";\r\n-        return res;\r\n-    }\r\n-\r\n-    public List<Tuple> toTupleList() {\r\n-        Set<Item> items = associations.keySet();\r\n-        ArrayList<Tuple> tuples = new ArrayList<Tuple>();\r\n-        for (Item item : items) {\r\n-            Double value = associations.get(item);\r\n-            tuples.add(new Tuple(item, value));\r\n-        }\r\n-        Collections.sort(tuples);\r\n-        Collections.reverse(tuples);\r\n-        return tuples;\r\n-    }\r\n-\r\n-    \r\n-    public class Tuple implements Comparable<Tuple> {\r\n-        private Item item;\r\n-        private Double value;\r\n-\r\n-        public Tuple(Item item, Double value) {\r\n-            this.item = item;\r\n-            this.value = value;\r\n-        }\r\n-\r\n-        public Item getItem() {\r\n-            return item;\r\n-        }\r\n-\r\n-        public Double getValue() {\r\n-            return value;\r\n-        }\r\n-\r\n-        @Override\r\n-        public int compareTo(Tuple o) {\r\n-            return (int) (value - o.getValue());\r\n-        }\r\n-\r\n-    }\r\n-\r\n-}\r\n','DELETED',32,7),(63,'@@ -1,3 +1,4 @@\r\n *.jar\r\n *.class\r\n build/\r\n+.~lock*\r\n','DEFAULT',2,8),(64,'@@ -11,8 +11,8 @@ import java.util.HashMap;\r\n import java.util.List;\r\n \r\n import org.apache.log4j.Logger;\r\n+import org.hibernate.Session;\r\n import org.hibernate.SessionFactory;\r\n-import org.hibernate.StatelessSession;\r\n import org.hibernate.cfg.Configuration;\r\n \r\n import br.ime.usp.commendans.model.Item;\r\n@@ -20,17 +20,17 @@ import br.ime.usp.commendans.model.User;\r\n \r\n public class DataImporter {\r\n     \r\n-    private final StatelessSession session;\r\n+    private final Session session;\r\n     private static Logger logger;\r\n \r\n-    public DataImporter(StatelessSession session) {\r\n+    public DataImporter(Session session) {\r\n         this.session = session;\r\n     }\r\n \r\n     public static void main(String[] args) throws IOException {\r\n         logger = Logger.getLogger(DataImporter.class);\r\n         SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n-        StatelessSession session = sf.openStatelessSession();\r\n+        Session session = sf.openSession();\r\n         DataImporter dataImporter = new DataImporter(session);\r\n         dataImporter.importData(\"/orders.csv\");\r\n     }\r\n@@ -64,12 +64,13 @@ public class DataImporter {\r\n         logger.info(\"persisting\");\r\n         session.getTransaction().begin();\r\n         for (Item item : items.values()) {\r\n-            session.insert(item);\r\n+            session.save(item);\r\n         }\r\n         \r\n         Collection<User> allUsers = users.values();\r\n         for (User user : allUsers) {\r\n-            session.insert(user);\r\n+            System.out.println(user.itemsBought());\r\n+            session.save(user);\r\n         }\r\n         session.getTransaction().commit();\r\n         logger.info(\"finished persisting\");\r\n','DEFAULT',36,8),(65,'@@ -17,7 +17,7 @@\r\n         <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\r\n         <property name=\"connection.username\">root</property>\r\n         <property name=\"connection.password\"></property>\r\n-        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n         <property name=\"hibernate.generate_statistics\">true</property>\r\n','DEFAULT',37,8),(66,'@@ -16,7 +16,6 @@\r\n 		<dependency org=\"c3p0\" name=\"c3p0\" rev=\"0.9.1\" conf=\"default\" />\r\n 		<dependency org=\"org.hibernate\" name=\"hibernate-validator\" rev=\"4.3.0.Final\"/>\r\n 		<dependency org=\"net.sf.ehcache\" name=\"ehcache-core\" rev=\"2.5.3\"/>\r\n-		\r\n \r\n 		<!-- VRaptor dependencies -->\r\n 		<dependency org=\"br.com.caelum\" name=\"vraptor\" rev=\"3.4.1\" conf=\"default\" />\r\n@@ -30,6 +29,9 @@\r\n 		<dependency org=\"commons-io\" name=\"commons-io\" rev=\"2.0.1\"/>\r\n 		<dependency org=\"com.google.guava\" name=\"guava\" rev=\"r09\"/>\r\n \r\n+		<!-- commendans dependencies -->\r\n+		<dependency org=\"com.google.code.gson\" name=\"gson\" rev=\"2.2.2\"/>\r\n+		\r\n 		<!-- Test dependencies -->\r\n 		<dependency org=\"junit\" name=\"junit\" rev=\"4.8.2\" conf=\"test->default\" />\r\n 		<dependency org=\"org.mockito\" name=\"mockito-all\" rev=\"1.8.5\" conf=\"test->default\" />\r\n','DEFAULT',12,9),(67,'@@ -1,10 +1,8 @@\r\n package br.ime.usp.commendans;\r\n \r\n-import java.util.List;\r\n-\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation.Tuple;\r\n+import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n public interface Recommender {\r\n-    public List<Tuple> recommendendItemsFor(Item item);\r\n+    public ItemVector recommendendItemsFor(Item item);\r\n }\r\n','DEFAULT',31,9),(68,'@@ -0,0 +1,47 @@\r\n+package br.ime.usp.commendans.controller;\r\n+\r\n+import java.util.List;\r\n+\r\n+import br.com.caelum.vraptor.Get;\r\n+import br.com.caelum.vraptor.Resource;\r\n+import br.com.caelum.vraptor.Result;\r\n+import br.com.caelum.vraptor.view.Results;\r\n+import br.ime.usp.commendans.dao.ItemDao;\r\n+import br.ime.usp.commendans.infra.TupleJsonSerializer;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n+import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n+import br.ime.usp.commendans.itemtoitem.Tuple;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+@Resource\r\n+public class ItemToItemController {\r\n+    private final ItemToItemRecommender itemToItem;\r\n+    private final ItemDao itemDao;\r\n+    private final Result result;\r\n+    private final TupleJsonSerializer serializer;\r\n+\r\n+    public ItemToItemController(ItemToItemRecommender itemToItem, ItemDao itemDao, Result result, TupleJsonSerializer serializer) {\r\n+        this.itemToItem = itemToItem;\r\n+        this.itemDao = itemDao;\r\n+        this.result = result;\r\n+        this.serializer = serializer;\r\n+    }\r\n+    \r\n+    @Get(\"/recommend/item/{itemId}\")\r\n+    public void recommend(Long itemId) {\r\n+        Item item = itemDao.find(itemId);\r\n+        ItemVector recommendend = itemToItem.recommendendItemsFor(item);\r\n+        result.use(Results.http())\r\n+            .addHeader(\"content-type\", \"application/json\")\r\n+            .body(serializer.toJson(recommendend.getTuples()));\r\n+    }\r\n+    \r\n+    @Get(\"/recommend/items/\")\r\n+    public void recommend(List<Long> itemsIds) {\r\n+        List<Item> items = itemDao.find(itemsIds);\r\n+        List<Tuple> recommendend = itemToItem.recommendendItemsFor(items).getTuples();\r\n+        result.use(Results.http())\r\n+        .addHeader(\"content-type\", \"application/json\")\r\n+        .body(serializer.toJson(recommendend));\r\n+    }\r\n+}\r\n','NEW',40,9),(69,'@@ -0,0 +1,31 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.hibernate.Session;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+@Component\r\n+public class ItemDao {\r\n+    \r\n+    private final Session session;\r\n+\r\n+    public ItemDao(Session session) {\r\n+        this.session = session;\r\n+    }\r\n+\r\n+    public Item find(Long itemId) {\r\n+        return (Item) session.load(Item.class, itemId);\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public List<Item> find(List<Long> itemsIds) {\r\n+        return session\r\n+                .createQuery(\"select item from Item item where item.id in :ids\")\r\n+                .setParameterList(\"ids\", itemsIds)\r\n+                .list();\r\n+    }\r\n+\r\n+}\r\n','NEW',41,9),(70,'@@ -0,0 +1,23 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.hibernate.Session;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.User;\r\n+\r\n+@Component\r\n+public class UserDao {\r\n+    private final Session session;\r\n+\r\n+    public UserDao(Session session) {\r\n+        this.session = session;\r\n+    }\r\n+    \r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public List<User> list() {\r\n+        session.createQuery(\"select user from User user join fetch user.items\");\r\n+        return session.createCriteria(User.class).list();\r\n+    }\r\n+}\r\n','NEW',42,9),(71,'@@ -0,0 +1,38 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.annotation.PostConstruct;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n+import br.ime.usp.commendans.dao.UserDao;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n+import br.ime.usp.commendans.model.User;\r\n+\r\n+@Component\r\n+public class ItemToItemRecommenderCreator implements ComponentFactory<ItemToItemRecommender> {\r\n+    private final UserDao dao;\r\n+    private final ItemToItemRecommenderFactory factory;\r\n+    private ItemToItemRecommender itemToItemRecommender;\r\n+\r\n+    public ItemToItemRecommenderCreator(UserDao dao, ItemToItemRecommenderFactory factory) {\r\n+        this.dao = dao;\r\n+        this.factory = factory;\r\n+    }\r\n+\r\n+    @Override\r\n+    public ItemToItemRecommender getInstance() {\r\n+        return itemToItemRecommender;\r\n+    }\r\n+    \r\n+    @PostConstruct\r\n+    public void create() {\r\n+        List<User> users = dao.list();\r\n+        for (User user : users) {\r\n+            factory.addUser(user);\r\n+        }\r\n+        this.itemToItemRecommender = factory.build();\r\n+    }\r\n+}\r\n','NEW',43,9),(72,'@@ -0,0 +1,6 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+\r\n+public class RecommenderComponent {\r\n+    \r\n+}\r\n','NEW',44,9),(73,'@@ -0,0 +1,28 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import java.util.List;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.itemtoitem.Tuple;\r\n+\r\n+import com.google.gson.Gson;\r\n+\r\n+@Component\r\n+public class TupleJsonSerializer {\r\n+    \r\n+    private final Gson gson;\r\n+\r\n+    public TupleJsonSerializer() {\r\n+        this.gson = new Gson();\r\n+    }\r\n+\r\n+    public String toJson(Tuple tuple) {\r\n+        return gson.toJson(tuple);\r\n+    }\r\n+    \r\n+    public String toJson(List<Tuple> tuples) {\r\n+        return gson.toJson(tuples);\r\n+    }\r\n+\r\n+    \r\n+}\r\n','NEW',45,9),(74,'@@ -1,38 +1,46 @@\r\n package br.ime.usp.commendans.itemtoitem;\r\n \r\n+import java.util.ArrayList;\r\n import java.util.HashMap;\r\n import java.util.List;\r\n import java.util.Map;\r\n import java.util.Set;\r\n \r\n import br.ime.usp.commendans.Recommender;\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation.Tuple;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n public class ItemToItemRecommender implements Recommender {\r\n \r\n-    private final Map<Item, List<Tuple>> associations;\r\n+    private final Map<Item, ItemVector> associations;\r\n \r\n     public ItemToItemRecommender(\r\n             HashMap<Item, ItemToItemsAssociation> associations) {\r\n         this.associations = parse(associations);\r\n     }\r\n \r\n-    private Map<Item, List<Tuple>> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n-        HashMap<Item, List<Tuple>> map = new HashMap<Item, List<Tuple>>();\r\n+    private Map<Item, ItemVector> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        HashMap<Item, ItemVector> map = new HashMap<Item, ItemVector>();\r\n         Set<Item> items = associations.keySet();\r\n         for (Item item : items) {\r\n             ItemToItemsAssociation association = associations.get(item);\r\n             List<Tuple> tuples = association.toTupleList();\r\n-            map.put(item, tuples);\r\n+            map.put(item, new ItemVector(tuples));\r\n         }\r\n         return map;\r\n     }\r\n \r\n     @Override\r\n-    public List<Tuple> recommendendItemsFor(Item item) {\r\n-        List<Tuple> tuples = associations.get(item);\r\n-        return tuples;\r\n+    public ItemVector recommendendItemsFor(Item item) {\r\n+        return associations.get(item);\r\n+    }\r\n+\r\n+    public ItemVector recommendendItemsFor(List<Item> items) {\r\n+        ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n+        for (Item item : items) {\r\n+            ItemVector other = recommendendItemsFor(item);\r\n+            vector = vector.merge(other);\r\n+        }\r\n+        return vector;\r\n     }\r\n \r\n }\r\n','DEFAULT',33,9),(75,'@@ -6,9 +6,11 @@ import java.util.List;\r\n import java.util.Map;\r\n import java.util.Set;\r\n \r\n+import br.com.caelum.vraptor.ioc.Component;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.model.User;\r\n \r\n+@Component\r\n public class ItemToItemRecommenderFactory {\r\n \r\n     private Map<Item, List<User>> usersByItemBought;\r\n','DEFAULT',34,9),(76,'@@ -56,29 +56,4 @@ public class ItemToItemsAssociation {\r\n         return tuples;\r\n     }\r\n \r\n-    \r\n-    public class Tuple implements Comparable<Tuple> {\r\n-        private Item item;\r\n-        private Double value;\r\n-\r\n-        public Tuple(Item item, Double value) {\r\n-            this.item = item;\r\n-            this.value = value;\r\n-        }\r\n-\r\n-        public Item getItem() {\r\n-            return item;\r\n-        }\r\n-\r\n-        public Double getValue() {\r\n-            return value;\r\n-        }\r\n-\r\n-        @Override\r\n-        public int compareTo(Tuple o) {\r\n-            return (int) (value - o.getValue());\r\n-        }\r\n-\r\n-    }\r\n-\r\n }\r\n','DEFAULT',35,9),(77,'@@ -0,0 +1,52 @@\r\n+package br.ime.usp.commendans.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+public class ItemVector {\r\n+\r\n+    private Set<Tuple> tuples;\r\n+\r\n+    public ItemVector(Set<Tuple> tuples) {\r\n+        this.tuples = tuples;\r\n+    }\r\n+\r\n+    public ItemVector(List<Tuple> tuples) {\r\n+        this(new HashSet<Tuple>(tuples));\r\n+    }\r\n+\r\n+    public List<Tuple> getTuples() {\r\n+        ArrayList<Tuple> tuples = new ArrayList<Tuple>(this.tuples);\r\n+        Collections.sort(tuples);\r\n+        Collections.reverse(tuples);\r\n+        return Collections.unmodifiableList(tuples);\r\n+    }\r\n+    \r\n+    private void remove(Tuple t) {\r\n+        tuples.remove(t);\r\n+    }\r\n+\r\n+    public ItemVector merge(ItemVector other) {\r\n+        Set<Tuple> tuples = new HashSet<Tuple>();\r\n+        Set<Tuple> tuplesToRemove = new HashSet<Tuple>();\r\n+        for (Tuple tuple : this.tuples) {\r\n+            for (Tuple t : other.getTuples()) {\r\n+                if (t.getItem().equals(tuple.getItem())) {\r\n+                    Tuple newTuple = new Tuple(t.getItem(), tuple.getValue() + t.getValue());\r\n+                    tuples.add(newTuple);\r\n+                    tuplesToRemove.add(t);\r\n+                    tuplesToRemove.add(tuple);\r\n+                    break;\r\n+                }\r\n+            }\r\n+        }\r\n+        tuples.addAll(this.tuples);\r\n+        tuples.addAll(other.getTuples());\r\n+        tuples.removeAll(tuplesToRemove);\r\n+        return new ItemVector(tuples);\r\n+    }\r\n+\r\n+}\r\n','NEW',46,9),(78,'@@ -0,0 +1,63 @@\r\n+package br.ime.usp.commendans.itemtoitem;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class Tuple implements Comparable<Tuple> {\r\n+    private Item item;\r\n+    private Double value;\r\n+\r\n+    public Tuple(Item item, Double value) {\r\n+        this.item = item;\r\n+        this.value = value;\r\n+    }\r\n+\r\n+    public Item getItem() {\r\n+        return item;\r\n+    }\r\n+\r\n+    public Double getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    @Override\r\n+    public int compareTo(Tuple o) {\r\n+        return (int) (value - o.getValue());\r\n+    }\r\n+    \r\n+    @Override\r\n+    public int hashCode() {\r\n+        final int prime = 31;\r\n+        int result = 1;\r\n+        result = prime * result + ((item == null) ? 0 : item.hashCode());\r\n+        result = prime * result + ((value == null) ? 0 : value.hashCode());\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (getClass() != obj.getClass())\r\n+            return false;\r\n+        Tuple other = (Tuple) obj;\r\n+        if (item == null) {\r\n+            if (other.item != null)\r\n+                return false;\r\n+        } else if (!item.equals(other.item))\r\n+            return false;\r\n+        if (value == null) {\r\n+            if (other.value != null)\r\n+                return false;\r\n+        } else if (!value.equals(other.value))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return \"[Tuple: item=\" + item + \"]\";\r\n+    }\r\n+\r\n+}\r\n','NEW',47,9),(79,'@@ -1,12 +1,15 @@\r\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\">\r\n-  <display-name>commendans</display-name>\r\n-  <welcome-file-list>\r\n-    <welcome-file>index.html</welcome-file>\r\n-    <welcome-file>index.htm</welcome-file>\r\n-    <welcome-file>index.jsp</welcome-file>\r\n-    <welcome-file>default.html</welcome-file>\r\n-    <welcome-file>default.htm</welcome-file>\r\n-    <welcome-file>default.jsp</welcome-file>\r\n-  </welcome-file-list>\r\n+<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+	xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"\r\n+	xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n+	id=\"WebApp_ID\" version=\"3.0\">\r\n+	<display-name>commendans</display-name>\r\n+	\r\n+	<context-param>\r\n+		<param-name>br.com.caelum.vraptor.packages</param-name>\r\n+		<param-value>\r\n+	        br.com.caelum.vraptor.util.hibernate\r\n+        </param-value>\r\n+	</context-param>\r\n+	\r\n </web-app>\r\n\\ No newline at end of file\r\n','DEFAULT',15,9),(80,'@@ -0,0 +1,22 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.hibernate.Session;\r\n+import org.hibernate.SessionFactory;\r\n+import org.hibernate.cfg.Configuration;\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.model.User;\r\n+\r\n+public class UserDaoTest {\r\n+\r\n+    @Test\r\n+    public void test() {\r\n+        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n+        Session session = sf.openSession();\r\n+        UserDao userDao = new UserDao(session);\r\n+        List<User> users = userDao.list();\r\n+    }\r\n+\r\n+}\r\n','NEW',48,9),(81,'@@ -11,14 +11,14 @@ import org.junit.Test;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation.Tuple;\r\n+import br.ime.usp.commendans.itemtoitem.Tuple;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.model.User;\r\n \r\n public class ItemToItemRecommenderFactoryTest {\r\n \r\n     @Test\r\n-    public void test() {\r\n+    public void shouldBuildRecommender() {\r\n         ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n         Item item1 = new Item(1l);\r\n         Item item2 = new Item(2l);\r\n@@ -36,7 +36,7 @@ public class ItemToItemRecommenderFactoryTest {\r\n         ItemToItemRecommender recommender = factory.build();\r\n         HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n         \r\n-        List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1);\r\n+        List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1).getTuples();\r\n         ItemToItemsAssociation association = associations.get(item1);\r\n         assertEquals(0.0, association.associationValue(item1), 0.001);\r\n         assertEquals(1.0, association.associationValue(item2), 0.001);\r\n@@ -49,7 +49,7 @@ public class ItemToItemRecommenderFactoryTest {\r\n         assertEquals(item2, recommendedItems.get(1).getItem());\r\n         assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n         \r\n-        recommendedItems = recommender.recommendendItemsFor(item2);\r\n+        recommendedItems = recommender.recommendendItemsFor(item2).getTuples();\r\n         association = associations.get(item2);\r\n         assertEquals(1.0, association.associationValue(item1), 0.001);\r\n         assertEquals(0.0, association.associationValue(item2), 0.001);\r\n@@ -61,7 +61,7 @@ public class ItemToItemRecommenderFactoryTest {\r\n         assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n         assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n         \r\n-        recommendedItems = recommender.recommendendItemsFor(item3);\r\n+        recommendedItems = recommender.recommendendItemsFor(item3).getTuples();\r\n         association = associations.get(item3);\r\n         assertEquals(2.0, association.associationValue(item1), 0.001);\r\n         assertEquals(1.0, association.associationValue(item2), 0.001);\r\n','DEFAULT',30,9),(82,'@@ -0,0 +1,28 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.Arrays;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.itemtoitem.Tuple;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class TupleJsonSerializerTest {\r\n+\r\n+    @Test\r\n+    public void shouldSerializeATuple() {\r\n+        TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n+        String json = serializer.toJson(new Tuple(new Item(1l), 10.0));\r\n+        assertEquals(\"{\\\"item\\\":{\\\"id\\\":1},\\\"value\\\":10.0}\", json);\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void shouldSerializeATupleList() {\r\n+        TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n+        String json = serializer.toJson(Arrays.asList(new Tuple(new Item(1l), 10.0)));\r\n+        assertEquals(\"[{\\\"item\\\":{\\\"id\\\":1},\\\"value\\\":10.0}]\", json);\r\n+    }\r\n+\r\n+}\r\n','NEW',49,9),(83,'@@ -0,0 +1,40 @@\r\n+package br.ime.usp.commendans.itemtoitem;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class ItemVectorTest {\r\n+\r\n+    @Test\r\n+    public void test() {\r\n+        Item item1 = new Item(1l);\r\n+        Item item2 = new Item(2l);\r\n+        Item item3 = new Item(3l);\r\n+        Item item4 = new Item(4l);\r\n+        List<Tuple> tuples = asList(new Tuple(item1, 11.0), new Tuple(item2, 8.0), new Tuple(item3, 2.0));\r\n+        ItemVector itemVector1 = new ItemVector(new HashSet<Tuple>(tuples));\r\n+        tuples = asList(new Tuple(item4, 10.0), new Tuple(item3, 7.0));\r\n+        ItemVector itemVector2 = new ItemVector(new HashSet<Tuple>(tuples));\r\n+        \r\n+        ItemVector merge = itemVector1.merge(itemVector2);\r\n+        List<Tuple> expected = asList(new Tuple(item1, 11.0), new Tuple(item4, 10.0), new Tuple(item3, 9.0), new Tuple(item2, 8.0));\r\n+        assertEquals(expected, merge.getTuples());\r\n+        \r\n+    }\r\n+\r\n+    private List<Tuple> asList(Tuple ... tuples) {\r\n+        ArrayList<Tuple> tuplesList = new ArrayList<Tuple>();\r\n+        for (int i = 0; i < tuples.length; i++) {\r\n+            tuplesList.add(tuples[i]);\r\n+        }\r\n+        return tuplesList;\r\n+    }\r\n+\r\n+}\r\n','NEW',50,9),(84,'@@ -25,10 +25,6 @@ public class ItemVector {\r\n         return Collections.unmodifiableList(tuples);\r\n     }\r\n     \r\n-    private void remove(Tuple t) {\r\n-        tuples.remove(t);\r\n-    }\r\n-\r\n     public ItemVector merge(ItemVector other) {\r\n         Set<Tuple> tuples = new HashSet<Tuple>();\r\n         Set<Tuple> tuplesToRemove = new HashSet<Tuple>();\r\n','DEFAULT',46,10),(85,'@@ -1,22 +1,18 @@\r\n package br.ime.usp.commendans.dao;\r\n \r\n-import java.util.List;\r\n-\r\n import org.hibernate.Session;\r\n import org.hibernate.SessionFactory;\r\n import org.hibernate.cfg.Configuration;\r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.model.User;\r\n-\r\n public class UserDaoTest {\r\n \r\n     @Test\r\n-    public void test() {\r\n+    public void shouldFindUsers() {\r\n         SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n         Session session = sf.openSession();\r\n         UserDao userDao = new UserDao(session);\r\n-        List<User> users = userDao.list();\r\n+        userDao.list();\r\n     }\r\n \r\n }\r\n','DEFAULT',48,10),(86,'@@ -2,3 +2,4 @@\r\n *.class\r\n build/\r\n .~lock*\r\n+target/\r\n','DEFAULT',2,11),(87,'@@ -0,0 +1,38 @@\r\n+package br.ime.usp.commendans.components;\r\n+\r\n+import javax.annotation.PostConstruct;\r\n+import javax.annotation.PreDestroy;\r\n+\r\n+import org.hibernate.Session;\r\n+import org.hibernate.SessionFactory;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n+import br.com.caelum.vraptor.ioc.RequestScoped;\r\n+\r\n+@Component @RequestScoped\r\n+public class SessionCreator implements ComponentFactory<Session> {\r\n+    \r\n+    private final SessionFactory sf;\r\n+    private org.hibernate.classic.Session session;\r\n+\r\n+    public SessionCreator(SessionFactory sf) {\r\n+        this.sf = sf;\r\n+    }\r\n+\r\n+    @Override\r\n+    public Session getInstance() {\r\n+        return session;\r\n+    }\r\n+    \r\n+    @PostConstruct\r\n+    public void create() {\r\n+        session = sf.openSession();\r\n+    }\r\n+    \r\n+    @PreDestroy\r\n+    public void destroy() {\r\n+        session.close();\r\n+    }\r\n+\r\n+}\r\n','NEW',51,11),(88,'@@ -0,0 +1,52 @@\r\n+package br.ime.usp.commendans.components;\r\n+\r\n+import javax.annotation.PostConstruct;\r\n+import javax.annotation.PreDestroy;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+import org.hibernate.SessionFactory;\r\n+import org.hibernate.cfg.Configuration;\r\n+\r\n+import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n+\r\n+@Component @ApplicationScoped\r\n+public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n+\r\n+    private SessionFactory sessionFactory;\r\n+    private static Logger LOG = Logger.getLogger(SessionFactoryCreator.class);\r\n+    \r\n+    public SessionFactoryCreator() {\r\n+    }\r\n+\r\n+    @Override\r\n+    public SessionFactory getInstance() {\r\n+        return sessionFactory;\r\n+    }\r\n+    \r\n+    @PreDestroy\r\n+    public void destroy() {\r\n+        sessionFactory.close();\r\n+    }\r\n+    \r\n+    @PostConstruct\r\n+    public void create() {\r\n+        //if (env.getName().equals(\"heroku\")) {\r\n+        if (true) {\r\n+            LOG.info(\"using heroku specific confs\");\r\n+            Configuration configuration = new Configuration().configure(\"/hibernate-heroku.cfg.xml\");\r\n+            configuration.setProperty(\"hibernate.connection.url\", \"jdbc:mysql://localhost/commendans\");\r\n+            configuration.setProperty(\"hibernate.connection.driver_class\", \"com.mysql.jdbc.Driver\");\r\n+            configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.MySQL5InnoDBDialect\");\r\n+            configuration.setProperty(\"hibernate.connection.username\", \"root\");\r\n+            configuration.setProperty(\"hibernate.connection.password\", \"\");\r\n+            \r\n+            sessionFactory = configuration.buildSessionFactory();\r\n+        } else {\r\n+            LOG.info(\"using heroku specific normal confs\");\r\n+            sessionFactory = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n+        }\r\n+    }\r\n+\r\n+}\r\n','NEW',52,11),(89,'@@ -0,0 +1,23 @@\r\n+<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n+<!DOCTYPE hibernate-configuration PUBLIC\r\n+        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n+        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n+<hibernate-configuration>\r\n+    <session-factory>\r\n+    \r\n+    	<!-- connection pool configs -->\r\n+	    <property name=\"hibernate.c3p0.acquire_increment\">1</property> \r\n+		<property name=\"hibernate.c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n+		<property name=\"hibernate.c3p0.max_size\">15</property> \r\n+		<property name=\"hibernate.c3p0.min_size\">1</property> \r\n+		<property name=\"hibernate.c3p0.timeout\">600</property>\r\n+    \r\n+        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n+        <property name=\"show_sql\">false</property>\r\n+        <property name=\"format_sql\">false</property>\r\n+\r\n+        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.User\" />\r\n+\r\n+    </session-factory>\r\n+</hibernate-configuration>\r\n','NEW',53,11),(90,'@@ -5,11 +5,4 @@\r\n 	id=\"WebApp_ID\" version=\"3.0\">\r\n 	<display-name>commendans</display-name>\r\n 	\r\n-	<context-param>\r\n-		<param-name>br.com.caelum.vraptor.packages</param-name>\r\n-		<param-value>\r\n-	        br.com.caelum.vraptor.util.hibernate\r\n-        </param-value>\r\n-	</context-param>\r\n-	\r\n </web-app>\r\n\\ No newline at end of file\r\n','DEFAULT',15,11),(91,'@@ -0,0 +1,20 @@\r\n+package br.ime.usp.commendans.components;\r\n+\r\n+import static org.mockito.Mockito.mock;\r\n+import static org.mockito.Mockito.when;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import br.com.caelum.vraptor.environment.Environment;\r\n+\r\n+public class SessionFactoryCreatorTest {\r\n+\r\n+    @Test\r\n+    public void shouldGetSessionFactory() {\r\n+        Environment env = mock(Environment.class);\r\n+        when(env.getName()).thenReturn(\"heroku\");\r\n+        SessionFactoryCreator sfc = new SessionFactoryCreator(env);\r\n+        sfc.create();\r\n+    }\r\n+\r\n+}\r\n','NEW',54,11),(92,'@@ -1,19 +1,12 @@\r\n package br.ime.usp.commendans.components;\r\n \r\n-import static org.mockito.Mockito.mock;\r\n-import static org.mockito.Mockito.when;\r\n-\r\n import org.junit.Test;\r\n \r\n-import br.com.caelum.vraptor.environment.Environment;\r\n-\r\n public class SessionFactoryCreatorTest {\r\n \r\n     @Test\r\n     public void shouldGetSessionFactory() {\r\n-        Environment env = mock(Environment.class);\r\n-        when(env.getName()).thenReturn(\"heroku\");\r\n-        SessionFactoryCreator sfc = new SessionFactoryCreator(env);\r\n+        SessionFactoryCreator sfc = new SessionFactoryCreator();\r\n         sfc.create();\r\n     }\r\n \r\n','DEFAULT',54,12),(93,'@@ -3,3 +3,5 @@\r\n build/\r\n .~lock*\r\n target/\r\n+src/main/webapp/WEB-INF/lib/\r\n+src/main/webapp/WEB-INF/classes/\r\n','DEFAULT',2,13),(94,'@@ -0,0 +1 @@\r\n+web: sh target/bin/webapp\r\n','NEW',55,13),(95,'@@ -11,7 +11,7 @@ tmp.classes.dir=${tmp.webinf.dir}/classes\r\n tmp.test-classes.dir=${tmp.dir}/test-classes\r\n \r\n artifacts.dir=${tmp.root}/artifacts/\r\n-war.file=recommender.war\r\n+war.file=commendans.war\r\n \r\n src.dir=src/main/java\r\n libs.dir=${webapp.dir}/WEB-INF/lib\r\n','DEFAULT',10,13),(96,'@@ -1,4 +1,4 @@\r\n-<project name=\"Metric Miner\" default=\"war\" basedir=\".\" xmlns:ivy=\"antlib:org.apache.ivy.ant\">\r\n+<project name=\"Metric Miner\" default=\"resolve\" basedir=\".\" xmlns:ivy=\"antlib:org.apache.ivy.ant\">\r\n \r\n 	<property file=\"build.properties\" />\r\n \r\n@@ -20,10 +20,7 @@\r\n 	</target>\r\n \r\n 	<target name=\"clean\">\r\n-		<delete dir=\"${tmp.dir}\" />\r\n-		<delete>\r\n-	    	<fileset dir=\"${libs.dir}\" includes=\"*.jar\"/>\r\n-		</delete>\r\n+		<delete dir=\"${tmp.root}\" />\r\n 	</target>\r\n 	\r\n 	<!-- resolve dependencies -->\r\n@@ -42,19 +39,21 @@\r\n 		<javac destdir=\"${tmp.classes.dir}\" srcdir=\"${src.dir}\" classpathref=\"compile.classpath\" debug=\"true\" encoding=\"UTF-8\" />\r\n 	</target>\r\n \r\n-	<target name=\"war\" depends=\"compile\">\r\n+	<target name=\"heroku-war\" depends=\"compile\">\r\n 		<delete file=\"${artifacts.dir}/${war.file}\" />\r\n 		<copy todir=\"${tmp.classes.dir}\">\r\n 			<fileset dir=\"${resources.dir}\" />\r\n 		</copy>\r\n-		<move file=\"${tmp.classes.dir}/log4j.server.xml\" tofile=\"${tmp.classes.dir}/log4j.xml\"/>\r\n+		\r\n+		<copy file=\"${webapp.dir}/WEB-INF/web.xml\" tofile=\"${webapp.dir}/WEB-INF/web-dev.xml\"/>\r\n+		\r\n+		<copy file=\"${webapp.dir}/WEB-INF/web-heroku.xml\" tofile=\"${webapp.dir}/WEB-INF/web.xml\"/>\r\n \r\n 		<war destfile=\"${artifacts.dir}/${war.file}\" webxml=\"${webapp.dir}/WEB-INF/web.xml\" compress=\"true\">\r\n-			<fileset dir=\"${webapp.dir}\">\r\n-				<exclude name=\"WEB-INF/web.xml\" />\r\n-			</fileset>\r\n 			<classes dir=\"${tmp.classes.dir}\" />\r\n 		</war>\r\n+		\r\n+		<copy file=\"${webapp.dir}/WEB-INF/web-dev.xml\" tofile=\"${webapp.dir}/WEB-INF/web.xml\"/>\r\n 	</target>\r\n \r\n </project>\r\n\\ No newline at end of file\r\n','DEFAULT',11,13),(97,'@@ -7,6 +7,8 @@\r\n 	</configurations>\r\n \r\n 	<dependencies>\r\n+		<dependency org=\"com.github.jsimone\" name=\"webapp-runner\" rev=\"7.0.22.1\"/>\r\n+	\r\n 		<!-- Hibernate and other stuff -->\r\n 		<dependency org=\"org.hibernate\" name=\"hibernate-core\" rev=\"3.6.10.Final\"/>\r\n 		<dependency org=\"org.hibernate.javax.persistence\" name=\"hibernate-jpa-2.0-api\" rev=\"1.0.0.Final\" conf=\"default\" />\r\n','DEFAULT',12,13),(98,'@@ -0,0 +1,217 @@\r\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n+	<modelVersion>4.0.0</modelVersion>\r\n+	<groupId>heroku-blank</groupId>\r\n+	<artifactId>heroku-blank</artifactId>\r\n+	<version>0.0.1-SNAPSHOT</version>\r\n+	<name>heroku-blank</name>\r\n+\r\n+	<properties>\r\n+		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n+	</properties>\r\n+\r\n+	<build>\r\n+		<outputDirectory>${basedir}/src/main/webapp/WEB-INF/classes</outputDirectory>\r\n+		<plugins>\r\n+			<plugin>\r\n+				<artifactId>maven-compiler-plugin</artifactId>\r\n+				<version>2.3.2</version>\r\n+				<configuration>\r\n+					<source>1.6</source>\r\n+					<target>1.6</target>\r\n+					<encoding>UTF-8</encoding>\r\n+				</configuration>\r\n+			</plugin>\r\n+            \r\n+            <plugin>\r\n+                <artifactId>maven-eclipse-plugin</artifactId>\r\n+                <version>2.8</version>\r\n+                <configuration>\r\n+                    <downloadSources>true</downloadSources>\r\n+                    <downloadJavadocs>true</downloadJavadocs>\r\n+                </configuration>\r\n+            </plugin>\r\n+            \r\n+            <plugin>\r\n+				<artifactId>maven-dependency-plugin</artifactId>\r\n+				<executions>\r\n+					<execution>\r\n+						<phase>install</phase>\r\n+						<goals>\r\n+							<goal>copy-dependencies</goal>\r\n+						</goals>\r\n+						<configuration>\r\n+							<outputDirectory>src/main/webapp/WEB-INF/lib</outputDirectory>\r\n+						</configuration>\r\n+					</execution>\r\n+				</executions>\r\n+				</plugin>\r\n+            \r\n+			<plugin>\r\n+				<groupId>org.apache.maven.plugins</groupId>\r\n+				<artifactId>maven-war-plugin</artifactId>\r\n+				<version>2.1.1</version>\r\n+			</plugin>\r\n+			<plugin>\r\n+				<groupId>org.mortbay.jetty</groupId>\r\n+				<artifactId>maven-jetty-plugin</artifactId>\r\n+				<version>6.1.14</version>\r\n+				<configuration>\r\n+					<scanIntervalSeconds>3</scanIntervalSeconds>\r\n+					<stopKey>foo</stopKey>\r\n+					<stopPort>9999</stopPort>\r\n+					<webAppConfig>\r\n+						<contextPath>/</contextPath>\r\n+					</webAppConfig>\r\n+				</configuration>\r\n+			</plugin>\r\n+            <plugin>\r\n+                <groupId>org.codehaus.mojo</groupId>\r\n+                <artifactId>appassembler-maven-plugin</artifactId>\r\n+                <version>1.1.1</version>\r\n+                <executions>\r\n+                    <execution>\r\n+                        <phase>package</phase>\r\n+                        <goals>\r\n+                            <goal>assemble</goal>\r\n+                        </goals>\r\n+                        <configuration>\r\n+                            <assembleDirectory>target</assembleDirectory>\r\n+                            <extraJvmArguments>-Xmx512m</extraJvmArguments>\r\n+                            <programs>\r\n+                                <program>\r\n+                                    <mainClass>Main</mainClass>\r\n+                                    <name>webapp</name>\r\n+                                </program>\r\n+                            </programs>\r\n+                        </configuration>\r\n+                    </execution>\r\n+                </executions>\r\n+            </plugin>\r\n+		</plugins>\r\n+	</build>\r\n+\r\n+	<dependencies>\r\n+		<dependency>\r\n+		  <groupId>org.hibernate</groupId>\r\n+		  <artifactId>hibernate-core</artifactId>\r\n+		  <version>3.6.10.Final</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.hibernate.javax.persistence</groupId>\r\n+		  <artifactId>hibernate-jpa-2.0-api</artifactId>\r\n+		  <version>1.0.0.Final</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.hibernate</groupId>\r\n+		  <artifactId>hibernate-c3p0</artifactId>\r\n+		  <version>3.6.10.Final</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>javax.transaction</groupId>\r\n+		  <artifactId>jta</artifactId>\r\n+		  <version>1.1</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>mysql</groupId>\r\n+		  <artifactId>mysql-connector-java</artifactId>\r\n+		  <version>5.1.18</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>c3p0</groupId>\r\n+		  <artifactId>c3p0</artifactId>\r\n+		  <version>0.9.1</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.hibernate</groupId>\r\n+		  <artifactId>hibernate-validator</artifactId>\r\n+		  <version>4.3.0.Final</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>net.sf.ehcache</groupId>\r\n+		  <artifactId>ehcache-core</artifactId>\r\n+		  <version>2.5.3</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>br.com.caelum</groupId>\r\n+		  <artifactId>vraptor</artifactId>\r\n+		  <version>3.4.1</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.slf4j</groupId>\r\n+		  <artifactId>slf4j-api</artifactId>\r\n+		  <version>1.6.1</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>log4j</groupId>\r\n+		  <artifactId>log4j</artifactId>\r\n+		  <version>1.2.16</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.slf4j</groupId>\r\n+		  <artifactId>slf4j-log4j12</artifactId>\r\n+		  <version>1.6.1</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.mortbay.jetty</groupId>\r\n+		  <artifactId>servlet-api-2.5</artifactId>\r\n+		  <version>6.1H.14.1</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.glassfish.web</groupId>\r\n+		  <artifactId>jstl-impl</artifactId>\r\n+		  <version>1.2</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.mortbay.jetty</groupId>\r\n+		  <artifactId>servlet-api</artifactId>\r\n+		  <version>3.0.pre4</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>javassist</groupId>\r\n+		  <artifactId>javassist</artifactId>\r\n+		  <version>3.12.1.GA</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>commons-io</groupId>\r\n+		  <artifactId>commons-io</artifactId>\r\n+		  <version>2.0.1</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>com.google.guava</groupId>\r\n+		  <artifactId>guava</artifactId>\r\n+		  <version>r09</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>com.google.code.gson</groupId>\r\n+		  <artifactId>gson</artifactId>\r\n+		  <version>2.2.2</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>junit</groupId>\r\n+		  <artifactId>junit</artifactId>\r\n+		  <version>4.8.2</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.mockito</groupId>\r\n+		  <artifactId>mockito-all</artifactId>\r\n+		  <version>1.8.5</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		  <groupId>org.hsqldb</groupId>\r\n+		  <artifactId>hsqldb</artifactId>\r\n+		  <version>2.2.8</version>\r\n+		</dependency>\r\n+		<!-- Provided dependencies -->\r\n+	</dependencies>\r\n+\r\n+	<reporting>\r\n+		<plugins>\r\n+			<plugin>\r\n+				<groupId>org.codehaus.mojo</groupId>\r\n+				<artifactId>cobertura-maven-plugin</artifactId>\r\n+				<version>2.5.1</version>\r\n+			</plugin>\r\n+		</plugins>\r\n+	</reporting>\r\n+</project>\r\n\\ No newline at end of file\r\n','NEW',56,13),(99,'@@ -1,7 +1,11 @@\r\n package br.ime.usp.commendans.components;\r\n \r\n+import java.net.URI;\r\n+import java.net.URISyntaxException;\r\n+\r\n import javax.annotation.PostConstruct;\r\n import javax.annotation.PreDestroy;\r\n+import javax.servlet.ServletContext;\r\n \r\n import org.apache.log4j.Logger;\r\n import org.hibernate.SessionFactory;\r\n@@ -16,8 +20,10 @@ public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n \r\n     private SessionFactory sessionFactory;\r\n     private static Logger LOG = Logger.getLogger(SessionFactoryCreator.class);\r\n+    private String env;\r\n     \r\n-    public SessionFactoryCreator() {\r\n+    public SessionFactoryCreator(ServletContext context) {\r\n+        env = context.getInitParameter(\"environment\");\r\n     }\r\n \r\n     @Override\r\n@@ -32,15 +38,29 @@ public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n     \r\n     @PostConstruct\r\n     public void create() {\r\n-        //if (env.getName().equals(\"heroku\")) {\r\n-        if (true) {\r\n+        if (env.equals(\"heroku\")) {\r\n+            \r\n+            URI dbUri;\r\n+            try {\r\n+                dbUri = new URI(System.getenv(\"DATABASE_URL\"));\r\n+            } catch (URISyntaxException e) {\r\n+                throw new RuntimeException(e);\r\n+            }\r\n+\r\n+            String username = dbUri.getUserInfo().split(\":\")[0];\r\n+            String password = dbUri.getUserInfo().split(\":\")[1];\r\n+            String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + \':\' + dbUri.getPort() + \"/\" + dbUri.getPort();\r\n+            \r\n             LOG.info(\"using heroku specific confs\");\r\n+            LOG.info(\"username: \" + username);\r\n+            LOG.info(\"password: \" + password);\r\n+            LOG.info(\"dbUrl: \" + dbUrl);\r\n             Configuration configuration = new Configuration().configure(\"/hibernate-heroku.cfg.xml\");\r\n-            configuration.setProperty(\"hibernate.connection.url\", \"jdbc:mysql://localhost/commendans\");\r\n+            configuration.setProperty(\"hibernate.connection.url\", dbUrl);\r\n             configuration.setProperty(\"hibernate.connection.driver_class\", \"com.mysql.jdbc.Driver\");\r\n-            configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.MySQL5InnoDBDialect\");\r\n-            configuration.setProperty(\"hibernate.connection.username\", \"root\");\r\n-            configuration.setProperty(\"hibernate.connection.password\", \"\");\r\n+            configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\r\n+            configuration.setProperty(\"hibernate.connection.username\", username);\r\n+            configuration.setProperty(\"hibernate.connection.password\", password);\r\n             \r\n             sessionFactory = configuration.buildSessionFactory();\r\n         } else {\r\n','DEFAULT',52,13),(100,'@@ -1,22 +1,34 @@\r\n package br.ime.usp.commendans.controller;\r\n \r\n+import org.hibernate.Session;\r\n+\r\n import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n+import br.ime.usp.commendans.util.DataImporter;\r\n \r\n \r\n @Resource\r\n public class IndexController {\r\n     \r\n     private final Result result;\r\n+    private final Session session;\r\n \r\n-    public IndexController(Result result) {\r\n+    public IndexController(Result result, Session session) {\r\n         this.result = result;\r\n+        this.session = session;\r\n     }\r\n     \r\n     @Get(\"/\")\r\n     public void index() {\r\n         result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n     }\r\n+    \r\n+    @Get(\"/import/askjdhakjshdakjshd\")\r\n+    public void importData() {\r\n+        DataImporter dataImporter = new DataImporter(session);\r\n+        dataImporter.importData(\"/orders.csv\");\r\n+        result.use(Results.http()).body(\"<html><body>finished persisting</body></html>\");\r\n+    }\r\n }\r\n','DEFAULT',26,13),(101,'@@ -31,17 +31,19 @@ public class ItemToItemController {\r\n     public void recommend(Long itemId) {\r\n         Item item = itemDao.find(itemId);\r\n         ItemVector recommendend = itemToItem.recommendendItemsFor(item);\r\n-        result.use(Results.http())\r\n-            .addHeader(\"content-type\", \"application/json\")\r\n-            .body(serializer.toJson(recommendend.getTuples()));\r\n+        serializedResult(recommendend.getTuples());\r\n     }\r\n     \r\n     @Get(\"/recommend/items/\")\r\n     public void recommend(List<Long> itemsIds) {\r\n         List<Item> items = itemDao.find(itemsIds);\r\n         List<Tuple> recommendend = itemToItem.recommendendItemsFor(items).getTuples();\r\n+        serializedResult(recommendend);\r\n+    }\r\n+\r\n+    private void serializedResult(List<Tuple> recommendend) {\r\n         result.use(Results.http())\r\n-        .addHeader(\"content-type\", \"application/json\")\r\n-        .body(serializer.toJson(recommendend));\r\n+            .addHeader(\"content-type\", \"application/json\")\r\n+            .body(serializer.toJson(recommendend));\r\n     }\r\n }\r\n','DEFAULT',40,13),(102,'@@ -21,26 +21,25 @@ import br.ime.usp.commendans.model.User;\r\n public class DataImporter {\r\n     \r\n     private final Session session;\r\n-    private static Logger logger;\r\n+    private static Logger logger = Logger.getLogger(DataImporter.class);\r\n \r\n     public DataImporter(Session session) {\r\n         this.session = session;\r\n     }\r\n \r\n     public static void main(String[] args) throws IOException {\r\n-        logger = Logger.getLogger(DataImporter.class);\r\n         SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n         Session session = sf.openSession();\r\n         DataImporter dataImporter = new DataImporter(session);\r\n         dataImporter.importData(\"/orders.csv\");\r\n     }\r\n \r\n-    private void importData(String file) throws IOException {\r\n+    public void importData(String file) {\r\n         HashMap<Long, User> users = new HashMap<Long, User>();\r\n         HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n         InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n         BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n-        String line = reader.readLine();\r\n+        String line = safeReadLine(reader);\r\n         \r\n         while (line != null) {\r\n             logger.info(line);\r\n@@ -56,7 +55,7 @@ public class DataImporter {\r\n                 item = new Item(itemId);\r\n             }\r\n             user.add(item);\r\n-            line = reader.readLine();\r\n+            line = safeReadLine(reader);\r\n             users.put(id, user);\r\n             items.put(itemId, item);\r\n         }\r\n@@ -69,11 +68,18 @@ public class DataImporter {\r\n         \r\n         Collection<User> allUsers = users.values();\r\n         for (User user : allUsers) {\r\n-            System.out.println(user.itemsBought());\r\n             session.save(user);\r\n         }\r\n         session.getTransaction().commit();\r\n         logger.info(\"finished persisting\");\r\n     }\r\n \r\n+    private String safeReadLine(BufferedReader reader) {\r\n+        try {\r\n+            return reader.readLine();\r\n+        } catch (IOException e) {\r\n+            throw new RuntimeException(\"could not read file\", e);\r\n+        }\r\n+    }\r\n+\r\n }\r\n','DEFAULT',36,13),(103,'@@ -12,7 +12,7 @@\r\n 		<property name=\"hibernate.c3p0.min_size\">1</property> \r\n 		<property name=\"hibernate.c3p0.timeout\">600</property>\r\n     \r\n-        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n \r\n','DEFAULT',53,13),(104,'@@ -0,0 +1,52 @@\r\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n+<!--\r\n+  Licensed to the Apache Software Foundation (ASF) under one or more\r\n+  contributor license agreements.  See the NOTICE file distributed with\r\n+  this work for additional information regarding copyright ownership.\r\n+  The ASF licenses this file to You under the Apache License, Version 2.0\r\n+  (the \"License\"); you may not use this file except in compliance with\r\n+  the License.  You may obtain a copy of the License at\r\n+\r\n+      http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+  Unless required by applicable law or agreed to in writing, software\r\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+  See the License for the specific language governing permissions and\r\n+  limitations under the License.\r\n+-->\r\n+<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+  xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\r\n+                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n+  version=\"3.0\">\r\n+\r\n+    <servlet>\r\n+        <servlet-name>default</servlet-name>\r\n+        <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\r\n+        <init-param>\r\n+            <param-name>debug</param-name>\r\n+            <param-value>0</param-value>\r\n+        </init-param>\r\n+        <init-param>\r\n+            <param-name>listings</param-name>\r\n+            <param-value>false</param-value>\r\n+        </init-param>\r\n+        <load-on-startup>1</load-on-startup>\r\n+    </servlet>\r\n+\r\n+\r\n+\r\n+    <session-config>\r\n+        <session-timeout>30</session-timeout>\r\n+    </session-config>\r\n+\r\n+    \r\n+    <display-name>commendans</display-name>\r\n+	\r\n+	<context-param>\r\n+        <param-name>environment</param-name>\r\n+        <param-value>heroku</param-value>\r\n+    </context-param>\r\n+\r\n+</web-app>\r\n','NEW',57,13),(105,'@@ -0,0 +1,37 @@\r\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n+<!--\r\n+  Licensed to the Apache Software Foundation (ASF) under one or more\r\n+  contributor license agreements.  See the NOTICE file distributed with\r\n+  this work for additional information regarding copyright ownership.\r\n+  The ASF licenses this file to You under the Apache License, Version 2.0\r\n+  (the \"License\"); you may not use this file except in compliance with\r\n+  the License.  You may obtain a copy of the License at\r\n+\r\n+      http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+  Unless required by applicable law or agreed to in writing, software\r\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+  See the License for the specific language governing permissions and\r\n+  limitations under the License.\r\n+-->\r\n+<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+  xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\r\n+                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n+  version=\"3.0\">\r\n+\r\n+\r\n+    <session-config>\r\n+        <session-timeout>30</session-timeout>\r\n+    </session-config>\r\n+\r\n+    \r\n+    <display-name>commendans</display-name>\r\n+	\r\n+	<context-param>\r\n+        <param-name>environment</param-name>\r\n+        <param-value>heroku</param-value>\r\n+    </context-param>\r\n+\r\n+</web-app>\r\n','NEW',58,13),(106,'@@ -1,8 +1,39 @@\r\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n-	xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"\r\n-	xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n-	id=\"WebApp_ID\" version=\"3.0\">\r\n-	<display-name>commendans</display-name>\r\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n+<!--\r\n+  Licensed to the Apache Software Foundation (ASF) under one or more\r\n+  contributor license agreements.  See the NOTICE file distributed with\r\n+  this work for additional information regarding copyright ownership.\r\n+  The ASF licenses this file to You under the Apache License, Version 2.0\r\n+  (the \"License\"); you may not use this file except in compliance with\r\n+  the License.  You may obtain a copy of the License at\r\n+\r\n+      http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+  Unless required by applicable law or agreed to in writing, software\r\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+  See the License for the specific language governing permissions and\r\n+  limitations under the License.\r\n+-->\r\n+<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+  xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\r\n+                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n+  version=\"3.0\">\r\n+\r\n+\r\n+\r\n+\r\n+    <session-config>\r\n+        <session-timeout>30</session-timeout>\r\n+    </session-config>\r\n+\r\n+    \r\n+    <display-name>commendans</display-name>\r\n 	\r\n-</web-app>\r\n\\ No newline at end of file\r\n+	<context-param>\r\n+        <param-name>environment</param-name>\r\n+        <param-value>heroku</param-value>\r\n+    </context-param>\r\n+\r\n+</web-app>\r\n','DEFAULT',15,13),(107,'@@ -1,12 +1,20 @@\r\n package br.ime.usp.commendans.components;\r\n \r\n+import static org.mockito.Mockito.mock;\r\n+import static org.mockito.Mockito.when;\r\n+\r\n+import javax.servlet.ServletContext;\r\n+\r\n+import org.junit.Ignore;\r\n import org.junit.Test;\r\n \r\n public class SessionFactoryCreatorTest {\r\n \r\n-    @Test\r\n+    @Test @Ignore\r\n     public void shouldGetSessionFactory() {\r\n-        SessionFactoryCreator sfc = new SessionFactoryCreator();\r\n+        ServletContext context = mock(ServletContext.class);\r\n+        when(context.getInitParameter(\"environment\")).thenReturn(\"heroku\");\r\n+        SessionFactoryCreator sfc = new SessionFactoryCreator(context);\r\n         sfc.create();\r\n     }\r\n \r\n','DEFAULT',54,13),(108,'@@ -33,6 +33,10 @@\r\n \r\n 		<!-- commendans dependencies -->\r\n 		<dependency org=\"com.google.code.gson\" name=\"gson\" rev=\"2.2.2\"/>\r\n+		<dependency org=\"com.google.code.gson\" name=\"gson\" rev=\"2.2.2\"/>\r\n+		\r\n+		<dependency org=\"org.eclipse.jetty\" name=\"jetty-webapp\" rev=\"7.4.4.v20110707\"/>\r\n+		<dependency org=\"org.mortbay.jetty\" name=\"jsp-2.1-glassfish\" rev=\"2.1.v20100127\" />\r\n 		\r\n 		<!-- Test dependencies -->\r\n 		<dependency org=\"junit\" name=\"junit\" rev=\"4.8.2\" conf=\"test->default\" />\r\n','DEFAULT',12,14),(109,'@@ -51,6 +51,9 @@\r\n 				<groupId>org.apache.maven.plugins</groupId>\r\n 				<artifactId>maven-war-plugin</artifactId>\r\n 				<version>2.1.1</version>\r\n+				<configuration>\r\n+    					<webXml>src/main/webapp/WEB-INF/web-heroku.xml</webXml>        \r\n+  				</configuration>\r\n 			</plugin>\r\n 			<plugin>\r\n 				<groupId>org.mortbay.jetty</groupId>\r\n@@ -80,7 +83,7 @@\r\n                             <extraJvmArguments>-Xmx512m</extraJvmArguments>\r\n                             <programs>\r\n                                 <program>\r\n-                                    <mainClass>Main</mainClass>\r\n+                                    <mainClass>br.ime.usp.commendans.runner.Runner</mainClass>\r\n                                     <name>webapp</name>\r\n                                 </program>\r\n                             </programs>\r\n@@ -202,6 +205,16 @@\r\n 		  <artifactId>hsqldb</artifactId>\r\n 		  <version>2.2.8</version>\r\n 		</dependency>\r\n+		<dependency>\r\n+			<groupId>org.eclipse.jetty</groupId>\r\n+			<artifactId>jetty-webapp</artifactId>\r\n+			<version>7.4.4.v20110707</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+			<groupId>org.mortbay.jetty</groupId>\r\n+			<artifactId>jsp-2.1-glassfish</artifactId>\r\n+			<version>2.1.v20100127</version>\r\n+		</dependency>\r\n 		<!-- Provided dependencies -->\r\n 	</dependencies>\r\n \r\n','DEFAULT',56,14),(110,'@@ -0,0 +1,25 @@\r\n+package br.ime.usp.commendans.runner;\r\n+\r\n+import org.eclipse.jetty.server.Server;\r\n+import org.eclipse.jetty.webapp.WebAppContext;\r\n+\r\n+public class Runner {\r\n+    \r\n+    public static void main(String[] args) throws Exception {\r\n+        String webappDirLocation = \"src/main/webapp/\";\r\n+        String webPort = System.getenv(\"PORT\");\r\n+        if (webPort == null || webPort.isEmpty()) {\r\n+            webPort = \"8080\";\r\n+        }\r\n+        Server server = new Server(Integer.valueOf(webPort));\r\n+        WebAppContext root = new WebAppContext();\r\n+        root.setContextPath(\"/\");\r\n+        root.setDescriptor(webappDirLocation + \"/WEB-INF/web.xml\");\r\n+        root.setResourceBase(webappDirLocation);\r\n+        root.setParentLoaderPriority(true);\r\n+        server.setHandler(root);\r\n+        server.start();\r\n+        server.join();\r\n+    }\r\n+    \r\n+}\r\n\\ No newline at end of file\r\n','NEW',59,14),(111,'@@ -6,11 +6,11 @@\r\n     <session-factory>\r\n     \r\n     	<!-- connection pool configs -->\r\n-	    <property name=\"hibernate.c3p0.acquire_increment\">1</property> \r\n-		<property name=\"hibernate.c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n-		<property name=\"hibernate.c3p0.max_size\">15</property> \r\n-		<property name=\"hibernate.c3p0.min_size\">1</property> \r\n-		<property name=\"hibernate.c3p0.timeout\">600</property>\r\n+<!-- 	    <property name=\"hibernate.c3p0.acquire_increment\">1</property>  -->\r\n+<!-- 		<property name=\"hibernate.c3p0.idle_test_period\">100</property> seconds  -->\r\n+<!-- 		<property name=\"hibernate.c3p0.max_size\">15</property>  -->\r\n+<!-- 		<property name=\"hibernate.c3p0.min_size\">1</property>  -->\r\n+<!-- 		<property name=\"hibernate.c3p0.timeout\">600</property> -->\r\n     \r\n         <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n         <property name=\"show_sql\">false</property>\r\n','DEFAULT',53,15),(112,'@@ -57,7 +57,7 @@ public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n             LOG.info(\"dbUrl: \" + dbUrl);\r\n             Configuration configuration = new Configuration().configure(\"/hibernate-heroku.cfg.xml\");\r\n             configuration.setProperty(\"hibernate.connection.url\", dbUrl);\r\n-            configuration.setProperty(\"hibernate.connection.driver_class\", \"com.mysql.jdbc.Driver\");\r\n+            configuration.setProperty(\"hibernate.connection.driver_class\", \"org.postgresql.Driver\");\r\n             configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\r\n             configuration.setProperty(\"hibernate.connection.username\", username);\r\n             configuration.setProperty(\"hibernate.connection.password\", password);\r\n','DEFAULT',52,16),(113,'@@ -215,6 +215,12 @@\r\n 			<artifactId>jsp-2.1-glassfish</artifactId>\r\n 			<version>2.1.v20100127</version>\r\n 		</dependency>\r\n+		<dependency>\r\n+			<groupId>postgresql</groupId>\r\n+			<artifactId>postgresql</artifactId>\r\n+			<version>9.1-901.jdbc4</version>\r\n+		</dependency>\r\n+            \r\n 		<!-- Provided dependencies -->\r\n 	</dependencies>\r\n \r\n','DEFAULT',56,17),(114,'@@ -49,7 +49,7 @@ public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n \r\n             String username = dbUri.getUserInfo().split(\":\")[0];\r\n             String password = dbUri.getUserInfo().split(\":\")[1];\r\n-            String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + \':\' + dbUri.getPort() + \"/\" + dbUri.getPort();\r\n+            String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + \':\' + dbUri.getPort()  + dbUri.getPath();\r\n             \r\n             LOG.info(\"using heroku specific confs\");\r\n             LOG.info(\"username: \" + username);\r\n','DEFAULT',52,18),(115,'@@ -64,7 +64,6 @@ public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n             \r\n             sessionFactory = configuration.buildSessionFactory();\r\n         } else {\r\n-            LOG.info(\"using heroku specific normal confs\");\r\n             sessionFactory = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n         }\r\n     }\r\n','DEFAULT',52,19),(116,'@@ -0,0 +1,23 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.hibernate.Session;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+\r\n+@Component\r\n+public class CustomerDao {\r\n+    private final Session session;\r\n+\r\n+    public CustomerDao(Session session) {\r\n+        this.session = session;\r\n+    }\r\n+    \r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public List<Customer> list() {\r\n+        session.createQuery(\"select customer from Customer customer join fetch customer.items\");\r\n+        return session.createCriteria(Customer.class).list();\r\n+    }\r\n+}\r\n','NEW',60,19),(117,'@@ -1,23 +0,0 @@\r\n-package br.ime.usp.commendans.dao;\r\n-\r\n-import java.util.List;\r\n-\r\n-import org.hibernate.Session;\r\n-\r\n-import br.com.caelum.vraptor.ioc.Component;\r\n-import br.ime.usp.commendans.model.User;\r\n-\r\n-@Component\r\n-public class UserDao {\r\n-    private final Session session;\r\n-\r\n-    public UserDao(Session session) {\r\n-        this.session = session;\r\n-    }\r\n-    \r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public List<User> list() {\r\n-        session.createQuery(\"select user from User user join fetch user.items\");\r\n-        return session.createCriteria(User.class).list();\r\n-    }\r\n-}\r\n','DELETED',42,19),(118,'@@ -6,18 +6,18 @@ import javax.annotation.PostConstruct;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n-import br.ime.usp.commendans.dao.UserDao;\r\n+import br.ime.usp.commendans.dao.CustomerDao;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n-import br.ime.usp.commendans.model.User;\r\n+import br.ime.usp.commendans.model.Customer;\r\n \r\n @Component\r\n public class ItemToItemRecommenderCreator implements ComponentFactory<ItemToItemRecommender> {\r\n-    private final UserDao dao;\r\n+    private final CustomerDao dao;\r\n     private final ItemToItemRecommenderFactory factory;\r\n     private ItemToItemRecommender itemToItemRecommender;\r\n \r\n-    public ItemToItemRecommenderCreator(UserDao dao, ItemToItemRecommenderFactory factory) {\r\n+    public ItemToItemRecommenderCreator(CustomerDao dao, ItemToItemRecommenderFactory factory) {\r\n         this.dao = dao;\r\n         this.factory = factory;\r\n     }\r\n@@ -29,8 +29,8 @@ public class ItemToItemRecommenderCreator implements ComponentFactory<ItemToItem\r\n     \r\n     @PostConstruct\r\n     public void create() {\r\n-        List<User> users = dao.list();\r\n-        for (User user : users) {\r\n+        List<Customer> users = dao.list();\r\n+        for (Customer user : users) {\r\n             factory.addUser(user);\r\n         }\r\n         this.itemToItemRecommender = factory.build();\r\n','DEFAULT',43,19),(119,'@@ -8,29 +8,29 @@ import java.util.Set;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.ime.usp.commendans.model.Item;\r\n-import br.ime.usp.commendans.model.User;\r\n+import br.ime.usp.commendans.model.Customer;\r\n \r\n @Component\r\n public class ItemToItemRecommenderFactory {\r\n \r\n-    private Map<Item, List<User>> usersByItemBought;\r\n+    private Map<Item, List<Customer>> usersByItemBought;\r\n     private HashMap<Item, ItemToItemsAssociation> associations;\r\n     \r\n     public ItemToItemRecommenderFactory() {\r\n-        usersByItemBought = new HashMap<Item, List<User>>();\r\n+        usersByItemBought = new HashMap<Item, List<Customer>>();\r\n     }\r\n     \r\n-    public void addUser(User user) {\r\n+    public void addUser(Customer user) {\r\n         List<Item> items = user.itemsBought();\r\n         for (Item item : items) {\r\n             store(item, user);\r\n         }\r\n     }\r\n \r\n-    private void store(Item item, User user) {\r\n-        List<User> users = usersByItemBought.get(item);\r\n+    private void store(Item item, Customer user) {\r\n+        List<Customer> users = usersByItemBought.get(item);\r\n         if (users == null) {\r\n-            users = new ArrayList<User>();\r\n+            users = new ArrayList<Customer>();\r\n         }\r\n         users.add(user);\r\n         usersByItemBought.put(item, users);\r\n@@ -42,8 +42,8 @@ public class ItemToItemRecommenderFactory {\r\n         Set<Item> items = usersByItemBought.keySet();\r\n         for (Item item : items) {\r\n             ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n-            List<User> users = usersByItemBought.get(item);\r\n-            for (User user : users) {\r\n+            List<Customer> users = usersByItemBought.get(item);\r\n+            for (Customer user : users) {\r\n                 List<Item> boughtTogether = user.itemsBought();\r\n                 System.out.println(item + \" -> \" +boughtTogether);\r\n                 for (Item i : boughtTogether) {\r\n','DEFAULT',34,19),(120,'@@ -0,0 +1,45 @@\r\n+package br.ime.usp.commendans.model;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.ManyToMany;\r\n+\r\n+@Entity\r\n+public class Customer {\r\n+    \r\n+    @Id @GeneratedValue\r\n+    private Long id;\r\n+\r\n+    @ManyToMany\r\n+    private List<Item> items;\r\n+    \r\n+    @Deprecated\r\n+    public Customer() {\r\n+    }\r\n+\r\n+    public Customer(List<Item> items, Long id) {\r\n+        this.items = items;\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public List<Item> itemsBought() {\r\n+        return items;\r\n+    }\r\n+    \r\n+    @Override\r\n+    public String toString() {\r\n+        return \"User \" + id;\r\n+    }\r\n+\r\n+    public void add(Item item) {\r\n+        items.add(item);\r\n+    }\r\n+    \r\n+    public List<Item> getItems() {\r\n+        return items;\r\n+    }\r\n+\r\n+}\r\n','NEW',61,19),(121,'@@ -1,45 +0,0 @@\r\n-package br.ime.usp.commendans.model;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.ManyToMany;\r\n-\r\n-@Entity\r\n-public class User {\r\n-    \r\n-    @Id @GeneratedValue\r\n-    private Long id;\r\n-\r\n-    @ManyToMany\r\n-    private List<Item> items;\r\n-    \r\n-    @Deprecated\r\n-    public User() {\r\n-    }\r\n-\r\n-    public User(List<Item> items, Long id) {\r\n-        this.items = items;\r\n-        this.id = id;\r\n-    }\r\n-\r\n-    public List<Item> itemsBought() {\r\n-        return items;\r\n-    }\r\n-    \r\n-    @Override\r\n-    public String toString() {\r\n-        return \"User \" + id;\r\n-    }\r\n-\r\n-    public void add(Item item) {\r\n-        items.add(item);\r\n-    }\r\n-    \r\n-    public List<Item> getItems() {\r\n-        return items;\r\n-    }\r\n-\r\n-}\r\n','DELETED',29,19),(122,'@@ -16,7 +16,7 @@ import org.hibernate.SessionFactory;\r\n import org.hibernate.cfg.Configuration;\r\n \r\n import br.ime.usp.commendans.model.Item;\r\n-import br.ime.usp.commendans.model.User;\r\n+import br.ime.usp.commendans.model.Customer;\r\n \r\n public class DataImporter {\r\n     \r\n@@ -35,20 +35,20 @@ public class DataImporter {\r\n     }\r\n \r\n     public void importData(String file) {\r\n-        HashMap<Long, User> users = new HashMap<Long, User>();\r\n+        HashMap<Long, Customer> users = new HashMap<Long, Customer>();\r\n         HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n         InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n         BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n         String line = safeReadLine(reader);\r\n         \r\n         while (line != null) {\r\n-            logger.info(line);\r\n+            logger.debug(line);\r\n             List<String> row = Arrays.asList(line.split(\",\"));\r\n             long id = Long.parseLong(row.get(0));\r\n             long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n-            User user = users.get(id);\r\n+            Customer user = users.get(id);\r\n             if (user == null) {\r\n-                user = new User(new ArrayList<Item>(), id);\r\n+                user = new Customer(new ArrayList<Item>(), id);\r\n             }\r\n             Item item = items.get(itemId);\r\n             if (item == null) {\r\n@@ -60,18 +60,18 @@ public class DataImporter {\r\n             items.put(itemId, item);\r\n         }\r\n         \r\n-        logger.info(\"persisting\");\r\n+        logger.debug(\"persisting\");\r\n         session.getTransaction().begin();\r\n         for (Item item : items.values()) {\r\n             session.save(item);\r\n         }\r\n         \r\n-        Collection<User> allUsers = users.values();\r\n-        for (User user : allUsers) {\r\n+        Collection<Customer> allUsers = users.values();\r\n+        for (Customer user : allUsers) {\r\n             session.save(user);\r\n         }\r\n         session.getTransaction().commit();\r\n-        logger.info(\"finished persisting\");\r\n+        logger.debug(\"finished persisting\");\r\n     }\r\n \r\n     private String safeReadLine(BufferedReader reader) {\r\n','DEFAULT',36,19),(123,'@@ -12,12 +12,12 @@\r\n <!-- 		<property name=\"hibernate.c3p0.min_size\">1</property>  -->\r\n <!-- 		<property name=\"hibernate.c3p0.timeout\">600</property> -->\r\n     \r\n-        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n-        <mapping class=\"br.ime.usp.commendans.model.User\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n \r\n     </session-factory>\r\n </hibernate-configuration>\r\n','DEFAULT',53,19),(124,'@@ -17,13 +17,13 @@\r\n         <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\r\n         <property name=\"connection.username\">root</property>\r\n         <property name=\"connection.password\"></property>\r\n-        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n         <property name=\"hibernate.generate_statistics\">true</property>\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n-        <mapping class=\"br.ime.usp.commendans.model.User\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n \r\n     </session-factory>\r\n </hibernate-configuration>\r\n','DEFAULT',37,19),(125,'@@ -9,12 +9,12 @@\r\n 	</appender>\r\n \r\n 	<category name=\"org.hibernate\">\r\n-		<priority value=\"DEBUG\" />\r\n+		<priority value=\"INFO\" />\r\n 		<appender-ref ref=\"stdout\" />\r\n 	</category>\r\n 	\r\n 	<category name=\"br.ime.usp\">\r\n-		<priority value=\"DEBUG\" />\r\n+		<priority value=\"INFO\" />\r\n 		<appender-ref ref=\"stdout\" />\r\n 	</category>\r\n \r\n','DEFAULT',38,19),(126,'@@ -11,7 +11,7 @@ public class UserDaoTest {\r\n     public void shouldFindUsers() {\r\n         SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n         Session session = sf.openSession();\r\n-        UserDao userDao = new UserDao(session);\r\n+        CustomerDao userDao = new CustomerDao(session);\r\n         userDao.list();\r\n     }\r\n \r\n','DEFAULT',48,19),(127,'@@ -13,7 +13,7 @@ import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\n import br.ime.usp.commendans.itemtoitem.Tuple;\r\n import br.ime.usp.commendans.model.Item;\r\n-import br.ime.usp.commendans.model.User;\r\n+import br.ime.usp.commendans.model.Customer;\r\n \r\n public class ItemToItemRecommenderFactoryTest {\r\n \r\n@@ -24,10 +24,10 @@ public class ItemToItemRecommenderFactoryTest {\r\n         Item item2 = new Item(2l);\r\n         Item item3 = new Item(3l);\r\n         Item item4 = new Item(4l);\r\n-        User user1 = new User(Arrays.asList(item1, item3), 1l);\r\n-        User user2 = new User(Arrays.asList(item2, item4), 2l);\r\n-        User user3 = new User(Arrays.asList(item1, item2, item3), 3l);\r\n-        User user4 = new User(Arrays.asList(item3, item4), 4l);\r\n+        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l);\r\n+        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l);\r\n+        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l);\r\n+        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l);\r\n         factory.addUser(user1);\r\n         factory.addUser(user2);\r\n         factory.addUser(user3);\r\n','DEFAULT',30,19),(128,'@@ -6,7 +6,6 @@ import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n-import br.ime.usp.commendans.util.DataImporter;\r\n \r\n \r\n @Resource\r\n@@ -27,8 +26,8 @@ public class IndexController {\r\n     \r\n     @Get(\"/import/askjdhakjshdakjshd\")\r\n     public void importData() {\r\n-        DataImporter dataImporter = new DataImporter(session);\r\n-        dataImporter.importData(\"/orders.csv\");\r\n+        //DataImporter dataImporter = new DataImporter(session);\r\n+        //dataImporter.importData(\"/orders.csv\");\r\n         result.use(Results.http()).body(\"<html><body>finished persisting</body></html>\");\r\n     }\r\n }\r\n','DEFAULT',26,20),(129,'@@ -31,17 +31,17 @@ public class ItemToItemController {\r\n     public void recommend(Long itemId) {\r\n         Item item = itemDao.find(itemId);\r\n         ItemVector recommendend = itemToItem.recommendendItemsFor(item);\r\n-        serializedResult(recommendend.getTuples());\r\n+        serializeResult(recommendend.getTuples());\r\n     }\r\n     \r\n     @Get(\"/recommend/items/\")\r\n     public void recommend(List<Long> itemsIds) {\r\n         List<Item> items = itemDao.find(itemsIds);\r\n         List<Tuple> recommendend = itemToItem.recommendendItemsFor(items).getTuples();\r\n-        serializedResult(recommendend);\r\n+        serializeResult(recommendend);\r\n     }\r\n \r\n-    private void serializedResult(List<Tuple> recommendend) {\r\n+    private void serializeResult(List<Tuple> recommendend) {\r\n         result.use(Results.http())\r\n             .addHeader(\"content-type\", \"application/json\")\r\n             .body(serializer.toJson(recommendend));\r\n','DEFAULT',40,20),(130,'@@ -4,6 +4,7 @@ import java.util.List;\r\n \r\n import javax.annotation.PostConstruct;\r\n \r\n+import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n import br.ime.usp.commendans.dao.CustomerDao;\r\n@@ -11,7 +12,7 @@ import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n import br.ime.usp.commendans.model.Customer;\r\n \r\n-@Component\r\n+@Component @ApplicationScoped\r\n public class ItemToItemRecommenderCreator implements ComponentFactory<ItemToItemRecommender> {\r\n     private final CustomerDao dao;\r\n     private final ItemToItemRecommenderFactory factory;\r\n','DEFAULT',43,20),(131,'@@ -14,7 +14,7 @@\r\n     \r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n-        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n','DEFAULT',53,20),(132,'@@ -6,6 +6,7 @@ import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n+import br.ime.usp.commendans.util.DataImporter;\r\n \r\n \r\n @Resource\r\n@@ -26,8 +27,8 @@ public class IndexController {\r\n     \r\n     @Get(\"/import/askjdhakjshdakjshd\")\r\n     public void importData() {\r\n-        //DataImporter dataImporter = new DataImporter(session);\r\n-        //dataImporter.importData(\"/orders.csv\");\r\n+        DataImporter dataImporter = new DataImporter(session);\r\n+        dataImporter.importData(\"/orders.csv\");\r\n         result.use(Results.http()).body(\"<html><body>finished persisting</body></html>\");\r\n     }\r\n }\r\n','DEFAULT',26,21),(133,'@@ -4,7 +4,6 @@ import java.util.List;\r\n \r\n import javax.annotation.PostConstruct;\r\n \r\n-import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n import br.ime.usp.commendans.dao.CustomerDao;\r\n@@ -12,7 +11,7 @@ import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n import br.ime.usp.commendans.model.Customer;\r\n \r\n-@Component @ApplicationScoped\r\n+@Component\r\n public class ItemToItemRecommenderCreator implements ComponentFactory<ItemToItemRecommender> {\r\n     private final CustomerDao dao;\r\n     private final ItemToItemRecommenderFactory factory;\r\n','DEFAULT',43,21),(134,'@@ -6,11 +6,12 @@ import java.util.List;\r\n import java.util.Map;\r\n import java.util.Set;\r\n \r\n+import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n import br.com.caelum.vraptor.ioc.Component;\r\n-import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n \r\n-@Component\r\n+@Component @ApplicationScoped\r\n public class ItemToItemRecommenderFactory {\r\n \r\n     private Map<Item, List<Customer>> usersByItemBought;\r\n@@ -45,7 +46,6 @@ public class ItemToItemRecommenderFactory {\r\n             List<Customer> users = usersByItemBought.get(item);\r\n             for (Customer user : users) {\r\n                 List<Item> boughtTogether = user.itemsBought();\r\n-                System.out.println(item + \" -> \" +boughtTogether);\r\n                 for (Item i : boughtTogether) {\r\n                     association.associate(i);\r\n                 }\r\n','DEFAULT',34,21),(135,'@@ -14,7 +14,7 @@\r\n     \r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n-        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n','DEFAULT',53,21),(136,'@@ -18,7 +18,7 @@ import br.ime.usp.commendans.model.Customer;\r\n public class ItemToItemRecommenderFactoryTest {\r\n \r\n     @Test\r\n-    public void shouldBuildRecommender() {\r\n+    public void shouldBuildRecommenderBookExample() {\r\n         ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n         Item item1 = new Item(1l);\r\n         Item item2 = new Item(2l);\r\n','DEFAULT',30,21),(137,'@@ -14,7 +14,7 @@\r\n     \r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n-        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n','DEFAULT',53,22),(138,'@@ -14,46 +14,49 @@ import br.ime.usp.commendans.model.Item;\r\n @Component @ApplicationScoped\r\n public class ItemToItemRecommenderFactory {\r\n \r\n-    private Map<Item, List<Customer>> usersByItemBought;\r\n+    private Map<Item, List<Customer>> customerByItemBought;\r\n     private HashMap<Item, ItemToItemsAssociation> associations;\r\n     \r\n     public ItemToItemRecommenderFactory() {\r\n-        usersByItemBought = new HashMap<Item, List<Customer>>();\r\n+        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n     }\r\n     \r\n     public void addUser(Customer user) {\r\n-        List<Item> items = user.itemsBought();\r\n-        for (Item item : items) {\r\n+        for (Item item : user.itemsBought()) {\r\n             store(item, user);\r\n         }\r\n     }\r\n \r\n     private void store(Item item, Customer user) {\r\n-        List<Customer> users = usersByItemBought.get(item);\r\n+        List<Customer> users = customerByItemBought.get(item);\r\n         if (users == null) {\r\n             users = new ArrayList<Customer>();\r\n         }\r\n         users.add(user);\r\n-        usersByItemBought.put(item, users);\r\n+        customerByItemBought.put(item, users);\r\n     }\r\n     \r\n     \r\n     public ItemToItemRecommender build() {\r\n         associations = new HashMap<Item, ItemToItemsAssociation>();\r\n-        Set<Item> items = usersByItemBought.keySet();\r\n+        Set<Item> items = customerByItemBought.keySet();\r\n         for (Item item : items) {\r\n-            ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n-            List<Customer> users = usersByItemBought.get(item);\r\n-            for (Customer user : users) {\r\n-                List<Item> boughtTogether = user.itemsBought();\r\n-                for (Item i : boughtTogether) {\r\n-                    association.associate(i);\r\n-                }\r\n-            }\r\n-            associations.put(item, association);\r\n+            associate(item);\r\n         }\r\n         return new ItemToItemRecommender(associations);\r\n     }\r\n+\r\n+    private void associate(Item item) {\r\n+        ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n+        List<Customer> customers = customerByItemBought.get(item);\r\n+        for (Customer user : customers) {\r\n+            List<Item> boughtTogether = user.itemsBought();\r\n+            for (Item i : boughtTogether) {\r\n+                association.associate(i);\r\n+            }\r\n+        }\r\n+        associations.put(item, association);\r\n+    }\r\n     \r\n     public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n         return associations;\r\n','DEFAULT',34,23),(139,'@@ -38,8 +38,4 @@ public class Customer {\r\n         items.add(item);\r\n     }\r\n     \r\n-    public List<Item> getItems() {\r\n-        return items;\r\n-    }\r\n-\r\n }\r\n','DEFAULT',61,23),(140,'@@ -1,11 +1,15 @@\r\n package br.ime.usp.commendans.infra;\r\n \r\n+import java.util.Arrays;\r\n import java.util.List;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.ime.usp.commendans.itemtoitem.Tuple;\r\n \r\n+import com.google.gson.ExclusionStrategy;\r\n+import com.google.gson.FieldAttributes;\r\n import com.google.gson.Gson;\r\n+import com.google.gson.GsonBuilder;\r\n \r\n @Component\r\n public class TupleJsonSerializer {\r\n@@ -13,7 +17,8 @@ public class TupleJsonSerializer {\r\n     private final Gson gson;\r\n \r\n     public TupleJsonSerializer() {\r\n-        this.gson = new Gson();\r\n+        ExclusionStrategy strategy = new IncludeAllowedAttributes();\r\n+        this.gson = new GsonBuilder().addSerializationExclusionStrategy(strategy).create();\r\n     }\r\n \r\n     public String toJson(Tuple tuple) {\r\n@@ -23,6 +28,24 @@ public class TupleJsonSerializer {\r\n     public String toJson(List<Tuple> tuples) {\r\n         return gson.toJson(tuples);\r\n     }\r\n+    \r\n+    private class IncludeAllowedAttributes implements ExclusionStrategy {\r\n+\r\n+        private List<String> allowedAttributes = Arrays.asList(\"item\", \"id\", \"value\");\r\n+\r\n+        @Override\r\n+        public boolean shouldSkipClass(Class<?> arg0) {\r\n+            return false;\r\n+        }\r\n+\r\n+        @Override\r\n+        public boolean shouldSkipField(FieldAttributes attr) {\r\n+            String name = attr.getName();\r\n+            boolean allowedAttribute = allowedAttributes.contains(name); \r\n+            return !allowedAttribute;\r\n+        }\r\n+        \r\n+    }\r\n \r\n     \r\n }\r\n','DEFAULT',45,24),(141,'@@ -0,0 +1,12 @@\r\n+package br.ime.usp.commendans.model;\r\n+\r\n+public class Application {\r\n+    private String name;\r\n+    private String key;\r\n+    \r\n+    public Application(String name, String key) {\r\n+        this.name = name;\r\n+        this.key = key;\r\n+    }\r\n+\r\n+}\r\n','NEW',62,24),(142,'@@ -6,6 +6,7 @@ import javax.persistence.Entity;\r\n import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n import javax.persistence.ManyToMany;\r\n+import javax.persistence.ManyToOne;\r\n \r\n @Entity\r\n public class Customer {\r\n@@ -16,13 +17,17 @@ public class Customer {\r\n     @ManyToMany\r\n     private List<Item> items;\r\n     \r\n+    @ManyToOne\r\n+    private Application app;\r\n+    \r\n     @Deprecated\r\n     public Customer() {\r\n     }\r\n \r\n-    public Customer(List<Item> items, Long id) {\r\n+    public Customer(List<Item> items, Long id, Application app) {\r\n         this.items = items;\r\n         this.id = id;\r\n+        this.app = app;\r\n     }\r\n \r\n     public List<Item> itemsBought() {\r\n','DEFAULT',61,24),(143,'@@ -2,18 +2,23 @@ package br.ime.usp.commendans.model;\r\n \r\n import javax.persistence.Entity;\r\n import javax.persistence.Id;\r\n+import javax.persistence.ManyToOne;\r\n \r\n @Entity\r\n public class Item {\r\n     @Id\r\n     private Long id;\r\n+    \r\n+    @ManyToOne\r\n+    private Application app;\r\n \r\n     @Deprecated\r\n     protected Item() {\r\n     }\r\n     \r\n-    public Item(Long id) {\r\n+    public Item(Long id, Application app) {\r\n         this.id = id;\r\n+        this.app = app;\r\n     }\r\n     \r\n     @Override\r\n','DEFAULT',28,24),(144,'@@ -15,8 +15,9 @@ import org.hibernate.Session;\r\n import org.hibernate.SessionFactory;\r\n import org.hibernate.cfg.Configuration;\r\n \r\n-import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n \r\n public class DataImporter {\r\n     \r\n@@ -40,6 +41,7 @@ public class DataImporter {\r\n         InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n         BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n         String line = safeReadLine(reader);\r\n+        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n         \r\n         while (line != null) {\r\n             logger.debug(line);\r\n@@ -48,11 +50,11 @@ public class DataImporter {\r\n             long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n             Customer user = users.get(id);\r\n             if (user == null) {\r\n-                user = new Customer(new ArrayList<Item>(), id);\r\n+                user = new Customer(new ArrayList<Item>(), id, cdc);\r\n             }\r\n             Item item = items.get(itemId);\r\n             if (item == null) {\r\n-                item = new Item(itemId);\r\n+                item = new Item(itemId, cdc);\r\n             }\r\n             user.add(item);\r\n             line = safeReadLine(reader);\r\n','DEFAULT',36,24),(145,'@@ -12,22 +12,24 @@ import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\n import br.ime.usp.commendans.itemtoitem.Tuple;\r\n-import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n \r\n public class ItemToItemRecommenderFactoryTest {\r\n \r\n     @Test\r\n     public void shouldBuildRecommenderBookExample() {\r\n         ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n-        Item item1 = new Item(1l);\r\n-        Item item2 = new Item(2l);\r\n-        Item item3 = new Item(3l);\r\n-        Item item4 = new Item(4l);\r\n-        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l);\r\n-        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l);\r\n-        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l);\r\n-        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l);\r\n+        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n+        Item item1 = new Item(1l, cdc);\r\n+        Item item2 = new Item(2l, cdc);\r\n+        Item item3 = new Item(3l, cdc);\r\n+        Item item4 = new Item(4l, cdc);\r\n+        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l, cdc);\r\n+        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l, cdc);\r\n+        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l, cdc);\r\n+        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l, cdc);\r\n         factory.addUser(user1);\r\n         factory.addUser(user2);\r\n         factory.addUser(user3);\r\n','DEFAULT',30,24),(146,'@@ -7,6 +7,7 @@ import java.util.Arrays;\r\n import org.junit.Test;\r\n \r\n import br.ime.usp.commendans.itemtoitem.Tuple;\r\n+import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n public class TupleJsonSerializerTest {\r\n@@ -14,14 +15,16 @@ public class TupleJsonSerializerTest {\r\n     @Test\r\n     public void shouldSerializeATuple() {\r\n         TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n-        String json = serializer.toJson(new Tuple(new Item(1l), 10.0));\r\n+        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        String json = serializer.toJson(new Tuple(new Item(1l, cdc), 10.0));\r\n         assertEquals(\"{\\\"item\\\":{\\\"id\\\":1},\\\"value\\\":10.0}\", json);\r\n     }\r\n     \r\n     @Test\r\n     public void shouldSerializeATupleList() {\r\n         TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n-        String json = serializer.toJson(Arrays.asList(new Tuple(new Item(1l), 10.0)));\r\n+        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        String json = serializer.toJson(Arrays.asList(new Tuple(new Item(1l, cdc), 10.0)));\r\n         assertEquals(\"[{\\\"item\\\":{\\\"id\\\":1},\\\"value\\\":10.0}]\", json);\r\n     }\r\n \r\n','DEFAULT',49,24),(147,'@@ -8,16 +8,18 @@ import java.util.List;\r\n \r\n import org.junit.Test;\r\n \r\n+import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n public class ItemVectorTest {\r\n \r\n     @Test\r\n     public void test() {\r\n-        Item item1 = new Item(1l);\r\n-        Item item2 = new Item(2l);\r\n-        Item item3 = new Item(3l);\r\n-        Item item4 = new Item(4l);\r\n+        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        Item item1 = new Item(1l, cdc);\r\n+        Item item2 = new Item(2l, cdc);\r\n+        Item item3 = new Item(3l, cdc);\r\n+        Item item4 = new Item(4l, cdc);\r\n         List<Tuple> tuples = asList(new Tuple(item1, 11.0), new Tuple(item2, 8.0), new Tuple(item3, 2.0));\r\n         ItemVector itemVector1 = new ItemVector(new HashSet<Tuple>(tuples));\r\n         tuples = asList(new Tuple(item4, 10.0), new Tuple(item3, 7.0));\r\n','DEFAULT',50,24),(148,'@@ -3,6 +3,7 @@\r\n 	<classpathentry kind=\"src\" path=\"src/main/java\"/>\r\n 	<classpathentry kind=\"src\" path=\"src/main/resources\"/>\r\n 	<classpathentry kind=\"src\" path=\"src/test/java\"/>\r\n+	<classpathentry kind=\"src\" path=\"src/test/resources\"/>\r\n 	<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java\">\r\n 		<attributes>\r\n 			<attribute name=\"owner.project.facets\" value=\"java\"/>\r\n','DEFAULT',1,25),(149,'@@ -1,10 +1,10 @@\r\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n-<project-modules id=\"moduleCoreId\" project-version=\"1.5.0\">\r\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><project-modules id=\"moduleCoreId\" project-version=\"1.5.0\">\r\n     <wb-module deploy-name=\"commendans\">\r\n         <wb-resource deploy-path=\"/\" source-path=\"/src/main/webapp\" tag=\"defaultRootSource\"/>\r\n         <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/java\"/>\r\n         <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/resources\"/>\r\n         <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/test/java\"/>\r\n+        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/test/resources\"/>\r\n         <property name=\"java-output-path\" value=\"/commendans/build/classes\"/>\r\n         <property name=\"context-root\" value=\"commendans\"/>\r\n     </wb-module>\r\n','DEFAULT',6,25),(150,'@@ -8,19 +8,19 @@ import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n import br.ime.usp.commendans.dao.ItemDao;\r\n import br.ime.usp.commendans.infra.TupleJsonSerializer;\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n+import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n import br.ime.usp.commendans.itemtoitem.Tuple;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n @Resource\r\n public class ItemToItemController {\r\n-    private final ItemToItemRecommender itemToItem;\r\n+    private final SingleAppRecommender itemToItem;\r\n     private final ItemDao itemDao;\r\n     private final Result result;\r\n     private final TupleJsonSerializer serializer;\r\n \r\n-    public ItemToItemController(ItemToItemRecommender itemToItem, ItemDao itemDao, Result result, TupleJsonSerializer serializer) {\r\n+    public ItemToItemController(SingleAppRecommender itemToItem, ItemDao itemDao, Result result, TupleJsonSerializer serializer) {\r\n         this.itemToItem = itemToItem;\r\n         this.itemDao = itemDao;\r\n         this.result = result;\r\n','DEFAULT',40,25),(151,'@@ -2,9 +2,11 @@ package br.ime.usp.commendans.dao;\r\n \r\n import java.util.List;\r\n \r\n+import org.hibernate.Query;\r\n import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Customer;\r\n \r\n @Component\r\n@@ -17,7 +19,15 @@ public class CustomerDao {\r\n     \r\n     @SuppressWarnings(\"unchecked\")\r\n     public List<Customer> list() {\r\n-        session.createQuery(\"select customer from Customer customer join fetch customer.items\");\r\n+        Query query = session.createQuery(\"select customer from Customer customer join fetch customer.items\");\r\n         return session.createCriteria(Customer.class).list();\r\n     }\r\n+\r\n+    public List<Customer> findCustomersOf(Application app) {\r\n+        Query query = session.createQuery(\"select customer from Customer customer \" +\r\n+        		\"join fetch customer.items \" +\r\n+        		\"where customer.app.name like :appName\");\r\n+        query.setParameter(\"appName\", app.getName());\r\n+        return query.list();\r\n+    }\r\n }\r\n','DEFAULT',60,25),(152,'@@ -0,0 +1,44 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.annotation.PostConstruct;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n+import br.ime.usp.commendans.dao.CustomerDao;\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n+import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n+\r\n+@Component\r\n+public class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n+    private final CustomerDao dao;\r\n+    private final ItemToItemRecommenderFactory factory;\r\n+    private SingleAppRecommender itemToItemRecommender;\r\n+    private GeneralRecommender recommender;\r\n+\r\n+    public RecommenderCreator(CustomerDao dao, ItemToItemRecommenderFactory factory) {\r\n+        this.dao = dao;\r\n+        this.factory = factory;\r\n+    }\r\n+\r\n+    @Override\r\n+    public GeneralRecommender getInstance() {\r\n+        return recommender;\r\n+    }\r\n+    \r\n+    @PostConstruct\r\n+    public void create() {\r\n+        List<Customer> users = dao.list();\r\n+        this.itemToItemRecommender = buildSingleAppRecommender(users);\r\n+    }\r\n+\r\n+    private SingleAppRecommender buildSingleAppRecommender(List<Customer> users) {\r\n+        for (Customer user : users) {\r\n+            factory.addUser(user);\r\n+        }\r\n+        return factory.build();\r\n+    }\r\n+}\r\n','NEW',63,25),(153,'@@ -37,13 +37,13 @@ public class ItemToItemRecommenderFactory {\r\n     }\r\n     \r\n     \r\n-    public ItemToItemRecommender build() {\r\n+    public SingleAppRecommender build() {\r\n         associations = new HashMap<Item, ItemToItemsAssociation>();\r\n         Set<Item> items = customerByItemBought.keySet();\r\n         for (Item item : items) {\r\n             associate(item);\r\n         }\r\n-        return new ItemToItemRecommender(associations);\r\n+        return new SingleAppRecommender(associations);\r\n     }\r\n \r\n     private void associate(Item item) {\r\n','DEFAULT',34,25),(154,'@@ -0,0 +1,46 @@\r\n+package br.ime.usp.commendans.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.Recommender;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class SingleAppRecommender implements Recommender {\r\n+\r\n+    private final Map<Item, ItemVector> associations;\r\n+\r\n+    public SingleAppRecommender(\r\n+            HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        this.associations = parse(associations);\r\n+    }\r\n+\r\n+    private Map<Item, ItemVector> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        HashMap<Item, ItemVector> map = new HashMap<Item, ItemVector>();\r\n+        Set<Item> items = associations.keySet();\r\n+        for (Item item : items) {\r\n+            ItemToItemsAssociation association = associations.get(item);\r\n+            List<Tuple> tuples = association.toTupleList();\r\n+            map.put(item, new ItemVector(tuples));\r\n+        }\r\n+        return map;\r\n+    }\r\n+\r\n+    @Override\r\n+    public ItemVector recommendendItemsFor(Item item) {\r\n+        return associations.get(item);\r\n+    }\r\n+\r\n+    public ItemVector recommendendItemsFor(List<Item> items) {\r\n+        ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n+        for (Item item : items) {\r\n+            ItemVector other = recommendendItemsFor(item);\r\n+            vector = vector.merge(other);\r\n+        }\r\n+        return vector;\r\n+    }\r\n+\r\n+}\r\n','NEW',64,25),(155,'@@ -1,12 +1,30 @@\r\n package br.ime.usp.commendans.model;\r\n \r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+\r\n+@Entity\r\n public class Application {\r\n+    \r\n+    @Id @GeneratedValue\r\n+    private Long id;\r\n+    \r\n     private String name;\r\n-    private String key;\r\n     \r\n-    public Application(String name, String key) {\r\n+    private String accessKey;\r\n+\r\n+    @Deprecated\r\n+    protected Application() {\r\n+    }\r\n+    \r\n+    public Application(String name, String accessKey) {\r\n         this.name = name;\r\n-        this.key = key;\r\n+        this.accessKey = accessKey;\r\n+    }\r\n+    \r\n+    public String getName() {\r\n+        return name;\r\n     }\r\n \r\n }\r\n','DEFAULT',62,25),(156,'@@ -13,8 +13,10 @@ public class Customer {\r\n     \r\n     @Id @GeneratedValue\r\n     private Long id;\r\n+    \r\n+    private Long appId;\r\n \r\n-    @ManyToMany\r\n+    @ManyToMany()\r\n     private List<Item> items;\r\n     \r\n     @ManyToOne\r\n@@ -24,9 +26,9 @@ public class Customer {\r\n     public Customer() {\r\n     }\r\n \r\n-    public Customer(List<Item> items, Long id, Application app) {\r\n+    public Customer(List<Item> items, Long appId, Application app) {\r\n         this.items = items;\r\n-        this.id = id;\r\n+        this.appId = appId;\r\n         this.app = app;\r\n     }\r\n \r\n@@ -36,11 +38,15 @@ public class Customer {\r\n     \r\n     @Override\r\n     public String toString() {\r\n-        return \"User \" + id;\r\n+        return \"User \" + appId + \" from \" + app;\r\n     }\r\n \r\n     public void add(Item item) {\r\n         items.add(item);\r\n     }\r\n     \r\n+    public Application getApp() {\r\n+        return app;\r\n+    }\r\n+    \r\n }\r\n','DEFAULT',61,25),(157,'@@ -0,0 +1,5 @@\r\n+package br.ime.usp.commendans.recommender;\r\n+\r\n+public class GeneralRecommender {\r\n+\r\n+}\r\n','NEW',65,25),(158,'@@ -24,6 +24,7 @@\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n \r\n     </session-factory>\r\n </hibernate-configuration>\r\n','DEFAULT',37,25),(159,'@@ -9,7 +9,7 @@\r\n 	</appender>\r\n \r\n 	<category name=\"org.hibernate\">\r\n-		<priority value=\"INFO\" />\r\n+		<priority value=\"DEBUG\" />\r\n 		<appender-ref ref=\"stdout\" />\r\n 	</category>\r\n 	\r\n','DEFAULT',38,25),(160,'@@ -0,0 +1,80 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import org.hibernate.Session;\r\n+import org.hibernate.SessionFactory;\r\n+import org.hibernate.cfg.Configuration;\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.BeforeClass;\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class CustomerDaoTest {\r\n+\r\n+    private static Session session;\r\n+    private static CustomerDao userDao;\r\n+    private static Application app;\r\n+\r\n+    @BeforeClass\r\n+    public static void setUpClass() {\r\n+        SessionFactory sf = new Configuration().configure(\r\n+                \"/hibernate.test.cfg.xml\").buildSessionFactory();\r\n+        session = sf.openSession();\r\n+        userDao = new CustomerDao(session);\r\n+        app = new Application(\"cdc\", \"123\");\r\n+        session.save(app);\r\n+    }\r\n+    \r\n+    @Before\r\n+    public void setUp() {\r\n+        session.beginTransaction();\r\n+    }\r\n+    \r\n+    @After\r\n+    public void tearDown() {\r\n+        session.getTransaction().rollback();\r\n+    }\r\n+\r\n+    @Test\r\n+    public void shouldFindUsers() {\r\n+        List<Item> items = Arrays.asList();\r\n+        session.save(new Customer(items, 1l, app));\r\n+        session.save(new Customer(items, 2l, app));\r\n+        session.save(new Customer(items, 3l, app));\r\n+        List<Customer> users = userDao.list();\r\n+        assertEquals(3, users.size());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void shouldFindUsersOfSpecificApp() throws Exception {\r\n+        Item item = new Item(1l, app);\r\n+        List<Item> items = Arrays.asList(item);\r\n+        session.save(new Customer(items, 1l, app));\r\n+        session.save(new Customer(items, 2l, app));\r\n+        session.save(new Customer(items, 3l, app));\r\n+        Application otherApp = new Application(\"gnarus\", \"123\");\r\n+        item = new Item(2l, otherApp);\r\n+        items = Arrays.asList(item);\r\n+        session.save(otherApp);\r\n+        session.save(item);\r\n+        session.save(new Customer(items, 1l, otherApp));\r\n+        session.save(new Customer(items, 2l, otherApp));\r\n+        session.save(new Customer(items, 3l, otherApp));\r\n+\r\n+        List<Customer> customers = userDao.findCustomersOf(app);\r\n+        assertEquals(3, customers.size());\r\n+        assertEquals(\"cdc\", customers.get(0).getApp().getName());\r\n+        assertEquals(\"cdc\", customers.get(1).getApp().getName());\r\n+        assertEquals(\"cdc\", customers.get(2).getApp().getName());\r\n+\r\n+    }\r\n+\r\n+}\r\n','NEW',66,25),(161,'@@ -8,7 +8,7 @@ import java.util.List;\r\n \r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n+import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\n import br.ime.usp.commendans.itemtoitem.Tuple;\r\n@@ -35,7 +35,7 @@ public class ItemToItemRecommenderFactoryTest {\r\n         factory.addUser(user3);\r\n         factory.addUser(user4);\r\n         \r\n-        ItemToItemRecommender recommender = factory.build();\r\n+        SingleAppRecommender recommender = factory.build();\r\n         HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n         \r\n         List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1).getTuples();\r\n','DEFAULT',30,25),(162,'@@ -0,0 +1,30 @@\r\n+<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n+<!DOCTYPE hibernate-configuration PUBLIC\r\n+        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n+        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n+<hibernate-configuration>\r\n+    <session-factory>\r\n+    \r\n+    	<!-- connection pool configs -->\r\n+	    <property name=\"c3p0.acquire_increment\">1</property> \r\n+		<property name=\"c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n+		<property name=\"c3p0.max_size\">15</property> \r\n+		<property name=\"c3p0.min_size\">1</property> \r\n+		<property name=\"c3p0.timeout\">600</property>\r\n+    \r\n+        <property name=\"connection.url\">jdbc:mysql://localhost/commendans_test</property>\r\n+        <property name=\"connection.driver_class\">com.mysql.jdbc.Driver</property>\r\n+        <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\r\n+        <property name=\"connection.username\">root</property>\r\n+        <property name=\"connection.password\"></property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n+        <property name=\"show_sql\">true</property>\r\n+        <property name=\"format_sql\">false</property>\r\n+        <property name=\"hibernate.generate_statistics\">true</property>\r\n+\r\n+        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n+\r\n+    </session-factory>\r\n+</hibernate-configuration>\r\n','NEW',67,25),(163,'@@ -4,5 +4,5 @@ import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n public interface Recommender {\r\n-    public ItemVector recommendendItemsFor(Item item);\r\n+    public ItemVector recommendedItemsFor(Item item);\r\n }\r\n','DEFAULT',31,26),(164,'@@ -8,37 +8,39 @@ import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n import br.ime.usp.commendans.dao.ItemDao;\r\n import br.ime.usp.commendans.infra.TupleJsonSerializer;\r\n-import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n import br.ime.usp.commendans.itemtoitem.Tuple;\r\n import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n \r\n @Resource\r\n public class ItemToItemController {\r\n-    private final SingleAppRecommender itemToItem;\r\n     private final ItemDao itemDao;\r\n     private final Result result;\r\n     private final TupleJsonSerializer serializer;\r\n+    private final GeneralRecommender recommender;\r\n \r\n-    public ItemToItemController(SingleAppRecommender itemToItem, ItemDao itemDao, Result result, TupleJsonSerializer serializer) {\r\n-        this.itemToItem = itemToItem;\r\n+    public ItemToItemController(GeneralRecommender recommender, \r\n+            ItemDao itemDao, Result result, \r\n+            TupleJsonSerializer serializer) {\r\n+        this.recommender = recommender;\r\n         this.itemDao = itemDao;\r\n         this.result = result;\r\n         this.serializer = serializer;\r\n     }\r\n     \r\n     @Get(\"/recommend/item/{itemId}\")\r\n-    public void recommend(Long itemId) {\r\n+    public void recommend(Long itemId, String accessKey) {\r\n         Item item = itemDao.find(itemId);\r\n-        ItemVector recommendend = itemToItem.recommendendItemsFor(item);\r\n-        serializeResult(recommendend.getTuples());\r\n+        ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n+        serializeResult(recommended.getTuples());\r\n     }\r\n     \r\n     @Get(\"/recommend/items/\")\r\n-    public void recommend(List<Long> itemsIds) {\r\n+    public void recommend(List<Long> itemsIds, String accessKey) {\r\n         List<Item> items = itemDao.find(itemsIds);\r\n-        List<Tuple> recommendend = itemToItem.recommendendItemsFor(items).getTuples();\r\n-        serializeResult(recommendend);\r\n+        ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n+        serializeResult(recommended.getTuples());\r\n     }\r\n \r\n     private void serializeResult(List<Tuple> recommendend) {\r\n','DEFAULT',40,26),(165,'@@ -0,0 +1,25 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.hibernate.Session;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.Application;\r\n+\r\n+@Component\r\n+public class ApplicationDao {\r\n+    \r\n+    private final Session session;\r\n+\r\n+    public ApplicationDao(Session session) {\r\n+        this.session = session;\r\n+    }\r\n+    \r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public List<Application> list() {\r\n+        return session.createCriteria(Application.class).list();\r\n+    }\r\n+\r\n+\r\n+}\r\n','NEW',68,26),(166,'@@ -19,10 +19,10 @@ public class CustomerDao {\r\n     \r\n     @SuppressWarnings(\"unchecked\")\r\n     public List<Customer> list() {\r\n-        Query query = session.createQuery(\"select customer from Customer customer join fetch customer.items\");\r\n         return session.createCriteria(Customer.class).list();\r\n     }\r\n \r\n+    @SuppressWarnings(\"unchecked\")\r\n     public List<Customer> findCustomersOf(Application app) {\r\n         Query query = session.createQuery(\"select customer from Customer customer \" +\r\n         		\"join fetch customer.items \" +\r\n','DEFAULT',60,26),(167,'@@ -1,38 +0,0 @@\r\n-package br.ime.usp.commendans.infra;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.annotation.PostConstruct;\r\n-\r\n-import br.com.caelum.vraptor.ioc.Component;\r\n-import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n-import br.ime.usp.commendans.dao.CustomerDao;\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n-import br.ime.usp.commendans.model.Customer;\r\n-\r\n-@Component\r\n-public class ItemToItemRecommenderCreator implements ComponentFactory<ItemToItemRecommender> {\r\n-    private final CustomerDao dao;\r\n-    private final ItemToItemRecommenderFactory factory;\r\n-    private ItemToItemRecommender itemToItemRecommender;\r\n-\r\n-    public ItemToItemRecommenderCreator(CustomerDao dao, ItemToItemRecommenderFactory factory) {\r\n-        this.dao = dao;\r\n-        this.factory = factory;\r\n-    }\r\n-\r\n-    @Override\r\n-    public ItemToItemRecommender getInstance() {\r\n-        return itemToItemRecommender;\r\n-    }\r\n-    \r\n-    @PostConstruct\r\n-    public void create() {\r\n-        List<Customer> users = dao.list();\r\n-        for (Customer user : users) {\r\n-            factory.addUser(user);\r\n-        }\r\n-        this.itemToItemRecommender = factory.build();\r\n-    }\r\n-}\r\n','DELETED',43,26),(168,'@@ -6,21 +6,24 @@ import javax.annotation.PostConstruct;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n+import br.ime.usp.commendans.dao.ApplicationDao;\r\n import br.ime.usp.commendans.dao.CustomerDao;\r\n import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n+import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n \r\n @Component\r\n public class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n-    private final CustomerDao dao;\r\n+    private final CustomerDao customerDao;\r\n     private final ItemToItemRecommenderFactory factory;\r\n-    private SingleAppRecommender itemToItemRecommender;\r\n     private GeneralRecommender recommender;\r\n+    private final ApplicationDao appDao;\r\n \r\n-    public RecommenderCreator(CustomerDao dao, ItemToItemRecommenderFactory factory) {\r\n-        this.dao = dao;\r\n+    public RecommenderCreator(CustomerDao dao, ApplicationDao appDao, ItemToItemRecommenderFactory factory) {\r\n+        this.customerDao = dao;\r\n+        this.appDao = appDao;\r\n         this.factory = factory;\r\n     }\r\n \r\n@@ -31,11 +34,17 @@ public class RecommenderCreator implements ComponentFactory<GeneralRecommender>\r\n     \r\n     @PostConstruct\r\n     public void create() {\r\n-        List<Customer> users = dao.list();\r\n-        this.itemToItemRecommender = buildSingleAppRecommender(users);\r\n+        List<Application> apps = appDao.list();\r\n+        for (Application app : apps) {\r\n+            List<Customer> customers = customerDao.findCustomersOf(app);\r\n+            SingleAppRecommender recommender = buildSingleAppRecommender(customers);\r\n+            app.use(recommender);\r\n+        }\r\n+        this.recommender = new GeneralRecommender(apps);\r\n     }\r\n \r\n     private SingleAppRecommender buildSingleAppRecommender(List<Customer> users) {\r\n+        factory.clean();\r\n         for (Customer user : users) {\r\n             factory.addUser(user);\r\n         }\r\n','DEFAULT',63,26),(169,'@@ -1,46 +0,0 @@\r\n-package br.ime.usp.commendans.itemtoitem;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import br.ime.usp.commendans.Recommender;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class ItemToItemRecommender implements Recommender {\r\n-\r\n-    private final Map<Item, ItemVector> associations;\r\n-\r\n-    public ItemToItemRecommender(\r\n-            HashMap<Item, ItemToItemsAssociation> associations) {\r\n-        this.associations = parse(associations);\r\n-    }\r\n-\r\n-    private Map<Item, ItemVector> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n-        HashMap<Item, ItemVector> map = new HashMap<Item, ItemVector>();\r\n-        Set<Item> items = associations.keySet();\r\n-        for (Item item : items) {\r\n-            ItemToItemsAssociation association = associations.get(item);\r\n-            List<Tuple> tuples = association.toTupleList();\r\n-            map.put(item, new ItemVector(tuples));\r\n-        }\r\n-        return map;\r\n-    }\r\n-\r\n-    @Override\r\n-    public ItemVector recommendendItemsFor(Item item) {\r\n-        return associations.get(item);\r\n-    }\r\n-\r\n-    public ItemVector recommendendItemsFor(List<Item> items) {\r\n-        ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n-        for (Item item : items) {\r\n-            ItemVector other = recommendendItemsFor(item);\r\n-            vector = vector.merge(other);\r\n-        }\r\n-        return vector;\r\n-    }\r\n-\r\n-}\r\n','DELETED',33,26),(170,'@@ -62,4 +62,8 @@ public class ItemToItemRecommenderFactory {\r\n         return associations;\r\n     }\r\n \r\n+    public void clean() {\r\n+        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n+    }\r\n+\r\n }\r\n','DEFAULT',34,26),(171,'@@ -30,14 +30,14 @@ public class SingleAppRecommender implements Recommender {\r\n     }\r\n \r\n     @Override\r\n-    public ItemVector recommendendItemsFor(Item item) {\r\n+    public ItemVector recommendedItemsFor(Item item) {\r\n         return associations.get(item);\r\n     }\r\n \r\n-    public ItemVector recommendendItemsFor(List<Item> items) {\r\n+    public ItemVector recommendedItemsFor(List<Item> items) {\r\n         ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n         for (Item item : items) {\r\n-            ItemVector other = recommendendItemsFor(item);\r\n+            ItemVector other = recommendedItemsFor(item);\r\n             vector = vector.merge(other);\r\n         }\r\n         return vector;\r\n','DEFAULT',64,26),(172,'@@ -1,30 +1,65 @@\r\n package br.ime.usp.commendans.model;\r\n \r\n+import java.util.List;\r\n+\r\n import javax.persistence.Entity;\r\n import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n+import javax.persistence.Transient;\r\n+\r\n+import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n+import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n \r\n @Entity\r\n public class Application {\r\n-    \r\n-    @Id @GeneratedValue\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n     private Long id;\r\n-    \r\n+\r\n     private String name;\r\n-    \r\n+\r\n     private String accessKey;\r\n \r\n+    @Transient\r\n+    private SingleAppRecommender recommender;\r\n+\r\n     @Deprecated\r\n     protected Application() {\r\n     }\r\n-    \r\n+\r\n     public Application(String name, String accessKey) {\r\n         this.name = name;\r\n         this.accessKey = accessKey;\r\n     }\r\n-    \r\n+\r\n     public String getName() {\r\n         return name;\r\n     }\r\n \r\n+    public void use(SingleAppRecommender recommender) {\r\n+        this.recommender = recommender;\r\n+    }\r\n+\r\n+    public Long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public ItemVector recommendedItemsFor(Item item) {\r\n+        return recommender.recommendedItemsFor(item);\r\n+    }\r\n+\r\n+    public ItemVector recommendedItemsFor(List<Item> items) {\r\n+        return recommender.recommendedItemsFor(items);\r\n+    }\r\n+\r\n+    public String getAccessKey() {\r\n+        return accessKey;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return \"Application [id=\" + id + \", name=\" + name + \", accessKey=\"\r\n+                + accessKey + \"]\";\r\n+    }\r\n }\r\n','DEFAULT',62,26),(173,'@@ -1,5 +1,32 @@\r\n package br.ime.usp.commendans.recommender;\r\n \r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n+import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n public class GeneralRecommender {\r\n \r\n+    private Map<String, Application> appsMap;\r\n+\r\n+    public GeneralRecommender(List<Application> apps) {\r\n+        appsMap = new HashMap<String, Application>();\r\n+        for (Application app : apps) {\r\n+            appsMap.put(app.getAccessKey(), app);\r\n+        }\r\n+    }\r\n+\r\n+    public ItemVector recommendedItemsFor(Item item, String accessKey) {\r\n+        Application application = appsMap.get(accessKey);\r\n+        return application.recommendedItemsFor(item);\r\n+    }\r\n+\r\n+    public ItemVector recommendedItemsFor(List<Item> items, String accessKey) {\r\n+        Application application = appsMap.get(accessKey);\r\n+        return application.recommendedItemsFor(items);\r\n+    }\r\n+\r\n }\r\n','DEFAULT',65,26),(174,'@@ -42,6 +42,7 @@ public class DataImporter {\r\n         BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n         String line = safeReadLine(reader);\r\n         Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        session.save(cdc);\r\n         \r\n         while (line != null) {\r\n             logger.debug(line);\r\n','DEFAULT',36,26),(175,'@@ -18,7 +18,7 @@\r\n         <property name=\"connection.username\">root</property>\r\n         <property name=\"connection.password\"></property>\r\n         <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n-        <property name=\"show_sql\">false</property>\r\n+        <property name=\"show_sql\">true</property>\r\n         <property name=\"format_sql\">false</property>\r\n         <property name=\"hibernate.generate_statistics\">true</property>\r\n \r\n','DEFAULT',37,26),(176,'@@ -33,7 +33,7 @@\r\n 	\r\n 	<context-param>\r\n         <param-name>environment</param-name>\r\n-        <param-value>heroku</param-value>\r\n+        <param-value>dev</param-value>\r\n     </context-param>\r\n \r\n </web-app>\r\n','DEFAULT',15,26),(177,'@@ -0,0 +1,36 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.model.Application;\r\n+\r\n+public class ApplicationDaoTest extends DaoTest {\r\n+    private static ApplicationDao applicationDao;\r\n+\r\n+    @Before\r\n+    public void setUp() {\r\n+        applicationDao = new ApplicationDao(session);\r\n+        session.beginTransaction();\r\n+    }\r\n+    \r\n+    @After\r\n+    public void tearDown() {\r\n+        session.getTransaction().rollback();\r\n+        session.clear();\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void shouldListApps() throws Exception {\r\n+        session.save(new Application(\"cdc\", \"123\"));\r\n+        session.save(new Application(\"caelum\", \"1234\"));\r\n+        List<Application> apps = applicationDao.list();\r\n+        assertEquals(2, apps.size());\r\n+    }\r\n+\r\n+}\r\n','NEW',69,26),(178,'@@ -5,47 +5,38 @@ import static org.junit.Assert.assertEquals;\r\n import java.util.Arrays;\r\n import java.util.List;\r\n \r\n-import org.hibernate.Session;\r\n-import org.hibernate.SessionFactory;\r\n-import org.hibernate.cfg.Configuration;\r\n import org.junit.After;\r\n import org.junit.Before;\r\n-import org.junit.BeforeClass;\r\n import org.junit.Test;\r\n \r\n import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n-public class CustomerDaoTest {\r\n+public class CustomerDaoTest extends DaoTest {\r\n \r\n-    private static Session session;\r\n     private static CustomerDao userDao;\r\n     private static Application app;\r\n \r\n-    @BeforeClass\r\n-    public static void setUpClass() {\r\n-        SessionFactory sf = new Configuration().configure(\r\n-                \"/hibernate.test.cfg.xml\").buildSessionFactory();\r\n-        session = sf.openSession();\r\n-        userDao = new CustomerDao(session);\r\n-        app = new Application(\"cdc\", \"123\");\r\n-        session.save(app);\r\n-    }\r\n-    \r\n     @Before\r\n     public void setUp() {\r\n+        userDao = new CustomerDao(session);\r\n+        app = new Application(\"cdc\", \"123\");\r\n         session.beginTransaction();\r\n+        session.save(app);\r\n     }\r\n     \r\n     @After\r\n     public void tearDown() {\r\n         session.getTransaction().rollback();\r\n+        session.clear();\r\n     }\r\n \r\n     @Test\r\n     public void shouldFindUsers() {\r\n-        List<Item> items = Arrays.asList();\r\n+        Item item = new Item(1l, app);\r\n+        session.save(item);\r\n+        List<Item> items = Arrays.asList(item);\r\n         session.save(new Customer(items, 1l, app));\r\n         session.save(new Customer(items, 2l, app));\r\n         session.save(new Customer(items, 3l, app));\r\n@@ -56,6 +47,7 @@ public class CustomerDaoTest {\r\n     @Test\r\n     public void shouldFindUsersOfSpecificApp() throws Exception {\r\n         Item item = new Item(1l, app);\r\n+        session.save(item);\r\n         List<Item> items = Arrays.asList(item);\r\n         session.save(new Customer(items, 1l, app));\r\n         session.save(new Customer(items, 2l, app));\r\n@@ -67,14 +59,13 @@ public class CustomerDaoTest {\r\n         session.save(item);\r\n         session.save(new Customer(items, 1l, otherApp));\r\n         session.save(new Customer(items, 2l, otherApp));\r\n-        session.save(new Customer(items, 3l, otherApp));\r\n+        session.save(new Customer(items, 3l, otherApp));    \r\n \r\n         List<Customer> customers = userDao.findCustomersOf(app);\r\n         assertEquals(3, customers.size());\r\n         assertEquals(\"cdc\", customers.get(0).getApp().getName());\r\n         assertEquals(\"cdc\", customers.get(1).getApp().getName());\r\n         assertEquals(\"cdc\", customers.get(2).getApp().getName());\r\n-\r\n     }\r\n \r\n }\r\n','DEFAULT',66,26),(179,'@@ -0,0 +1,19 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import org.hibernate.SessionFactory;\r\n+import org.hibernate.cfg.Configuration;\r\n+import org.hibernate.classic.Session;\r\n+import org.junit.BeforeClass;\r\n+\r\n+public class DaoTest {\r\n+\r\n+    protected static Session session;\r\n+        \r\n+    @BeforeClass\r\n+    public static void setUpClass() {\r\n+        SessionFactory sf = new Configuration().configure(\r\n+                \"/hibernate.test.cfg.xml\").buildSessionFactory();\r\n+        session = sf.openSession();\r\n+    }\r\n+\r\n+}\r\n\\ No newline at end of file\r\n','NEW',70,26),(180,'@@ -1,18 +0,0 @@\r\n-package br.ime.usp.commendans.dao;\r\n-\r\n-import org.hibernate.Session;\r\n-import org.hibernate.SessionFactory;\r\n-import org.hibernate.cfg.Configuration;\r\n-import org.junit.Test;\r\n-\r\n-public class UserDaoTest {\r\n-\r\n-    @Test\r\n-    public void shouldFindUsers() {\r\n-        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n-        Session session = sf.openSession();\r\n-        CustomerDao userDao = new CustomerDao(session);\r\n-        userDao.list();\r\n-    }\r\n-\r\n-}\r\n','DELETED',48,26),(181,'@@ -38,7 +38,7 @@ public class ItemToItemRecommenderFactoryTest {\r\n         SingleAppRecommender recommender = factory.build();\r\n         HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n         \r\n-        List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1).getTuples();\r\n+        List<Tuple> recommendedItems = recommender.recommendedItemsFor(item1).getTuples();\r\n         ItemToItemsAssociation association = associations.get(item1);\r\n         assertEquals(0.0, association.associationValue(item1), 0.001);\r\n         assertEquals(1.0, association.associationValue(item2), 0.001);\r\n@@ -51,7 +51,7 @@ public class ItemToItemRecommenderFactoryTest {\r\n         assertEquals(item2, recommendedItems.get(1).getItem());\r\n         assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n         \r\n-        recommendedItems = recommender.recommendendItemsFor(item2).getTuples();\r\n+        recommendedItems = recommender.recommendedItemsFor(item2).getTuples();\r\n         association = associations.get(item2);\r\n         assertEquals(1.0, association.associationValue(item1), 0.001);\r\n         assertEquals(0.0, association.associationValue(item2), 0.001);\r\n@@ -63,7 +63,7 @@ public class ItemToItemRecommenderFactoryTest {\r\n         assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n         assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n         \r\n-        recommendedItems = recommender.recommendendItemsFor(item3).getTuples();\r\n+        recommendedItems = recommender.recommendedItemsFor(item3).getTuples();\r\n         association = associations.get(item3);\r\n         assertEquals(2.0, association.associationValue(item1), 0.001);\r\n         assertEquals(1.0, association.associationValue(item2), 0.001);\r\n','DEFAULT',30,26),(182,'@@ -31,7 +31,7 @@ public class TupleJsonSerializer {\r\n     \r\n     private class IncludeAllowedAttributes implements ExclusionStrategy {\r\n \r\n-        private List<String> allowedAttributes = Arrays.asList(\"item\", \"id\", \"value\");\r\n+        private List<String> allowedAttributes = Arrays.asList(\"item\", \"appItemId\", \"value\");\r\n \r\n         @Override\r\n         public boolean shouldSkipClass(Class<?> arg0) {\r\n','DEFAULT',45,27),(183,'@@ -13,6 +13,7 @@ import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n @Entity\r\n public class Application {\r\n \r\n+\r\n     @Id\r\n     @GeneratedValue\r\n     private Long id;\r\n@@ -62,4 +63,28 @@ public class Application {\r\n         return \"Application [id=\" + id + \", name=\" + name + \", accessKey=\"\r\n                 + accessKey + \"]\";\r\n     }\r\n+    @Override\r\n+    public int hashCode() {\r\n+        final int prime = 31;\r\n+        int result = 1;\r\n+        result = prime * result + ((id == null) ? 0 : id.hashCode());\r\n+        return result;\r\n+    }\r\n+    \r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (getClass() != obj.getClass())\r\n+            return false;\r\n+        Application other = (Application) obj;\r\n+        if (id == null) {\r\n+            if (other.id != null)\r\n+                return false;\r\n+        } else if (!id.equals(other.id))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n }\r\n','DEFAULT',62,27),(184,'@@ -1,14 +1,17 @@\r\n package br.ime.usp.commendans.model;\r\n \r\n import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n import javax.persistence.ManyToOne;\r\n \r\n @Entity\r\n public class Item {\r\n-    @Id\r\n+    @Id @GeneratedValue\r\n     private Long id;\r\n     \r\n+    private Long appItemId;\r\n+    \r\n     @ManyToOne\r\n     private Application app;\r\n \r\n@@ -16,31 +19,53 @@ public class Item {\r\n     protected Item() {\r\n     }\r\n     \r\n-    public Item(Long id, Application app) {\r\n-        this.id = id;\r\n+    public Item(Long appItemId, Application app) {\r\n+        this.appItemId = appItemId;\r\n         this.app = app;\r\n     }\r\n     \r\n-    @Override\r\n-    public int hashCode() {\r\n-        return id.hashCode();\r\n-    }\r\n-\r\n-    @Override\r\n-    public boolean equals(Object obj) {\r\n-        if (obj instanceof Item) {\r\n-            Item other = (Item) obj;\r\n-            return other.getId().equals(this.id);\r\n-        }\r\n-        return false;\r\n+    public Long getAppItemId() {\r\n+        return appItemId;\r\n     }\r\n     \r\n-    public Long getId() {\r\n-        return id;\r\n+    public Application getApp() {\r\n+        return app;\r\n     }\r\n     \r\n     @Override\r\n     public String toString() {\r\n         return \"Item \" + id;\r\n     }\r\n+\r\n+    @Override\r\n+    public int hashCode() {\r\n+        final int prime = 31;\r\n+        int result = 1;\r\n+        result = prime * result + ((app == null) ? 0 : app.hashCode());\r\n+        result = prime * result\r\n+                + ((appItemId == null) ? 0 : appItemId.hashCode());\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (getClass() != obj.getClass())\r\n+            return false;\r\n+        Item other = (Item) obj;\r\n+        if (app == null) {\r\n+            if (other.app != null)\r\n+                return false;\r\n+        } else if (!app.equals(other.app))\r\n+            return false;\r\n+        if (appItemId == null) {\r\n+            if (other.appItemId != null)\r\n+                return false;\r\n+        } else if (!appItemId.equals(other.appItemId))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n }\r\n','DEFAULT',28,27),(185,'@@ -17,7 +17,7 @@ public class TupleJsonSerializerTest {\r\n         TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n         Application cdc = new Application(\"Casa do Código\", \"123\");\r\n         String json = serializer.toJson(new Tuple(new Item(1l, cdc), 10.0));\r\n-        assertEquals(\"{\\\"item\\\":{\\\"id\\\":1},\\\"value\\\":10.0}\", json);\r\n+        assertEquals(\"{\\\"item\\\":{\\\"appItemId\\\":1},\\\"value\\\":10.0}\", json);\r\n     }\r\n     \r\n     @Test\r\n@@ -25,7 +25,7 @@ public class TupleJsonSerializerTest {\r\n         TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n         Application cdc = new Application(\"Casa do Código\", \"123\");\r\n         String json = serializer.toJson(Arrays.asList(new Tuple(new Item(1l, cdc), 10.0)));\r\n-        assertEquals(\"[{\\\"item\\\":{\\\"id\\\":1},\\\"value\\\":10.0}]\", json);\r\n+        assertEquals(\"[{\\\"item\\\":{\\\"appItemId\\\":1},\\\"value\\\":10.0}]\", json);\r\n     }\r\n \r\n }\r\n','DEFAULT',49,27),(186,'@@ -18,6 +18,7 @@\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n \r\n     </session-factory>\r\n </hibernate-configuration>\r\n','DEFAULT',53,28),(187,'@@ -52,7 +52,7 @@\r\n 				<artifactId>maven-war-plugin</artifactId>\r\n 				<version>2.1.1</version>\r\n 				<configuration>\r\n-    					<webXml>src/main/webapp/WEB-INF/web-heroku.xml</webXml>        \r\n+   					<webXml>src/main/webapp/WEB-INF/web-heroku.xml</webXml>        \r\n   				</configuration>\r\n 			</plugin>\r\n 			<plugin>\r\n','DEFAULT',56,29),(188,'@@ -14,7 +14,7 @@ public class Runner {\r\n         Server server = new Server(Integer.valueOf(webPort));\r\n         WebAppContext root = new WebAppContext();\r\n         root.setContextPath(\"/\");\r\n-        root.setDescriptor(webappDirLocation + \"/WEB-INF/web.xml\");\r\n+        root.setDescriptor(webappDirLocation + \"/WEB-INF/web-heroku.xml\");\r\n         root.setResourceBase(webappDirLocation);\r\n         root.setParentLoaderPriority(true);\r\n         server.setHandler(root);\r\n','DEFAULT',59,29),(189,'@@ -14,7 +14,7 @@\r\n     \r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n-        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n','DEFAULT',53,30),(190,'@@ -29,16 +29,16 @@ public class ItemToItemController {\r\n         this.serializer = serializer;\r\n     }\r\n     \r\n-    @Get(\"/recommend/item/{itemId}\")\r\n-    public void recommend(Long itemId, String accessKey) {\r\n-        Item item = itemDao.find(itemId);\r\n+    @Get(\"/recommend/item/{appItemId}\")\r\n+    public void recommend(Long appItemId, String accessKey) {\r\n+        Item item = itemDao.findByAppItemId(appItemId);\r\n         ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n         serializeResult(recommended.getTuples());\r\n     }\r\n     \r\n     @Get(\"/recommend/items/\")\r\n     public void recommend(List<Long> itemsIds, String accessKey) {\r\n-        List<Item> items = itemDao.find(itemsIds);\r\n+        List<Item> items = itemDao.findAppItemIds(itemsIds);\r\n         ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n         serializeResult(recommended.getTuples());\r\n     }\r\n','DEFAULT',40,31),(191,'@@ -2,6 +2,7 @@ package br.ime.usp.commendans.dao;\r\n \r\n import java.util.List;\r\n \r\n+import org.hibernate.Query;\r\n import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n@@ -16,14 +17,16 @@ public class ItemDao {\r\n         this.session = session;\r\n     }\r\n \r\n-    public Item find(Long itemId) {\r\n-        return (Item) session.load(Item.class, itemId);\r\n+    public Item findByAppItemId(Long appItemId) {\r\n+        Query query = session.createQuery(\"select item from Item item where item.appItemId = :id\");\r\n+        query.setLong(\"id\", appItemId);\r\n+        return (Item) query.uniqueResult();\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n-    public List<Item> find(List<Long> itemsIds) {\r\n+    public List<Item> findAppItemIds(List<Long> itemsIds) {\r\n         return session\r\n-                .createQuery(\"select item from Item item where item.id in :ids\")\r\n+                .createQuery(\"select item from Item item where item.appItemId in :ids\")\r\n                 .setParameterList(\"ids\", itemsIds)\r\n                 .list();\r\n     }\r\n','DEFAULT',41,31),(192,'@@ -0,0 +1,37 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class ItemDaoTest extends DaoTest {\r\n+    \r\n+    private ItemDao itemDao;\r\n+\r\n+    @Before\r\n+    public void setUp() {\r\n+        itemDao = new ItemDao(session);\r\n+        session.beginTransaction();\r\n+    }\r\n+    \r\n+    @After\r\n+    public void tearDown() {\r\n+        session.getTransaction().rollback();\r\n+        session.clear();\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void shouldFindByAppItemId() throws Exception {\r\n+        Application app = new Application(\"cdc\", \"123\");\r\n+        session.save(app);\r\n+        session.save(new Item(11l, app));\r\n+        Item item = itemDao.findByAppItemId(11l);\r\n+        assertEquals(11l, item.getAppItemId().longValue());\r\n+    }\r\n+\r\n+}\r\n','NEW',71,31),(193,'@@ -1,15 +1,18 @@\r\n package br.ime.usp.commendans.controller;\r\n \r\n+import java.util.ArrayList;\r\n import java.util.List;\r\n \r\n import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n+import br.ime.usp.commendans.dao.ApplicationDao;\r\n import br.ime.usp.commendans.dao.ItemDao;\r\n import br.ime.usp.commendans.infra.TupleJsonSerializer;\r\n import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n import br.ime.usp.commendans.itemtoitem.Tuple;\r\n+import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n \r\n@@ -19,33 +22,52 @@ public class ItemToItemController {\r\n     private final Result result;\r\n     private final TupleJsonSerializer serializer;\r\n     private final GeneralRecommender recommender;\r\n+    private final ApplicationDao appDao;\r\n \r\n     public ItemToItemController(GeneralRecommender recommender, \r\n-            ItemDao itemDao, Result result, \r\n+            ItemDao itemDao, ApplicationDao appDao, Result result, \r\n             TupleJsonSerializer serializer) {\r\n         this.recommender = recommender;\r\n         this.itemDao = itemDao;\r\n+        this.appDao = appDao;\r\n         this.result = result;\r\n         this.serializer = serializer;\r\n     }\r\n     \r\n     @Get(\"/recommend/item/{appItemId}\")\r\n     public void recommend(Long appItemId, String accessKey) {\r\n-        Item item = itemDao.findByAppItemId(appItemId);\r\n-        ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n-        serializeResult(recommended.getTuples());\r\n+        if (validKey(accessKey)) {\r\n+            Application app = appDao.findByAccessKey(accessKey);\r\n+            Item item = itemDao.findByAppItemId(appItemId, app);\r\n+            ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n+            serializeResult(recommended);\r\n+        }\r\n     }\r\n     \r\n+\r\n     @Get(\"/recommend/items/\")\r\n     public void recommend(List<Long> itemsIds, String accessKey) {\r\n-        List<Item> items = itemDao.findAppItemIds(itemsIds);\r\n-        ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n-        serializeResult(recommended.getTuples());\r\n+        if (validKey(accessKey)) {\r\n+            Application app = appDao.findByAccessKey(accessKey);\r\n+            List<Item> items = itemDao.findAppItemIds(itemsIds, app);\r\n+            ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n+            serializeResult(recommended);\r\n+        }\r\n+    }\r\n+\r\n+    private boolean validKey(String accessKey) {\r\n+        Application app = appDao.findByAccessKey(accessKey);\r\n+        if (app == null) {\r\n+            result.notFound();\r\n+            return false;\r\n+        }\r\n+        return true;\r\n     }\r\n \r\n-    private void serializeResult(List<Tuple> recommendend) {\r\n+    private void serializeResult(ItemVector recommended) {\r\n+        List<Tuple> tuples = recommended == null ? new ArrayList<Tuple>() : recommended.getTuples();\r\n         result.use(Results.http())\r\n             .addHeader(\"content-type\", \"application/json\")\r\n-            .body(serializer.toJson(recommendend));\r\n+            .body(serializer.toJson(tuples));\r\n     }\r\n }\r\n','DEFAULT',40,32),(194,'@@ -2,6 +2,7 @@ package br.ime.usp.commendans.dao;\r\n \r\n import java.util.List;\r\n \r\n+import org.hibernate.Query;\r\n import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n@@ -21,5 +22,11 @@ public class ApplicationDao {\r\n         return session.createCriteria(Application.class).list();\r\n     }\r\n \r\n+    public Application findByAccessKey(String key) {\r\n+        Query query = session.createQuery(\"select app from Application app where app.accessKey=:key\");\r\n+        query.setParameter(\"key\", key);\r\n+        return (Application) query.uniqueResult();\r\n+    }\r\n+\r\n \r\n }\r\n','DEFAULT',68,32),(195,'@@ -6,6 +6,7 @@ import org.hibernate.Query;\r\n import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n @Component\r\n@@ -17,17 +18,19 @@ public class ItemDao {\r\n         this.session = session;\r\n     }\r\n \r\n-    public Item findByAppItemId(Long appItemId) {\r\n-        Query query = session.createQuery(\"select item from Item item where item.appItemId = :id\");\r\n+    public Item findByAppItemId(Long appItemId, Application app) {\r\n+        Query query = session.createQuery(\"select item from Item item where item.appItemId = :id and item.app.id = :appId\");\r\n         query.setLong(\"id\", appItemId);\r\n+        query.setLong(\"appId\", app.getId());\r\n         return (Item) query.uniqueResult();\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n-    public List<Item> findAppItemIds(List<Long> itemsIds) {\r\n+    public List<Item> findAppItemIds(List<Long> itemsIds, Application app) {\r\n         return session\r\n-                .createQuery(\"select item from Item item where item.appItemId in :ids\")\r\n+                .createQuery(\"select item from Item item where item.appItemId in :ids and item.app.id = :appId\")\r\n                 .setParameterList(\"ids\", itemsIds)\r\n+                .setParameter(\"appId\", app.getId())\r\n                 .list();\r\n     }\r\n \r\n','DEFAULT',41,32),(196,'@@ -32,5 +32,13 @@ public class ApplicationDaoTest extends DaoTest {\r\n         List<Application> apps = applicationDao.list();\r\n         assertEquals(2, apps.size());\r\n     }\r\n+    \r\n+    @Test\r\n+    public void shouldFindAppByAccessKey() throws Exception {\r\n+        session.save(new Application(\"cdc\", \"123\"));\r\n+        session.save(new Application(\"caelum\", \"1234\"));\r\n+        Application app = applicationDao.findByAccessKey(\"1234\");\r\n+        assertEquals(\"caelum\", app.getName());\r\n+    }\r\n \r\n }\r\n','DEFAULT',69,32),(197,'@@ -28,10 +28,14 @@ public class ItemDaoTest extends DaoTest {\r\n     @Test\r\n     public void shouldFindByAppItemId() throws Exception {\r\n         Application app = new Application(\"cdc\", \"123\");\r\n+        Application app2 = new Application(\"caelum\", \"1234\");\r\n         session.save(app);\r\n+        session.save(app2);\r\n         session.save(new Item(11l, app));\r\n-        Item item = itemDao.findByAppItemId(11l);\r\n+        session.save(new Item(11l, app2));\r\n+        Item item = itemDao.findByAppItemId(11l, app);\r\n         assertEquals(11l, item.getAppItemId().longValue());\r\n+        assertEquals(\"cdc\", item.getApp().getName());\r\n     }\r\n \r\n }\r\n','DEFAULT',71,32),(198,'@@ -1,6 +0,0 @@\r\n-package br.ime.usp.commendans.infra;\r\n-\r\n-\r\n-public class RecommenderComponent {\r\n-    \r\n-}\r\n','DELETED',44,33),(199,'@@ -4,24 +4,25 @@ import java.util.List;\r\n \r\n import javax.annotation.PostConstruct;\r\n \r\n+import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n import br.ime.usp.commendans.dao.ApplicationDao;\r\n import br.ime.usp.commendans.dao.CustomerDao;\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n+import br.ime.usp.commendans.itemtoitem.SingleAppRecommenderFactory;\r\n import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n \r\n-@Component\r\n+@Component @ApplicationScoped\r\n public class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n     private final CustomerDao customerDao;\r\n-    private final ItemToItemRecommenderFactory factory;\r\n+    private final SingleAppRecommenderFactory factory;\r\n     private GeneralRecommender recommender;\r\n     private final ApplicationDao appDao;\r\n \r\n-    public RecommenderCreator(CustomerDao dao, ApplicationDao appDao, ItemToItemRecommenderFactory factory) {\r\n+    public RecommenderCreator(CustomerDao dao, ApplicationDao appDao, SingleAppRecommenderFactory factory) {\r\n         this.customerDao = dao;\r\n         this.appDao = appDao;\r\n         this.factory = factory;\r\n','DEFAULT',63,33),(200,'@@ -1,69 +0,0 @@\r\n-package br.ime.usp.commendans.itemtoitem;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n-import br.com.caelum.vraptor.ioc.Component;\r\n-import br.ime.usp.commendans.model.Customer;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-@Component @ApplicationScoped\r\n-public class ItemToItemRecommenderFactory {\r\n-\r\n-    private Map<Item, List<Customer>> customerByItemBought;\r\n-    private HashMap<Item, ItemToItemsAssociation> associations;\r\n-    \r\n-    public ItemToItemRecommenderFactory() {\r\n-        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n-    }\r\n-    \r\n-    public void addUser(Customer user) {\r\n-        for (Item item : user.itemsBought()) {\r\n-            store(item, user);\r\n-        }\r\n-    }\r\n-\r\n-    private void store(Item item, Customer user) {\r\n-        List<Customer> users = customerByItemBought.get(item);\r\n-        if (users == null) {\r\n-            users = new ArrayList<Customer>();\r\n-        }\r\n-        users.add(user);\r\n-        customerByItemBought.put(item, users);\r\n-    }\r\n-    \r\n-    \r\n-    public SingleAppRecommender build() {\r\n-        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n-        Set<Item> items = customerByItemBought.keySet();\r\n-        for (Item item : items) {\r\n-            associate(item);\r\n-        }\r\n-        return new SingleAppRecommender(associations);\r\n-    }\r\n-\r\n-    private void associate(Item item) {\r\n-        ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n-        List<Customer> customers = customerByItemBought.get(item);\r\n-        for (Customer user : customers) {\r\n-            List<Item> boughtTogether = user.itemsBought();\r\n-            for (Item i : boughtTogether) {\r\n-                association.associate(i);\r\n-            }\r\n-        }\r\n-        associations.put(item, association);\r\n-    }\r\n-    \r\n-    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n-        return associations;\r\n-    }\r\n-\r\n-    public void clean() {\r\n-        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n-    }\r\n-\r\n-}\r\n','DELETED',34,33),(201,'@@ -0,0 +1,69 @@\r\n+package br.ime.usp.commendans.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+@Component @ApplicationScoped\r\n+public class SingleAppRecommenderFactory {\r\n+\r\n+    private Map<Item, List<Customer>> customerByItemBought;\r\n+    private HashMap<Item, ItemToItemsAssociation> associations;\r\n+    \r\n+    public SingleAppRecommenderFactory() {\r\n+        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n+    }\r\n+    \r\n+    public void addUser(Customer user) {\r\n+        for (Item item : user.itemsBought()) {\r\n+            store(item, user);\r\n+        }\r\n+    }\r\n+\r\n+    private void store(Item item, Customer user) {\r\n+        List<Customer> users = customerByItemBought.get(item);\r\n+        if (users == null) {\r\n+            users = new ArrayList<Customer>();\r\n+        }\r\n+        users.add(user);\r\n+        customerByItemBought.put(item, users);\r\n+    }\r\n+    \r\n+    \r\n+    public SingleAppRecommender build() {\r\n+        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n+        Set<Item> items = customerByItemBought.keySet();\r\n+        for (Item item : items) {\r\n+            associate(item);\r\n+        }\r\n+        return new SingleAppRecommender(associations);\r\n+    }\r\n+\r\n+    private void associate(Item item) {\r\n+        ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n+        List<Customer> customers = customerByItemBought.get(item);\r\n+        for (Customer user : customers) {\r\n+            List<Item> boughtTogether = user.itemsBought();\r\n+            for (Item i : boughtTogether) {\r\n+                association.associate(i);\r\n+            }\r\n+        }\r\n+        associations.put(item, association);\r\n+    }\r\n+    \r\n+    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n+        return associations;\r\n+    }\r\n+\r\n+    public void clean() {\r\n+        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n+    }\r\n+\r\n+}\r\n','NEW',72,33),(202,'@@ -1,87 +0,0 @@\r\n-package br.ime.usp.commendans.factory;\r\n-\r\n-import static org.junit.Assert.assertEquals;\r\n-\r\n-import java.util.Arrays;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\n-import br.ime.usp.commendans.itemtoitem.Tuple;\r\n-import br.ime.usp.commendans.model.Application;\r\n-import br.ime.usp.commendans.model.Customer;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class ItemToItemRecommenderFactoryTest {\r\n-\r\n-    @Test\r\n-    public void shouldBuildRecommenderBookExample() {\r\n-        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n-        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n-        Item item1 = new Item(1l, cdc);\r\n-        Item item2 = new Item(2l, cdc);\r\n-        Item item3 = new Item(3l, cdc);\r\n-        Item item4 = new Item(4l, cdc);\r\n-        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l, cdc);\r\n-        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l, cdc);\r\n-        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l, cdc);\r\n-        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l, cdc);\r\n-        factory.addUser(user1);\r\n-        factory.addUser(user2);\r\n-        factory.addUser(user3);\r\n-        factory.addUser(user4);\r\n-        \r\n-        SingleAppRecommender recommender = factory.build();\r\n-        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n-        \r\n-        List<Tuple> recommendedItems = recommender.recommendedItemsFor(item1).getTuples();\r\n-        ItemToItemsAssociation association = associations.get(item1);\r\n-        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n-        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n-        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n-        \r\n-        assertEquals(2, recommendedItems.size());\r\n-        assertEquals(item3, recommendedItems.get(0).getItem());\r\n-        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n-        assertEquals(item2, recommendedItems.get(1).getItem());\r\n-        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n-        \r\n-        recommendedItems = recommender.recommendedItemsFor(item2).getTuples();\r\n-        association = associations.get(item2);\r\n-        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n-        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n-        \r\n-        assertEquals(3, recommendedItems.size());\r\n-        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n-        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n-        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n-        \r\n-        recommendedItems = recommender.recommendedItemsFor(item3).getTuples();\r\n-        association = associations.get(item3);\r\n-        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n-        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n-        \r\n-        assertEquals(3, recommendedItems.size());\r\n-        assertEquals(item1, recommendedItems.get(0).getItem());\r\n-        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n-        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n-        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n-        \r\n-        association = associations.get(item4);\r\n-        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n-        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n-        \r\n-    }\r\n-\r\n-}\r\n','DELETED',30,33),(203,'@@ -0,0 +1,87 @@\r\n+package br.ime.usp.commendans.factory;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\n+import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n+import br.ime.usp.commendans.itemtoitem.SingleAppRecommenderFactory;\r\n+import br.ime.usp.commendans.itemtoitem.Tuple;\r\n+import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class SingleAppRecommenderFactoryTest {\r\n+\r\n+    @Test\r\n+    public void shouldBuildRecommenderFromCollectiveIntelligenceInActionExample() {\r\n+        SingleAppRecommenderFactory factory = new SingleAppRecommenderFactory();\r\n+        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n+        Item item1 = new Item(1l, cdc);\r\n+        Item item2 = new Item(2l, cdc);\r\n+        Item item3 = new Item(3l, cdc);\r\n+        Item item4 = new Item(4l, cdc);\r\n+        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l, cdc);\r\n+        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l, cdc);\r\n+        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l, cdc);\r\n+        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l, cdc);\r\n+        factory.addUser(user1);\r\n+        factory.addUser(user2);\r\n+        factory.addUser(user3);\r\n+        factory.addUser(user4);\r\n+        \r\n+        SingleAppRecommender recommender = factory.build();\r\n+        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n+        \r\n+        List<Tuple> recommendedItems = recommender.recommendedItemsFor(item1).getTuples();\r\n+        ItemToItemsAssociation association = associations.get(item1);\r\n+        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(2, recommendedItems.size());\r\n+        assertEquals(item3, recommendedItems.get(0).getItem());\r\n+        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(item2, recommendedItems.get(1).getItem());\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        \r\n+        recommendedItems = recommender.recommendedItemsFor(item2).getTuples();\r\n+        association = associations.get(item2);\r\n+        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(3, recommendedItems.size());\r\n+        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n+        \r\n+        recommendedItems = recommender.recommendedItemsFor(item3).getTuples();\r\n+        association = associations.get(item3);\r\n+        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(3, recommendedItems.size());\r\n+        assertEquals(item1, recommendedItems.get(0).getItem());\r\n+        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n+        \r\n+        association = associations.get(item4);\r\n+        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n+        \r\n+    }\r\n+\r\n+}\r\n','NEW',73,33),(204,'@@ -14,7 +14,7 @@ import br.ime.usp.commendans.model.Item;\r\n public class ItemVectorTest {\r\n \r\n     @Test\r\n-    public void test() {\r\n+    public void shouldMergeTuples() {\r\n         Application cdc = new Application(\"Casa do Código\", \"123\");\r\n         Item item1 = new Item(1l, cdc);\r\n         Item item2 = new Item(2l, cdc);\r\n','DEFAULT',50,33),(205,'@@ -83,7 +83,7 @@\r\n                             <extraJvmArguments>-Xmx512m</extraJvmArguments>\r\n                             <programs>\r\n                                 <program>\r\n-                                    <mainClass>br.ime.usp.commendans.runner.Runner</mainClass>\r\n+                                    <mainClass>br.ime.usp.commendans.infra.JettyRunner</mainClass>\r\n                                     <name>webapp</name>\r\n                                 </program>\r\n                             </programs>\r\n','DEFAULT',56,34),(206,'@@ -1,8 +0,0 @@\r\n-package br.ime.usp.commendans;\r\n-\r\n-import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public interface Recommender {\r\n-    public ItemVector recommendedItemsFor(Item item);\r\n-}\r\n','DELETED',31,34),(207,'@@ -1,38 +0,0 @@\r\n-package br.ime.usp.commendans.components;\r\n-\r\n-import javax.annotation.PostConstruct;\r\n-import javax.annotation.PreDestroy;\r\n-\r\n-import org.hibernate.Session;\r\n-import org.hibernate.SessionFactory;\r\n-\r\n-import br.com.caelum.vraptor.ioc.Component;\r\n-import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n-import br.com.caelum.vraptor.ioc.RequestScoped;\r\n-\r\n-@Component @RequestScoped\r\n-public class SessionCreator implements ComponentFactory<Session> {\r\n-    \r\n-    private final SessionFactory sf;\r\n-    private org.hibernate.classic.Session session;\r\n-\r\n-    public SessionCreator(SessionFactory sf) {\r\n-        this.sf = sf;\r\n-    }\r\n-\r\n-    @Override\r\n-    public Session getInstance() {\r\n-        return session;\r\n-    }\r\n-    \r\n-    @PostConstruct\r\n-    public void create() {\r\n-        session = sf.openSession();\r\n-    }\r\n-    \r\n-    @PreDestroy\r\n-    public void destroy() {\r\n-        session.close();\r\n-    }\r\n-\r\n-}\r\n','DELETED',51,34),(208,'@@ -1,71 +0,0 @@\r\n-package br.ime.usp.commendans.components;\r\n-\r\n-import java.net.URI;\r\n-import java.net.URISyntaxException;\r\n-\r\n-import javax.annotation.PostConstruct;\r\n-import javax.annotation.PreDestroy;\r\n-import javax.servlet.ServletContext;\r\n-\r\n-import org.apache.log4j.Logger;\r\n-import org.hibernate.SessionFactory;\r\n-import org.hibernate.cfg.Configuration;\r\n-\r\n-import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n-import br.com.caelum.vraptor.ioc.Component;\r\n-import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n-\r\n-@Component @ApplicationScoped\r\n-public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n-\r\n-    private SessionFactory sessionFactory;\r\n-    private static Logger LOG = Logger.getLogger(SessionFactoryCreator.class);\r\n-    private String env;\r\n-    \r\n-    public SessionFactoryCreator(ServletContext context) {\r\n-        env = context.getInitParameter(\"environment\");\r\n-    }\r\n-\r\n-    @Override\r\n-    public SessionFactory getInstance() {\r\n-        return sessionFactory;\r\n-    }\r\n-    \r\n-    @PreDestroy\r\n-    public void destroy() {\r\n-        sessionFactory.close();\r\n-    }\r\n-    \r\n-    @PostConstruct\r\n-    public void create() {\r\n-        if (env.equals(\"heroku\")) {\r\n-            \r\n-            URI dbUri;\r\n-            try {\r\n-                dbUri = new URI(System.getenv(\"DATABASE_URL\"));\r\n-            } catch (URISyntaxException e) {\r\n-                throw new RuntimeException(e);\r\n-            }\r\n-\r\n-            String username = dbUri.getUserInfo().split(\":\")[0];\r\n-            String password = dbUri.getUserInfo().split(\":\")[1];\r\n-            String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + \':\' + dbUri.getPort()  + dbUri.getPath();\r\n-            \r\n-            LOG.info(\"using heroku specific confs\");\r\n-            LOG.info(\"username: \" + username);\r\n-            LOG.info(\"password: \" + password);\r\n-            LOG.info(\"dbUrl: \" + dbUrl);\r\n-            Configuration configuration = new Configuration().configure(\"/hibernate-heroku.cfg.xml\");\r\n-            configuration.setProperty(\"hibernate.connection.url\", dbUrl);\r\n-            configuration.setProperty(\"hibernate.connection.driver_class\", \"org.postgresql.Driver\");\r\n-            configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\r\n-            configuration.setProperty(\"hibernate.connection.username\", username);\r\n-            configuration.setProperty(\"hibernate.connection.password\", password);\r\n-            \r\n-            sessionFactory = configuration.buildSessionFactory();\r\n-        } else {\r\n-            sessionFactory = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n-        }\r\n-    }\r\n-\r\n-}\r\n','DELETED',52,34),(209,'@@ -6,7 +6,7 @@ import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n-import br.ime.usp.commendans.util.DataImporter;\r\n+import br.ime.usp.commendans.infra.DataImporter;\r\n \r\n \r\n @Resource\r\n','DEFAULT',26,34),(210,'@@ -10,11 +10,11 @@ import br.com.caelum.vraptor.view.Results;\r\n import br.ime.usp.commendans.dao.ApplicationDao;\r\n import br.ime.usp.commendans.dao.ItemDao;\r\n import br.ime.usp.commendans.infra.TupleJsonSerializer;\r\n-import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n-import br.ime.usp.commendans.itemtoitem.Tuple;\r\n import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n \r\n @Resource\r\n public class ItemToItemController {\r\n','DEFAULT',40,34),(211,'@@ -0,0 +1,88 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.util.ArrayList;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+import org.hibernate.Session;\r\n+import org.hibernate.SessionFactory;\r\n+import org.hibernate.cfg.Configuration;\r\n+\r\n+import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class DataImporter {\r\n+    \r\n+    private final Session session;\r\n+    private static Logger logger = Logger.getLogger(DataImporter.class);\r\n+\r\n+    public DataImporter(Session session) {\r\n+        this.session = session;\r\n+    }\r\n+\r\n+    public static void main(String[] args) throws IOException {\r\n+        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n+        Session session = sf.openSession();\r\n+        DataImporter dataImporter = new DataImporter(session);\r\n+        dataImporter.importData(\"/orders.csv\");\r\n+    }\r\n+\r\n+    public void importData(String file) {\r\n+        HashMap<Long, Customer> users = new HashMap<Long, Customer>();\r\n+        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n+        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n+        String line = safeReadLine(reader);\r\n+        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        session.save(cdc);\r\n+        \r\n+        while (line != null) {\r\n+            logger.debug(line);\r\n+            List<String> row = Arrays.asList(line.split(\",\"));\r\n+            long id = Long.parseLong(row.get(0));\r\n+            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n+            Customer user = users.get(id);\r\n+            if (user == null) {\r\n+                user = new Customer(new ArrayList<Item>(), id, cdc);\r\n+            }\r\n+            Item item = items.get(itemId);\r\n+            if (item == null) {\r\n+                item = new Item(itemId, cdc);\r\n+            }\r\n+            user.add(item);\r\n+            line = safeReadLine(reader);\r\n+            users.put(id, user);\r\n+            items.put(itemId, item);\r\n+        }\r\n+        \r\n+        logger.debug(\"persisting\");\r\n+        session.getTransaction().begin();\r\n+        for (Item item : items.values()) {\r\n+            session.save(item);\r\n+        }\r\n+        \r\n+        Collection<Customer> allUsers = users.values();\r\n+        for (Customer user : allUsers) {\r\n+            session.save(user);\r\n+        }\r\n+        session.getTransaction().commit();\r\n+        logger.debug(\"finished persisting\");\r\n+    }\r\n+\r\n+    private String safeReadLine(BufferedReader reader) {\r\n+        try {\r\n+            return reader.readLine();\r\n+        } catch (IOException e) {\r\n+            throw new RuntimeException(\"could not read file\", e);\r\n+        }\r\n+    }\r\n+\r\n+}\r\n','NEW',74,34),(212,'@@ -0,0 +1,25 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import org.eclipse.jetty.server.Server;\r\n+import org.eclipse.jetty.webapp.WebAppContext;\r\n+\r\n+public class JettyRunner {\r\n+    \r\n+    public static void main(String[] args) throws Exception {\r\n+        String webappDirLocation = \"src/main/webapp/\";\r\n+        String webPort = System.getenv(\"PORT\");\r\n+        if (webPort == null || webPort.isEmpty()) {\r\n+            webPort = \"8080\";\r\n+        }\r\n+        Server server = new Server(Integer.valueOf(webPort));\r\n+        WebAppContext root = new WebAppContext();\r\n+        root.setContextPath(\"/\");\r\n+        root.setDescriptor(webappDirLocation + \"/WEB-INF/web-heroku.xml\");\r\n+        root.setResourceBase(webappDirLocation);\r\n+        root.setParentLoaderPriority(true);\r\n+        server.setHandler(root);\r\n+        server.start();\r\n+        server.join();\r\n+    }\r\n+    \r\n+}\r\n\\ No newline at end of file\r\n','NEW',75,34),(213,'@@ -9,11 +9,11 @@ import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n import br.ime.usp.commendans.dao.ApplicationDao;\r\n import br.ime.usp.commendans.dao.CustomerDao;\r\n-import br.ime.usp.commendans.itemtoitem.SingleAppRecommenderFactory;\r\n-import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommenderFactory;\r\n \r\n @Component @ApplicationScoped\r\n public class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n','DEFAULT',63,34),(214,'@@ -0,0 +1,38 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import javax.annotation.PostConstruct;\r\n+import javax.annotation.PreDestroy;\r\n+\r\n+import org.hibernate.Session;\r\n+import org.hibernate.SessionFactory;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n+import br.com.caelum.vraptor.ioc.RequestScoped;\r\n+\r\n+@Component @RequestScoped\r\n+public class SessionCreator implements ComponentFactory<Session> {\r\n+    \r\n+    private final SessionFactory sf;\r\n+    private org.hibernate.classic.Session session;\r\n+\r\n+    public SessionCreator(SessionFactory sf) {\r\n+        this.sf = sf;\r\n+    }\r\n+\r\n+    @Override\r\n+    public Session getInstance() {\r\n+        return session;\r\n+    }\r\n+    \r\n+    @PostConstruct\r\n+    public void create() {\r\n+        session = sf.openSession();\r\n+    }\r\n+    \r\n+    @PreDestroy\r\n+    public void destroy() {\r\n+        session.close();\r\n+    }\r\n+\r\n+}\r\n','NEW',76,34),(215,'@@ -0,0 +1,71 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import java.net.URI;\r\n+import java.net.URISyntaxException;\r\n+\r\n+import javax.annotation.PostConstruct;\r\n+import javax.annotation.PreDestroy;\r\n+import javax.servlet.ServletContext;\r\n+\r\n+import org.apache.log4j.Logger;\r\n+import org.hibernate.SessionFactory;\r\n+import org.hibernate.cfg.Configuration;\r\n+\r\n+import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n+\r\n+@Component @ApplicationScoped\r\n+public class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n+\r\n+    private SessionFactory sessionFactory;\r\n+    private static Logger LOG = Logger.getLogger(SessionFactoryCreator.class);\r\n+    private String env;\r\n+    \r\n+    public SessionFactoryCreator(ServletContext context) {\r\n+        env = context.getInitParameter(\"environment\");\r\n+    }\r\n+\r\n+    @Override\r\n+    public SessionFactory getInstance() {\r\n+        return sessionFactory;\r\n+    }\r\n+    \r\n+    @PreDestroy\r\n+    public void destroy() {\r\n+        sessionFactory.close();\r\n+    }\r\n+    \r\n+    @PostConstruct\r\n+    public void create() {\r\n+        if (env.equals(\"heroku\")) {\r\n+            \r\n+            URI dbUri;\r\n+            try {\r\n+                dbUri = new URI(System.getenv(\"DATABASE_URL\"));\r\n+            } catch (URISyntaxException e) {\r\n+                throw new RuntimeException(e);\r\n+            }\r\n+\r\n+            String username = dbUri.getUserInfo().split(\":\")[0];\r\n+            String password = dbUri.getUserInfo().split(\":\")[1];\r\n+            String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + \':\' + dbUri.getPort()  + dbUri.getPath();\r\n+            \r\n+            LOG.info(\"using heroku specific confs\");\r\n+            LOG.info(\"username: \" + username);\r\n+            LOG.info(\"password: \" + password);\r\n+            LOG.info(\"dbUrl: \" + dbUrl);\r\n+            Configuration configuration = new Configuration().configure(\"/hibernate-heroku.cfg.xml\");\r\n+            configuration.setProperty(\"hibernate.connection.url\", dbUrl);\r\n+            configuration.setProperty(\"hibernate.connection.driver_class\", \"org.postgresql.Driver\");\r\n+            configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\r\n+            configuration.setProperty(\"hibernate.connection.username\", username);\r\n+            configuration.setProperty(\"hibernate.connection.password\", password);\r\n+            \r\n+            sessionFactory = configuration.buildSessionFactory();\r\n+        } else {\r\n+            sessionFactory = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n+        }\r\n+    }\r\n+\r\n+}\r\n','NEW',77,34),(216,'@@ -4,7 +4,7 @@ import java.util.Arrays;\r\n import java.util.List;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n-import br.ime.usp.commendans.itemtoitem.Tuple;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n \r\n import com.google.gson.ExclusionStrategy;\r\n import com.google.gson.FieldAttributes;\r\n','DEFAULT',45,34),(217,'@@ -1,59 +0,0 @@\r\n-package br.ime.usp.commendans.itemtoitem;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collections;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class ItemToItemsAssociation {\r\n-    private Item item;\r\n-    private Map<Item, Double> associations;\r\n-\r\n-    public ItemToItemsAssociation(Item item) {\r\n-        this.item = item;\r\n-        this.associations = new HashMap<Item, Double>();\r\n-    }\r\n-\r\n-    public void associate(Item i) {\r\n-        if (i.equals(this.item))\r\n-            return;\r\n-        Double v = associations.get(i);\r\n-        if (v == null) {\r\n-            v = 0.0;\r\n-        }\r\n-        v += 1.0;\r\n-        associations.put(i, v);\r\n-    }\r\n-    \r\n-    public double associationValue(Item i) {\r\n-        Double v = associations.get(i);\r\n-        if (v == null) {\r\n-            return 0.0;\r\n-        }\r\n-        return v;\r\n-    }\r\n-    \r\n-    \r\n-    @Override\r\n-    public String toString() {\r\n-        String res = this.item.toString() + \" => {\" + associations.toString() + \"}\";\r\n-        return res;\r\n-    }\r\n-\r\n-    public List<Tuple> toTupleList() {\r\n-        Set<Item> items = associations.keySet();\r\n-        ArrayList<Tuple> tuples = new ArrayList<Tuple>();\r\n-        for (Item item : items) {\r\n-            Double value = associations.get(item);\r\n-            tuples.add(new Tuple(item, value));\r\n-        }\r\n-        Collections.sort(tuples);\r\n-        Collections.reverse(tuples);\r\n-        return tuples;\r\n-    }\r\n-\r\n-}\r\n','DELETED',35,34),(218,'@@ -1,48 +0,0 @@\r\n-package br.ime.usp.commendans.itemtoitem;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Collections;\r\n-import java.util.HashSet;\r\n-import java.util.List;\r\n-import java.util.Set;\r\n-\r\n-public class ItemVector {\r\n-\r\n-    private Set<Tuple> tuples;\r\n-\r\n-    public ItemVector(Set<Tuple> tuples) {\r\n-        this.tuples = tuples;\r\n-    }\r\n-\r\n-    public ItemVector(List<Tuple> tuples) {\r\n-        this(new HashSet<Tuple>(tuples));\r\n-    }\r\n-\r\n-    public List<Tuple> getTuples() {\r\n-        ArrayList<Tuple> tuples = new ArrayList<Tuple>(this.tuples);\r\n-        Collections.sort(tuples);\r\n-        Collections.reverse(tuples);\r\n-        return Collections.unmodifiableList(tuples);\r\n-    }\r\n-    \r\n-    public ItemVector merge(ItemVector other) {\r\n-        Set<Tuple> tuples = new HashSet<Tuple>();\r\n-        Set<Tuple> tuplesToRemove = new HashSet<Tuple>();\r\n-        for (Tuple tuple : this.tuples) {\r\n-            for (Tuple t : other.getTuples()) {\r\n-                if (t.getItem().equals(tuple.getItem())) {\r\n-                    Tuple newTuple = new Tuple(t.getItem(), tuple.getValue() + t.getValue());\r\n-                    tuples.add(newTuple);\r\n-                    tuplesToRemove.add(t);\r\n-                    tuplesToRemove.add(tuple);\r\n-                    break;\r\n-                }\r\n-            }\r\n-        }\r\n-        tuples.addAll(this.tuples);\r\n-        tuples.addAll(other.getTuples());\r\n-        tuples.removeAll(tuplesToRemove);\r\n-        return new ItemVector(tuples);\r\n-    }\r\n-\r\n-}\r\n','DELETED',46,34),(219,'@@ -1,46 +0,0 @@\r\n-package br.ime.usp.commendans.itemtoitem;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import br.ime.usp.commendans.Recommender;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class SingleAppRecommender implements Recommender {\r\n-\r\n-    private final Map<Item, ItemVector> associations;\r\n-\r\n-    public SingleAppRecommender(\r\n-            HashMap<Item, ItemToItemsAssociation> associations) {\r\n-        this.associations = parse(associations);\r\n-    }\r\n-\r\n-    private Map<Item, ItemVector> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n-        HashMap<Item, ItemVector> map = new HashMap<Item, ItemVector>();\r\n-        Set<Item> items = associations.keySet();\r\n-        for (Item item : items) {\r\n-            ItemToItemsAssociation association = associations.get(item);\r\n-            List<Tuple> tuples = association.toTupleList();\r\n-            map.put(item, new ItemVector(tuples));\r\n-        }\r\n-        return map;\r\n-    }\r\n-\r\n-    @Override\r\n-    public ItemVector recommendedItemsFor(Item item) {\r\n-        return associations.get(item);\r\n-    }\r\n-\r\n-    public ItemVector recommendedItemsFor(List<Item> items) {\r\n-        ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n-        for (Item item : items) {\r\n-            ItemVector other = recommendedItemsFor(item);\r\n-            vector = vector.merge(other);\r\n-        }\r\n-        return vector;\r\n-    }\r\n-\r\n-}\r\n','DELETED',64,34),(220,'@@ -1,69 +0,0 @@\r\n-package br.ime.usp.commendans.itemtoitem;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n-import br.com.caelum.vraptor.ioc.Component;\r\n-import br.ime.usp.commendans.model.Customer;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-@Component @ApplicationScoped\r\n-public class SingleAppRecommenderFactory {\r\n-\r\n-    private Map<Item, List<Customer>> customerByItemBought;\r\n-    private HashMap<Item, ItemToItemsAssociation> associations;\r\n-    \r\n-    public SingleAppRecommenderFactory() {\r\n-        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n-    }\r\n-    \r\n-    public void addUser(Customer user) {\r\n-        for (Item item : user.itemsBought()) {\r\n-            store(item, user);\r\n-        }\r\n-    }\r\n-\r\n-    private void store(Item item, Customer user) {\r\n-        List<Customer> users = customerByItemBought.get(item);\r\n-        if (users == null) {\r\n-            users = new ArrayList<Customer>();\r\n-        }\r\n-        users.add(user);\r\n-        customerByItemBought.put(item, users);\r\n-    }\r\n-    \r\n-    \r\n-    public SingleAppRecommender build() {\r\n-        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n-        Set<Item> items = customerByItemBought.keySet();\r\n-        for (Item item : items) {\r\n-            associate(item);\r\n-        }\r\n-        return new SingleAppRecommender(associations);\r\n-    }\r\n-\r\n-    private void associate(Item item) {\r\n-        ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n-        List<Customer> customers = customerByItemBought.get(item);\r\n-        for (Customer user : customers) {\r\n-            List<Item> boughtTogether = user.itemsBought();\r\n-            for (Item i : boughtTogether) {\r\n-                association.associate(i);\r\n-            }\r\n-        }\r\n-        associations.put(item, association);\r\n-    }\r\n-    \r\n-    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n-        return associations;\r\n-    }\r\n-\r\n-    public void clean() {\r\n-        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n-    }\r\n-\r\n-}\r\n','DELETED',72,34),(221,'@@ -1,63 +0,0 @@\r\n-package br.ime.usp.commendans.itemtoitem;\r\n-\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class Tuple implements Comparable<Tuple> {\r\n-    private Item item;\r\n-    private Double value;\r\n-\r\n-    public Tuple(Item item, Double value) {\r\n-        this.item = item;\r\n-        this.value = value;\r\n-    }\r\n-\r\n-    public Item getItem() {\r\n-        return item;\r\n-    }\r\n-\r\n-    public Double getValue() {\r\n-        return value;\r\n-    }\r\n-\r\n-    @Override\r\n-    public int compareTo(Tuple o) {\r\n-        return (int) (value - o.getValue());\r\n-    }\r\n-    \r\n-    @Override\r\n-    public int hashCode() {\r\n-        final int prime = 31;\r\n-        int result = 1;\r\n-        result = prime * result + ((item == null) ? 0 : item.hashCode());\r\n-        result = prime * result + ((value == null) ? 0 : value.hashCode());\r\n-        return result;\r\n-    }\r\n-\r\n-    @Override\r\n-    public boolean equals(Object obj) {\r\n-        if (this == obj)\r\n-            return true;\r\n-        if (obj == null)\r\n-            return false;\r\n-        if (getClass() != obj.getClass())\r\n-            return false;\r\n-        Tuple other = (Tuple) obj;\r\n-        if (item == null) {\r\n-            if (other.item != null)\r\n-                return false;\r\n-        } else if (!item.equals(other.item))\r\n-            return false;\r\n-        if (value == null) {\r\n-            if (other.value != null)\r\n-                return false;\r\n-        } else if (!value.equals(other.value))\r\n-            return false;\r\n-        return true;\r\n-    }\r\n-\r\n-    @Override\r\n-    public String toString() {\r\n-        return \"[Tuple: item=\" + item + \"]\";\r\n-    }\r\n-\r\n-}\r\n','DELETED',47,34),(222,'@@ -7,8 +7,8 @@ import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n import javax.persistence.Transient;\r\n \r\n-import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n-import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n \r\n @Entity\r\n public class Application {\r\n','DEFAULT',62,34),(223,'@@ -4,9 +4,9 @@ import java.util.HashMap;\r\n import java.util.List;\r\n import java.util.Map;\r\n \r\n-import br.ime.usp.commendans.itemtoitem.ItemVector;\r\n import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n \r\n public class GeneralRecommender {\r\n \r\n','DEFAULT',65,34),(224,'@@ -0,0 +1,8 @@\r\n+package br.ime.usp.commendans.recommender;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n+\r\n+public interface Recommender {\r\n+    public ItemVector recommendedItemsFor(Item item);\r\n+}\r\n','NEW',78,34),(225,'@@ -0,0 +1,59 @@\r\n+package br.ime.usp.commendans.recommender.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class ItemToItemsAssociation {\r\n+    private Item item;\r\n+    private Map<Item, Double> associations;\r\n+\r\n+    public ItemToItemsAssociation(Item item) {\r\n+        this.item = item;\r\n+        this.associations = new HashMap<Item, Double>();\r\n+    }\r\n+\r\n+    public void associate(Item i) {\r\n+        if (i.equals(this.item))\r\n+            return;\r\n+        Double v = associations.get(i);\r\n+        if (v == null) {\r\n+            v = 0.0;\r\n+        }\r\n+        v += 1.0;\r\n+        associations.put(i, v);\r\n+    }\r\n+    \r\n+    public double associationValue(Item i) {\r\n+        Double v = associations.get(i);\r\n+        if (v == null) {\r\n+            return 0.0;\r\n+        }\r\n+        return v;\r\n+    }\r\n+    \r\n+    \r\n+    @Override\r\n+    public String toString() {\r\n+        String res = this.item.toString() + \" => {\" + associations.toString() + \"}\";\r\n+        return res;\r\n+    }\r\n+\r\n+    public List<Tuple> toTupleList() {\r\n+        Set<Item> items = associations.keySet();\r\n+        ArrayList<Tuple> tuples = new ArrayList<Tuple>();\r\n+        for (Item item : items) {\r\n+            Double value = associations.get(item);\r\n+            tuples.add(new Tuple(item, value));\r\n+        }\r\n+        Collections.sort(tuples);\r\n+        Collections.reverse(tuples);\r\n+        return tuples;\r\n+    }\r\n+\r\n+}\r\n','NEW',79,34),(226,'@@ -0,0 +1,48 @@\r\n+package br.ime.usp.commendans.recommender.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+public class ItemVector {\r\n+\r\n+    private Set<Tuple> tuples;\r\n+\r\n+    public ItemVector(Set<Tuple> tuples) {\r\n+        this.tuples = tuples;\r\n+    }\r\n+\r\n+    public ItemVector(List<Tuple> tuples) {\r\n+        this(new HashSet<Tuple>(tuples));\r\n+    }\r\n+\r\n+    public List<Tuple> getTuples() {\r\n+        ArrayList<Tuple> tuples = new ArrayList<Tuple>(this.tuples);\r\n+        Collections.sort(tuples);\r\n+        Collections.reverse(tuples);\r\n+        return Collections.unmodifiableList(tuples);\r\n+    }\r\n+    \r\n+    public ItemVector merge(ItemVector other) {\r\n+        Set<Tuple> tuples = new HashSet<Tuple>();\r\n+        Set<Tuple> tuplesToRemove = new HashSet<Tuple>();\r\n+        for (Tuple tuple : this.tuples) {\r\n+            for (Tuple t : other.getTuples()) {\r\n+                if (t.getItem().equals(tuple.getItem())) {\r\n+                    Tuple newTuple = new Tuple(t.getItem(), tuple.getValue() + t.getValue());\r\n+                    tuples.add(newTuple);\r\n+                    tuplesToRemove.add(t);\r\n+                    tuplesToRemove.add(tuple);\r\n+                    break;\r\n+                }\r\n+            }\r\n+        }\r\n+        tuples.addAll(this.tuples);\r\n+        tuples.addAll(other.getTuples());\r\n+        tuples.removeAll(tuplesToRemove);\r\n+        return new ItemVector(tuples);\r\n+    }\r\n+\r\n+}\r\n','NEW',80,34),(227,'@@ -0,0 +1,46 @@\r\n+package br.ime.usp.commendans.recommender.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.recommender.Recommender;\r\n+\r\n+public class SingleAppRecommender implements Recommender {\r\n+\r\n+    private final Map<Item, ItemVector> associations;\r\n+\r\n+    public SingleAppRecommender(\r\n+            HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        this.associations = parse(associations);\r\n+    }\r\n+\r\n+    private Map<Item, ItemVector> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n+        HashMap<Item, ItemVector> map = new HashMap<Item, ItemVector>();\r\n+        Set<Item> items = associations.keySet();\r\n+        for (Item item : items) {\r\n+            ItemToItemsAssociation association = associations.get(item);\r\n+            List<Tuple> tuples = association.toTupleList();\r\n+            map.put(item, new ItemVector(tuples));\r\n+        }\r\n+        return map;\r\n+    }\r\n+\r\n+    @Override\r\n+    public ItemVector recommendedItemsFor(Item item) {\r\n+        return associations.get(item);\r\n+    }\r\n+\r\n+    public ItemVector recommendedItemsFor(List<Item> items) {\r\n+        ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n+        for (Item item : items) {\r\n+            ItemVector other = recommendedItemsFor(item);\r\n+            vector = vector.merge(other);\r\n+        }\r\n+        return vector;\r\n+    }\r\n+\r\n+}\r\n','NEW',81,34),(228,'@@ -0,0 +1,69 @@\r\n+package br.ime.usp.commendans.recommender.itemtoitem;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+@Component @ApplicationScoped\r\n+public class SingleAppRecommenderFactory {\r\n+\r\n+    private Map<Item, List<Customer>> customerByItemBought;\r\n+    private HashMap<Item, ItemToItemsAssociation> associations;\r\n+    \r\n+    public SingleAppRecommenderFactory() {\r\n+        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n+    }\r\n+    \r\n+    public void addUser(Customer user) {\r\n+        for (Item item : user.itemsBought()) {\r\n+            store(item, user);\r\n+        }\r\n+    }\r\n+\r\n+    private void store(Item item, Customer user) {\r\n+        List<Customer> users = customerByItemBought.get(item);\r\n+        if (users == null) {\r\n+            users = new ArrayList<Customer>();\r\n+        }\r\n+        users.add(user);\r\n+        customerByItemBought.put(item, users);\r\n+    }\r\n+    \r\n+    \r\n+    public SingleAppRecommender build() {\r\n+        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n+        Set<Item> items = customerByItemBought.keySet();\r\n+        for (Item item : items) {\r\n+            associate(item);\r\n+        }\r\n+        return new SingleAppRecommender(associations);\r\n+    }\r\n+\r\n+    private void associate(Item item) {\r\n+        ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n+        List<Customer> customers = customerByItemBought.get(item);\r\n+        for (Customer user : customers) {\r\n+            List<Item> boughtTogether = user.itemsBought();\r\n+            for (Item i : boughtTogether) {\r\n+                association.associate(i);\r\n+            }\r\n+        }\r\n+        associations.put(item, association);\r\n+    }\r\n+    \r\n+    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n+        return associations;\r\n+    }\r\n+\r\n+    public void clean() {\r\n+        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n+    }\r\n+\r\n+}\r\n','NEW',82,34),(229,'@@ -0,0 +1,63 @@\r\n+package br.ime.usp.commendans.recommender.itemtoitem;\r\n+\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+public class Tuple implements Comparable<Tuple> {\r\n+    private Item item;\r\n+    private Double value;\r\n+\r\n+    public Tuple(Item item, Double value) {\r\n+        this.item = item;\r\n+        this.value = value;\r\n+    }\r\n+\r\n+    public Item getItem() {\r\n+        return item;\r\n+    }\r\n+\r\n+    public Double getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    @Override\r\n+    public int compareTo(Tuple o) {\r\n+        return (int) (value - o.getValue());\r\n+    }\r\n+    \r\n+    @Override\r\n+    public int hashCode() {\r\n+        final int prime = 31;\r\n+        int result = 1;\r\n+        result = prime * result + ((item == null) ? 0 : item.hashCode());\r\n+        result = prime * result + ((value == null) ? 0 : value.hashCode());\r\n+        return result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (getClass() != obj.getClass())\r\n+            return false;\r\n+        Tuple other = (Tuple) obj;\r\n+        if (item == null) {\r\n+            if (other.item != null)\r\n+                return false;\r\n+        } else if (!item.equals(other.item))\r\n+            return false;\r\n+        if (value == null) {\r\n+            if (other.value != null)\r\n+                return false;\r\n+        } else if (!value.equals(other.value))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return \"[Tuple: item=\" + item + \"]\";\r\n+    }\r\n+\r\n+}\r\n','NEW',83,34),(230,'@@ -1,25 +0,0 @@\r\n-package br.ime.usp.commendans.runner;\r\n-\r\n-import org.eclipse.jetty.server.Server;\r\n-import org.eclipse.jetty.webapp.WebAppContext;\r\n-\r\n-public class Runner {\r\n-    \r\n-    public static void main(String[] args) throws Exception {\r\n-        String webappDirLocation = \"src/main/webapp/\";\r\n-        String webPort = System.getenv(\"PORT\");\r\n-        if (webPort == null || webPort.isEmpty()) {\r\n-            webPort = \"8080\";\r\n-        }\r\n-        Server server = new Server(Integer.valueOf(webPort));\r\n-        WebAppContext root = new WebAppContext();\r\n-        root.setContextPath(\"/\");\r\n-        root.setDescriptor(webappDirLocation + \"/WEB-INF/web-heroku.xml\");\r\n-        root.setResourceBase(webappDirLocation);\r\n-        root.setParentLoaderPriority(true);\r\n-        server.setHandler(root);\r\n-        server.start();\r\n-        server.join();\r\n-    }\r\n-    \r\n-}\r\n\\ No newline at end of file\r\n','DELETED',59,34),(231,'@@ -1,88 +0,0 @@\r\n-package br.ime.usp.commendans.util;\r\n-\r\n-import java.io.BufferedReader;\r\n-import java.io.IOException;\r\n-import java.io.InputStream;\r\n-import java.io.InputStreamReader;\r\n-import java.util.ArrayList;\r\n-import java.util.Arrays;\r\n-import java.util.Collection;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-\r\n-import org.apache.log4j.Logger;\r\n-import org.hibernate.Session;\r\n-import org.hibernate.SessionFactory;\r\n-import org.hibernate.cfg.Configuration;\r\n-\r\n-import br.ime.usp.commendans.model.Application;\r\n-import br.ime.usp.commendans.model.Customer;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class DataImporter {\r\n-    \r\n-    private final Session session;\r\n-    private static Logger logger = Logger.getLogger(DataImporter.class);\r\n-\r\n-    public DataImporter(Session session) {\r\n-        this.session = session;\r\n-    }\r\n-\r\n-    public static void main(String[] args) throws IOException {\r\n-        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n-        Session session = sf.openSession();\r\n-        DataImporter dataImporter = new DataImporter(session);\r\n-        dataImporter.importData(\"/orders.csv\");\r\n-    }\r\n-\r\n-    public void importData(String file) {\r\n-        HashMap<Long, Customer> users = new HashMap<Long, Customer>();\r\n-        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n-        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n-        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n-        String line = safeReadLine(reader);\r\n-        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n-        session.save(cdc);\r\n-        \r\n-        while (line != null) {\r\n-            logger.debug(line);\r\n-            List<String> row = Arrays.asList(line.split(\",\"));\r\n-            long id = Long.parseLong(row.get(0));\r\n-            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n-            Customer user = users.get(id);\r\n-            if (user == null) {\r\n-                user = new Customer(new ArrayList<Item>(), id, cdc);\r\n-            }\r\n-            Item item = items.get(itemId);\r\n-            if (item == null) {\r\n-                item = new Item(itemId, cdc);\r\n-            }\r\n-            user.add(item);\r\n-            line = safeReadLine(reader);\r\n-            users.put(id, user);\r\n-            items.put(itemId, item);\r\n-        }\r\n-        \r\n-        logger.debug(\"persisting\");\r\n-        session.getTransaction().begin();\r\n-        for (Item item : items.values()) {\r\n-            session.save(item);\r\n-        }\r\n-        \r\n-        Collection<Customer> allUsers = users.values();\r\n-        for (Customer user : allUsers) {\r\n-            session.save(user);\r\n-        }\r\n-        session.getTransaction().commit();\r\n-        logger.debug(\"finished persisting\");\r\n-    }\r\n-\r\n-    private String safeReadLine(BufferedReader reader) {\r\n-        try {\r\n-            return reader.readLine();\r\n-        } catch (IOException e) {\r\n-            throw new RuntimeException(\"could not read file\", e);\r\n-        }\r\n-    }\r\n-\r\n-}\r\n','DELETED',36,34),(232,'@@ -8,6 +8,8 @@ import javax.servlet.ServletContext;\r\n import org.junit.Ignore;\r\n import org.junit.Test;\r\n \r\n+import br.ime.usp.commendans.infra.SessionFactoryCreator;\r\n+\r\n public class SessionFactoryCreatorTest {\r\n \r\n     @Test @Ignore\r\n','DEFAULT',54,34),(233,'@@ -1,87 +0,0 @@\r\n-package br.ime.usp.commendans.factory;\r\n-\r\n-import static org.junit.Assert.assertEquals;\r\n-\r\n-import java.util.Arrays;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\n-import br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n-import br.ime.usp.commendans.itemtoitem.SingleAppRecommenderFactory;\r\n-import br.ime.usp.commendans.itemtoitem.Tuple;\r\n-import br.ime.usp.commendans.model.Application;\r\n-import br.ime.usp.commendans.model.Customer;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class SingleAppRecommenderFactoryTest {\r\n-\r\n-    @Test\r\n-    public void shouldBuildRecommenderFromCollectiveIntelligenceInActionExample() {\r\n-        SingleAppRecommenderFactory factory = new SingleAppRecommenderFactory();\r\n-        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n-        Item item1 = new Item(1l, cdc);\r\n-        Item item2 = new Item(2l, cdc);\r\n-        Item item3 = new Item(3l, cdc);\r\n-        Item item4 = new Item(4l, cdc);\r\n-        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l, cdc);\r\n-        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l, cdc);\r\n-        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l, cdc);\r\n-        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l, cdc);\r\n-        factory.addUser(user1);\r\n-        factory.addUser(user2);\r\n-        factory.addUser(user3);\r\n-        factory.addUser(user4);\r\n-        \r\n-        SingleAppRecommender recommender = factory.build();\r\n-        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n-        \r\n-        List<Tuple> recommendedItems = recommender.recommendedItemsFor(item1).getTuples();\r\n-        ItemToItemsAssociation association = associations.get(item1);\r\n-        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n-        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n-        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n-        \r\n-        assertEquals(2, recommendedItems.size());\r\n-        assertEquals(item3, recommendedItems.get(0).getItem());\r\n-        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n-        assertEquals(item2, recommendedItems.get(1).getItem());\r\n-        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n-        \r\n-        recommendedItems = recommender.recommendedItemsFor(item2).getTuples();\r\n-        association = associations.get(item2);\r\n-        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n-        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n-        \r\n-        assertEquals(3, recommendedItems.size());\r\n-        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n-        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n-        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n-        \r\n-        recommendedItems = recommender.recommendedItemsFor(item3).getTuples();\r\n-        association = associations.get(item3);\r\n-        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n-        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n-        \r\n-        assertEquals(3, recommendedItems.size());\r\n-        assertEquals(item1, recommendedItems.get(0).getItem());\r\n-        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n-        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n-        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n-        \r\n-        association = associations.get(item4);\r\n-        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n-        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n-        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n-        \r\n-    }\r\n-\r\n-}\r\n','DELETED',73,34),(234,'@@ -6,9 +6,9 @@ import java.util.Arrays;\r\n \r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.itemtoitem.Tuple;\r\n import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n \r\n public class TupleJsonSerializerTest {\r\n \r\n','DEFAULT',49,34),(235,'@@ -1,42 +0,0 @@\r\n-package br.ime.usp.commendans.itemtoitem;\r\n-\r\n-import static org.junit.Assert.assertEquals;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.HashSet;\r\n-import java.util.List;\r\n-\r\n-import org.junit.Test;\r\n-\r\n-import br.ime.usp.commendans.model.Application;\r\n-import br.ime.usp.commendans.model.Item;\r\n-\r\n-public class ItemVectorTest {\r\n-\r\n-    @Test\r\n-    public void shouldMergeTuples() {\r\n-        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n-        Item item1 = new Item(1l, cdc);\r\n-        Item item2 = new Item(2l, cdc);\r\n-        Item item3 = new Item(3l, cdc);\r\n-        Item item4 = new Item(4l, cdc);\r\n-        List<Tuple> tuples = asList(new Tuple(item1, 11.0), new Tuple(item2, 8.0), new Tuple(item3, 2.0));\r\n-        ItemVector itemVector1 = new ItemVector(new HashSet<Tuple>(tuples));\r\n-        tuples = asList(new Tuple(item4, 10.0), new Tuple(item3, 7.0));\r\n-        ItemVector itemVector2 = new ItemVector(new HashSet<Tuple>(tuples));\r\n-        \r\n-        ItemVector merge = itemVector1.merge(itemVector2);\r\n-        List<Tuple> expected = asList(new Tuple(item1, 11.0), new Tuple(item4, 10.0), new Tuple(item3, 9.0), new Tuple(item2, 8.0));\r\n-        assertEquals(expected, merge.getTuples());\r\n-        \r\n-    }\r\n-\r\n-    private List<Tuple> asList(Tuple ... tuples) {\r\n-        ArrayList<Tuple> tuplesList = new ArrayList<Tuple>();\r\n-        for (int i = 0; i < tuples.length; i++) {\r\n-            tuplesList.add(tuples[i]);\r\n-        }\r\n-        return tuplesList;\r\n-    }\r\n-\r\n-}\r\n','DELETED',50,34),(236,'@@ -0,0 +1,44 @@\r\n+package br.ime.usp.commendans.recommender.itemtoitem;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n+\r\n+public class ItemVectorTest {\r\n+\r\n+    @Test\r\n+    public void shouldMergeTuples() {\r\n+        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        Item item1 = new Item(1l, cdc);\r\n+        Item item2 = new Item(2l, cdc);\r\n+        Item item3 = new Item(3l, cdc);\r\n+        Item item4 = new Item(4l, cdc);\r\n+        List<Tuple> tuples = asList(new Tuple(item1, 11.0), new Tuple(item2, 8.0), new Tuple(item3, 2.0));\r\n+        ItemVector itemVector1 = new ItemVector(new HashSet<Tuple>(tuples));\r\n+        tuples = asList(new Tuple(item4, 10.0), new Tuple(item3, 7.0));\r\n+        ItemVector itemVector2 = new ItemVector(new HashSet<Tuple>(tuples));\r\n+        \r\n+        ItemVector merge = itemVector1.merge(itemVector2);\r\n+        List<Tuple> expected = asList(new Tuple(item1, 11.0), new Tuple(item4, 10.0), new Tuple(item3, 9.0), new Tuple(item2, 8.0));\r\n+        assertEquals(expected, merge.getTuples());\r\n+        \r\n+    }\r\n+\r\n+    private List<Tuple> asList(Tuple ... tuples) {\r\n+        ArrayList<Tuple> tuplesList = new ArrayList<Tuple>();\r\n+        for (int i = 0; i < tuples.length; i++) {\r\n+            tuplesList.add(tuples[i]);\r\n+        }\r\n+        return tuplesList;\r\n+    }\r\n+\r\n+}\r\n','NEW',84,34),(237,'@@ -0,0 +1,87 @@\r\n+package br.ime.usp.commendans.recommender.itemtoitem;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.Item;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.ItemToItemsAssociation;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommenderFactory;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n+\r\n+public class SingleAppRecommenderFactoryTest {\r\n+\r\n+    @Test\r\n+    public void shouldBuildRecommenderFromCollectiveIntelligenceInActionExample() {\r\n+        SingleAppRecommenderFactory factory = new SingleAppRecommenderFactory();\r\n+        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n+        Item item1 = new Item(1l, cdc);\r\n+        Item item2 = new Item(2l, cdc);\r\n+        Item item3 = new Item(3l, cdc);\r\n+        Item item4 = new Item(4l, cdc);\r\n+        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l, cdc);\r\n+        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l, cdc);\r\n+        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l, cdc);\r\n+        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l, cdc);\r\n+        factory.addUser(user1);\r\n+        factory.addUser(user2);\r\n+        factory.addUser(user3);\r\n+        factory.addUser(user4);\r\n+        \r\n+        SingleAppRecommender recommender = factory.build();\r\n+        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n+        \r\n+        List<Tuple> recommendedItems = recommender.recommendedItemsFor(item1).getTuples();\r\n+        ItemToItemsAssociation association = associations.get(item1);\r\n+        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(2, recommendedItems.size());\r\n+        assertEquals(item3, recommendedItems.get(0).getItem());\r\n+        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(item2, recommendedItems.get(1).getItem());\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        \r\n+        recommendedItems = recommender.recommendedItemsFor(item2).getTuples();\r\n+        association = associations.get(item2);\r\n+        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(3, recommendedItems.size());\r\n+        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n+        \r\n+        recommendedItems = recommender.recommendedItemsFor(item3).getTuples();\r\n+        association = associations.get(item3);\r\n+        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n+        \r\n+        assertEquals(3, recommendedItems.size());\r\n+        assertEquals(item1, recommendedItems.get(0).getItem());\r\n+        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n+        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n+        \r\n+        association = associations.get(item4);\r\n+        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n+        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n+        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n+        \r\n+    }\r\n+\r\n+}\r\n','NEW',85,34),(238,'@@ -23,5 +23,10 @@\r\n 		<appender-ref ref=\"stdout\" />\r\n 	</category>\r\n 	\r\n+	<category name=\"org.eclipse.jetty.util.log\">\r\n+		<priority value=\"DEBUG\" />\r\n+		<appender-ref ref=\"stdout\" />\r\n+	</category>\r\n+	\r\n \r\n </log4j:configuration>\r\n','DEFAULT',38,35),(239,'@@ -6,10 +6,11 @@ import org.hibernate.Query;\r\n import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n+import br.com.caelum.vraptor.ioc.PrototypeScoped;\r\n import br.ime.usp.commendans.model.Application;\r\n import br.ime.usp.commendans.model.Customer;\r\n \r\n-@Component\r\n+@Component @PrototypeScoped\r\n public class CustomerDao {\r\n     private final Session session;\r\n \r\n','DEFAULT',60,36),(240,'@@ -4,6 +4,9 @@ import java.util.List;\r\n \r\n import javax.annotation.PostConstruct;\r\n \r\n+import org.hibernate.Session;\r\n+import org.hibernate.SessionFactory;\r\n+\r\n import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n@@ -22,9 +25,10 @@ public class RecommenderCreator implements ComponentFactory<GeneralRecommender>\r\n     private GeneralRecommender recommender;\r\n     private final ApplicationDao appDao;\r\n \r\n-    public RecommenderCreator(CustomerDao dao, ApplicationDao appDao, SingleAppRecommenderFactory factory) {\r\n-        this.customerDao = dao;\r\n-        this.appDao = appDao;\r\n+    public RecommenderCreator(SingleAppRecommenderFactory factory, SessionFactory sf) {\r\n+        Session session = sf.openSession();\r\n+        this.customerDao = new CustomerDao(session);\r\n+        this.appDao = new ApplicationDao(session);\r\n         this.factory = factory;\r\n     }\r\n \r\n','DEFAULT',63,37),(241,'@@ -7,6 +7,7 @@ import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n import br.ime.usp.commendans.infra.DataImporter;\r\n+import br.ime.usp.commendans.recommender.RecommenderCreator;\r\n \r\n \r\n @Resource\r\n@@ -14,10 +15,12 @@ public class IndexController {\r\n     \r\n     private final Result result;\r\n     private final Session session;\r\n+    private final RecommenderCreator recommenderCreator;\r\n \r\n-    public IndexController(Result result, Session session) {\r\n+    public IndexController(Result result, Session session, RecommenderCreator recommenderCreator) {\r\n         this.result = result;\r\n         this.session = session;\r\n+        this.recommenderCreator = recommenderCreator;\r\n     }\r\n     \r\n     @Get(\"/\")\r\n@@ -29,6 +32,7 @@ public class IndexController {\r\n     public void importData() {\r\n         DataImporter dataImporter = new DataImporter(session);\r\n         dataImporter.importData(\"/orders.csv\");\r\n+        recommenderCreator.create();\r\n         result.use(Results.http()).body(\"<html><body>finished persisting</body></html>\");\r\n     }\r\n }\r\n','DEFAULT',26,38),(242,'@@ -1,58 +0,0 @@\r\n-package br.ime.usp.commendans.infra;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.annotation.PostConstruct;\r\n-\r\n-import org.hibernate.Session;\r\n-import org.hibernate.SessionFactory;\r\n-\r\n-import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n-import br.com.caelum.vraptor.ioc.Component;\r\n-import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n-import br.ime.usp.commendans.dao.ApplicationDao;\r\n-import br.ime.usp.commendans.dao.CustomerDao;\r\n-import br.ime.usp.commendans.model.Application;\r\n-import br.ime.usp.commendans.model.Customer;\r\n-import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n-import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n-import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommenderFactory;\r\n-\r\n-@Component @ApplicationScoped\r\n-public class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n-    private final CustomerDao customerDao;\r\n-    private final SingleAppRecommenderFactory factory;\r\n-    private GeneralRecommender recommender;\r\n-    private final ApplicationDao appDao;\r\n-\r\n-    public RecommenderCreator(SingleAppRecommenderFactory factory, SessionFactory sf) {\r\n-        Session session = sf.openSession();\r\n-        this.customerDao = new CustomerDao(session);\r\n-        this.appDao = new ApplicationDao(session);\r\n-        this.factory = factory;\r\n-    }\r\n-\r\n-    @Override\r\n-    public GeneralRecommender getInstance() {\r\n-        return recommender;\r\n-    }\r\n-    \r\n-    @PostConstruct\r\n-    public void create() {\r\n-        List<Application> apps = appDao.list();\r\n-        for (Application app : apps) {\r\n-            List<Customer> customers = customerDao.findCustomersOf(app);\r\n-            SingleAppRecommender recommender = buildSingleAppRecommender(customers);\r\n-            app.use(recommender);\r\n-        }\r\n-        this.recommender = new GeneralRecommender(apps);\r\n-    }\r\n-\r\n-    private SingleAppRecommender buildSingleAppRecommender(List<Customer> users) {\r\n-        factory.clean();\r\n-        for (Customer user : users) {\r\n-            factory.addUser(user);\r\n-        }\r\n-        return factory.build();\r\n-    }\r\n-}\r\n','DELETED',63,38),(243,'@@ -0,0 +1,57 @@\r\n+package br.ime.usp.commendans.recommender;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.annotation.PostConstruct;\r\n+\r\n+import org.hibernate.Session;\r\n+import org.hibernate.SessionFactory;\r\n+\r\n+import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n+import br.ime.usp.commendans.dao.ApplicationDao;\r\n+import br.ime.usp.commendans.dao.CustomerDao;\r\n+import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommenderFactory;\r\n+\r\n+@Component @ApplicationScoped\r\n+public class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n+    private final CustomerDao customerDao;\r\n+    private final SingleAppRecommenderFactory factory;\r\n+    private GeneralRecommender recommender;\r\n+    private final ApplicationDao appDao;\r\n+\r\n+    public RecommenderCreator(SingleAppRecommenderFactory factory, SessionFactory sf) {\r\n+        Session session = sf.openSession();\r\n+        this.customerDao = new CustomerDao(session);\r\n+        this.appDao = new ApplicationDao(session);\r\n+        this.factory = factory;\r\n+    }\r\n+\r\n+    @Override\r\n+    public GeneralRecommender getInstance() {\r\n+        return recommender;\r\n+    }\r\n+    \r\n+    @PostConstruct\r\n+    public void create() {\r\n+        List<Application> apps = appDao.list();\r\n+        for (Application app : apps) {\r\n+            List<Customer> customers = customerDao.findCustomersOf(app);\r\n+            SingleAppRecommender recommender = buildSingleAppRecommender(customers);\r\n+            app.use(recommender);\r\n+        }\r\n+        this.recommender = new GeneralRecommender(apps);\r\n+    }\r\n+    \r\n+    private SingleAppRecommender buildSingleAppRecommender(List<Customer> users) {\r\n+        factory.clean();\r\n+        for (Customer user : users) {\r\n+            factory.addUser(user);\r\n+        }\r\n+        return factory.build();\r\n+    }\r\n+}\r\n','NEW',86,38),(244,'@@ -14,7 +14,7 @@\r\n     \r\n         <property name=\"show_sql\">false</property>\r\n         <property name=\"format_sql\">false</property>\r\n-        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n+        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n','DEFAULT',53,39),(245,'@@ -0,0 +1 @@\r\n+curl --data \"clientAppUserId=66666666&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\" http://localhost:8080/commendans/app/123/addSale\r\n','NEW',87,40),(246,'@@ -0,0 +1,57 @@\r\n+package br.ime.usp.commendans.controller;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import br.com.caelum.vraptor.Post;\r\n+import br.com.caelum.vraptor.Resource;\r\n+import br.com.caelum.vraptor.Result;\r\n+import br.com.caelum.vraptor.view.Results;\r\n+import br.ime.usp.commendans.dao.ClientAppDao;\r\n+import br.ime.usp.commendans.dao.CustomerDao;\r\n+import br.ime.usp.commendans.dao.ItemDao;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n+import br.ime.usp.commendans.model.Customer;\r\n+import br.ime.usp.commendans.model.GroupedItems;\r\n+import br.ime.usp.commendans.model.Item;\r\n+\r\n+@Resource\r\n+public class ClientAppController {\r\n+\r\n+    private final Result result;\r\n+    private final ClientAppDao appDao;\r\n+    private final ItemDao itemDao;\r\n+    private final CustomerDao customerDao;\r\n+\r\n+    public ClientAppController(Result result, ClientAppDao appDao, ItemDao itemDao, CustomerDao customerDao) {\r\n+        this.result = result;\r\n+        this.appDao = appDao;\r\n+        this.itemDao = itemDao;\r\n+        this.customerDao = customerDao;\r\n+    }\r\n+    \r\n+    //clientAppUserId=100&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\r\n+    @Post(\"app/{key}/addSale\")\r\n+    public void addSale(String key, Long clientAppUserId, List<Long> itemsIds) {\r\n+        ClientApp app = appDao.findByAccessKey(key);\r\n+        GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n+        \r\n+        ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n+        \r\n+        for (Item item : newItems) {\r\n+            itemDao.save(item);\r\n+        }\r\n+        \r\n+        Customer customer = customerDao.find(app, clientAppUserId);\r\n+        List<Item> allItems = groupedItems.getItems();\r\n+        if (customer == null) {\r\n+            customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n+        }\r\n+        for (Item item : allItems) {\r\n+            customer.add(item);\r\n+        }\r\n+        customerDao.save(customer);\r\n+        result.use(Results.json()).from(true).serialize();\r\n+    }\r\n+\r\n+}\r\n','NEW',88,40),(247,'@@ -7,10 +7,10 @@ import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n-import br.ime.usp.commendans.dao.ApplicationDao;\r\n+import br.ime.usp.commendans.dao.ClientAppDao;\r\n import br.ime.usp.commendans.dao.ItemDao;\r\n import br.ime.usp.commendans.infra.TupleJsonSerializer;\r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n@@ -22,10 +22,10 @@ public class ItemToItemController {\r\n     private final Result result;\r\n     private final TupleJsonSerializer serializer;\r\n     private final GeneralRecommender recommender;\r\n-    private final ApplicationDao appDao;\r\n+    private final ClientAppDao appDao;\r\n \r\n     public ItemToItemController(GeneralRecommender recommender, \r\n-            ItemDao itemDao, ApplicationDao appDao, Result result, \r\n+            ItemDao itemDao, ClientAppDao appDao, Result result, \r\n             TupleJsonSerializer serializer) {\r\n         this.recommender = recommender;\r\n         this.itemDao = itemDao;\r\n@@ -37,7 +37,7 @@ public class ItemToItemController {\r\n     @Get(\"/recommend/item/{appItemId}\")\r\n     public void recommend(Long appItemId, String accessKey) {\r\n         if (validKey(accessKey)) {\r\n-            Application app = appDao.findByAccessKey(accessKey);\r\n+            ClientApp app = appDao.findByAccessKey(accessKey);\r\n             Item item = itemDao.findByAppItemId(appItemId, app);\r\n             ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n             serializeResult(recommended);\r\n@@ -48,15 +48,15 @@ public class ItemToItemController {\r\n     @Get(\"/recommend/items/\")\r\n     public void recommend(List<Long> itemsIds, String accessKey) {\r\n         if (validKey(accessKey)) {\r\n-            Application app = appDao.findByAccessKey(accessKey);\r\n-            List<Item> items = itemDao.findAppItemIds(itemsIds, app);\r\n+            ClientApp app = appDao.findByAccessKey(accessKey);\r\n+            List<Item> items = itemDao.findItems(itemsIds, app).getItems();\r\n             ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n             serializeResult(recommended);\r\n         }\r\n     }\r\n \r\n     private boolean validKey(String accessKey) {\r\n-        Application app = appDao.findByAccessKey(accessKey);\r\n+        ClientApp app = appDao.findByAccessKey(accessKey);\r\n         if (app == null) {\r\n             result.notFound();\r\n             return false;\r\n','DEFAULT',40,40),(248,'@@ -1,32 +0,0 @@\r\n-package br.ime.usp.commendans.dao;\r\n-\r\n-import java.util.List;\r\n-\r\n-import org.hibernate.Query;\r\n-import org.hibernate.Session;\r\n-\r\n-import br.com.caelum.vraptor.ioc.Component;\r\n-import br.ime.usp.commendans.model.Application;\r\n-\r\n-@Component\r\n-public class ApplicationDao {\r\n-    \r\n-    private final Session session;\r\n-\r\n-    public ApplicationDao(Session session) {\r\n-        this.session = session;\r\n-    }\r\n-    \r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public List<Application> list() {\r\n-        return session.createCriteria(Application.class).list();\r\n-    }\r\n-\r\n-    public Application findByAccessKey(String key) {\r\n-        Query query = session.createQuery(\"select app from Application app where app.accessKey=:key\");\r\n-        query.setParameter(\"key\", key);\r\n-        return (Application) query.uniqueResult();\r\n-    }\r\n-\r\n-\r\n-}\r\n','DELETED',68,40),(249,'@@ -0,0 +1,32 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.hibernate.Query;\r\n+import org.hibernate.Session;\r\n+\r\n+import br.com.caelum.vraptor.ioc.Component;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n+\r\n+@Component\r\n+public class ClientAppDao {\r\n+    \r\n+    private final Session session;\r\n+\r\n+    public ClientAppDao(Session session) {\r\n+        this.session = session;\r\n+    }\r\n+    \r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public List<ClientApp> list() {\r\n+        return session.createCriteria(ClientApp.class).list();\r\n+    }\r\n+\r\n+    public ClientApp findByAccessKey(String key) {\r\n+        Query query = session.createQuery(\"select app from ClientApp app where app.accessKey=:key\");\r\n+        query.setParameter(\"key\", key);\r\n+        return (ClientApp) query.uniqueResult();\r\n+    }\r\n+\r\n+\r\n+}\r\n','NEW',89,40),(250,'@@ -7,7 +7,7 @@ import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.PrototypeScoped;\r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Customer;\r\n \r\n @Component @PrototypeScoped\r\n@@ -24,11 +24,24 @@ public class CustomerDao {\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n-    public List<Customer> findCustomersOf(Application app) {\r\n+    public List<Customer> findCustomersOf(ClientApp app) {\r\n         Query query = session.createQuery(\"select customer from Customer customer \" +\r\n         		\"join fetch customer.items \" +\r\n         		\"where customer.app.name like :appName\");\r\n         query.setParameter(\"appName\", app.getName());\r\n         return query.list();\r\n     }\r\n+\r\n+    public void save(Customer customer) {\r\n+        session.saveOrUpdate(customer);\r\n+    }\r\n+\r\n+    public Customer find(ClientApp app, Long customerId) {\r\n+        Query query = session.createQuery(\"select customer from Customer customer \" +\r\n+                \"where customer.app.id like :appId \" +\r\n+                \"and customer.clientAppCustomerId = :customerId\");\r\n+        query.setParameter(\"appId\", app.getId());\r\n+        query.setParameter(\"customerId\", customerId);\r\n+        return (Customer) query.uniqueResult();\r\n+    }\r\n }\r\n','DEFAULT',60,40),(251,'@@ -6,7 +6,8 @@ import org.hibernate.Query;\r\n import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.ioc.Component;\r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n+import br.ime.usp.commendans.model.GroupedItems;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n @Component\r\n@@ -18,7 +19,7 @@ public class ItemDao {\r\n         this.session = session;\r\n     }\r\n \r\n-    public Item findByAppItemId(Long appItemId, Application app) {\r\n+    public Item findByAppItemId(Long appItemId, ClientApp app) {\r\n         Query query = session.createQuery(\"select item from Item item where item.appItemId = :id and item.app.id = :appId\");\r\n         query.setLong(\"id\", appItemId);\r\n         query.setLong(\"appId\", app.getId());\r\n@@ -26,12 +27,17 @@ public class ItemDao {\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n-    public List<Item> findAppItemIds(List<Long> itemsIds, Application app) {\r\n-        return session\r\n+    public GroupedItems findItems(List<Long> itemsIds, ClientApp app) {\r\n+        List<Item> items = session\r\n                 .createQuery(\"select item from Item item where item.appItemId in :ids and item.app.id = :appId\")\r\n                 .setParameterList(\"ids\", itemsIds)\r\n                 .setParameter(\"appId\", app.getId())\r\n                 .list();\r\n+        return new GroupedItems(items);\r\n+    }\r\n+\r\n+    public void save(Item item) {\r\n+        session.save(item);\r\n     }\r\n \r\n }\r\n','DEFAULT',41,40),(252,'@@ -15,7 +15,7 @@ import org.hibernate.Session;\r\n import org.hibernate.SessionFactory;\r\n import org.hibernate.cfg.Configuration;\r\n \r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n@@ -41,7 +41,7 @@ public class DataImporter {\r\n         InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n         BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n         String line = safeReadLine(reader);\r\n-        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        ClientApp cdc = new ClientApp(\"Casa do Código\", \"123\");\r\n         session.save(cdc);\r\n         \r\n         while (line != null) {\r\n','DEFAULT',74,40),(253,'@@ -1,90 +0,0 @@\r\n-package br.ime.usp.commendans.model;\r\n-\r\n-import java.util.List;\r\n-\r\n-import javax.persistence.Entity;\r\n-import javax.persistence.GeneratedValue;\r\n-import javax.persistence.Id;\r\n-import javax.persistence.Transient;\r\n-\r\n-import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n-import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n-\r\n-@Entity\r\n-public class Application {\r\n-\r\n-\r\n-    @Id\r\n-    @GeneratedValue\r\n-    private Long id;\r\n-\r\n-    private String name;\r\n-\r\n-    private String accessKey;\r\n-\r\n-    @Transient\r\n-    private SingleAppRecommender recommender;\r\n-\r\n-    @Deprecated\r\n-    protected Application() {\r\n-    }\r\n-\r\n-    public Application(String name, String accessKey) {\r\n-        this.name = name;\r\n-        this.accessKey = accessKey;\r\n-    }\r\n-\r\n-    public String getName() {\r\n-        return name;\r\n-    }\r\n-\r\n-    public void use(SingleAppRecommender recommender) {\r\n-        this.recommender = recommender;\r\n-    }\r\n-\r\n-    public Long getId() {\r\n-        return id;\r\n-    }\r\n-\r\n-    public ItemVector recommendedItemsFor(Item item) {\r\n-        return recommender.recommendedItemsFor(item);\r\n-    }\r\n-\r\n-    public ItemVector recommendedItemsFor(List<Item> items) {\r\n-        return recommender.recommendedItemsFor(items);\r\n-    }\r\n-\r\n-    public String getAccessKey() {\r\n-        return accessKey;\r\n-    }\r\n-\r\n-    @Override\r\n-    public String toString() {\r\n-        return \"Application [id=\" + id + \", name=\" + name + \", accessKey=\"\r\n-                + accessKey + \"]\";\r\n-    }\r\n-    @Override\r\n-    public int hashCode() {\r\n-        final int prime = 31;\r\n-        int result = 1;\r\n-        result = prime * result + ((id == null) ? 0 : id.hashCode());\r\n-        return result;\r\n-    }\r\n-    \r\n-    @Override\r\n-    public boolean equals(Object obj) {\r\n-        if (this == obj)\r\n-            return true;\r\n-        if (obj == null)\r\n-            return false;\r\n-        if (getClass() != obj.getClass())\r\n-            return false;\r\n-        Application other = (Application) obj;\r\n-        if (id == null) {\r\n-            if (other.id != null)\r\n-                return false;\r\n-        } else if (!id.equals(other.id))\r\n-            return false;\r\n-        return true;\r\n-    }\r\n-}\r\n','DELETED',62,40),(254,'@@ -0,0 +1,90 @@\r\n+package br.ime.usp.commendans.model;\r\n+\r\n+import java.util.List;\r\n+\r\n+import javax.persistence.Entity;\r\n+import javax.persistence.GeneratedValue;\r\n+import javax.persistence.Id;\r\n+import javax.persistence.Transient;\r\n+\r\n+import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n+import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n+\r\n+@Entity\r\n+public class ClientApp {\r\n+\r\n+\r\n+    @Id\r\n+    @GeneratedValue\r\n+    private Long id;\r\n+\r\n+    private String name;\r\n+\r\n+    private String accessKey;\r\n+\r\n+    @Transient\r\n+    private SingleAppRecommender recommender;\r\n+\r\n+    @Deprecated\r\n+    protected ClientApp() {\r\n+    }\r\n+\r\n+    public ClientApp(String name, String accessKey) {\r\n+        this.name = name;\r\n+        this.accessKey = accessKey;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void use(SingleAppRecommender recommender) {\r\n+        this.recommender = recommender;\r\n+    }\r\n+\r\n+    public Long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public ItemVector recommendedItemsFor(Item item) {\r\n+        return recommender.recommendedItemsFor(item);\r\n+    }\r\n+\r\n+    public ItemVector recommendedItemsFor(List<Item> items) {\r\n+        return recommender.recommendedItemsFor(items);\r\n+    }\r\n+\r\n+    public String getAccessKey() {\r\n+        return accessKey;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return \"Application [id=\" + id + \", name=\" + name + \", accessKey=\"\r\n+                + accessKey + \"]\";\r\n+    }\r\n+    @Override\r\n+    public int hashCode() {\r\n+        final int prime = 31;\r\n+        int result = 1;\r\n+        result = prime * result + ((id == null) ? 0 : id.hashCode());\r\n+        return result;\r\n+    }\r\n+    \r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        if (this == obj)\r\n+            return true;\r\n+        if (obj == null)\r\n+            return false;\r\n+        if (getClass() != obj.getClass())\r\n+            return false;\r\n+        ClientApp other = (ClientApp) obj;\r\n+        if (id == null) {\r\n+            if (other.id != null)\r\n+                return false;\r\n+        } else if (!id.equals(other.id))\r\n+            return false;\r\n+        return true;\r\n+    }\r\n+}\r\n','NEW',90,40),(255,'@@ -14,21 +14,21 @@ public class Customer {\r\n     @Id @GeneratedValue\r\n     private Long id;\r\n     \r\n-    private Long appId;\r\n+    private Long clientAppCustomerId;\r\n \r\n-    @ManyToMany()\r\n+    @ManyToMany\r\n     private List<Item> items;\r\n     \r\n     @ManyToOne\r\n-    private Application app;\r\n+    private ClientApp app;\r\n     \r\n     @Deprecated\r\n     public Customer() {\r\n     }\r\n \r\n-    public Customer(List<Item> items, Long appId, Application app) {\r\n+    public Customer(List<Item> items, Long clientAppCustomerId, ClientApp app) {\r\n         this.items = items;\r\n-        this.appId = appId;\r\n+        this.clientAppCustomerId = clientAppCustomerId;\r\n         this.app = app;\r\n     }\r\n \r\n@@ -38,15 +38,19 @@ public class Customer {\r\n     \r\n     @Override\r\n     public String toString() {\r\n-        return \"User \" + appId + \" from \" + app;\r\n+        return \"User \" + clientAppCustomerId + \" from \" + app;\r\n     }\r\n \r\n     public void add(Item item) {\r\n         items.add(item);\r\n     }\r\n     \r\n-    public Application getApp() {\r\n+    public ClientApp getApp() {\r\n         return app;\r\n     }\r\n     \r\n+    public Long getClientAppCustomerId() {\r\n+        return clientAppCustomerId;\r\n+    }\r\n+    \r\n }\r\n','DEFAULT',61,40),(256,'@@ -0,0 +1,31 @@\r\n+package br.ime.usp.commendans.model;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+public class GroupedItems {\r\n+\r\n+    private final List<Item> items;\r\n+\r\n+    public GroupedItems(List<Item> items) {\r\n+        this.items = new ArrayList(items);\r\n+    }\r\n+\r\n+    public ArrayList<Item> addRemaining(List<Long> ids, ClientApp app) {\r\n+        ArrayList<Item> added = new ArrayList<Item>();\r\n+        for (Long id : ids) {\r\n+            Item item = new Item(id, app);\r\n+            if (!items.contains(item)) {\r\n+                items.add(item);\r\n+                added.add(item);\r\n+            }\r\n+        }\r\n+        return added;\r\n+\r\n+    }\r\n+\r\n+    public List<Item> getItems() {\r\n+        return items;\r\n+    }\r\n+\r\n+}\r\n','NEW',91,40),(257,'@@ -0,0 +1,30 @@\r\n+package br.ime.usp.commendans.model;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+import static org.junit.Assert.assertTrue;\r\n+\r\n+import java.util.Arrays;\r\n+import java.util.List;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+public class GroupedItemsTest {\r\n+\r\n+    @Test\r\n+    public void shouldAddReaminingItems() {\r\n+        Item item1 = new Item(1l, null);\r\n+        Item item2 = new Item(2l, null);\r\n+        GroupedItems groupedItems = new GroupedItems(Arrays.asList(item1, item2));\r\n+        List<Long> ids = Arrays.asList(1l, 2l, 3l, 4l);\r\n+        groupedItems.addRemaining(ids, null);\r\n+        \r\n+        List<Item> items = groupedItems.getItems();\r\n+        \r\n+        assertEquals(4, items.size());\r\n+        assertTrue(items.contains(item1));\r\n+        assertTrue(items.contains(item2));\r\n+        assertTrue(items.contains(new Item(3l, null)));\r\n+        assertTrue(items.contains(new Item(4l, null)));\r\n+    }\r\n+\r\n+}\r\n','NEW',92,40),(258,'@@ -13,13 +13,13 @@ public class Item {\r\n     private Long appItemId;\r\n     \r\n     @ManyToOne\r\n-    private Application app;\r\n+    private ClientApp app;\r\n \r\n     @Deprecated\r\n     protected Item() {\r\n     }\r\n     \r\n-    public Item(Long appItemId, Application app) {\r\n+    public Item(Long appItemId, ClientApp app) {\r\n         this.appItemId = appItemId;\r\n         this.app = app;\r\n     }\r\n@@ -28,7 +28,7 @@ public class Item {\r\n         return appItemId;\r\n     }\r\n     \r\n-    public Application getApp() {\r\n+    public ClientApp getApp() {\r\n         return app;\r\n     }\r\n     \r\n','DEFAULT',28,40),(259,'@@ -4,28 +4,28 @@ import java.util.HashMap;\r\n import java.util.List;\r\n import java.util.Map;\r\n \r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n \r\n public class GeneralRecommender {\r\n \r\n-    private Map<String, Application> appsMap;\r\n+    private Map<String, ClientApp> appsMap;\r\n \r\n-    public GeneralRecommender(List<Application> apps) {\r\n-        appsMap = new HashMap<String, Application>();\r\n-        for (Application app : apps) {\r\n+    public GeneralRecommender(List<ClientApp> apps) {\r\n+        appsMap = new HashMap<String, ClientApp>();\r\n+        for (ClientApp app : apps) {\r\n             appsMap.put(app.getAccessKey(), app);\r\n         }\r\n     }\r\n \r\n     public ItemVector recommendedItemsFor(Item item, String accessKey) {\r\n-        Application application = appsMap.get(accessKey);\r\n+        ClientApp application = appsMap.get(accessKey);\r\n         return application.recommendedItemsFor(item);\r\n     }\r\n \r\n     public ItemVector recommendedItemsFor(List<Item> items, String accessKey) {\r\n-        Application application = appsMap.get(accessKey);\r\n+        ClientApp application = appsMap.get(accessKey);\r\n         return application.recommendedItemsFor(items);\r\n     }\r\n \r\n','DEFAULT',65,40),(260,'@@ -10,9 +10,9 @@ import org.hibernate.SessionFactory;\r\n import br.com.caelum.vraptor.ioc.ApplicationScoped;\r\n import br.com.caelum.vraptor.ioc.Component;\r\n import br.com.caelum.vraptor.ioc.ComponentFactory;\r\n-import br.ime.usp.commendans.dao.ApplicationDao;\r\n+import br.ime.usp.commendans.dao.ClientAppDao;\r\n import br.ime.usp.commendans.dao.CustomerDao;\r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommenderFactory;\r\n@@ -22,12 +22,12 @@ public class RecommenderCreator implements ComponentFactory<GeneralRecommender>\r\n     private final CustomerDao customerDao;\r\n     private final SingleAppRecommenderFactory factory;\r\n     private GeneralRecommender recommender;\r\n-    private final ApplicationDao appDao;\r\n+    private final ClientAppDao appDao;\r\n \r\n     public RecommenderCreator(SingleAppRecommenderFactory factory, SessionFactory sf) {\r\n         Session session = sf.openSession();\r\n         this.customerDao = new CustomerDao(session);\r\n-        this.appDao = new ApplicationDao(session);\r\n+        this.appDao = new ClientAppDao(session);\r\n         this.factory = factory;\r\n     }\r\n \r\n@@ -38,8 +38,8 @@ public class RecommenderCreator implements ComponentFactory<GeneralRecommender>\r\n     \r\n     @PostConstruct\r\n     public void create() {\r\n-        List<Application> apps = appDao.list();\r\n-        for (Application app : apps) {\r\n+        List<ClientApp> apps = appDao.list();\r\n+        for (ClientApp app : apps) {\r\n             List<Customer> customers = customerDao.findCustomersOf(app);\r\n             SingleAppRecommender recommender = buildSingleAppRecommender(customers);\r\n             app.use(recommender);\r\n','DEFAULT',86,40),(261,'@@ -18,7 +18,7 @@\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n-        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.ClientApp\" />\r\n \r\n     </session-factory>\r\n </hibernate-configuration>\r\n','DEFAULT',53,40),(262,'@@ -24,7 +24,7 @@\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n-        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.ClientApp\" />\r\n \r\n     </session-factory>\r\n </hibernate-configuration>\r\n','DEFAULT',37,40),(263,'@@ -1,44 +0,0 @@\r\n-package br.ime.usp.commendans.dao;\r\n-\r\n-import static org.junit.Assert.assertEquals;\r\n-\r\n-import java.util.List;\r\n-\r\n-import org.junit.After;\r\n-import org.junit.Before;\r\n-import org.junit.Test;\r\n-\r\n-import br.ime.usp.commendans.model.Application;\r\n-\r\n-public class ApplicationDaoTest extends DaoTest {\r\n-    private static ApplicationDao applicationDao;\r\n-\r\n-    @Before\r\n-    public void setUp() {\r\n-        applicationDao = new ApplicationDao(session);\r\n-        session.beginTransaction();\r\n-    }\r\n-    \r\n-    @After\r\n-    public void tearDown() {\r\n-        session.getTransaction().rollback();\r\n-        session.clear();\r\n-    }\r\n-    \r\n-    @Test\r\n-    public void shouldListApps() throws Exception {\r\n-        session.save(new Application(\"cdc\", \"123\"));\r\n-        session.save(new Application(\"caelum\", \"1234\"));\r\n-        List<Application> apps = applicationDao.list();\r\n-        assertEquals(2, apps.size());\r\n-    }\r\n-    \r\n-    @Test\r\n-    public void shouldFindAppByAccessKey() throws Exception {\r\n-        session.save(new Application(\"cdc\", \"123\"));\r\n-        session.save(new Application(\"caelum\", \"1234\"));\r\n-        Application app = applicationDao.findByAccessKey(\"1234\");\r\n-        assertEquals(\"caelum\", app.getName());\r\n-    }\r\n-\r\n-}\r\n','DELETED',69,40),(264,'@@ -0,0 +1,44 @@\r\n+package br.ime.usp.commendans.dao;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+import java.util.List;\r\n+\r\n+import org.junit.After;\r\n+import org.junit.Before;\r\n+import org.junit.Test;\r\n+\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n+\r\n+public class ClientAppDaoTest extends DaoTest {\r\n+    private static ClientAppDao applicationDao;\r\n+\r\n+    @Before\r\n+    public void setUp() {\r\n+        applicationDao = new ClientAppDao(session);\r\n+        session.beginTransaction();\r\n+    }\r\n+    \r\n+    @After\r\n+    public void tearDown() {\r\n+        session.getTransaction().rollback();\r\n+        session.clear();\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void shouldListApps() throws Exception {\r\n+        session.save(new ClientApp(\"cdc\", \"123\"));\r\n+        session.save(new ClientApp(\"caelum\", \"1234\"));\r\n+        List<ClientApp> apps = applicationDao.list();\r\n+        assertEquals(2, apps.size());\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void shouldFindAppByAccessKey() throws Exception {\r\n+        session.save(new ClientApp(\"cdc\", \"123\"));\r\n+        session.save(new ClientApp(\"caelum\", \"1234\"));\r\n+        ClientApp app = applicationDao.findByAccessKey(\"1234\");\r\n+        assertEquals(\"caelum\", app.getName());\r\n+    }\r\n+\r\n+}\r\n','NEW',93,40),(265,'@@ -9,19 +9,19 @@ import org.junit.After;\r\n import org.junit.Before;\r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n public class CustomerDaoTest extends DaoTest {\r\n \r\n     private static CustomerDao userDao;\r\n-    private static Application app;\r\n+    private static ClientApp app;\r\n \r\n     @Before\r\n     public void setUp() {\r\n         userDao = new CustomerDao(session);\r\n-        app = new Application(\"cdc\", \"123\");\r\n+        app = new ClientApp(\"cdc\", \"123\");\r\n         session.beginTransaction();\r\n         session.save(app);\r\n     }\r\n@@ -46,26 +46,39 @@ public class CustomerDaoTest extends DaoTest {\r\n \r\n     @Test\r\n     public void shouldFindUsersOfSpecificApp() throws Exception {\r\n+        saveCustomers();    \r\n+\r\n+        List<Customer> customers = userDao.findCustomersOf(app);\r\n+        assertEquals(3, customers.size());\r\n+        assertEquals(\"cdc\", customers.get(0).getApp().getName());\r\n+        assertEquals(\"cdc\", customers.get(1).getApp().getName());\r\n+        assertEquals(\"cdc\", customers.get(2).getApp().getName());\r\n+    }\r\n+    \r\n+    @Test\r\n+    public void shouldFindCustomerWithIdAndApp() throws Exception {\r\n+        saveCustomers();    \r\n+        \r\n+        Customer c = userDao.find(app, 1l);\r\n+        assertEquals(\"cdc\", c.getApp().getName());\r\n+        assertEquals(1l, c.getClientAppCustomerId().longValue());\r\n+    }\r\n+\r\n+    private void saveCustomers() {\r\n         Item item = new Item(1l, app);\r\n         session.save(item);\r\n         List<Item> items = Arrays.asList(item);\r\n         session.save(new Customer(items, 1l, app));\r\n         session.save(new Customer(items, 2l, app));\r\n         session.save(new Customer(items, 3l, app));\r\n-        Application otherApp = new Application(\"gnarus\", \"123\");\r\n+        ClientApp otherApp = new ClientApp(\"gnarus\", \"123\");\r\n         item = new Item(2l, otherApp);\r\n         items = Arrays.asList(item);\r\n         session.save(otherApp);\r\n         session.save(item);\r\n         session.save(new Customer(items, 1l, otherApp));\r\n         session.save(new Customer(items, 2l, otherApp));\r\n-        session.save(new Customer(items, 3l, otherApp));    \r\n-\r\n-        List<Customer> customers = userDao.findCustomersOf(app);\r\n-        assertEquals(3, customers.size());\r\n-        assertEquals(\"cdc\", customers.get(0).getApp().getName());\r\n-        assertEquals(\"cdc\", customers.get(1).getApp().getName());\r\n-        assertEquals(\"cdc\", customers.get(2).getApp().getName());\r\n+        session.save(new Customer(items, 3l, otherApp));\r\n     }\r\n \r\n }\r\n','DEFAULT',66,40),(266,'@@ -6,7 +6,7 @@ import org.junit.After;\r\n import org.junit.Before;\r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Item;\r\n \r\n public class ItemDaoTest extends DaoTest {\r\n@@ -27,8 +27,8 @@ public class ItemDaoTest extends DaoTest {\r\n     \r\n     @Test\r\n     public void shouldFindByAppItemId() throws Exception {\r\n-        Application app = new Application(\"cdc\", \"123\");\r\n-        Application app2 = new Application(\"caelum\", \"1234\");\r\n+        ClientApp app = new ClientApp(\"cdc\", \"123\");\r\n+        ClientApp app2 = new ClientApp(\"caelum\", \"1234\");\r\n         session.save(app);\r\n         session.save(app2);\r\n         session.save(new Item(11l, app));\r\n','DEFAULT',71,40),(267,'@@ -6,7 +6,7 @@ import java.util.Arrays;\r\n \r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n \r\n@@ -15,7 +15,7 @@ public class TupleJsonSerializerTest {\r\n     @Test\r\n     public void shouldSerializeATuple() {\r\n         TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n-        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        ClientApp cdc = new ClientApp(\"Casa do Código\", \"123\");\r\n         String json = serializer.toJson(new Tuple(new Item(1l, cdc), 10.0));\r\n         assertEquals(\"{\\\"item\\\":{\\\"appItemId\\\":1},\\\"value\\\":10.0}\", json);\r\n     }\r\n@@ -23,7 +23,7 @@ public class TupleJsonSerializerTest {\r\n     @Test\r\n     public void shouldSerializeATupleList() {\r\n         TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n-        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        ClientApp cdc = new ClientApp(\"Casa do Código\", \"123\");\r\n         String json = serializer.toJson(Arrays.asList(new Tuple(new Item(1l, cdc), 10.0)));\r\n         assertEquals(\"[{\\\"item\\\":{\\\"appItemId\\\":1},\\\"value\\\":10.0}]\", json);\r\n     }\r\n','DEFAULT',49,40),(268,'@@ -8,7 +8,7 @@ import java.util.List;\r\n \r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n import br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n@@ -17,7 +17,7 @@ public class ItemVectorTest {\r\n \r\n     @Test\r\n     public void shouldMergeTuples() {\r\n-        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n+        ClientApp cdc = new ClientApp(\"Casa do Código\", \"123\");\r\n         Item item1 = new Item(1l, cdc);\r\n         Item item2 = new Item(2l, cdc);\r\n         Item item3 = new Item(3l, cdc);\r\n','DEFAULT',84,40),(269,'@@ -8,7 +8,7 @@ import java.util.List;\r\n \r\n import org.junit.Test;\r\n \r\n-import br.ime.usp.commendans.model.Application;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.itemtoitem.ItemToItemsAssociation;\r\n@@ -21,7 +21,7 @@ public class SingleAppRecommenderFactoryTest {\r\n     @Test\r\n     public void shouldBuildRecommenderFromCollectiveIntelligenceInActionExample() {\r\n         SingleAppRecommenderFactory factory = new SingleAppRecommenderFactory();\r\n-        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n+        ClientApp cdc = new ClientApp(\"casadocodigo\", \"1234\");\r\n         Item item1 = new Item(1l, cdc);\r\n         Item item2 = new Item(2l, cdc);\r\n         Item item3 = new Item(3l, cdc);\r\n','DEFAULT',85,40),(270,'@@ -24,7 +24,7 @@\r\n \r\n         <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n         <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n-        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n+        <mapping class=\"br.ime.usp.commendans.model.ClientApp\" />\r\n \r\n     </session-factory>\r\n </hibernate-configuration>\r\n','DEFAULT',67,40),(271,'@@ -3,6 +3,7 @@ package br.ime.usp.commendans.controller;\r\n import java.util.ArrayList;\r\n import java.util.List;\r\n \r\n+import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Post;\r\n import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n@@ -53,5 +54,16 @@ public class ClientAppController {\r\n         customerDao.save(customer);\r\n         result.use(Results.json()).from(true).serialize();\r\n     }\r\n+    \r\n+    @Get(\"app/new\")\r\n+    public void clientAppForm() {\r\n+    }\r\n+    \r\n+    @Post(\"app/new\")\r\n+    public void saveApp(String name) {\r\n+        String accessKey = \"123\" + name;\r\n+        appDao.save(new ClientApp(name, accessKey));\r\n+        result.include(\"key\", accessKey);\r\n+    }\r\n \r\n }\r\n','DEFAULT',88,41),(272,'@@ -13,6 +13,7 @@ import br.ime.usp.commendans.infra.TupleJsonSerializer;\r\n import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n+import br.ime.usp.commendans.recommender.RecommenderCreator;\r\n import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n import br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n \r\n@@ -23,15 +24,17 @@ public class ItemToItemController {\r\n     private final TupleJsonSerializer serializer;\r\n     private final GeneralRecommender recommender;\r\n     private final ClientAppDao appDao;\r\n+    private final RecommenderCreator recommenderCreator;\r\n \r\n     public ItemToItemController(GeneralRecommender recommender, \r\n             ItemDao itemDao, ClientAppDao appDao, Result result, \r\n-            TupleJsonSerializer serializer) {\r\n+            TupleJsonSerializer serializer, RecommenderCreator recommenderCreator) {\r\n         this.recommender = recommender;\r\n         this.itemDao = itemDao;\r\n         this.appDao = appDao;\r\n         this.result = result;\r\n         this.serializer = serializer;\r\n+        this.recommenderCreator = recommenderCreator;\r\n     }\r\n     \r\n     @Get(\"/recommend/item/{appItemId}\")\r\n@@ -54,6 +57,12 @@ public class ItemToItemController {\r\n             serializeResult(recommended);\r\n         }\r\n     }\r\n+    \r\n+    @Get(\"/recalculate/\")\r\n+    public void recalculate() {\r\n+        recommenderCreator.create();\r\n+        result.use(Results.http()).body(\"ok\");\r\n+    }\r\n \r\n     private boolean validKey(String accessKey) {\r\n         ClientApp app = appDao.findByAccessKey(accessKey);\r\n','DEFAULT',40,41),(273,'@@ -28,5 +28,17 @@ public class ClientAppDao {\r\n         return (ClientApp) query.uniqueResult();\r\n     }\r\n \r\n+    public void save(ClientApp clientApp) {\r\n+        session.save(clientApp);\r\n+    }\r\n+\r\n+    public void commit() {\r\n+        session.getTransaction().commit();\r\n+    }\r\n+\r\n+    public void beginTransaction() {\r\n+        session.beginTransaction();\r\n+    }\r\n+\r\n \r\n }\r\n','DEFAULT',89,41),(274,'@@ -33,7 +33,7 @@ public class CustomerDao {\r\n     }\r\n \r\n     public void save(Customer customer) {\r\n-        session.saveOrUpdate(customer);\r\n+        session.save(customer);\r\n     }\r\n \r\n     public Customer find(ClientApp app, Long customerId) {\r\n','DEFAULT',60,41),(275,'@@ -0,0 +1,65 @@\r\n+/***\r\n+ * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\r\n+ * All rights reserved.\r\n+ *\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import org.hibernate.Session;\r\n+import org.hibernate.Transaction;\r\n+\r\n+import br.com.caelum.vraptor.Intercepts;\r\n+import br.com.caelum.vraptor.Validator;\r\n+import br.com.caelum.vraptor.core.InterceptorStack;\r\n+import br.com.caelum.vraptor.interceptor.Interceptor;\r\n+import br.com.caelum.vraptor.resource.ResourceMethod;\r\n+\r\n+/**\r\n+ * An interceptor that manages Hibernate Transaction. All requests are intercepted\r\n+ * and a transaction is created before execution. If the request has no erros, the transaction\r\n+ * will commited, or a rollback occurs otherwise.\r\n+ * \r\n+ * @author Lucas Cavalcanti\r\n+ */\r\n+@Intercepts\r\n+public class HibernateTransactionInterceptor implements Interceptor {\r\n+\r\n+    private final Session session;\r\n+    private final Validator validator;\r\n+\r\n+    public HibernateTransactionInterceptor(Session session, Validator validator) {\r\n+        this.session = session;\r\n+        this.validator = validator;\r\n+    }\r\n+\r\n+    //TODO I think that transaction null check is unnecessary, since we never get null transation (garcia-jj)\r\n+    public void intercept(InterceptorStack stack, ResourceMethod method, Object instance) {\r\n+        Transaction transaction = null;\r\n+        try {\r\n+            transaction = session.beginTransaction();\r\n+            stack.next(method, instance);\r\n+            if (!validator.hasErrors() && transaction != null) {\r\n+                transaction.commit();\r\n+            }\r\n+        } finally {\r\n+            if (transaction != null && transaction.isActive()) {\r\n+                transaction.rollback();\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public boolean accepts(ResourceMethod method) {\r\n+        return true; // Will intercept all requests\r\n+    }\r\n+}\r\n\\ No newline at end of file\r\n','NEW',94,41),(276,'@@ -0,0 +1,17 @@\r\n+<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n+    pageEncoding=\"UTF-8\"%>\r\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n+<html>\r\n+<head>\r\n+<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n+<title>Insert title here</title>\r\n+</head>\r\n+<body>\r\n+\r\n+	<form method=\"post\">\r\n+		App name: <input type=\"text\" name=\"name\" /> <br>\r\n+		<input type=\"submit\"/> \r\n+	</form>\r\n+\r\n+</body>\r\n+</html>\r\n\\ No newline at end of file\r\n','NEW',95,41),(277,'@@ -0,0 +1,19 @@\r\n+<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n+    pageEncoding=\"UTF-8\"%>\r\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n+<html>\r\n+<head>\r\n+<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n+<title>Insert title here</title>\r\n+</head>\r\n+<body>\r\n+\r\n+<p>\r\n+	App saved!\r\n+</p>\r\n+<p>\r\n+	Store your access key: ${key}\r\n+</p>\r\n+\r\n+</body>\r\n+</html>\r\n\\ No newline at end of file\r\n','NEW',96,41),(278,'@@ -26,7 +26,6 @@ public class CustomerDao {\r\n     @SuppressWarnings(\"unchecked\")\r\n     public List<Customer> findCustomersOf(ClientApp app) {\r\n         Query query = session.createQuery(\"select customer from Customer customer \" +\r\n-        		\"join fetch customer.items \" +\r\n         		\"where customer.app.name like :appName\");\r\n         query.setParameter(\"appName\", app.getName());\r\n         return query.list();\r\n','DEFAULT',60,42),(279,'@@ -3,6 +3,7 @@ package br.ime.usp.commendans.model;\r\n import java.util.List;\r\n \r\n import javax.persistence.Entity;\r\n+import javax.persistence.FetchType;\r\n import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n import javax.persistence.ManyToMany;\r\n@@ -16,7 +17,7 @@ public class Customer {\r\n     \r\n     private Long clientAppCustomerId;\r\n \r\n-    @ManyToMany\r\n+    @ManyToMany(fetch=FetchType.EAGER)\r\n     private List<Item> items;\r\n     \r\n     @ManyToOne\r\n','DEFAULT',61,42),(280,'@@ -220,6 +220,18 @@\r\n 			<artifactId>postgresql</artifactId>\r\n 			<version>9.1-901.jdbc4</version>\r\n 		</dependency>\r\n+		<dependency>\r\n+			<groupId>org.glassfish.web</groupId>\r\n+			<artifactId>jstl-impl</artifactId>\r\n+			<version>1.2</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+			<groupId>org.glassfish.web</groupId>\r\n+			<artifactId>el</artifactId>\r\n+			<version>2.2.1-b03</version>\r\n+		</dependency>\r\n+		            \r\n+		            \r\n             \r\n 		<!-- Provided dependencies -->\r\n 	</dependencies>\r\n','DEFAULT',56,43),(281,'@@ -216,22 +216,16 @@\r\n 			<version>2.1.v20100127</version>\r\n 		</dependency>\r\n 		<dependency>\r\n+			<groupId>org.mortbay.jetty</groupId>\r\n+			<artifactId>jsp-api-2.1</artifactId>\r\n+			<version>7.0.0pre2</version>\r\n+		</dependency>\r\n+		            \r\n+		<dependency>\r\n 			<groupId>postgresql</groupId>\r\n 			<artifactId>postgresql</artifactId>\r\n 			<version>9.1-901.jdbc4</version>\r\n 		</dependency>\r\n-		<dependency>\r\n-			<groupId>org.glassfish.web</groupId>\r\n-			<artifactId>jstl-impl</artifactId>\r\n-			<version>1.2</version>\r\n-		</dependency>\r\n-		<dependency>\r\n-			<groupId>org.glassfish.web</groupId>\r\n-			<artifactId>el</artifactId>\r\n-			<version>2.2.1-b03</version>\r\n-		</dependency>\r\n-		            \r\n-		            \r\n             \r\n 		<!-- Provided dependencies -->\r\n 	</dependencies>\r\n','DEFAULT',56,44),(282,'@@ -212,11 +212,6 @@\r\n 		</dependency>\r\n 		<dependency>\r\n 			<groupId>org.mortbay.jetty</groupId>\r\n-			<artifactId>jsp-2.1-glassfish</artifactId>\r\n-			<version>2.1.v20100127</version>\r\n-		</dependency>\r\n-		<dependency>\r\n-			<groupId>org.mortbay.jetty</groupId>\r\n 			<artifactId>jsp-api-2.1</artifactId>\r\n 			<version>7.0.0pre2</version>\r\n 		</dependency>\r\n@@ -226,6 +221,41 @@\r\n 			<artifactId>postgresql</artifactId>\r\n 			<version>9.1-901.jdbc4</version>\r\n 		</dependency>\r\n+		\r\n+		<dependency>\r\n+		   <groupId>javax.servlet</groupId>\r\n+		   <artifactId>servlet-api</artifactId>\r\n+		   <version>2.5</version>\r\n+		   <scope>provided</scope>\r\n+		</dependency>\r\n+		\r\n+<dependency>\r\n+	<groupId>org.mortbay.jetty</groupId>\r\n+	<artifactId>jsp-2.1-glassfish</artifactId>\r\n+	<version>2.1.v20100127</version>\r\n+</dependency>\r\n+<dependency>\r\n+   <groupId>javax.servlet</groupId>\r\n+   <artifactId>servlet-api</artifactId>\r\n+   <version>2.5</version>\r\n+   <scope>provided</scope>\r\n+</dependency>\r\n+<dependency>\r\n+   <groupId>javax.servlet.jsp</groupId>\r\n+   <artifactId>jsp-api</artifactId>\r\n+   <version>2.1</version>\r\n+   <scope>compile</scope>\r\n+</dependency>\r\n+<dependency>\r\n+   <groupId>javax.servlet</groupId>\r\n+   <artifactId>jstl</artifactId>\r\n+   <version>1.2</version>\r\n+</dependency>\r\n+<dependency>\r\n+   <groupId>org.apache.tomcat</groupId>\r\n+   <artifactId>jasper-el</artifactId>\r\n+   <version>6.0.26</version>\r\n+</dependency>\r\n             \r\n 		<!-- Provided dependencies -->\r\n 	</dependencies>\r\n','DEFAULT',56,45),(283,'@@ -229,33 +229,33 @@\r\n 		   <scope>provided</scope>\r\n 		</dependency>\r\n 		\r\n-<dependency>\r\n-	<groupId>org.mortbay.jetty</groupId>\r\n-	<artifactId>jsp-2.1-glassfish</artifactId>\r\n-	<version>2.1.v20100127</version>\r\n-</dependency>\r\n-<dependency>\r\n-   <groupId>javax.servlet</groupId>\r\n-   <artifactId>servlet-api</artifactId>\r\n-   <version>2.5</version>\r\n-   <scope>provided</scope>\r\n-</dependency>\r\n-<dependency>\r\n-   <groupId>javax.servlet.jsp</groupId>\r\n-   <artifactId>jsp-api</artifactId>\r\n-   <version>2.1</version>\r\n-   <scope>compile</scope>\r\n-</dependency>\r\n-<dependency>\r\n-   <groupId>javax.servlet</groupId>\r\n-   <artifactId>jstl</artifactId>\r\n-   <version>1.2</version>\r\n-</dependency>\r\n-<dependency>\r\n-   <groupId>org.apache.tomcat</groupId>\r\n-   <artifactId>jasper-el</artifactId>\r\n-   <version>6.0.26</version>\r\n-</dependency>\r\n+		<dependency>\r\n+			<groupId>org.mortbay.jetty</groupId>\r\n+			<artifactId>jsp-2.1-glassfish</artifactId>\r\n+			<version>2.1.v20100127</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		   <groupId>javax.servlet</groupId>\r\n+		   <artifactId>servlet-api</artifactId>\r\n+		   <version>2.5</version>\r\n+		   <scope>provided</scope>\r\n+		</dependency>\r\n+		<dependency>\r\n+		   <groupId>javax.servlet.jsp</groupId>\r\n+		   <artifactId>jsp-api</artifactId>\r\n+		   <version>2.1</version>\r\n+		   <scope>compile</scope>\r\n+		</dependency>\r\n+		<dependency>\r\n+		   <groupId>javax.servlet</groupId>\r\n+		   <artifactId>jstl</artifactId>\r\n+		   <version>1.2</version>\r\n+		</dependency>\r\n+		<dependency>\r\n+		   <groupId>org.apache.tomcat</groupId>\r\n+		   <artifactId>jasper-el</artifactId>\r\n+		   <version>6.0.26</version>\r\n+		</dependency>\r\n             \r\n 		<!-- Provided dependencies -->\r\n 	</dependencies>\r\n','DEFAULT',56,46),(284,'@@ -37,7 +37,7 @@ public class CustomerDao {\r\n \r\n     public Customer find(ClientApp app, Long customerId) {\r\n         Query query = session.createQuery(\"select customer from Customer customer \" +\r\n-                \"where customer.app.id like :appId \" +\r\n+                \"where customer.app.id = :appId \" +\r\n                 \"and customer.clientAppCustomerId = :customerId\");\r\n         query.setParameter(\"appId\", app.getId());\r\n         query.setParameter(\"customerId\", customerId);\r\n','DEFAULT',60,46),(285,'@@ -64,7 +64,6 @@ public class DataImporter {\r\n         }\r\n         \r\n         logger.debug(\"persisting\");\r\n-        session.getTransaction().begin();\r\n         for (Item item : items.values()) {\r\n             session.save(item);\r\n         }\r\n@@ -73,7 +72,6 @@ public class DataImporter {\r\n         for (Customer user : allUsers) {\r\n             session.save(user);\r\n         }\r\n-        session.getTransaction().commit();\r\n         logger.debug(\"finished persisting\");\r\n     }\r\n \r\n','DEFAULT',74,47),(286,'@@ -2,6 +2,7 @@ package br.ime.usp.commendans.model;\r\n \r\n import java.util.List;\r\n \r\n+import javax.persistence.Column;\r\n import javax.persistence.Entity;\r\n import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n@@ -13,13 +14,13 @@ import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n @Entity\r\n public class ClientApp {\r\n \r\n-\r\n     @Id\r\n     @GeneratedValue\r\n     private Long id;\r\n \r\n     private String name;\r\n \r\n+    @Column(unique=true)\r\n     private String accessKey;\r\n \r\n     @Transient\r\n','DEFAULT',90,48),(287,'@@ -33,10 +33,11 @@\r\n \r\n 		<!-- commendans dependencies -->\r\n 		<dependency org=\"com.google.code.gson\" name=\"gson\" rev=\"2.2.2\"/>\r\n-		<dependency org=\"com.google.code.gson\" name=\"gson\" rev=\"2.2.2\"/>\r\n 		\r\n 		<dependency org=\"org.eclipse.jetty\" name=\"jetty-webapp\" rev=\"7.4.4.v20110707\"/>\r\n 		<dependency org=\"org.mortbay.jetty\" name=\"jsp-2.1-glassfish\" rev=\"2.1.v20100127\" />\r\n+		<dependency org=\"commons-codec\" name=\"commons-codec\" rev=\"1.7\"/>\r\n+            \r\n 		\r\n 		<!-- Test dependencies -->\r\n 		<dependency org=\"junit\" name=\"junit\" rev=\"4.8.2\" conf=\"test->default\" />\r\n','DEFAULT',12,49),(288,'@@ -230,6 +230,13 @@\r\n 		</dependency>\r\n 		\r\n 		<dependency>\r\n+			<groupId>commons-codec</groupId>\r\n+			<artifactId>commons-codec</artifactId>\r\n+			<version>1.7</version>\r\n+		</dependency>\r\n+		            \r\n+		\r\n+		<dependency>\r\n 			<groupId>org.mortbay.jetty</groupId>\r\n 			<artifactId>jsp-2.1-glassfish</artifactId>\r\n 			<version>2.1.v20100127</version>\r\n','DEFAULT',56,49),(289,'@@ -3,6 +3,8 @@ package br.ime.usp.commendans.controller;\r\n import java.util.ArrayList;\r\n import java.util.List;\r\n \r\n+import org.apache.commons.codec.digest.DigestUtils;\r\n+\r\n import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Post;\r\n import br.com.caelum.vraptor.Resource;\r\n@@ -62,6 +64,7 @@ public class ClientAppController {\r\n     @Post(\"app/new\")\r\n     public void saveApp(String name) {\r\n         String accessKey = \"123\" + name;\r\n+        accessKey = DigestUtils.sha256Hex(accessKey);\r\n         appDao.save(new ClientApp(name, accessKey));\r\n         result.include(\"key\", accessKey);\r\n     }\r\n','DEFAULT',88,49),(290,'@@ -1,5 +1,6 @@\r\n package br.ime.usp.commendans.controller;\r\n \r\n+import org.apache.commons.codec.digest.DigestUtils;\r\n import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.Get;\r\n@@ -33,6 +34,9 @@ public class IndexController {\r\n         DataImporter dataImporter = new DataImporter(session);\r\n         dataImporter.importData(\"/orders.csv\");\r\n         recommenderCreator.create();\r\n-        result.use(Results.http()).body(\"<html><body>finished persisting</body></html>\");\r\n+        String name = \"Casa do Código\";\r\n+        String accessKey = \"123\" + name;\r\n+        accessKey = DigestUtils.sha256Hex(accessKey);\r\n+        result.use(Results.http()).body(\"<html><body>finished persisting, key: \"+accessKey+\"</body></html>\");\r\n     }\r\n }\r\n','DEFAULT',26,49),(291,'@@ -10,6 +10,7 @@ import java.util.Collection;\r\n import java.util.HashMap;\r\n import java.util.List;\r\n \r\n+import org.apache.commons.codec.digest.DigestUtils;\r\n import org.apache.log4j.Logger;\r\n import org.hibernate.Session;\r\n import org.hibernate.SessionFactory;\r\n@@ -41,7 +42,12 @@ public class DataImporter {\r\n         InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n         BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n         String line = safeReadLine(reader);\r\n-        ClientApp cdc = new ClientApp(\"Casa do Código\", \"123\");\r\n+        \r\n+        String name = \"Casa do Código\";\r\n+        String accessKey = \"123\" + name;\r\n+        accessKey = DigestUtils.sha256Hex(accessKey);\r\n+        \r\n+        ClientApp cdc = new ClientApp(\"Casa do Código\", accessKey);\r\n         session.save(cdc);\r\n         \r\n         while (line != null) {\r\n','DEFAULT',74,49),(292,'@@ -24,7 +24,7 @@ public class IndexController {\r\n         this.recommenderCreator = recommenderCreator;\r\n     }\r\n     \r\n-    @Get(\"/\")\r\n+    @Get(\"/helloworld\")\r\n     public void index() {\r\n         result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n     }\r\n','DEFAULT',26,50),(293,'@@ -1,5 +0,0 @@\r\n-<html>\r\n-	<body>\r\n-		<h1>Hello</h1>\r\n-	</body>\r\n-</html>\r\n\\ No newline at end of file\r\n','DELETED',16,51),(294,'@@ -63,7 +63,7 @@ public class ClientAppController {\r\n     \r\n     @Post(\"app/new\")\r\n     public void saveApp(String name) {\r\n-        String accessKey = \"123\" + name;\r\n+        String accessKey = \"askjdaklsjdlkadsjqpoipoweut\" + name;\r\n         accessKey = DigestUtils.sha256Hex(accessKey);\r\n         appDao.save(new ClientApp(name, accessKey));\r\n         result.include(\"key\", accessKey);\r\n','DEFAULT',88,52),(295,'@@ -44,7 +44,7 @@ public class DataImporter {\r\n         String line = safeReadLine(reader);\r\n         \r\n         String name = \"Casa do Código\";\r\n-        String accessKey = \"123\" + name;\r\n+        String accessKey = \"askjdaklsjdlkadsjqpoipoweut\" + name;\r\n         accessKey = DigestUtils.sha256Hex(accessKey);\r\n         \r\n         ClientApp cdc = new ClientApp(\"Casa do Código\", accessKey);\r\n','DEFAULT',74,52),(296,'@@ -8,8 +8,8 @@ import javax.persistence.GeneratedValue;\r\n import javax.persistence.Id;\r\n import javax.persistence.Transient;\r\n \r\n+import br.ime.usp.commendans.recommender.Recommender;\r\n import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n-import br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n \r\n @Entity\r\n public class ClientApp {\r\n@@ -24,7 +24,7 @@ public class ClientApp {\r\n     private String accessKey;\r\n \r\n     @Transient\r\n-    private SingleAppRecommender recommender;\r\n+    private Recommender recommender;\r\n \r\n     @Deprecated\r\n     protected ClientApp() {\r\n@@ -39,7 +39,7 @@ public class ClientApp {\r\n         return name;\r\n     }\r\n \r\n-    public void use(SingleAppRecommender recommender) {\r\n+    public void use(Recommender recommender) {\r\n         this.recommender = recommender;\r\n     }\r\n \r\n','DEFAULT',90,52),(297,'@@ -1,8 +1,12 @@\r\n package br.ime.usp.commendans.recommender;\r\n \r\n+import java.util.List;\r\n+\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n \r\n public interface Recommender {\r\n     public ItemVector recommendedItemsFor(Item item);\r\n+\r\n+    public ItemVector recommendedItemsFor(List<Item> items);\r\n }\r\n','DEFAULT',78,52),(298,'@@ -34,6 +34,7 @@ public class SingleAppRecommender implements Recommender {\r\n         return associations.get(item);\r\n     }\r\n \r\n+    @Override\r\n     public ItemVector recommendedItemsFor(List<Item> items) {\r\n         ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n         for (Item item : items) {\r\n','DEFAULT',81,52),(299,'@@ -40,20 +40,16 @@ public class ClientAppController {\r\n         GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n         \r\n         ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n-        \r\n-        for (Item item : newItems) {\r\n+        for (Item item : newItems)\r\n             itemDao.save(item);\r\n-        }\r\n         \r\n         Customer customer = customerDao.find(app, clientAppUserId);\r\n-        List<Item> allItems = groupedItems.getItems();\r\n-        if (customer == null) {\r\n+        if (customer == null)\r\n             customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n-        }\r\n-        for (Item item : allItems) {\r\n+        for (Item item : groupedItems.getItems())\r\n             customer.add(item);\r\n-        }\r\n         customerDao.save(customer);\r\n+                \r\n         result.use(Results.json()).from(true).serialize();\r\n     }\r\n     \r\n','DEFAULT',88,53),(300,'@@ -47,7 +47,6 @@ public class ItemToItemController {\r\n         }\r\n     }\r\n     \r\n-\r\n     @Get(\"/recommend/items/\")\r\n     public void recommend(List<Long> itemsIds, String accessKey) {\r\n         if (validKey(accessKey)) {\r\n','DEFAULT',40,53),(301,'@@ -1 +1 @@\r\n-curl --data \"clientAppUserId=66666666&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\" http://localhost:8080/commendans/app/123/addSale\r\n+curl --data \"clientAppUserId=66666666&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3&accessKey=04775f2e51279e3fbab3ed1527c364df1b919ce98f4c86ba1bb2db94058b8c6a\" http://localhost:8080/commendans/app/addSale\r\n','DEFAULT',87,54),(302,'@@ -34,23 +34,25 @@ public class ClientAppController {\r\n     }\r\n     \r\n     //clientAppUserId=100&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\r\n-    @Post(\"app/{key}/addSale\")\r\n-    public void addSale(String key, Long clientAppUserId, List<Long> itemsIds) {\r\n-        ClientApp app = appDao.findByAccessKey(key);\r\n-        GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n-        \r\n-        ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n-        for (Item item : newItems)\r\n-            itemDao.save(item);\r\n-        \r\n-        Customer customer = customerDao.find(app, clientAppUserId);\r\n-        if (customer == null)\r\n-            customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n-        for (Item item : groupedItems.getItems())\r\n-            customer.add(item);\r\n-        customerDao.save(customer);\r\n-                \r\n-        result.use(Results.json()).from(true).serialize();\r\n+    @Post(\"app/addSale\")\r\n+    public void addSale(String accessKey, Long clientAppUserId, List<Long> itemsIds) {\r\n+        if (validKey(accessKey)) {\r\n+            ClientApp app = appDao.findByAccessKey(accessKey);\r\n+            GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n+            \r\n+            ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n+            for (Item item : newItems)\r\n+                itemDao.save(item);\r\n+            \r\n+            Customer customer = customerDao.find(app, clientAppUserId);\r\n+            if (customer == null)\r\n+                customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n+            for (Item item : groupedItems.getItems())\r\n+                customer.add(item);\r\n+            customerDao.save(customer);\r\n+                    \r\n+            result.use(Results.json()).from(true).serialize();\r\n+        }\r\n     }\r\n     \r\n     @Get(\"app/new\")\r\n@@ -64,5 +66,14 @@ public class ClientAppController {\r\n         appDao.save(new ClientApp(name, accessKey));\r\n         result.include(\"key\", accessKey);\r\n     }\r\n+    \r\n+    private boolean validKey(String accessKey) {\r\n+        ClientApp app = appDao.findByAccessKey(accessKey);\r\n+        if (app == null) {\r\n+            result.notFound();\r\n+            return false;\r\n+        }\r\n+        return true;\r\n+    }\r\n \r\n }\r\n','DEFAULT',88,54),(303,'@@ -13,6 +13,7 @@ import br.com.caelum.vraptor.view.Results;\r\n import br.ime.usp.commendans.dao.ClientAppDao;\r\n import br.ime.usp.commendans.dao.CustomerDao;\r\n import br.ime.usp.commendans.dao.ItemDao;\r\n+import br.ime.usp.commendans.infra.ValidAccessKey;\r\n import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Customer;\r\n import br.ime.usp.commendans.model.GroupedItems;\r\n@@ -34,25 +35,24 @@ public class ClientAppController {\r\n     }\r\n     \r\n     //clientAppUserId=100&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\r\n-    @Post(\"app/addSale\")\r\n+    @ValidAccessKey(paramName=\"accessKey\")\r\n+    @Post(\"app/addSale\") \r\n     public void addSale(String accessKey, Long clientAppUserId, List<Long> itemsIds) {\r\n-        if (validKey(accessKey)) {\r\n-            ClientApp app = appDao.findByAccessKey(accessKey);\r\n-            GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n-            \r\n-            ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n-            for (Item item : newItems)\r\n-                itemDao.save(item);\r\n-            \r\n-            Customer customer = customerDao.find(app, clientAppUserId);\r\n-            if (customer == null)\r\n-                customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n-            for (Item item : groupedItems.getItems())\r\n-                customer.add(item);\r\n-            customerDao.save(customer);\r\n-                    \r\n-            result.use(Results.json()).from(true).serialize();\r\n-        }\r\n+        ClientApp app = appDao.findByAccessKey(accessKey);\r\n+        GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n+        \r\n+        ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n+        for (Item item : newItems)\r\n+            itemDao.save(item);\r\n+        \r\n+        Customer customer = customerDao.find(app, clientAppUserId);\r\n+        if (customer == null)\r\n+            customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n+        for (Item item : groupedItems.getItems())\r\n+            customer.add(item);\r\n+        customerDao.save(customer);\r\n+                \r\n+        result.use(Results.json()).from(true).serialize();\r\n     }\r\n     \r\n     @Get(\"app/new\")\r\n@@ -66,14 +66,5 @@ public class ClientAppController {\r\n         appDao.save(new ClientApp(name, accessKey));\r\n         result.include(\"key\", accessKey);\r\n     }\r\n-    \r\n-    private boolean validKey(String accessKey) {\r\n-        ClientApp app = appDao.findByAccessKey(accessKey);\r\n-        if (app == null) {\r\n-            result.notFound();\r\n-            return false;\r\n-        }\r\n-        return true;\r\n-    }\r\n \r\n }\r\n','DEFAULT',88,55),(304,'@@ -10,6 +10,7 @@ import br.com.caelum.vraptor.view.Results;\r\n import br.ime.usp.commendans.dao.ClientAppDao;\r\n import br.ime.usp.commendans.dao.ItemDao;\r\n import br.ime.usp.commendans.infra.TupleJsonSerializer;\r\n+import br.ime.usp.commendans.infra.ValidAccessKey;\r\n import br.ime.usp.commendans.model.ClientApp;\r\n import br.ime.usp.commendans.model.Item;\r\n import br.ime.usp.commendans.recommender.GeneralRecommender;\r\n@@ -37,24 +38,23 @@ public class ItemToItemController {\r\n         this.recommenderCreator = recommenderCreator;\r\n     }\r\n     \r\n-    @Get(\"/recommend/item/{appItemId}\")\r\n+    @ValidAccessKey(paramName = \"accessKey\")\r\n+    @Get(\"/recommend/item/{appItemId}\") \r\n     public void recommend(Long appItemId, String accessKey) {\r\n-        if (validKey(accessKey)) {\r\n-            ClientApp app = appDao.findByAccessKey(accessKey);\r\n-            Item item = itemDao.findByAppItemId(appItemId, app);\r\n-            ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n-            serializeResult(recommended);\r\n-        }\r\n+        ClientApp app = appDao.findByAccessKey(accessKey);\r\n+        Item item = itemDao.findByAppItemId(appItemId, app);\r\n+        ItemVector recommended = recommender.recommendedItemsFor(item,\r\n+                accessKey);\r\n+        serializeResult(recommended);\r\n     }\r\n     \r\n+    @ValidAccessKey(paramName = \"accessKey\")\r\n     @Get(\"/recommend/items/\")\r\n     public void recommend(List<Long> itemsIds, String accessKey) {\r\n-        if (validKey(accessKey)) {\r\n-            ClientApp app = appDao.findByAccessKey(accessKey);\r\n-            List<Item> items = itemDao.findItems(itemsIds, app).getItems();\r\n-            ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n-            serializeResult(recommended);\r\n-        }\r\n+        ClientApp app = appDao.findByAccessKey(accessKey);\r\n+        List<Item> items = itemDao.findItems(itemsIds, app).getItems();\r\n+        ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n+        serializeResult(recommended);\r\n     }\r\n     \r\n     @Get(\"/recalculate/\")\r\n@@ -63,15 +63,6 @@ public class ItemToItemController {\r\n         result.use(Results.http()).body(\"ok\");\r\n     }\r\n \r\n-    private boolean validKey(String accessKey) {\r\n-        ClientApp app = appDao.findByAccessKey(accessKey);\r\n-        if (app == null) {\r\n-            result.notFound();\r\n-            return false;\r\n-        }\r\n-        return true;\r\n-    }\r\n-\r\n     private void serializeResult(ItemVector recommended) {\r\n         List<Tuple> tuples = recommended == null ? new ArrayList<Tuple>() : recommended.getTuples();\r\n         result.use(Results.http())\r\n','DEFAULT',40,55),(305,'@@ -0,0 +1,14 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import java.lang.annotation.ElementType;\r\n+import java.lang.annotation.Retention;\r\n+import java.lang.annotation.RetentionPolicy;\r\n+import java.lang.annotation.Target;\r\n+\r\n+@Target(ElementType.METHOD)\r\n+@Retention(RetentionPolicy.RUNTIME)\r\n+public @interface ValidAccessKey {\r\n+\r\n+    String paramName();\r\n+\r\n+}\r\n','NEW',97,55),(306,'@@ -0,0 +1,54 @@\r\n+package br.ime.usp.commendans.infra;\r\n+\r\n+import java.lang.annotation.Annotation;\r\n+\r\n+import javax.servlet.http.HttpServletRequest;\r\n+\r\n+import br.com.caelum.vraptor.InterceptionException;\r\n+import br.com.caelum.vraptor.Intercepts;\r\n+import br.com.caelum.vraptor.Result;\r\n+import br.com.caelum.vraptor.core.InterceptorStack;\r\n+import br.com.caelum.vraptor.interceptor.Interceptor;\r\n+import br.com.caelum.vraptor.resource.ResourceMethod;\r\n+import br.ime.usp.commendans.dao.ClientAppDao;\r\n+import br.ime.usp.commendans.model.ClientApp;\r\n+\r\n+@Intercepts\r\n+public class ValidAccessKeyInterceptor implements Interceptor {\r\n+    \r\n+    private final ClientAppDao appDao;\r\n+    private final Result result;\r\n+    private final HttpServletRequest request;\r\n+    private String paramName;\r\n+\r\n+    public ValidAccessKeyInterceptor(HttpServletRequest request, ClientAppDao appDao, Result result) {\r\n+        this.request = request;\r\n+        this.appDao = appDao;\r\n+        this.result = result;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean accepts(ResourceMethod method) {\r\n+        Annotation[] annotations = method.getMethod().getAnnotations();\r\n+        for (Annotation annotation : annotations) {\r\n+            if (annotation.annotationType().equals(ValidAccessKey.class)) {\r\n+                ValidAccessKey k = (ValidAccessKey) annotation;\r\n+                paramName = k.paramName();\r\n+            }\r\n+        }\r\n+        return method.containsAnnotation(ValidAccessKey.class);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void intercept(InterceptorStack stack, ResourceMethod method,\r\n+            Object arg) throws InterceptionException {\r\n+        String accessKey = request.getParameter(paramName);\r\n+        ClientApp app = appDao.findByAccessKey(accessKey);\r\n+        if (app == null) {\r\n+            result.notFound();\r\n+        } else {\r\n+            stack.next(method, arg);\r\n+        }\r\n+    }\r\n+\r\n+}\r\n','NEW',98,55),(307,'@@ -0,0 +1,4 @@\r\n+INSERT INTO `ClientApp` VALUES (1,\'04775f2e51279e3fbab3ed1527c364df1b919ce98f4c86ba1bb2db94058b8c6a\',\'Casa do Código\');\r\n+INSERT INTO `Customer` VALUES (1,121954,1),(2,121955,1),(3,121952,1),(4,121953,1),(5,121958,1),(6,121959,1),(7,121956,1),(8,121957,1),(9,121962,1),(10,121960,1),(11,121961,1),(12,121966,1),(13,121967,1),(14,121965,1),(15,121971,1),(16,121968,1),(17,121975,1),(18,121974,1),(19,121973,1),(20,121972,1),(21,121979,1),(22,121976,1),(23,121983,1),(24,121980,1),(25,121920,1),(26,121921,1),(27,121922,1),(28,121923,1),(29,121925,1),(30,121926,1),(31,121927,1),(32,121928,1),(33,121929,1),(34,121930,1),(35,121931,1),(36,121932,1),(37,121933,1),(38,121934,1),(39,121935,1),(40,121937,1),(41,121936,1),(42,121939,1),(43,121941,1),(44,121940,1),(45,121943,1),(46,121942,1),(47,121945,1),(48,121944,1),(49,121947,1),(50,121946,1),(51,121949,1),(52,121951,1),(53,121950,1),(54,121894,1),(55,121895,1),(56,121892,1),(57,121893,1),(58,121890,1),(59,121891,1),(60,121888,1),(61,121889,1),(62,121902,1),(63,121903,1),(64,121900,1),(65,121901,1),(66,121899,1),(67,121896,1),(68,121910,1),(69,121909,1),(70,121908,1),(71,121907,1),(72,121906,1),(73,121905,1),(74,121904,1),(75,121918,1),(76,121917,1),(77,121916,1),(78,121915,1),(79,121914,1),(80,121913,1),(81,121912,1),(82,121860,1),(83,121861,1),(84,121862,1),(85,121863,1),(86,121856,1),(87,121857,1),(88,121858,1),(89,121859,1),(90,121868,1),(91,121869,1),(92,121870,1),(93,121864,1),(94,121865,1),(95,121866,1),(96,121867,1),(97,121877,1),(98,121876,1),(99,121879,1),(100,121878,1),(101,121872,1),(102,121875,1),(103,121874,1),(104,121885,1),(105,121884,1),(106,121887,1),(107,121886,1),(108,121880,1),(109,121883,1),(110,121882,1),(111,121997,1),(112,121999,1),(113,121998,1),(114,121993,1),(115,121992,1),(116,121995,1),(117,121994,1),(118,121989,1),(119,121988,1),(120,121991,1),(121,121990,1),(122,121984,1),(123,121987,1),(124,121986,1),(125,122004,1),(126,122005,1),(127,122006,1),(128,122000,1),(129,122001,1),(130,122002,1),(131,122003,1),(132,121352,1),(133,121353,1),(134,121354,1),(135,121355,1),(136,121356,1),(137,121357,1),(138,121358,1),(139,121359,1),(140,121344,1),(141,121345,1),(142,121346,1),(143,121347,1),(144,121348,1),(145,121349,1),(146,121350,1),(147,121351,1),(148,121369,1),(149,121368,1),(150,121371,1),(151,121370,1),(152,121373,1),(153,121372,1),(154,121375,1),(155,121374,1),(156,121361,1),(157,121360,1),(158,121363,1),(159,121362,1),(160,121365,1),(161,121367,1),(162,121366,1),(163,121386,1),(164,121387,1),(165,121384,1),(166,121385,1),(167,121390,1),(168,121391,1),(169,121388,1),(170,121389,1),(171,121378,1),(172,121379,1),(173,121376,1),(174,121377,1),(175,121382,1),(176,121383,1),(177,121380,1),(178,121403,1),(179,121402,1),(180,121401,1),(181,121400,1),(182,121405,1),(183,121404,1),(184,121394,1),(185,121393,1),(186,121392,1),(187,121399,1),(188,121398,1),(189,121397,1),(190,121396,1),(191,121420,1),(192,121421,1),(193,121422,1),(194,121423,1),(195,121416,1),(196,121417,1),(197,121418,1),(198,121419,1),(199,121413,1),(200,121414,1),(201,121415,1),(202,121408,1),(203,121409,1),(204,121410,1),(205,121411,1),(206,121437,1),(207,121436,1),(208,121439,1),(209,121433,1),(210,121432,1),(211,121435,1),(212,121434,1),(213,121429,1),(214,121428,1),(215,121431,1),(216,121430,1),(217,121424,1),(218,121427,1),(219,121426,1),(220,121455,1),(221,121452,1),(222,121453,1),(223,121450,1),(224,121451,1),(225,121448,1),(226,121449,1),(227,121446,1),(228,121447,1),(229,121444,1),(230,121445,1),(231,121442,1),(232,121443,1),(233,121440,1),(234,121441,1),(235,121470,1),(236,121469,1),(237,121468,1),(238,121467,1),(239,121466,1),(240,121465,1),(241,121464,1),(242,121463,1),(243,121462,1),(244,121461,1),(245,121460,1),(246,121459,1),(247,121458,1),(248,121457,1),(249,121473,1),(250,121475,1),(251,121474,1),(252,121477,1),(253,121476,1),(254,121479,1),(255,121478,1),(256,121481,1),(257,121483,1),(258,121482,1),(259,121485,1),(260,121487,1),(261,121486,1),(262,121488,1),(263,121489,1),(264,121490,1),(265,121491,1),(266,121492,1),(267,121493,1),(268,121494,1),(269,121495,1),(270,121497,1),(271,121498,1),(272,121499,1),(273,121500,1),(274,121501,1),(275,121502,1),(276,121503,1),(277,121507,1),(278,121506,1),(279,121505,1),(280,121504,1),(281,121511,1),(282,121510,1),(283,121509,1),(284,121508,1),(285,121515,1),(286,121514,1),(287,121513,1),(288,121512,1),(289,121519,1),(290,121518,1),(291,121517,1),(292,121516,1),(293,121522,1),(294,121523,1),(295,121520,1),(296,121521,1),(297,121526,1),(298,121527,1),(299,121524,1),(300,121525,1),(301,121530,1),(302,121531,1),(303,121528,1),(304,121529,1),(305,121534,1),(306,121535,1),(307,121533,1),(308,121541,1),(309,121540,1),(310,121543,1),(311,121542,1),(312,121537,1),(313,121536,1),(314,121539,1),(315,121538,1),(316,121549,1),(317,121548,1),(318,121551,1),(319,121550,1),(320,121545,1),(321,121544,1),(322,121547,1),(323,121546,1),(324,121556,1),(325,121557,1),(326,121558,1),(327,121553,1),(328,121554,1),(329,121555,1),(330,121564,1),(331,121565,1),(332,121566,1),(333,121567,1),(334,121560,1),(335,121562,1),(336,121563,1),(337,121575,1),(338,121574,1),(339,121573,1),(340,121572,1),(341,121571,1),(342,121570,1),(343,121569,1),(344,121568,1),(345,121583,1),(346,121582,1),(347,121581,1),(348,121580,1),(349,121579,1),(350,121578,1),(351,121577,1),(352,121576,1),(353,121590,1),(354,121588,1),(355,121589,1),(356,121586,1),(357,121587,1),(358,121584,1),(359,121585,1),(360,121598,1),(361,121599,1),(362,121596,1),(363,121597,1),(364,121594,1),(365,121595,1),(366,121592,1),(367,121593,1),(368,121627,1),(369,121626,1),(370,121625,1),(371,121624,1),(372,121630,1),(373,121629,1),(374,121628,1),(375,121619,1),(376,121618,1),(377,121617,1),(378,121616,1),(379,121623,1),(380,121622,1),(381,121621,1),(382,121620,1),(383,121610,1),(384,121611,1),(385,121608,1),(386,121609,1),(387,121614,1),(388,121615,1),(389,121612,1),(390,121613,1),(391,121602,1),(392,121603,1),(393,121600,1),(394,121606,1),(395,121607,1),(396,121604,1),(397,121605,1),(398,121657,1),(399,121656,1),(400,121659,1),(401,121658,1),(402,121661,1),(403,121660,1),(404,121663,1),(405,121662,1),(406,121649,1),(407,121648,1),(408,121651,1),(409,121653,1),(410,121652,1),(411,121640,1),(412,121642,1),(413,121643,1),(414,121644,1),(415,121645,1),(416,121646,1),(417,121647,1),(418,121632,1),(419,121633,1),(420,121634,1),(421,121635,1),(422,121636,1),(423,121637,1),(424,121638,1),(425,121639,1),(426,121693,1),(427,121692,1),(428,121691,1),(429,121690,1),(430,121689,1),(431,121688,1),(432,121687,1),(433,121686,1),(434,121685,1),(435,121684,1),(436,121683,1),(437,121682,1),(438,121681,1),(439,121680,1),(440,121678,1),(441,121679,1),(442,121676,1),(443,121677,1),(444,121675,1),(445,121672,1),(446,121673,1),(447,121670,1),(448,121671,1),(449,121668,1),(450,121669,1),(451,121667,1),(452,121664,1),(453,121665,1),(454,121724,1),(455,121727,1),(456,121721,1),(457,121720,1),(458,121722,1),(459,121716,1),(460,121719,1),(461,121718,1),(462,121713,1),(463,121712,1),(464,121715,1),(465,121714,1),(466,121708,1),(467,121709,1),(468,121710,1),(469,121711,1),(470,121704,1),(471,121705,1),(472,121706,1),(473,121700,1),(474,121701,1),(475,121702,1),(476,121703,1),(477,121696,1),(478,121697,1),(479,121698,1),(480,121699,1),(481,121747,1),(482,121744,1),(483,121750,1),(484,121748,1),(485,121749,1),(486,121754,1),(487,121755,1),(488,121752,1),(489,121753,1),(490,121758,1),(491,121759,1),(492,121756,1),(493,121729,1),(494,121728,1),(495,121735,1),(496,121733,1),(497,121732,1),(498,121737,1),(499,121736,1),(500,121743,1),(501,121742,1),(502,121741,1),(503,121740,1),(504,121776,1),(505,121777,1),(506,121778,1),(507,121779,1),(508,121780,1),(509,121781,1),(510,121782,1),(511,121783,1),(512,121784,1),(513,121785,1),(514,121786,1),(515,121787,1),(516,121788,1),(517,121789,1),(518,121790,1),(519,121791,1),(520,121761,1),(521,121760,1),(522,121765,1),(523,121764,1),(524,121766,1),(525,121769,1),(526,121768,1),(527,121771,1),(528,121770,1),(529,121773,1),(530,121775,1),(531,121774,1),(532,121814,1),(533,121815,1),(534,121812,1),(535,121813,1),(536,121810,1),(537,121811,1),(538,121808,1),(539,121822,1),(540,121823,1),(541,121821,1),(542,121819,1),(543,121816,1),(544,121817,1),(545,121799,1),(546,121798,1),(547,121797,1),(548,121796,1),(549,121795,1),(550,121794,1),(551,121793,1),(552,121792,1),(553,121807,1),(554,121806,1),(555,121804,1),(556,121803,1),(557,121802,1),(558,121801,1),(559,121800,1),(560,121844,1),(561,121845,1),(562,121846,1),(563,121840,1),(564,121841,1),(565,121842,1),(566,121843,1),(567,121852,1),(568,121853,1),(569,121855,1),(570,121848,1),(571,121851,1),(572,121829,1),(573,121828,1),(574,121831,1),(575,121830,1),(576,121825,1),(577,121824,1),(578,121826,1),(579,121837,1),(580,121836,1),(581,121839,1),(582,121838,1),(583,121833,1),(584,121832,1),(585,121834,1),(586,121059,1),(587,121058,1),(588,121057,1),(589,121056,1),(590,121063,1),(591,121062,1),(592,121061,1),(593,121060,1),(594,121067,1),(595,121066,1),(596,121065,1),(597,121064,1),(598,121071,1),(599,121070,1),(600,121069,1),(601,121068,1),(602,121074,1),(603,121075,1),(604,121072,1),(605,121073,1),(606,121078,1),(607,121079,1),(608,121076,1),(609,121077,1),(610,121082,1),(611,121083,1),(612,121080,1),(613,121081,1),(614,121086,1),(615,121087,1),(616,121084,1),(617,121085,1),(618,121042,1),(619,121045,1),(620,121046,1),(621,121049,1),(622,121050,1),(623,121051,1),(624,121052,1),(625,121054,1),(626,121055,1),(627,121149,1),(628,121151,1),(629,121150,1),(630,121145,1),(631,121144,1),(632,121147,1),(633,121146,1),(634,121141,1),(635,121140,1),(636,121143,1),(637,121142,1),(638,121137,1),(639,121136,1),(640,121139,1),(641,121138,1),(642,121132,1),(643,121133,1),(644,121134,1),(645,121135,1),(646,121129,1),(647,121130,1),(648,121131,1),(649,121124,1),(650,121125,1),(651,121126,1),(652,121127,1),(653,121122,1),(654,121123,1),(655,121119,1),(656,121118,1),(657,121117,1),(658,121116,1),(659,121115,1),(660,121114,1),(661,121113,1),(662,121110,1),(663,121109,1),(664,121108,1),(665,121107,1),(666,121106,1),(667,121105,1),(668,121104,1),(669,121102,1),(670,121103,1),(671,121100,1),(672,121101,1),(673,121098,1),(674,121099,1),(675,121097,1),(676,121094,1),(677,121092,1),(678,121093,1),(679,121090,1),(680,121088,1),(681,121089,1),(682,121208,1),(683,121211,1),(684,121213,1),(685,121212,1),(686,121215,1),(687,121201,1),(688,121200,1),(689,121203,1),(690,121202,1),(691,121205,1),(692,121204,1),(693,121207,1),(694,121206,1),(695,121192,1),(696,121193,1),(697,121195,1),(698,121197,1),(699,121198,1),(700,121199,1),(701,121184,1),(702,121185,1),(703,121186,1),(704,121187,1),(705,121188,1),(706,121189,1),(707,121190,1),(708,121191,1),(709,121179,1),(710,121178,1),(711,121177,1),(712,121183,1),(713,121182,1),(714,121181,1),(715,121180,1),(716,121171,1),(717,121170,1),(718,121174,1),(719,121173,1),(720,121172,1),(721,121163,1),(722,121160,1),(723,121161,1),(724,121166,1),(725,121167,1),(726,121164,1),(727,121154,1),(728,121155,1),(729,121152,1),(730,121153,1),(731,121158,1),(732,121159,1),(733,121156,1),(734,121157,1),(735,121268,1),(736,121269,1),(737,121270,1),(738,121271,1),(739,121264,1),(740,121265,1),(741,121266,1),(742,121267,1),(743,121276,1),(744,121277,1),(745,121278,1),(746,121279,1),(747,121272,1),(748,121273,1),(749,121275,1),(750,121253,1),(751,121252,1),(752,121255,1),(753,121254,1),(754,121248,1),(755,121251,1),(756,121250,1),(757,121261,1),(758,121263,1),(759,121262,1),(760,121257,1),(761,121256,1),(762,121258,1),(763,121238,1),(764,121239,1),(765,121236,1),(766,121237,1),(767,121234,1),(768,121235,1),(769,121233,1),(770,121246,1),(771,121247,1),(772,121244,1),(773,121245,1),(774,121243,1),(775,121240,1),(776,121241,1),(777,121223,1),(778,121222,1),(779,121221,1),(780,121220,1),(781,121219,1),(782,121218,1),(783,121217,1),(784,121216,1),(785,121231,1),(786,121230,1),(787,121229,1),(788,121228,1),(789,121227,1),(790,121225,1),(791,121224,1),(792,121328,1),(793,121330,1),(794,121333,1),(795,121334,1),(796,121335,1),(797,121336,1),(798,121337,1),(799,121338,1),(800,121339,1),(801,121340,1),(802,121341,1),(803,121342,1),(804,121343,1),(805,121313,1),(806,121312,1),(807,121315,1),(808,121314,1),(809,121317,1),(810,121316,1),(811,121319,1),(812,121318,1),(813,121321,1),(814,121320,1),(815,121323,1),(816,121322,1),(817,121325,1),(818,121324,1),(819,121327,1),(820,121298,1),(821,121299,1),(822,121296,1),(823,121297,1),(824,121302,1),(825,121303,1),(826,121300,1),(827,121306,1),(828,121307,1),(829,121304,1),(830,121305,1),(831,121311,1),(832,121308,1),(833,121309,1),(834,121283,1),(835,121282,1),(836,121281,1),(837,121280,1),(838,121287,1),(839,121286,1),(840,121285,1),(841,121284,1),(842,121291,1),(843,121290,1),(844,121289,1),(845,121288,1),(846,121292,1);\r\n+INSERT INTO `Item` VALUES (1,1,1),(2,2,1),(3,3,1),(4,4,1),(5,5,1),(6,6,1),(7,7,1),(8,8,1),(9,9,1);\r\n+INSERT INTO `Customer_Item` VALUES (1,1),(2,3),(3,3),(4,2),(5,8),(6,9),(7,4),(8,9),(9,3),(10,8),(11,2),(12,3),(13,6),(13,3),(14,3),(15,3),(16,3),(17,3),(18,1),(18,5),(19,3),(19,7),(20,6),(21,3),(22,1),(23,7),(23,2),(24,9),(25,3),(26,9),(27,9),(28,2),(29,7),(30,4),(31,8),(32,9),(33,3),(34,3),(34,6),(35,3),(36,1),(37,9),(37,4),(38,1),(38,4),(38,6),(39,6),(40,2),(41,9),(42,3),(42,6),(43,2),(44,7),(45,2),(46,4),(47,1),(48,3),(49,3),(50,3),(51,3),(52,3),(53,4),(54,2),(55,1),(56,1),(57,9),(58,4),(59,9),(59,3),(60,3),(61,5),(61,2),(61,9),(62,2),(63,9),(64,9),(65,8),(66,3),(67,6),(68,1),(68,3),(69,9),(70,9),(71,3),(71,7),(72,3),(73,2),(74,3),(75,3),(76,3),(77,9),(78,4),(79,9),(80,2),(80,1),(81,9),(82,8),(83,3),(84,9),(85,4),(86,3),(87,9),(88,3),(89,9),(90,3),(90,1),(91,2),(91,9),(91,3),(91,1),(92,9),(93,3),(94,6),(95,9),(96,5),(96,8),(96,1),(96,1),(96,4),(97,4),(97,9),(98,6),(98,9),(99,2),(100,3),(101,9),(102,3),(103,6),(104,3),(105,9),(106,9),(107,1),(108,6),(109,3),(110,1),(111,4),(112,8),(113,3),(114,2),(115,2),(116,7),(117,6),(118,3),(119,9),(120,9),(121,3),(122,4),(123,1),(124,1),(125,2),(126,3),(127,6),(128,5),(129,3),(130,3),(130,6),(131,6),(132,9),(133,8),(134,6),(135,9),(136,9),(137,8),(138,9),(139,9),(140,9),(141,9),(142,6),(143,2),(144,9),(145,7),(146,6),(146,7),(146,9),(147,4),(147,9),(147,1),(147,2),(147,1),(147,3),(148,9),(149,9),(150,6),(151,3),(152,6),(153,3),(154,6),(154,9),(155,3),(156,9),(156,8),(156,1),(157,9),(158,9),(159,8),(159,2),(160,9),(161,9),(162,4),(162,5),(163,3),(164,3),(165,9),(166,9),(167,9),(168,9),(169,6),(170,8),(170,2),(171,2),(171,4),(172,9),(173,9),(174,9),(175,1),(176,5),(177,1),(178,3),(179,6),(180,5),(181,8),(182,3),(183,2),(184,9),(185,3),(186,3),(187,3),(188,4),(189,9),(190,9),(191,4),(191,9),(192,1),(193,6),(194,9),(195,3),(196,9),(197,3),(198,2),(199,4),(200,9),(201,6),(202,2),(203,9),(204,9),(205,3),(206,3),(207,4),(208,6),(209,9),(209,1),(209,3),(210,9),(211,1),(212,5),(213,2),(213,3),(214,9),(215,6),(216,3),(217,1),(217,3),(218,3),(219,3),(220,3),(221,9),(222,9),(223,5),(224,4),(225,6),(226,3),(226,2),(227,9),(228,6),(229,6),(230,3),(231,8),(231,9),(231,6),(231,7),(232,1),(232,6),(233,7),(233,3),(233,6),(234,6),(235,8),(235,9),(236,9),(237,1),(237,6),(238,9),(239,6),(240,9),(241,9),(242,9),(243,9),(244,2),(245,3),(246,9),(247,3),(248,9),(249,9),(250,8),(250,7),(250,1),(250,9),(250,6),(251,5),(251,7),(251,8),(251,9),(252,4),(253,9),(254,4),(255,1),(255,9),(255,4),(256,8),(257,9),(258,9),(259,9),(260,5),(261,1),(262,9),(263,9),(264,9),(265,9),(266,1),(267,9),(268,7),(269,7),(270,1),(271,3),(272,9),(273,4),(274,3),(275,2),(275,9),(276,1),(277,1),(278,6),(279,9),(280,3),(281,9),(282,7),(283,9),(284,2),(284,9),(284,4),(285,9),(286,4),(286,9),(287,1),(288,9),(289,1),(290,5),(291,3),(292,4),(292,3),(293,9),(294,4),(294,1),(295,4),(296,9),(297,4),(298,2),(299,9),(300,2),(300,9),(301,7),(302,3),(303,6),(304,4),(305,2),(306,1),(306,2),(306,3),(307,9),(308,1),(309,9),(310,1),(311,3),(312,3),(313,2),(313,9),(313,6),(314,3),(315,6),(315,2),(316,7),(317,7),(318,5),(319,3),(320,3),(321,1),(322,3),(323,1),(324,2),(324,3),(324,6),(324,7),(325,3),(326,4),(327,7),(328,9),(329,7),(330,4),(331,9),(332,4),(333,2),(333,9),(334,3),(335,9),(336,9),(337,4),(338,1),(339,9),(339,1),(339,7),(339,8),(339,4),(339,6),(339,3),(339,2),(340,2),(340,9),(340,3),(341,1),(342,4),(343,5),(344,8),(345,7),(346,6),(347,1),(348,6),(349,7),(349,8),(350,9),(351,7),(352,8),(353,6),(354,5),(355,9),(356,9),(357,9),(358,7),(358,1),(358,9),(359,3),(360,3),(361,1),(362,1),(362,3),(362,6),(363,6),(363,9),(363,1),(363,7),(364,4),(365,4),(366,3),(367,9),(368,8),(368,7),(368,6),(368,4),(369,3),(370,6),(371,4),(372,2),(372,1),(373,3),(374,3),(375,9),(375,3),(376,2),(377,2),(377,3),(378,2),(379,1),(379,6),(380,9),(381,6),(382,7),(383,3),(383,1),(384,1),(385,6),(386,6),(387,4),(387,2),(388,6),(389,3),(390,4),(391,9),(392,2),(392,5),(393,8),(393,4),(393,1),(394,2),(395,7),(396,6),(397,6),(397,3),(398,1),(398,3),(399,9),(399,4),(400,7),(401,9),(401,3),(402,1),(403,6),(404,6),(405,8),(406,9),(407,6),(408,3),(409,9),(410,6),(411,5),(412,9),(412,8),(413,3),(414,6),(415,3),(416,7),(417,7),(418,9),(419,6),(419,4),(420,7),(421,6),(422,7),(423,2),(423,8),(424,2),(425,7),(426,4),(426,1),(426,9),(427,1),(428,6),(429,6),(430,6),(431,3),(432,2),(433,3),(434,9),(435,9),(436,3),(437,9),(438,9),(439,9),(440,3),(441,6),(442,6),(442,9),(443,8),(444,9),(444,3),(444,2),(444,1),(445,1),(446,9),(447,9),(448,9),(448,1),(449,9),(449,3),(450,9),(451,9),(452,9),(453,8),(454,9),(455,6),(456,3),(457,3),(458,2),(459,6),(460,4),(461,9),(462,2),(462,4),(463,1),(464,6),(465,6),(466,1),(466,4),(467,6),(468,6),(469,2),(470,5),(471,7),(472,1),(472,9),(472,4),(473,1),(474,1),(475,3),(475,6),(476,4),(477,9),(478,6),(479,4),(479,3),(480,9),(481,4),(482,3),(483,5),(484,2),(484,3),(485,3),(486,9),(487,8),(488,9),(489,6),(490,6),(491,3),(492,9),(493,9),(494,6),(495,3),(496,4),(497,3),(498,2),(499,1),(500,3),(501,3),(502,4),(503,9),(504,9),(505,1),(506,6),(507,6),(508,9),(509,3),(510,3),(511,9),(512,1),(512,9),(512,3),(513,3),(514,9),(515,5),(516,1),(517,1),(518,6),(518,9),(518,3),(519,3),(520,1),(521,3),(522,4),(523,9),(523,4),(524,3),(524,5),(525,9),(526,2),(527,9),(528,3),(529,9),(530,4),(531,9),(532,4),(532,2),(533,2),(533,9),(533,4),(533,6),(534,6),(534,3),(535,2),(536,3),(537,3),(538,6),(538,3),(538,2),(539,2),(540,4),(541,2),(541,9),(541,8),(542,2),(543,1),(544,1),(545,1),(546,4),(547,9),(548,6),(549,2),(549,6),(549,1),(550,3),(551,9),(552,9),(553,3),(553,1),(554,8),(554,2),(554,4),(555,2),(556,6),(557,2),(558,6),(559,2),(560,3),(561,2),(562,4),(563,1),(564,3),(565,3),(566,8),(567,2),(568,3),(569,2),(569,8),(570,6),(571,6),(572,2),(573,5),(574,1),(575,6),(576,2),(576,8),(576,9),(577,9),(578,3),(578,6),(578,2),(579,9),(580,9),(581,9),(582,3),(583,4),(584,5),(584,2),(584,8),(585,9),(586,1),(587,1),(588,2),(589,2),(590,4),(591,4),(592,1),(592,5),(592,2),(592,4),(593,4),(594,2),(595,3),(596,3),(597,4),(597,2),(598,1),(599,1),(600,1),(601,1),(602,5),(603,2),(604,1),(605,1),(606,3),(607,1),(607,3),(608,4),(609,4),(609,2),(610,2),(611,4),(612,5),(612,4),(612,2),(613,2),(614,1),(615,3),(615,1),(615,2),(616,1),(617,4),(618,1),(619,2),(620,1),(621,1),(622,1),(623,1),(624,1),(625,1),(626,1),(627,3),(628,2),(629,1),(630,1),(631,1),(632,1),(633,2),(633,1),(634,1),(635,4),(636,1),(637,2),(637,1),(638,3),(639,5),(640,2),(641,3),(642,2),(643,4),(644,1),(645,3),(646,1),(647,3),(648,1),(649,3),(650,3),(651,2),(652,3),(653,2),(654,3),(655,3),(656,2),(657,1),(658,2),(659,1),(660,4),(661,4),(662,3),(663,2),(664,3),(665,4),(666,6),(667,3),(668,3),(669,3),(670,1),(671,1),(672,4),(673,3),(674,3),(675,3),(676,6),(677,2),(677,1),(678,4),(679,3),(680,1),(681,2),(681,6),(681,1),(682,2),(683,6),(684,4),(685,1),(686,4),(687,2),(688,3),(688,2),(689,2),(690,2),(690,3),(691,1),(692,3),(693,4),(694,1),(695,5),(696,2),(697,2),(698,3),(699,5),(700,2),(701,2),(702,3),(703,2),(704,3),(705,3),(706,2),(707,2),(708,3),(709,3),(710,4),(711,4),(712,4),(713,6),(714,3),(715,2),(716,3),(716,1),(717,2),(718,4),(719,2),(719,1),(720,6),(721,2),(722,6),(722,1),(722,2),(723,2),(724,3),(724,2),(724,5),(725,2),(726,4),(727,6),(728,4),(729,3),(730,3),(731,4),(732,1),(733,2),(734,1),(735,9),(736,9),(737,9),(738,2),(739,9),(740,7),(740,8),(740,9),(741,8),(742,1),(743,7),(744,8),(744,2),(745,5),(746,9),(747,9),(748,7),(748,8),(748,9),(749,1),(750,1),(751,6),(752,4),(753,4),(754,6),(755,3),(756,3),(757,5),(758,7),(758,8),(758,9),(758,3),(759,1),(759,4),(760,1),(761,1),(762,4),(763,5),(763,2),(764,4),(765,4),(766,4),(767,5),(767,4),(767,2),(768,4),(768,1),(769,4),(770,1),(771,3),(772,1),(773,4),(774,4),(775,2),(776,4),(777,4),(778,4),(779,5),(780,4),(781,4),(782,4),(783,6),(784,6),(784,4),(785,6),(786,4),(787,4),(787,2),(788,2),(788,3),(789,4),(790,5),(791,4),(792,3),(793,4),(794,9),(795,9),(796,9),(796,6),(797,9),(798,4),(799,9),(800,9),(801,9),(802,9),(803,9),(803,3),(804,9),(805,7),(805,6),(805,2),(805,8),(805,1),(806,1),(807,9),(808,1),(809,1),(810,3),(811,2),(812,8),(813,6),(814,2),(814,5),(815,9),(816,9),(817,9),(818,9),(819,9),(820,3),(821,9),(822,9),(823,4),(824,9),(825,9),(826,8),(826,6),(827,6),(828,2),(829,9),(830,6),(831,2),(831,1),(832,1),(832,9),(833,8),(834,6),(835,3),(835,9),(836,9),(837,7),(838,3),(839,9),(840,2),(840,5),(841,4),(841,2),(842,7),(842,6),(842,1),(843,6),(844,6),(845,9),(846,9);\r\n','NEW',99,55),(308,'@@ -24,9 +24,8 @@ public class IndexController {\r\n         this.recommenderCreator = recommenderCreator;\r\n     }\r\n     \r\n-    @Get(\"/helloworld\")\r\n+    @Get(\"/\")\r\n     public void index() {\r\n-        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n     }\r\n     \r\n     @Get(\"/import/askjdhakjshdakjshd\")\r\n','DEFAULT',26,56),(309,'@@ -0,0 +1,55 @@\r\n+<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n+    pageEncoding=\"UTF-8\"%>\r\n+<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\r\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n+<html>\r\n+<head>\r\n+<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n+<title>Commendans</title>\r\n+</head>\r\n+<body>\r\n+\r\n+	<p>Welcome to commendans, an REST recommendation service.<p>\r\n+	\r\n+	<p>You may register your client app <a href=\'<c:url value=\"/app/new\" />\'>here</a></p>\r\n+	\r\n+	<p>Some routes implemented:</p>\r\n+	<ul>\r\n+		<li><pre>GET <c:url value=\"/recommend/item/\" />{appItemId}</pre>\r\n+			<ul>\r\n+				<li><strong>Returns a sorted array of recommendations given an item of your app (identified with id <code>appItemId</code>)</strong></li>\r\n+				<li>Parameters:</li>\r\n+				<ul>\r\n+					<li><pre>accessKey: {your-access-key}</pre></li>\r\n+				</ul>\r\n+			</ul>\r\n+		</li>\r\n+		<li><pre>GET <c:url value=\"/recommend/items/\" /></pre>\r\n+			<ul>\r\n+				<li><strong>Returns a sorted array of recommendations given an array of items of your app (identified with ids array <code>items</code>)</strong></li>\r\n+				<li>Parameters:</li>\r\n+				<ul>\r\n+					<li><pre>accessKey: {your-access-key}</pre></li>\r\n+					<li><pre>items[0]: {some-item-id}</pre></li>\r\n+					<li><pre>items[1]: {some-item-id}</pre></li>\r\n+					<li><pre>items[...]: ...</pre></li>\r\n+				</ul>\r\n+			</ul>\r\n+		</li>\r\n+		<li><pre>POST <c:url value=\"/app/addSale\" /></pre>\r\n+			<ul>\r\n+				<li><strong>Register a event of your app, given a user id and a list of items bought (or liked, or visited, whatever)</strong></li>\r\n+				<li>Parameters:</li>\r\n+				<ul>\r\n+					<li><pre>accessKey: {your-access-key}</pre></li>\r\n+					<li><pre>clientAppUserId: {some-user-id}</pre></li>\r\n+					<li><pre>items[0]: {some-item-id}</pre></li>\r\n+					<li><pre>items[1]: {some-item-id}</pre></li>\r\n+					<li><pre>items[...]: ...</pre></li>\r\n+				</ul>\r\n+			</ul>\r\n+		</li>\r\n+	</ul>\r\n+\r\n+</body>\r\n+</html>\r\n\\ No newline at end of file\r\n','NEW',100,56),(310,'@@ -1,13 +1,11 @@\r\n package br.ime.usp.commendans.controller;\r\n \r\n-import org.apache.commons.codec.digest.DigestUtils;\r\n import org.hibernate.Session;\r\n \r\n import br.com.caelum.vraptor.Get;\r\n import br.com.caelum.vraptor.Resource;\r\n import br.com.caelum.vraptor.Result;\r\n import br.com.caelum.vraptor.view.Results;\r\n-import br.ime.usp.commendans.infra.DataImporter;\r\n import br.ime.usp.commendans.recommender.RecommenderCreator;\r\n \r\n \r\n@@ -30,12 +28,12 @@ public class IndexController {\r\n     \r\n     @Get(\"/import/askjdhakjshdakjshd\")\r\n     public void importData() {\r\n-        DataImporter dataImporter = new DataImporter(session);\r\n-        dataImporter.importData(\"/orders.csv\");\r\n-        recommenderCreator.create();\r\n-        String name = \"Casa do Código\";\r\n-        String accessKey = \"123\" + name;\r\n-        accessKey = DigestUtils.sha256Hex(accessKey);\r\n-        result.use(Results.http()).body(\"<html><body>finished persisting, key: \"+accessKey+\"</body></html>\");\r\n+//        DataImporter dataImporter = new DataImporter(session);\r\n+//        dataImporter.importData(\"/orders.csv\");\r\n+//        recommenderCreator.create();\r\n+//        String name = \"Casa do Código\";\r\n+//        String accessKey = \"123\" + name;\r\n+//        accessKey = DigestUtils.sha256Hex(accessKey);\r\n+        result.use(Results.http()).body(\"<html><body>get outta here</body></html>\");\r\n     }\r\n }\r\n','DEFAULT',26,57),(311,'@@ -0,0 +1,7 @@\r\n+commendans\r\n+==========\r\n+commendans is a REST recommendation service.\r\n+\r\n+Registering your app as client, you will get a access key and then you can send to commendans items that your app users bought (or liked, or viewed, whatever) and then get recommendations for other items.\r\n+\r\n+commendans is currently online here: http://commendans.herokuapp.com/\r\n\\ No newline at end of file\r\n','NEW',101,58);
/*!40000 ALTER TABLE `Modification` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Project`
--

DROP TABLE IF EXISTS `Project`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Project` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `creationDate` datetime DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `projectPath` varchar(255) DEFAULT NULL,
  `scmUrl` varchar(255) DEFAULT NULL,
  `totalCommiters` bigint(20) DEFAULT NULL,
  `totalCommits` bigint(20) DEFAULT NULL,
  `firstCommit_id` int(11) DEFAULT NULL,
  `lastCommit_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK50C8E2F989D9392` (`lastCommit_id`),
  KEY `FK50C8E2F9BE3ED0B8` (`firstCommit_id`),
  CONSTRAINT `FK50C8E2F989D9392` FOREIGN KEY (`lastCommit_id`) REFERENCES `Commit` (`id`),
  CONSTRAINT `FK50C8E2F9BE3ED0B8` FOREIGN KEY (`firstCommit_id`) REFERENCES `Commit` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Project`
--

LOCK TABLES `Project` WRITE;
/*!40000 ALTER TABLE `Project` DISABLE KEYS */;
INSERT INTO `Project` VALUES (1,'2013-01-01 22:53:20','commendans','/var/tmp/repositories/projects/','git://github.com/csokol/commendans.git',1,58,1,58);
/*!40000 ALTER TABLE `Project` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ProjectConfigurationEntry`
--

DROP TABLE IF EXISTS `ProjectConfigurationEntry`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ProjectConfigurationEntry` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `entry_key` varchar(255) DEFAULT NULL,
  `entry_value` varchar(255) DEFAULT NULL,
  `project_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKC02E7FF5783885CC` (`project_id`),
  CONSTRAINT `FKC02E7FF5783885CC` FOREIGN KEY (`project_id`) REFERENCES `Project` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ProjectConfigurationEntry`
--

LOCK TABLES `ProjectConfigurationEntry` WRITE;
/*!40000 ALTER TABLE `ProjectConfigurationEntry` DISABLE KEYS */;
INSERT INTO `ProjectConfigurationEntry` VALUES (1,'scm','org.metricminer.scm.git.GitFactory',1),(2,'scm.repository','/var/tmp/repositories/projects/1',1),(3,'changesets','org.metricminer.changesets.AllChangeSetsFactory',1);
/*!40000 ALTER TABLE `ProjectConfigurationEntry` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Project_Tag`
--

DROP TABLE IF EXISTS `Project_Tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Project_Tag` (
  `Project_id` bigint(20) NOT NULL,
  `tags_id` int(11) NOT NULL,
  KEY `FK2B693534783885CC` (`Project_id`),
  KEY `FK2B693534257A9A4D` (`tags_id`),
  CONSTRAINT `FK2B693534257A9A4D` FOREIGN KEY (`tags_id`) REFERENCES `Tag` (`id`),
  CONSTRAINT `FK2B693534783885CC` FOREIGN KEY (`Project_id`) REFERENCES `Project` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Project_Tag`
--

LOCK TABLES `Project_Tag` WRITE;
/*!40000 ALTER TABLE `Project_Tag` DISABLE KEYS */;
/*!40000 ALTER TABLE `Project_Tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Query`
--

DROP TABLE IF EXISTS `Query`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Query` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `sqlQuery` longtext,
  `submitDate` datetime DEFAULT NULL,
  `author_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK4AC28A8E4402A8` (`author_id`),
  CONSTRAINT `FK4AC28A8E4402A8` FOREIGN KEY (`author_id`) REFERENCES `User` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Query`
--

LOCK TABLES `Query` WRITE;
/*!40000 ALTER TABLE `Query` DISABLE KEYS */;
/*!40000 ALTER TABLE `Query` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `QueryResult`
--

DROP TABLE IF EXISTS `QueryResult`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `QueryResult` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `csvFilename` varchar(255) DEFAULT NULL,
  `executedDate` datetime DEFAULT NULL,
  `message` longtext,
  `status` varchar(255) DEFAULT NULL,
  `query_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK15B7BEE5CDF2F7EC` (`query_id`),
  CONSTRAINT `FK15B7BEE5CDF2F7EC` FOREIGN KEY (`query_id`) REFERENCES `Query` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `QueryResult`
--

LOCK TABLES `QueryResult` WRITE;
/*!40000 ALTER TABLE `QueryResult` DISABLE KEYS */;
/*!40000 ALTER TABLE `QueryResult` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `SourceCode`
--

DROP TABLE IF EXISTS `SourceCode`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `SourceCode` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `source` longtext,
  `sourceSize` bigint(20) DEFAULT NULL,
  `modification_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK348AE0C8802384C8` (`modification_id`),
  KEY `sourceSize_index` (`sourceSize`),
  CONSTRAINT `FK348AE0C8802384C8` FOREIGN KEY (`modification_id`) REFERENCES `Modification` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=312 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `SourceCode`
--

LOCK TABLES `SourceCode` WRITE;
/*!40000 ALTER TABLE `SourceCode` DISABLE KEYS */;
INSERT INTO `SourceCode` VALUES (1,'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<classpath>\r\n	<classpathentry kind=\"src\" path=\"src/main/java\"/>\r\n	<classpathentry kind=\"src\" path=\"src/main/resources\"/>\r\n	<classpathentry kind=\"src\" path=\"src/test/java\"/>\r\n	<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java\">\r\n		<attributes>\r\n			<attribute name=\"owner.project.facets\" value=\"java\"/>\r\n		</attributes>\r\n	</classpathentry>\r\n	<classpathentry kind=\"con\" path=\"org.eclipse.jst.server.core.container/org.eclipse.jst.server.tomcat.runtimeTarget/Apache Tomcat v7.0\">\r\n		<attributes>\r\n			<attribute name=\"owner.project.facets\" value=\"jst.web\"/>\r\n		</attributes>\r\n	</classpathentry>\r\n	<classpathentry kind=\"con\" path=\"org.eclipse.jst.j2ee.internal.web.container\"/>\r\n	<classpathentry kind=\"con\" path=\"org.eclipse.jst.j2ee.internal.module.container\"/>\r\n	<classpathentry kind=\"output\" path=\"build/classes\"/>\r\n</classpath>\r\n',953,1),(2,'*.jar\r\n*.class\r\nbuild/\r\n',24,2),(3,'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<projectDescription>\r\n	<name>recommender</name>\r\n	<comment></comment>\r\n	<projects>\r\n	</projects>\r\n	<buildSpec>\r\n		<buildCommand>\r\n			<name>org.eclipse.wst.jsdt.core.javascriptValidator</name>\r\n			<arguments>\r\n			</arguments>\r\n		</buildCommand>\r\n		<buildCommand>\r\n			<name>org.eclipse.jdt.core.javabuilder</name>\r\n			<arguments>\r\n			</arguments>\r\n		</buildCommand>\r\n		<buildCommand>\r\n			<name>org.eclipse.wst.common.project.facet.core.builder</name>\r\n			<arguments>\r\n			</arguments>\r\n		</buildCommand>\r\n		<buildCommand>\r\n			<name>org.eclipse.wst.validation.validationbuilder</name>\r\n			<arguments>\r\n			</arguments>\r\n		</buildCommand>\r\n	</buildSpec>\r\n	<natures>\r\n		<nature>org.eclipse.jem.workbench.JavaEMFNature</nature>\r\n		<nature>org.eclipse.wst.common.modulecore.ModuleCoreNature</nature>\r\n		<nature>org.eclipse.wst.common.project.facet.core.nature</nature>\r\n		<nature>org.eclipse.jdt.core.javanature</nature>\r\n		<nature>org.eclipse.wst.jsdt.core.jsNature</nature>\r\n	</natures>\r\n</projectDescription>\r\n',1044,3),(4,'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<classpath>\r\n	<classpathentry kind=\"src\" path=\"src/main/webapp\"/>\r\n	<classpathentry kind=\"con\" path=\"org.eclipse.wst.jsdt.launching.JRE_CONTAINER\"/>\r\n	<classpathentry kind=\"con\" path=\"org.eclipse.wst.jsdt.launching.WebProject\">\r\n		<attributes>\r\n			<attribute name=\"hide\" value=\"true\"/>\r\n		</attributes>\r\n	</classpathentry>\r\n	<classpathentry kind=\"con\" path=\"org.eclipse.wst.jsdt.launching.baseBrowserLibrary\"/>\r\n	<classpathentry kind=\"output\" path=\"\"/>\r\n</classpath>\r\n',508,4),(5,'#Mon Oct 29 08:50:46 BRST 2012\r\neclipse.preferences.version=1\r\norg.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled\r\norg.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6\r\norg.eclipse.jdt.core.compiler.compliance=1.6\r\norg.eclipse.jdt.core.compiler.problem.assertIdentifier=error\r\norg.eclipse.jdt.core.compiler.problem.enumIdentifier=error\r\norg.eclipse.jdt.core.compiler.source=1.6\r\n',396,5),(6,'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project-modules id=\"moduleCoreId\" project-version=\"1.5.0\">\r\n    <wb-module deploy-name=\"recommender\">\r\n        <wb-resource deploy-path=\"/\" source-path=\"/src/main/webapp\" tag=\"defaultRootSource\"/>\r\n        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/java\"/>\r\n        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/resources\"/>\r\n        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/test/java\"/>\r\n        <property name=\"context-root\" value=\"recommender\"/>\r\n        <property name=\"java-output-path\" value=\"/recommender/build/classes\"/>\r\n    </wb-module>\r\n</project-modules>\r\n',675,6),(7,'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<faceted-project>\r\n  <runtime name=\"Apache Tomcat v7.0\"/>\r\n  <fixed facet=\"java\"/>\r\n  <fixed facet=\"jst.web\"/>\r\n  <fixed facet=\"wst.jsdt.web\"/>\r\n  <installed facet=\"java\" version=\"1.6\"/>\r\n  <installed facet=\"jst.web\" version=\"3.0\"/>\r\n  <installed facet=\"wst.jsdt.web\" version=\"1.0\"/>\r\n</faceted-project>\r\n',345,7),(8,'org.eclipse.wst.jsdt.launching.baseBrowserLibrary\r\n',51,8),(9,'Window\r\n',8,9),(10,'webapp.dir=src/main/webapp/\r\nlibs.dir=${webapp.dir}/WEB-INF/lib\r\n\r\nivy.jar.file=ivy-2.2.0.jar\r\nivy.file=ivysettings.xml\r\n\r\ntmp.root=target\r\ntmp.dir=${tmp.root}/recommender\r\ntmp.webinf.dir=${tmp.dir}/WEB-INF\r\ntmp.classes.dir=${tmp.webinf.dir}/classes\r\ntmp.test-classes.dir=${tmp.dir}/test-classes\r\n\r\nartifacts.dir=${tmp.root}/artifacts/\r\nwar.file=recommender.war\r\n\r\nsrc.dir=src/main/java\r\nlibs.dir=${webapp.dir}/WEB-INF/lib\r\nresources.dir=src/main/resources\r\n\r\n',460,10),(11,'<project name=\"Metric Miner\" default=\"war\" basedir=\".\" xmlns:ivy=\"antlib:org.apache.ivy.ant\">\r\n\r\n	<property file=\"build.properties\" />\r\n\r\n	<path id=\"libs.classpath\" path=\".\">\r\n		<fileset dir=\"${libs.dir}\">\r\n			<include name=\"*.jar\" />\r\n		</fileset>\r\n	</path>\r\n\r\n	<path id=\"compile.classpath\" path=\".\">\r\n		<path refid=\"libs.classpath\" />\r\n	</path>\r\n\r\n	<target name=\"prepare\">\r\n		<mkdir dir=\"${tmp.dir}\" />\r\n		<mkdir dir=\"${tmp.webinf.dir}\" />\r\n		<mkdir dir=\"${tmp.classes.dir}\" />\r\n		<mkdir dir=\"${tmp.test-classes.dir}\" />\r\n	</target>\r\n\r\n	<target name=\"clean\">\r\n		<delete dir=\"${tmp.dir}\" />\r\n		<delete>\r\n	    	<fileset dir=\"${libs.dir}\" includes=\"*.jar\"/>\r\n		</delete>\r\n	</target>\r\n	\r\n	<!-- resolve dependencies -->\r\n	<target name=\"resolve\" description=\"--> retrieve dependencies with ivy\">\r\n		<path id=\"ivy.lib.path\">\r\n			<pathelement location=\"${ivy.jar.file}\" />\r\n		</path>\r\n		<taskdef resource=\"org/apache/ivy/ant/antlib.xml\" uri=\"antlib:org.apache.ivy.ant\" classpathref=\"ivy.lib.path\" />\r\n\r\n		<delete dir=\"${libs.dir}\" includes=\"**/*.*\" />\r\n		<ivy:settings file=\"${ivy.file}\" />\r\n		<ivy:retrieve pattern=\"${webapp.dir}/WEB-INF/lib/[artifact](-[classifier]).[ext]\" sync=\"true\" />\r\n	</target>\r\n\r\n	<target name=\"compile\" depends=\"prepare\">\r\n		<javac destdir=\"${tmp.classes.dir}\" srcdir=\"${src.dir}\" classpathref=\"compile.classpath\" debug=\"true\" encoding=\"UTF-8\" />\r\n	</target>\r\n\r\n	<target name=\"war\" depends=\"compile\">\r\n		<delete file=\"${artifacts.dir}/${war.file}\" />\r\n		<copy todir=\"${tmp.classes.dir}\">\r\n			<fileset dir=\"${resources.dir}\" />\r\n		</copy>\r\n		<move file=\"${tmp.classes.dir}/log4j.server.xml\" tofile=\"${tmp.classes.dir}/log4j.xml\"/>\r\n\r\n		<war destfile=\"${artifacts.dir}/${war.file}\" webxml=\"${webapp.dir}/WEB-INF/web.xml\" compress=\"true\">\r\n			<fileset dir=\"${webapp.dir}\">\r\n				<exclude name=\"WEB-INF/web.xml\" />\r\n			</fileset>\r\n			<classes dir=\"${tmp.classes.dir}\" />\r\n		</war>\r\n	</target>\r\n\r\n</project>\r\n',1924,11),(12,'<ivy-module version=\"2.0\">\r\n	<info organisation=\"caelum\" module=\"MetricMiner\" />\r\n\r\n	<configurations>\r\n		<conf name=\"default\" description=\"dependencies used for compile\" />\r\n		<conf name=\"test\" description=\"dependencies used for tests\" visibility=\"public\" />\r\n	</configurations>\r\n\r\n	<dependencies>\r\n		<!-- Hibernate and other stuff -->\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-core\" rev=\"3.6.10.Final\"/>\r\n		<dependency org=\"org.hibernate.javax.persistence\" name=\"hibernate-jpa-2.0-api\" rev=\"1.0.0.Final\" conf=\"default\" />\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-c3p0\" rev=\"3.6.10.Final\" conf=\"default\" />\r\n		<dependency org=\"javax.transaction\" name=\"jta\" rev=\"1.1\"/>\r\n		<dependency org=\"mysql\" name=\"mysql-connector-java\" rev=\"5.1.18\"/>\r\n		<dependency org=\"c3p0\" name=\"c3p0\" rev=\"0.9.1\" conf=\"default\" />\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-validator\" rev=\"4.3.0.Final\"/>\r\n		<dependency org=\"net.sf.ehcache\" name=\"ehcache-core\" rev=\"2.5.3\"/>\r\n		\r\n\r\n		<!-- VRaptor dependencies -->\r\n		<dependency org=\"br.com.caelum\" name=\"vraptor\" rev=\"3.4.1\" conf=\"default\" />\r\n        <dependency org=\"org.slf4j\" name=\"slf4j-api\" rev=\"1.6.1\"/>\r\n        <dependency org=\"log4j\" name=\"log4j\" rev=\"1.2.16\"/>\r\n		<dependency org=\"org.slf4j\" name=\"slf4j-log4j12\" rev=\"1.6.1\"/>\r\n		<dependency org=\"org.mortbay.jetty\" name=\"servlet-api-2.5\" rev=\"6.1H.14.1\"/>\r\n		<dependency org=\"org.glassfish.web\" name=\"jstl-impl\" rev=\"1.2\"/>\r\n		<dependency org=\"org.mortbay.jetty\" name=\"servlet-api\" rev=\"3.0.pre4\"/>\r\n		<dependency org=\"javassist\" name=\"javassist\" rev=\"3.12.1.GA\"/>\r\n		<dependency org=\"commons-io\" name=\"commons-io\" rev=\"2.0.1\"/>\r\n		<dependency org=\"com.google.guava\" name=\"guava\" rev=\"r09\"/>\r\n\r\n		<!-- Test dependencies -->\r\n		<dependency org=\"junit\" name=\"junit\" rev=\"4.8.2\" conf=\"test->default\" />\r\n		<dependency org=\"org.mockito\" name=\"mockito-all\" rev=\"1.8.5\" conf=\"test->default\" />\r\n		<dependency org=\"org.hsqldb\" name=\"hsqldb\" rev=\"2.2.8\" conf=\"test->default\" />\r\n            \r\n	</dependencies>\r\n</ivy-module>\r\n',2034,12),(13,'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ivysettings>\r\n  <settings defaultResolver=\"myChain\" />\r\n  <resolvers>\r\n    <chain name=\"myChain\" returnFirst=\"true\">\r\n      <ibiblio name=\"ibiblio\" m2compatible=\"true\" />\r\n      <ibiblio name=\"jboss\" m2compatible=\"true\" root=\"http://repository.jboss.com/maven2/\" />\r\n      <ibiblio name=\"jboss2\" m2compatible=\"true\" root=\"http://repository.jboss.com/nexus/content/groups/public/\" />\r\n      <ibiblio name=\"sonatype-oss-public\" m2compatible=\"true\" root=\"https://oss.sonatype.org/content/groups/public/\" />\r\n      <ibiblio name=\"terracotta\" m2compatible=\"true\" root=\"http://repo.terracotta.org/maven2/\" />\r\n    </chain>\r\n  </resolvers>\r\n</ivysettings>\r\n',691,13),(14,'Manifest-Version: 1.0\r\nClass-Path: \r\n\r\n',39,14),(15,'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\">\r\n  <display-name>recommender</display-name>\r\n  <welcome-file-list>\r\n    <welcome-file>index.html</welcome-file>\r\n    <welcome-file>index.htm</welcome-file>\r\n    <welcome-file>index.jsp</welcome-file>\r\n    <welcome-file>default.html</welcome-file>\r\n    <welcome-file>default.htm</welcome-file>\r\n    <welcome-file>default.jsp</welcome-file>\r\n  </welcome-file-list>\r\n</web-app>\r\n',718,15),(16,'<html>\r\n	<body>\r\n		<h1>Hello</h1>\r\n	</body>\r\n</html>\r\n',54,16),(17,'package br.ime.usp.recommender;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\n\r\n\r\n@Resource\r\npublic class IndexController {\r\n    \r\n    private final Result result;\r\n\r\n    public IndexController(Result result) {\r\n        this.result = result;\r\n    }\r\n    \r\n    @Get(\"/\")\r\n    public void index() {\r\n        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n    }\r\n}\r\n',513,17),(18,'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<projectDescription>\r\n	<name>commendans</name>\r\n	<comment></comment>\r\n	<projects>\r\n	</projects>\r\n	<buildSpec>\r\n		<buildCommand>\r\n			<name>org.eclipse.wst.jsdt.core.javascriptValidator</name>\r\n			<arguments>\r\n			</arguments>\r\n		</buildCommand>\r\n		<buildCommand>\r\n			<name>org.eclipse.jdt.core.javabuilder</name>\r\n			<arguments>\r\n			</arguments>\r\n		</buildCommand>\r\n		<buildCommand>\r\n			<name>org.eclipse.wst.common.project.facet.core.builder</name>\r\n			<arguments>\r\n			</arguments>\r\n		</buildCommand>\r\n		<buildCommand>\r\n			<name>org.eclipse.wst.validation.validationbuilder</name>\r\n			<arguments>\r\n			</arguments>\r\n		</buildCommand>\r\n	</buildSpec>\r\n	<natures>\r\n		<nature>org.eclipse.jem.workbench.JavaEMFNature</nature>\r\n		<nature>org.eclipse.wst.common.modulecore.ModuleCoreNature</nature>\r\n		<nature>org.eclipse.wst.common.project.facet.core.nature</nature>\r\n		<nature>org.eclipse.jdt.core.javanature</nature>\r\n		<nature>org.eclipse.wst.jsdt.core.jsNature</nature>\r\n	</natures>\r\n</projectDescription>\r\n',1043,18),(19,'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project-modules id=\"moduleCoreId\" project-version=\"1.5.0\">\r\n    <wb-module deploy-name=\"commendans\">\r\n        <wb-resource deploy-path=\"/\" source-path=\"/src/main/webapp\" tag=\"defaultRootSource\"/>\r\n        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/java\"/>\r\n        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/resources\"/>\r\n        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/test/java\"/>\r\n        <property name=\"java-output-path\" value=\"/commendans/build/classes\"/>\r\n        <property name=\"context-root\" value=\"commendans\"/>\r\n    </wb-module>\r\n</project-modules>\r\n',672,19),(20,'#Mon Oct 29 14:36:46 BRST 2012\r\neclipse.preferences.version=1\r\norg.jboss.ide.eclipse.as.core.singledeployable.deployableList=\r\n',127,20),(21,'<ivy-module version=\"2.0\">\r\n	<info organisation=\"ime-usp\" module=\"recommender\" />\r\n\r\n	<configurations>\r\n		<conf name=\"default\" description=\"dependencies used for compile\" />\r\n		<conf name=\"test\" description=\"dependencies used for tests\" visibility=\"public\" />\r\n	</configurations>\r\n\r\n	<dependencies>\r\n		<!-- Hibernate and other stuff -->\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-core\" rev=\"3.6.10.Final\"/>\r\n		<dependency org=\"org.hibernate.javax.persistence\" name=\"hibernate-jpa-2.0-api\" rev=\"1.0.0.Final\" conf=\"default\" />\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-c3p0\" rev=\"3.6.10.Final\" conf=\"default\" />\r\n		<dependency org=\"javax.transaction\" name=\"jta\" rev=\"1.1\"/>\r\n		<dependency org=\"mysql\" name=\"mysql-connector-java\" rev=\"5.1.18\"/>\r\n		<dependency org=\"c3p0\" name=\"c3p0\" rev=\"0.9.1\" conf=\"default\" />\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-validator\" rev=\"4.3.0.Final\"/>\r\n		<dependency org=\"net.sf.ehcache\" name=\"ehcache-core\" rev=\"2.5.3\"/>\r\n		\r\n\r\n		<!-- VRaptor dependencies -->\r\n		<dependency org=\"br.com.caelum\" name=\"vraptor\" rev=\"3.4.1\" conf=\"default\" />\r\n        <dependency org=\"org.slf4j\" name=\"slf4j-api\" rev=\"1.6.1\"/>\r\n        <dependency org=\"log4j\" name=\"log4j\" rev=\"1.2.16\"/>\r\n		<dependency org=\"org.slf4j\" name=\"slf4j-log4j12\" rev=\"1.6.1\"/>\r\n		<dependency org=\"org.mortbay.jetty\" name=\"servlet-api-2.5\" rev=\"6.1H.14.1\"/>\r\n		<dependency org=\"org.glassfish.web\" name=\"jstl-impl\" rev=\"1.2\"/>\r\n		<dependency org=\"org.mortbay.jetty\" name=\"servlet-api\" rev=\"3.0.pre4\"/>\r\n		<dependency org=\"javassist\" name=\"javassist\" rev=\"3.12.1.GA\"/>\r\n		<dependency org=\"commons-io\" name=\"commons-io\" rev=\"2.0.1\"/>\r\n		<dependency org=\"com.google.guava\" name=\"guava\" rev=\"r09\"/>\r\n\r\n		<!-- Test dependencies -->\r\n		<dependency org=\"junit\" name=\"junit\" rev=\"4.8.2\" conf=\"test->default\" />\r\n		<dependency org=\"org.mockito\" name=\"mockito-all\" rev=\"1.8.5\" conf=\"test->default\" />\r\n		<dependency org=\"org.hsqldb\" name=\"hsqldb\" rev=\"2.2.8\" conf=\"test->default\" />\r\n            \r\n	</dependencies>\r\n</ivy-module>\r\n',2035,21),(22,'',0,22),(23,'package br.ime.usp.recommender;\r\n\r\npublic class ItemToItemRecommender {\r\n\r\n}\r\n',78,23),(24,'package br.ime.usp.recommender.controller;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\n\r\n\r\n@Resource\r\npublic class IndexController {\r\n    \r\n    private final Result result;\r\n\r\n    public IndexController(Result result) {\r\n        this.result = result;\r\n    }\r\n    \r\n    @Get(\"/\")\r\n    public void index() {\r\n        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n    }\r\n}\r\n',524,24),(25,'package br.ime.usp.recommender.factory;\r\n\r\nimport br.ime.usp.recommender.model.User;\r\n\r\npublic class ItemToItemRecommenderFactory {\r\n\r\n    public void addUser(User user) {\r\n        \r\n    }\r\n\r\n}\r\n',195,25),(26,'package br.ime.usp.recommender.model;\r\n\r\npublic class Item {\r\n    \r\n}\r\n',71,26),(27,'package br.ime.usp.recommender.model;\r\n\r\nimport java.util.List;\r\n\r\npublic class User {\r\n\r\n    public User(List<Item> items) {\r\n    }\r\n\r\n}\r\n',139,27),(28,'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\">\r\n  <display-name>commendans</display-name>\r\n  <welcome-file-list>\r\n    <welcome-file>index.html</welcome-file>\r\n    <welcome-file>index.htm</welcome-file>\r\n    <welcome-file>index.jsp</welcome-file>\r\n    <welcome-file>default.html</welcome-file>\r\n    <welcome-file>default.htm</welcome-file>\r\n    <welcome-file>default.jsp</welcome-file>\r\n  </welcome-file-list>\r\n</web-app>\r\n',717,28),(29,'package br.ime.usp.recommender.factory;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.recommender.model.Item;\r\nimport br.ime.usp.recommender.model.User;\r\n\r\npublic class ItemToItemRecommenderFactoryTest {\r\n\r\n    @Test\r\n    public void test() {\r\n        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n        List<Item> items = new ArrayList<Item>();\r\n        factory.addUser(new User(items));\r\n    }\r\n\r\n}\r\n',490,29),(30,'package br.ime.usp.commendans;\r\n\r\npublic class ItemToItemRecommender {\r\n\r\n}\r\n',77,30),(31,'package br.ime.usp.commendans.controller;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\n\r\n\r\n@Resource\r\npublic class IndexController {\r\n    \r\n    private final Result result;\r\n\r\n    public IndexController(Result result) {\r\n        this.result = result;\r\n    }\r\n    \r\n    @Get(\"/\")\r\n    public void index() {\r\n        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n    }\r\n}\r\n',523,31),(32,'package br.ime.usp.commendans.factory;\r\n\r\nimport br.ime.usp.commendans.model.User;\r\n\r\npublic class ItemToItemRecommenderFactory {\r\n\r\n    public void addUser(User user) {\r\n        \r\n    }\r\n\r\n}\r\n',193,32),(33,'package br.ime.usp.commendans.model;\r\n\r\npublic class Item {\r\n    \r\n}\r\n',70,33),(34,'package br.ime.usp.commendans.model;\r\n\r\nimport java.util.List;\r\n\r\npublic class User {\r\n\r\n    public User(List<Item> items) {\r\n    }\r\n\r\n}\r\n',138,34),(35,'',0,35),(36,'',0,36),(37,'',0,37),(38,'',0,38),(39,'',0,39),(40,'package br.ime.usp.commendans.factory;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.factory.ItemToItemRecommenderFactory;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.model.User;\r\n\r\npublic class ItemToItemRecommenderFactoryTest {\r\n\r\n    @Test\r\n    public void test() {\r\n        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n        List<Item> items = new ArrayList<Item>();\r\n        factory.addUser(new User(items));\r\n    }\r\n\r\n}\r\n',555,40),(41,'',0,41),(42,'package br.ime.usp.commendans;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.ime.usp.commendans.factory.ItemToItemsAssociation;\r\nimport br.ime.usp.commendans.factory.ItemToItemsAssociation.Tuple;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class ItemToItemRecommender implements Recommender {\r\n\r\n    private final Map<Item, List<Tuple>> associations;\r\n\r\n    public ItemToItemRecommender(\r\n            HashMap<Item, ItemToItemsAssociation> associations) {\r\n        this.associations = parse(associations);\r\n    }\r\n\r\n    private Map<Item, List<Tuple>> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n        HashMap<Item, List<Tuple>> map = new HashMap<Item, List<Tuple>>();\r\n        Set<Item> items = associations.keySet();\r\n        for (Item item : items) {\r\n            ItemToItemsAssociation association = associations.get(item);\r\n            List<Tuple> tuples = association.toTupleList();\r\n            map.put(item, tuples);\r\n        }\r\n        return map;\r\n    }\r\n\r\n    @Override\r\n    public List<Tuple> recommendendItemsFor(Item item) {\r\n        List<Tuple> tuples = associations.get(item);\r\n        return tuples;\r\n    }\r\n\r\n}\r\n',1221,42),(43,'package br.ime.usp.commendans;\r\n\r\nimport java.util.List;\r\n\r\nimport br.ime.usp.commendans.factory.ItemToItemsAssociation.Tuple;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic interface Recommender {\r\n    public List<Tuple> recommendendItemsFor(Item item);\r\n}\r\n',264,43),(44,'package br.ime.usp.commendans.factory;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.ime.usp.commendans.ItemToItemRecommender;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.model.User;\r\n\r\npublic class ItemToItemRecommenderFactory {\r\n\r\n    private Map<Item, List<User>> usersByItemBought;\r\n    private HashMap<Item, ItemToItemsAssociation> associations;\r\n    \r\n    public ItemToItemRecommenderFactory() {\r\n        usersByItemBought = new HashMap<Item, List<User>>();\r\n    }\r\n    \r\n    public void addUser(User user) {\r\n        List<Item> items = user.itemsBought();\r\n        for (Item item : items) {\r\n            store(item, user);\r\n        }\r\n    }\r\n\r\n    private void store(Item item, User user) {\r\n        List<User> users = usersByItemBought.get(item);\r\n        if (users == null) {\r\n            users = new ArrayList<User>();\r\n        }\r\n        users.add(user);\r\n        usersByItemBought.put(item, users);\r\n    }\r\n    \r\n    \r\n    public ItemToItemRecommender build() {\r\n        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n        Set<Item> items = usersByItemBought.keySet();\r\n        for (Item item : items) {\r\n            ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n            List<User> users = usersByItemBought.get(item);\r\n            for (User user : users) {\r\n                List<Item> boughtTogether = user.itemsBought();\r\n                System.out.println(item + \" -> \" +boughtTogether);\r\n                for (Item i : boughtTogether) {\r\n                    association.associate(i);\r\n                }\r\n            }\r\n            associations.put(item, association);\r\n        }\r\n        return new ItemToItemRecommender(associations);\r\n    }\r\n    \r\n    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n        return associations;\r\n    }\r\n\r\n}\r\n',1947,44),(45,'package br.ime.usp.commendans.factory;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class ItemToItemsAssociation {\r\n    private Item item;\r\n    private Map<Item, Double> associations;\r\n\r\n    public ItemToItemsAssociation(Item item) {\r\n        this.item = item;\r\n        this.associations = new HashMap<Item, Double>();\r\n    }\r\n\r\n    public void associate(Item i) {\r\n        if (i.equals(this.item))\r\n            return;\r\n        Double v = associations.get(i);\r\n        if (v == null) {\r\n            v = 0.0;\r\n        }\r\n        v += 1.0;\r\n        associations.put(i, v);\r\n    }\r\n    \r\n    public double associationValue(Item i) {\r\n        Double v = associations.get(i);\r\n        if (v == null) {\r\n            return 0.0;\r\n        }\r\n        return v;\r\n    }\r\n    \r\n    \r\n    @Override\r\n    public String toString() {\r\n        String res = this.item.toString() + \" => {\" + associations.toString() + \"}\";\r\n        return res;\r\n    }\r\n\r\n    public List<Tuple> toTupleList() {\r\n        Set<Item> items = associations.keySet();\r\n        ArrayList<Tuple> tuples = new ArrayList<Tuple>();\r\n        for (Item item : items) {\r\n            Double value = associations.get(item);\r\n            tuples.add(new Tuple(item, value));\r\n        }\r\n        Collections.sort(tuples);\r\n        Collections.reverse(tuples);\r\n        return tuples;\r\n    }\r\n\r\n    \r\n    public class Tuple implements Comparable<Tuple> {\r\n        private Item item;\r\n        private Double value;\r\n\r\n        public Tuple(Item item, Double value) {\r\n            this.item = item;\r\n            this.value = value;\r\n        }\r\n\r\n        public Item getItem() {\r\n            return item;\r\n        }\r\n\r\n        public Double getValue() {\r\n            return value;\r\n        }\r\n\r\n        @Override\r\n        public int compareTo(Tuple o) {\r\n            return (int) (value - o.getValue());\r\n        }\r\n\r\n    }\r\n\r\n}\r\n',2037,45),(46,'package br.ime.usp.commendans.model;\r\n\r\npublic class Item {\r\n    private Long id;\r\n\r\n    public Item(Long id) {\r\n        this.id = id;\r\n    }\r\n    \r\n    @Override\r\n    public int hashCode() {\r\n        return id.hashCode();\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (obj instanceof Item) {\r\n            Item other = (Item) obj;\r\n            return other.getId().equals(this.id);\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    public Long getId() {\r\n        return id;\r\n    }\r\n    \r\n    @Override\r\n    public String toString() {\r\n        return \"Item \" + id;\r\n    }\r\n}\r\n',608,46),(47,'package br.ime.usp.commendans.model;\r\n\r\nimport java.util.List;\r\n\r\npublic class User {\r\n\r\n    private final List<Item> items;\r\n\r\n    public User(List<Item> items) {\r\n        this.items = items;\r\n    }\r\n\r\n    public List<Item> itemsBought() {\r\n        return items;\r\n    }\r\n\r\n}\r\n',277,47),(48,'package br.ime.usp.commendans.factory;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.ItemToItemRecommender;\r\nimport br.ime.usp.commendans.factory.ItemToItemsAssociation.Tuple;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.model.User;\r\n\r\npublic class ItemToItemRecommenderFactoryTest {\r\n\r\n    @Test\r\n    public void test() {\r\n        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n        Item item1 = new Item(1l);\r\n        Item item2 = new Item(2l);\r\n        Item item3 = new Item(3l);\r\n        Item item4 = new Item(4l);\r\n        User user1 = new User(Arrays.asList(item1, item3));\r\n        User user2 = new User(Arrays.asList(item2, item4));\r\n        User user3 = new User(Arrays.asList(item1, item2, item3));\r\n        User user4 = new User(Arrays.asList(item3, item4));\r\n        factory.addUser(user1);\r\n        factory.addUser(user2);\r\n        factory.addUser(user3);\r\n        factory.addUser(user4);\r\n        \r\n        ItemToItemRecommender recommender = factory.build();\r\n        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n        \r\n        List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1);\r\n        ItemToItemsAssociation association = associations.get(item1);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(2, recommendedItems.size());\r\n        assertEquals(item3, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(item2, recommendedItems.get(1).getItem());\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendendItemsFor(item2);\r\n        association = associations.get(item2);\r\n        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendendItemsFor(item3);\r\n        association = associations.get(item3);\r\n        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(item1, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        association = associations.get(item4);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n    }\r\n\r\n}\r\n',3968,48),(49,'package br.ime.usp.commendans;\r\n\r\nimport java.util.List;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation.Tuple;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic interface Recommender {\r\n    public List<Tuple> recommendendItemsFor(Item item);\r\n}\r\n',267,49),(50,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.ime.usp.commendans.Recommender;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation.Tuple;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class ItemToItemRecommender implements Recommender {\r\n\r\n    private final Map<Item, List<Tuple>> associations;\r\n\r\n    public ItemToItemRecommender(\r\n            HashMap<Item, ItemToItemsAssociation> associations) {\r\n        this.associations = parse(associations);\r\n    }\r\n\r\n    private Map<Item, List<Tuple>> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n        HashMap<Item, List<Tuple>> map = new HashMap<Item, List<Tuple>>();\r\n        Set<Item> items = associations.keySet();\r\n        for (Item item : items) {\r\n            ItemToItemsAssociation association = associations.get(item);\r\n            List<Tuple> tuples = association.toTupleList();\r\n            map.put(item, tuples);\r\n        }\r\n        return map;\r\n    }\r\n\r\n    @Override\r\n    public List<Tuple> recommendendItemsFor(Item item) {\r\n        List<Tuple> tuples = associations.get(item);\r\n        return tuples;\r\n    }\r\n\r\n}\r\n',1216,50),(51,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.model.User;\r\n\r\npublic class ItemToItemRecommenderFactory {\r\n\r\n    private Map<Item, List<User>> usersByItemBought;\r\n    private HashMap<Item, ItemToItemsAssociation> associations;\r\n    \r\n    public ItemToItemRecommenderFactory() {\r\n        usersByItemBought = new HashMap<Item, List<User>>();\r\n    }\r\n    \r\n    public void addUser(User user) {\r\n        List<Item> items = user.itemsBought();\r\n        for (Item item : items) {\r\n            store(item, user);\r\n        }\r\n    }\r\n\r\n    private void store(Item item, User user) {\r\n        List<User> users = usersByItemBought.get(item);\r\n        if (users == null) {\r\n            users = new ArrayList<User>();\r\n        }\r\n        users.add(user);\r\n        usersByItemBought.put(item, users);\r\n    }\r\n    \r\n    \r\n    public ItemToItemRecommender build() {\r\n        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n        Set<Item> items = usersByItemBought.keySet();\r\n        for (Item item : items) {\r\n            ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n            List<User> users = usersByItemBought.get(item);\r\n            for (User user : users) {\r\n                List<Item> boughtTogether = user.itemsBought();\r\n                System.out.println(item + \" -> \" +boughtTogether);\r\n                for (Item i : boughtTogether) {\r\n                    association.associate(i);\r\n                }\r\n            }\r\n            associations.put(item, association);\r\n        }\r\n        return new ItemToItemRecommender(associations);\r\n    }\r\n    \r\n    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n        return associations;\r\n    }\r\n\r\n}\r\n',1897,51),(52,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class ItemToItemsAssociation {\r\n    private Item item;\r\n    private Map<Item, Double> associations;\r\n\r\n    public ItemToItemsAssociation(Item item) {\r\n        this.item = item;\r\n        this.associations = new HashMap<Item, Double>();\r\n    }\r\n\r\n    public void associate(Item i) {\r\n        if (i.equals(this.item))\r\n            return;\r\n        Double v = associations.get(i);\r\n        if (v == null) {\r\n            v = 0.0;\r\n        }\r\n        v += 1.0;\r\n        associations.put(i, v);\r\n    }\r\n    \r\n    public double associationValue(Item i) {\r\n        Double v = associations.get(i);\r\n        if (v == null) {\r\n            return 0.0;\r\n        }\r\n        return v;\r\n    }\r\n    \r\n    \r\n    @Override\r\n    public String toString() {\r\n        String res = this.item.toString() + \" => {\" + associations.toString() + \"}\";\r\n        return res;\r\n    }\r\n\r\n    public List<Tuple> toTupleList() {\r\n        Set<Item> items = associations.keySet();\r\n        ArrayList<Tuple> tuples = new ArrayList<Tuple>();\r\n        for (Item item : items) {\r\n            Double value = associations.get(item);\r\n            tuples.add(new Tuple(item, value));\r\n        }\r\n        Collections.sort(tuples);\r\n        Collections.reverse(tuples);\r\n        return tuples;\r\n    }\r\n\r\n    \r\n    public class Tuple implements Comparable<Tuple> {\r\n        private Item item;\r\n        private Double value;\r\n\r\n        public Tuple(Item item, Double value) {\r\n            this.item = item;\r\n            this.value = value;\r\n        }\r\n\r\n        public Item getItem() {\r\n            return item;\r\n        }\r\n\r\n        public Double getValue() {\r\n            return value;\r\n        }\r\n\r\n        @Override\r\n        public int compareTo(Tuple o) {\r\n            return (int) (value - o.getValue());\r\n        }\r\n\r\n    }\r\n\r\n}\r\n',2040,52),(53,'package br.ime.usp.commendans.model;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.Id;\r\n\r\n@Entity\r\npublic class Item {\r\n    @Id\r\n    private Long id;\r\n\r\n    @Deprecated\r\n    protected Item() {\r\n    }\r\n    \r\n    public Item(Long id) {\r\n        this.id = id;\r\n    }\r\n    \r\n    @Override\r\n    public int hashCode() {\r\n        return id.hashCode();\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (obj instanceof Item) {\r\n            Item other = (Item) obj;\r\n            return other.getId().equals(this.id);\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    public Long getId() {\r\n        return id;\r\n    }\r\n    \r\n    @Override\r\n    public String toString() {\r\n        return \"Item \" + id;\r\n    }\r\n}\r\n',746,53),(54,'package br.ime.usp.commendans.model;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.ManyToMany;\r\n\r\n@Entity\r\npublic class User {\r\n    \r\n    @Id @GeneratedValue\r\n    private Long id;\r\n\r\n    @ManyToMany\r\n    private List<Item> items;\r\n    \r\n    @Deprecated\r\n    public User() {\r\n    }\r\n\r\n    public User(List<Item> items, Long id) {\r\n        this.items = items;\r\n        this.id = id;\r\n    }\r\n\r\n    public List<Item> itemsBought() {\r\n        return items;\r\n    }\r\n    \r\n    @Override\r\n    public String toString() {\r\n        return \"User \" + id;\r\n    }\r\n\r\n    public void add(Item item) {\r\n        items.add(item);\r\n    }\r\n    \r\n    public List<Item> getItems() {\r\n        return items;\r\n    }\r\n\r\n}\r\n',810,54),(55,'package br.ime.usp.commendans.util;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.StatelessSession;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.model.User;\r\n\r\npublic class DataImporter {\r\n    \r\n    private final StatelessSession session;\r\n    private static Logger logger;\r\n\r\n    public DataImporter(StatelessSession session) {\r\n        this.session = session;\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        logger = Logger.getLogger(DataImporter.class);\r\n        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        StatelessSession session = sf.openStatelessSession();\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n    }\r\n\r\n    private void importData(String file) throws IOException {\r\n        HashMap<Long, User> users = new HashMap<Long, User>();\r\n        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n        String line = reader.readLine();\r\n        \r\n        while (line != null) {\r\n            logger.info(line);\r\n            List<String> row = Arrays.asList(line.split(\",\"));\r\n            long id = Long.parseLong(row.get(0));\r\n            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n            User user = users.get(id);\r\n            if (user == null) {\r\n                user = new User(new ArrayList<Item>(), id);\r\n            }\r\n            Item item = items.get(itemId);\r\n            if (item == null) {\r\n                item = new Item(itemId);\r\n            }\r\n            user.add(item);\r\n            line = reader.readLine();\r\n            users.put(id, user);\r\n            items.put(itemId, item);\r\n        }\r\n        \r\n        logger.info(\"persisting\");\r\n        session.getTransaction().begin();\r\n        for (Item item : items.values()) {\r\n            session.insert(item);\r\n        }\r\n        \r\n        Collection<User> allUsers = users.values();\r\n        for (User user : allUsers) {\r\n            session.insert(user);\r\n        }\r\n        session.getTransaction().commit();\r\n        logger.info(\"finished persisting\");\r\n    }\r\n\r\n}\r\n',2689,55),(56,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n	    <property name=\"c3p0.acquire_increment\">1</property> \r\n		<property name=\"c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n		<property name=\"c3p0.max_size\">15</property> \r\n		<property name=\"c3p0.min_size\">1</property> \r\n		<property name=\"c3p0.timeout\">600</property>\r\n    \r\n        <property name=\"connection.url\">jdbc:mysql://localhost/commendans</property>\r\n        <property name=\"connection.driver_class\">com.mysql.jdbc.Driver</property>\r\n        <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\r\n        <property name=\"connection.username\">root</property>\r\n        <property name=\"connection.password\"></property>\r\n        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n        <property name=\"show_sql\">false</property>\r\n        <property name=\"format_sql\">false</property>\r\n        <property name=\"hibernate.generate_statistics\">true</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.User\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1398,56),(57,'<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\r\n<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\r\n\r\n	<appender name=\"stdout\" class=\"org.apache.log4j.ConsoleAppender\">\r\n		<layout class=\"org.apache.log4j.PatternLayout\">\r\n			<param name=\"ConversionPattern\" value=\"%d{HH:mm:ss,SSS} %5p [%-20c{1}] %m%n\" />\r\n		</layout>\r\n	</appender>\r\n\r\n	<category name=\"org.hibernate\">\r\n		<priority value=\"DEBUG\" />\r\n		<appender-ref ref=\"stdout\" />\r\n	</category>\r\n	\r\n	<category name=\"br.ime.usp\">\r\n		<priority value=\"DEBUG\" />\r\n		<appender-ref ref=\"stdout\" />\r\n	</category>\r\n\r\n	<category name=\"br.com.caelum.vraptor\">\r\n		<priority value=\"INFO\" />\r\n		<appender-ref ref=\"stdout\" />\r\n	</category>\r\n	\r\n\r\n</log4j:configuration>\r\n',767,57),(58,'121042,\"Livro 1 - E-book + Impresso\"\r\n121045,\"Livro 2 - E-book + Impresso\"\r\n121046,\"Livro 1 - Impresso\"\r\n121049,\"Livro 1 - E-book + Impresso\"\r\n121050,\"Livro 1 - Impresso\"\r\n121051,\"Livro 1 - E-book\"\r\n121052,\"Livro 1 - Impresso\"\r\n121054,\"Livro 1 - Impresso\"\r\n121055,\"Livro 1 - E-book\"\r\n121056,\"Livro 2 - E-book\"\r\n121057,\"Livro 2 - E-book + Impresso\"\r\n121058,\"Livro 1 - E-book\"\r\n121059,\"Livro 1 - E-book\"\r\n121060,\"Livro 4 - E-book + Impresso\"\r\n121061,\"Livro 1 - E-book\"\r\n121061,\"Livro 5 - E-book\"\r\n121061,\"Livro 2 - E-book\"\r\n121061,\"Livro 4 - E-book\"\r\n121062,\"Livro 4 - E-book\"\r\n121063,\"Livro 4 - E-book\"\r\n121064,\"Livro 4 - E-book\"\r\n121064,\"Livro 2 - E-book\"\r\n121065,\"Livro 3 - Impresso\"\r\n121066,\"Livro 3 - E-book\"\r\n121067,\"Livro 2 - E-book\"\r\n121068,\"Livro 1 - E-book\"\r\n121069,\"Livro 1 - E-book\"\r\n121070,\"Livro 1 - E-book\"\r\n121071,\"Livro 1 - E-book + Impresso\"\r\n121072,\"Livro 1 - E-book + Impresso\"\r\n121073,\"Livro 1 - E-book\"\r\n121074,\"Livro 5 - E-book\"\r\n121075,\"Livro 2 - E-book\"\r\n121076,\"Livro 4 - E-book\"\r\n121077,\"Livro 4 - E-book\"\r\n121077,\"Livro 2 - E-book\"\r\n121078,\"Livro 3 - E-book + Impresso\"\r\n121079,\"Livro 1 - E-book\"\r\n121079,\"Livro 3 - E-book\"\r\n121080,\"Livro 5 - E-book + Impresso\"\r\n121080,\"Livro 4 - E-book + Impresso\"\r\n121080,\"Livro 2 - E-book + Impresso\"\r\n121081,\"Livro 2 - E-book\"\r\n121082,\"Livro 2 - E-book\"\r\n121083,\"Livro 4 - E-book\"\r\n121084,\"Livro 1 - E-book\"\r\n121085,\"Livro 4 - E-book\"\r\n121086,\"Livro 1 - E-book + Impresso\"\r\n121087,\"Livro 3 - E-book\"\r\n121087,\"Livro 1 - E-book\"\r\n121087,\"Livro 2 - E-book\"\r\n121088,\"Livro 1 - E-book\"\r\n121089,\"Livro 2 - E-book\"\r\n121089,\"Livro 6 - E-book\"\r\n121089,\"Livro 1 - E-book\"\r\n121090,\"Livro 3 - E-book\"\r\n121092,\"Livro 2 - E-book + Impresso\"\r\n121092,\"Livro 1 - E-book + Impresso\"\r\n121093,\"Livro 4 - E-book\"\r\n121094,\"Livro 6 - E-book + Impresso\"\r\n121097,\"Livro 3 - E-book\"\r\n121098,\"Livro 3 - E-book\"\r\n121099,\"Livro 3 - E-book\"\r\n121100,\"Livro 1 - E-book\"\r\n121101,\"Livro 4 - E-book\"\r\n121102,\"Livro 3 - E-book + Impresso\"\r\n121103,\"Livro 1 - E-book + Impresso\"\r\n121104,\"Livro 3 - E-book\"\r\n121105,\"Livro 3 - E-book\"\r\n121106,\"Livro 6 - E-book\"\r\n121107,\"Livro 4 - E-book\"\r\n121108,\"Livro 3 - E-book\"\r\n121109,\"Livro 2 - E-book\"\r\n121110,\"Livro 3 - E-book + Impresso\"\r\n121113,\"Livro 4 - E-book + Impresso\"\r\n121114,\"Livro 4 - E-book\"\r\n121115,\"Livro 1 - E-book\"\r\n121116,\"Livro 2 - E-book\"\r\n121117,\"Livro 1 - E-book\"\r\n121118,\"Livro 2 - Impresso\"\r\n121119,\"Livro 3 - E-book + Impresso\"\r\n121122,\"Livro 2 - E-book\"\r\n121123,\"Livro 3 - E-book\"\r\n121124,\"Livro 3 - E-book + Impresso\"\r\n121125,\"Livro 3 - E-book\"\r\n121126,\"Livro 2 - E-book\"\r\n121127,\"Livro 3 - E-book + Impresso\"\r\n121129,\"Livro 1 - E-book\"\r\n121130,\"Livro 3 - E-book\"\r\n121131,\"Livro 1 - E-book\"\r\n121132,\"Livro 2 - E-book\"\r\n121133,\"Livro 4 - E-book\"\r\n121134,\"Livro 1 - E-book\"\r\n121135,\"Livro 3 - E-book\"\r\n121136,\"Livro 5 - E-book\"\r\n121137,\"Livro 3 - E-book\"\r\n121138,\"Livro 3 - E-book + Impresso\"\r\n121139,\"Livro 2 - E-book\"\r\n121140,\"Livro 4 - E-book + Impresso\"\r\n121141,\"Livro 1 - E-book\"\r\n121142,\"Livro 2 - E-book + Impresso\"\r\n121142,\"Livro 1 - E-book + Impresso\"\r\n121143,\"Livro 1 - Impresso\"\r\n121144,\"Livro 1 - E-book\"\r\n121145,\"Livro 1 - E-book\"\r\n121146,\"Livro 2 - E-book\"\r\n121146,\"Livro 1 - E-book\"\r\n121147,\"Livro 1 - E-book\"\r\n121149,\"Livro 3 - E-book\"\r\n121150,\"Livro 1 - E-book\"\r\n121151,\"Livro 2 - E-book\"\r\n121152,\"Livro 3 - E-book\"\r\n121153,\"Livro 3 - E-book\"\r\n121154,\"Livro 6 - E-book\"\r\n121155,\"Livro 4 - E-book\"\r\n121156,\"Livro 2 - E-book\"\r\n121157,\"Livro 1 - E-book\"\r\n121158,\"Livro 4 - E-book + Impresso\"\r\n121159,\"Livro 1 - E-book + Impresso\"\r\n121160,\"Livro 6 - E-book\"\r\n121160,\"Livro 1 - E-book\"\r\n121160,\"Livro 2 - E-book\"\r\n121161,\"Livro 2 - E-book\"\r\n121163,\"Livro 2 - E-book\"\r\n121164,\"Livro 4 - E-book\"\r\n121166,\"Livro 3 - E-book\"\r\n121166,\"Livro 2 - E-book\"\r\n121166,\"Livro 5 - E-book\"\r\n121167,\"Livro 2 - E-book + Impresso\"\r\n121170,\"Livro 2 - E-book\"\r\n121171,\"Livro 3 - E-book\"\r\n121171,\"Livro 1 - E-book\"\r\n121172,\"Livro 6 - E-book\"\r\n121173,\"Livro 2 - E-book\"\r\n121173,\"Livro 1 - E-book\"\r\n121174,\"Livro 4 - E-book\"\r\n121177,\"Livro 4 - E-book\"\r\n121178,\"Livro 4 - E-book\"\r\n121179,\"Livro 3 - E-book\"\r\n121180,\"Livro 2 - E-book\"\r\n121181,\"Livro 3 - E-book\"\r\n121182,\"Livro 6 - E-book\"\r\n121183,\"Livro 4 - E-book\"\r\n121184,\"Livro 2 - E-book\"\r\n121185,\"Livro 3 - E-book\"\r\n121186,\"Livro 2 - E-book\"\r\n121187,\"Livro 3 - E-book\"\r\n121188,\"Livro 3 - E-book\"\r\n121189,\"Livro 2 - E-book\"\r\n121190,\"Livro 2 - Impresso\"\r\n121191,\"Livro 3 - E-book\"\r\n121192,\"Livro 5 - E-book\"\r\n121193,\"Livro 2 - E-book\"\r\n121195,\"Livro 2 - E-book\"\r\n121197,\"Livro 3 - E-book + Impresso\"\r\n121198,\"Livro 5 - E-book\"\r\n121199,\"Livro 2 - E-book\"\r\n121200,\"Livro 3 - E-book\"\r\n121200,\"Livro 2 - E-book\"\r\n121201,\"Livro 2 - E-book\"\r\n121202,\"Livro 2 - E-book\"\r\n121202,\"Livro 3 - E-book\"\r\n121203,\"Livro 2 - E-book\"\r\n121204,\"Livro 3 - E-book\"\r\n121205,\"Livro 1 - E-book\"\r\n121206,\"Livro 1 - E-book\"\r\n121207,\"Livro 4 - E-book + Impresso\"\r\n121208,\"Livro 2 - E-book\"\r\n121211,\"Livro 6 - E-book\"\r\n121212,\"Livro 1 - E-book\"\r\n121213,\"Livro 4 - E-book\"\r\n121215,\"Livro 4 - E-book\"\r\n121216,\"Livro 6 - E-book\"\r\n121216,\"Livro 4 - E-book\"\r\n121217,\"Livro 6 - E-book\"\r\n121218,\"Livro 4 - E-book\"\r\n121219,\"Livro 4 - E-book + Impresso\"\r\n121220,\"Livro 4 - E-book\"\r\n121221,\"Livro 5 - E-book\"\r\n121222,\"Livro 4 - E-book\"\r\n121223,\"Livro 4 - Impresso\"\r\n121224,\"Livro 4 - E-book\"\r\n121225,\"Livro 5 - E-book\"\r\n121227,\"Livro 4 - E-book\"\r\n121228,\"Livro 2 - E-book\"\r\n121228,\"Livro 3 - E-book\"\r\n121229,\"Livro 4 - E-book\"\r\n121229,\"Livro 2 - E-book\"\r\n121230,\"Livro 4 - E-book\"\r\n121231,\"Livro 6 - E-book\"\r\n121233,\"Livro 4 - E-book\"\r\n121234,\"Livro 5 - E-book\"\r\n121234,\"Livro 4 - E-book\"\r\n121234,\"Livro 2 - E-book\"\r\n121235,\"Livro 4 - E-book\"\r\n121235,\"Livro 1 - E-book\"\r\n121236,\"Livro 4 - E-book\"\r\n121237,\"Livro 4 - E-book\"\r\n121238,\"Livro 5 - E-book\"\r\n121238,\"Livro 2 - E-book\"\r\n121239,\"Livro 4 - E-book\"\r\n121240,\"Livro 2 - Impresso\"\r\n121241,\"Livro 4 - E-book\"\r\n121243,\"Livro 4 - E-book\"\r\n121244,\"Livro 1 - E-book\"\r\n121245,\"Livro 4 - E-book\"\r\n121246,\"Livro 1 - E-book\"\r\n121247,\"Livro 3 - E-book\"\r\n121248,\"Livro 6 - E-book\"\r\n121250,\"Livro 3 - E-book\"\r\n121251,\"Livro 3 - E-book\"\r\n121252,\"Livro 6 - E-book\"\r\n121253,\"Livro 1 - E-book\"\r\n121254,\"Livro 4 - Impresso\"\r\n121255,\"Livro 4 - Impresso\"\r\n121256,\"Livro 1 - E-book\"\r\n121257,\"Livro 1 - E-book\"\r\n121258,\"Livro 4 - E-book + Impresso\"\r\n121261,\"Livro 5 - E-book\"\r\n121262,\"Livro 1 - Impresso\"\r\n121262,\"Livro 4 - E-book + Impresso\"\r\n121263,\"Livro 7 - E-book + Impresso\"\r\n121263,\"Livro 8 - E-book + Impresso\"\r\n121263,\"Livro 9 - E-book + Impresso\"\r\n121263,\"Livro 3 - E-book + Impresso\"\r\n121264,\"Livro 9 - E-book\"\r\n121265,\"Livro 7 - E-book + Impresso\"\r\n121265,\"Livro 8 - E-book + Impresso\"\r\n121265,\"Livro 9 - E-book\"\r\n121266,\"Livro 8 - E-book + Impresso\"\r\n121267,\"Livro 10 - E-book + Impresso\"\r\n121268,\"Livro 9 - E-book\"\r\n121269,\"Livro 9 - Impresso\"\r\n121270,\"Livro 9 - E-book\"\r\n121271,\"Livro 2 - E-book\"\r\n121272,\"Livro 9 - E-book\"\r\n121273,\"Livro 7 - E-book\"\r\n121273,\"Livro 8 - E-book\"\r\n121273,\"Livro 9 - E-book\"\r\n121275,\"Livro 1 - Impresso\"\r\n121276,\"Livro 7 - E-book\"\r\n121277,\"Livro 8 - E-book\"\r\n121277,\"Livro 2 - E-book\"\r\n121278,\"Livro 5 - E-book\"\r\n121279,\"Livro 9 - E-book\"\r\n121280,\"Livro 7 - E-book\"\r\n121281,\"Livro 9 - E-book\"\r\n121282,\"Livro 3 - E-book\"\r\n121282,\"Livro 9 - E-book\"\r\n121283,\"Livro 6 - E-book\"\r\n121284,\"Livro 4 - E-book\"\r\n121284,\"Livro 2 - E-book\"\r\n121285,\"Livro 2 - E-book\"\r\n121285,\"Livro 5 - E-book\"\r\n121286,\"Livro 9 - E-book\"\r\n121287,\"Livro 3 - E-book + Impresso\"\r\n121288,\"Livro 9 - E-book\"\r\n121289,\"Livro 6 - E-book\"\r\n121290,\"Livro 6 - E-book\"\r\n121291,\"Livro 7 - E-book\"\r\n121291,\"Livro 6 - E-book\"\r\n121291,\"Livro 1 - E-book\"\r\n121292,\"Livro 9 - E-book\"\r\n121296,\"Livro 9 - E-book\"\r\n121297,\"Livro 4 - E-book\"\r\n121298,\"Livro 3 - E-book\"\r\n121299,\"Livro 9 - E-book\"\r\n121300,\"Livro 8 - E-book + Impresso\"\r\n121300,\"Livro 6 - Impresso\"\r\n121302,\"Livro 9 - E-book\"\r\n121303,\"Livro 9 - E-book\"\r\n121304,\"Livro 9 - E-book\"\r\n121305,\"Livro 6 - E-book\"\r\n121306,\"Livro 6 - E-book\"\r\n121307,\"Livro 2 - E-book\"\r\n121308,\"Livro 10 - E-book\"\r\n121308,\"Livro 9 - E-book\"\r\n121309,\"Livro 8 - E-book\"\r\n121311,\"Livro 2 - E-book + Impresso\"\r\n121311,\"Livro 10 - E-book + Impresso\"\r\n121312,\"Livro 10 - E-book\"\r\n121313,\"Livro 7 - E-book\"\r\n121313,\"Livro 6 - E-book\"\r\n121313,\"Livro 2 - E-book\"\r\n121313,\"Livro 8 - E-book\"\r\n121313,\"Livro 10 - E-book\"\r\n121314,\"Livro 1 - Impresso\"\r\n121315,\"Livro 9 - E-book\"\r\n121316,\"Livro 3 - E-book\"\r\n121317,\"Livro 10 - E-book\"\r\n121318,\"Livro 8 - E-book\"\r\n121319,\"Livro 2 - E-book\"\r\n121320,\"Livro 2 - E-book\"\r\n121320,\"Livro 5 - E-book\"\r\n121321,\"Livro 6 - E-book\"\r\n121322,\"Livro 9 - E-book + Impresso\"\r\n121323,\"Livro 9 - E-book\"\r\n121324,\"Livro 9 - Impresso\"\r\n121325,\"Livro 9 - E-book\"\r\n121327,\"Livro 9 - E-book + Impresso\"\r\n121328,\"Livro 3 - E-book\"\r\n121330,\"Livro 4 - E-book\"\r\n121333,\"Livro 9 - E-book\"\r\n121334,\"Livro 9 - E-book\"\r\n121335,\"Livro 9 - E-book\"\r\n121335,\"Livro 6 - E-book\"\r\n121336,\"Livro 9 - E-book\"\r\n121337,\"Livro 4 - E-book\"\r\n121338,\"Livro 9 - E-book + Impresso\"\r\n121339,\"Livro 9 - Impresso\"\r\n121340,\"Livro 9 - E-book\"\r\n121341,\"Livro 9 - E-book\"\r\n121342,\"Livro 9 - E-book\"\r\n121342,\"Livro 3 - E-book\"\r\n121343,\"Livro 9 - Impresso\"\r\n121344,\"Livro 9 - E-book\"\r\n121345,\"Livro 9 - E-book\"\r\n121346,\"Livro 6 - E-book\"\r\n121347,\"Livro 2 - E-book\"\r\n121348,\"Livro 9 - E-book\"\r\n121349,\"Livro 7 - E-book + Impresso\"\r\n121350,\"Livro 6 - E-book\"\r\n121350,\"Livro 7 - E-book\"\r\n121350,\"Livro 9 - E-book\"\r\n121351,\"Livro 4 - E-book\"\r\n121351,\"Livro 9 - E-book\"\r\n121351,\"Livro 10 - E-book\"\r\n121351,\"Livro 2 - E-book\"\r\n121351,\"Livro 1 - E-book\"\r\n121351,\"Livro 3 - E-book\"\r\n121352,\"Livro 9 - E-book + Impresso\"\r\n121353,\"Livro 8 - E-book\"\r\n121354,\"Livro 6 - E-book\"\r\n121355,\"Livro 9 - E-book\"\r\n121356,\"Livro 9 - E-book\"\r\n121357,\"Livro 8 - E-book\"\r\n121358,\"Livro 9 - E-book\"\r\n121359,\"Livro 9 - E-book\"\r\n121360,\"Livro 9 - E-book\"\r\n121361,\"Livro 9 - E-book\"\r\n121361,\"Livro 8 - E-book\"\r\n121361,\"Livro 1 - E-book\"\r\n121362,\"Livro 8 - E-book + Impresso\"\r\n121362,\"Livro 2 - E-book + Impresso\"\r\n121363,\"Livro 9 - E-book\"\r\n121365,\"Livro 9 - E-book + Impresso\"\r\n121366,\"Livro 4 - E-book\"\r\n121366,\"Livro 5 - E-book\"\r\n121367,\"Livro 9 - E-book\"\r\n121368,\"Livro 9 - E-book\"\r\n121369,\"Livro 9 - E-book\"\r\n121370,\"Livro 3 - E-book\"\r\n121371,\"Livro 6 - E-book\"\r\n121372,\"Livro 3 - E-book\"\r\n121373,\"Livro 6 - E-book + Impresso\"\r\n121374,\"Livro 3 - E-book\"\r\n121375,\"Livro 6 - E-book\"\r\n121375,\"Livro 9 - E-book\"\r\n121376,\"Livro 9 - E-book\"\r\n121377,\"Livro 9 - E-book\"\r\n121378,\"Livro 2 - E-book\"\r\n121378,\"Livro 4 - E-book\"\r\n121379,\"Livro 9 - E-book\"\r\n121380,\"Livro 10 - E-book\"\r\n121382,\"Livro 10 - E-book\"\r\n121383,\"Livro 5 - E-book\"\r\n121384,\"Livro 9 - E-book\"\r\n121385,\"Livro 9 - E-book\"\r\n121386,\"Livro 3 - E-book + Impresso\"\r\n121387,\"Livro 3 - E-book\"\r\n121388,\"Livro 6 - Impresso\"\r\n121389,\"Livro 8 - E-book\"\r\n121389,\"Livro 2 - E-book\"\r\n121390,\"Livro 9 - E-book\"\r\n121391,\"Livro 9 - E-book\"\r\n121392,\"Livro 3 - Impresso\"\r\n121393,\"Livro 3 - E-book\"\r\n121394,\"Livro 9 - E-book\"\r\n121396,\"Livro 9 - E-book\"\r\n121397,\"Livro 9 - E-book\"\r\n121398,\"Livro 4 - E-book\"\r\n121399,\"Livro 3 - E-book\"\r\n121400,\"Livro 8 - E-book\"\r\n121401,\"Livro 5 - E-book\"\r\n121402,\"Livro 6 - E-book\"\r\n121403,\"Livro 3 - E-book\"\r\n121404,\"Livro 2 - E-book\"\r\n121405,\"Livro 3 - E-book\"\r\n121408,\"Livro 2 - E-book\"\r\n121409,\"Livro 9 - E-book\"\r\n121410,\"Livro 9 - Impresso\"\r\n121411,\"Livro 3 - E-book\"\r\n121413,\"Livro 4 - E-book\"\r\n121414,\"Livro 9 - E-book\"\r\n121415,\"Livro 6 - E-book\"\r\n121416,\"Livro 3 - E-book\"\r\n121417,\"Livro 9 - E-book\"\r\n121418,\"Livro 3 - E-book\"\r\n121419,\"Livro 2 - E-book\"\r\n121420,\"Livro 4 - E-book\"\r\n121420,\"Livro 9 - E-book\"\r\n121421,\"Livro 1 - E-book\"\r\n121422,\"Livro 6 - E-book + Impresso\"\r\n121423,\"Livro 9 - E-book\"\r\n121424,\"Livro 10 - E-book\"\r\n121424,\"Livro 3 - E-book\"\r\n121426,\"Livro 3 - E-book\"\r\n121427,\"Livro 3 - E-book\"\r\n121428,\"Livro 9 - E-book\"\r\n121429,\"Livro 2 - E-book + Impresso\"\r\n121429,\"Livro 3 - E-book + Impresso\"\r\n121430,\"Livro 3 - E-book\"\r\n121431,\"Livro 6 - E-book\"\r\n121432,\"Livro 9 - E-book\"\r\n121433,\"Livro 9 - E-book\"\r\n121433,\"Livro 1 - E-book\"\r\n121433,\"Livro 3 - E-book\"\r\n121434,\"Livro 5 - E-book\"\r\n121435,\"Livro 1 - E-book\"\r\n121436,\"Livro 4 - E-book\"\r\n121437,\"Livro 3 - E-book\"\r\n121439,\"Livro 6 - E-book\"\r\n121440,\"Livro 7 - E-book\"\r\n121440,\"Livro 3 - E-book\"\r\n121440,\"Livro 6 - E-book\"\r\n121441,\"Livro 6 - E-book\"\r\n121442,\"Livro 8 - E-book\"\r\n121442,\"Livro 9 - E-book\"\r\n121442,\"Livro 6 - E-book\"\r\n121442,\"Livro 7 - E-book\"\r\n121443,\"Livro 1 - E-book\"\r\n121443,\"Livro 6 - E-book\"\r\n121444,\"Livro 6 - E-book\"\r\n121445,\"Livro 3 - E-book\"\r\n121446,\"Livro 9 - E-book + Impresso\"\r\n121447,\"Livro 6 - E-book\"\r\n121448,\"Livro 6 - E-book\"\r\n121449,\"Livro 3 - E-book\"\r\n121449,\"Livro 2 - E-book\"\r\n121450,\"Livro 5 - E-book\"\r\n121451,\"Livro 4 - E-book\"\r\n121452,\"Livro 9 - E-book\"\r\n121453,\"Livro 9 - E-book + Impresso\"\r\n121455,\"Livro 3 - E-book\"\r\n121457,\"Livro 9 - E-book\"\r\n121458,\"Livro 3 - E-book\"\r\n121459,\"Livro 9 - E-book + Impresso\"\r\n121460,\"Livro 3 - E-book\"\r\n121461,\"Livro 2 - E-book\"\r\n121462,\"Livro 9 - E-book\"\r\n121463,\"Livro 9 - E-book\"\r\n121464,\"Livro 9 - E-book\"\r\n121465,\"Livro 9 - E-book + Impresso\"\r\n121466,\"Livro 6 - E-book\"\r\n121467,\"Livro 9 - E-book\"\r\n121468,\"Livro 1 - E-book\"\r\n121468,\"Livro 6 - E-book\"\r\n121469,\"Livro 9 - E-book + Impresso\"\r\n121470,\"Livro 8 - E-book\"\r\n121470,\"Livro 9 - E-book\"\r\n121473,\"Livro 9 - Impresso\"\r\n121474,\"Livro 5 - E-book\"\r\n121474,\"Livro 7 - E-book\"\r\n121474,\"Livro 8 - E-book\"\r\n121474,\"Livro 9 - E-book\"\r\n121475,\"Livro 8 - E-book\"\r\n121475,\"Livro 7 - E-book\"\r\n121475,\"Livro 10 - E-book\"\r\n121475,\"Livro 9 - E-book\"\r\n121475,\"Livro 6 - E-book\"\r\n121476,\"Livro 9 - E-book + Impresso\"\r\n121477,\"Livro 4 - E-book\"\r\n121478,\"Livro 10 - E-book\"\r\n121478,\"Livro 9 - E-book\"\r\n121478,\"Livro 4 - E-book\"\r\n121479,\"Livro 4 - E-book + Impresso\"\r\n121481,\"Livro 8 - E-book\"\r\n121482,\"Livro 9 - E-book\"\r\n121483,\"Livro 9 - E-book\"\r\n121485,\"Livro 9 - E-book + Impresso\"\r\n121486,\"Livro 10 - E-book\"\r\n121487,\"Livro 5 - E-book + Impresso\"\r\n121488,\"Livro 9 - E-book\"\r\n121489,\"Livro 9 - E-book\"\r\n121490,\"Livro 9 - E-book\"\r\n121491,\"Livro 9 - E-book\"\r\n121492,\"Livro 1 - E-book + Impresso\"\r\n121493,\"Livro 9 - E-book\"\r\n121494,\"Livro 7 - E-book\"\r\n121495,\"Livro 7 - E-book\"\r\n121497,\"Livro 1 - E-book\"\r\n121498,\"Livro 3 - Impresso\"\r\n121499,\"Livro 9 - Impresso\"\r\n121500,\"Livro 4 - E-book\"\r\n121501,\"Livro 3 - E-book + Impresso\"\r\n121502,\"Livro 2 - Impresso\"\r\n121502,\"Livro 9 - Impresso\"\r\n121503,\"Livro 10 - E-book\"\r\n121504,\"Livro 3 - E-book\"\r\n121505,\"Livro 9 - E-book\"\r\n121506,\"Livro 6 - E-book\"\r\n121507,\"Livro 1 - E-book\"\r\n121508,\"Livro 2 - E-book\"\r\n121508,\"Livro 9 - E-book\"\r\n121508,\"Livro 4 - E-book\"\r\n121509,\"Livro 9 - E-book\"\r\n121510,\"Livro 7 - E-book\"\r\n121511,\"Livro 9 - Impresso\"\r\n121512,\"Livro 9 - Impresso\"\r\n121513,\"Livro 10 - E-book\"\r\n121514,\"Livro 4 - E-book\"\r\n121514,\"Livro 9 - E-book\"\r\n121515,\"Livro 9 - E-book\"\r\n121516,\"Livro 4 - E-book\"\r\n121516,\"Livro 3 - E-book\"\r\n121517,\"Livro 3 - E-book\"\r\n121518,\"Livro 5 - E-book\"\r\n121519,\"Livro 1 - E-book + Impresso\"\r\n121520,\"Livro 4 - E-book + Impresso\"\r\n121521,\"Livro 9 - E-book\"\r\n121522,\"Livro 9 - E-book\"\r\n121523,\"Livro 4 - E-book\"\r\n121523,\"Livro 10 - E-book\"\r\n121524,\"Livro 9 - E-book\"\r\n121525,\"Livro 2 - E-book\"\r\n121525,\"Livro 9 - E-book\"\r\n121526,\"Livro 4 - E-book\"\r\n121527,\"Livro 2 - E-book\"\r\n121528,\"Livro 6 - E-book\"\r\n121529,\"Livro 4 - E-book\"\r\n121530,\"Livro 7 - E-book\"\r\n121531,\"Livro 3 - E-book\"\r\n121533,\"Livro 9 - E-book\"\r\n121534,\"Livro 2 - E-book\"\r\n121535,\"Livro 10 - E-book\"\r\n121535,\"Livro 2 - E-book\"\r\n121535,\"Livro 3 - E-book\"\r\n121536,\"Livro 2 - E-book\"\r\n121536,\"Livro 9 - E-book\"\r\n121536,\"Livro 6 - E-book\"\r\n121537,\"Livro 3 - E-book\"\r\n121538,\"Livro 6 - E-book\"\r\n121538,\"Livro 2 - E-book\"\r\n121539,\"Livro 3 - E-book + Impresso\"\r\n121540,\"Livro 9 - E-book\"\r\n121541,\"Livro 1 - E-book + Impresso\"\r\n121542,\"Livro 3 - Impresso\"\r\n121543,\"Livro 10 - E-book + Impresso\"\r\n121544,\"Livro 1 - E-book\"\r\n121545,\"Livro 3 - E-book\"\r\n121546,\"Livro 10 - E-book\"\r\n121547,\"Livro 3 - E-book + Impresso\"\r\n121548,\"Livro 7 - E-book\"\r\n121549,\"Livro 7 - E-book\"\r\n121550,\"Livro 3 - E-book\"\r\n121551,\"Livro 5 - E-book\"\r\n121553,\"Livro 7 - E-book\"\r\n121554,\"Livro 9 - E-book\"\r\n121555,\"Livro 7 - E-book\"\r\n121556,\"Livro 2 - E-book\"\r\n121556,\"Livro 3 - E-book\"\r\n121556,\"Livro 6 - E-book\"\r\n121556,\"Livro 7 - E-book\"\r\n121557,\"Livro 3 - E-book\"\r\n121558,\"Livro 4 - E-book\"\r\n121560,\"Livro 3 - E-book + Impresso\"\r\n121562,\"Livro 9 - E-book\"\r\n121563,\"Livro 9 - E-book + Impresso\"\r\n121564,\"Livro 4 - E-book\"\r\n121565,\"Livro 9 - Impresso\"\r\n121566,\"Livro 4 - E-book + Impresso\"\r\n121567,\"Livro 2 - E-book\"\r\n121567,\"Livro 9 - E-book + Impresso\"\r\n121568,\"Livro 8 - E-book\"\r\n121569,\"Livro 5 - E-book\"\r\n121570,\"Livro 4 - E-book\"\r\n121571,\"Livro 10 - E-book\"\r\n121572,\"Livro 2 - E-book\"\r\n121572,\"Livro 9 - E-book\"\r\n121572,\"Livro 3 - E-book\"\r\n121573,\"Livro 9 - E-book\"\r\n121573,\"Livro 1 - E-book\"\r\n121573,\"Livro 7 - E-book\"\r\n121573,\"Livro 8 - E-book\"\r\n121573,\"Livro 4 - E-book\"\r\n121573,\"Livro 6 - E-book\"\r\n121573,\"Livro 3 - E-book\"\r\n121573,\"Livro 2 - E-book\"\r\n121574,\"Livro 1 - E-book\"\r\n121575,\"Livro 4 - E-book\"\r\n121576,\"Livro 8 - E-book\"\r\n121577,\"Livro 7 - E-book\"\r\n121578,\"Livro 9 - E-book\"\r\n121579,\"Livro 7 - E-book\"\r\n121579,\"Livro 8 - E-book\"\r\n121580,\"Livro 6 - E-book\"\r\n121581,\"Livro 1 - Impresso\"\r\n121582,\"Livro 6 - E-book\"\r\n121583,\"Livro 7 - E-book\"\r\n121584,\"Livro 7 - E-book\"\r\n121584,\"Livro 10 - E-book\"\r\n121584,\"Livro 9 - E-book\"\r\n121585,\"Livro 3 - E-book\"\r\n121586,\"Livro 9 - E-book\"\r\n121587,\"Livro 9 - E-book\"\r\n121588,\"Livro 5 - E-book\"\r\n121589,\"Livro 9 - E-book\"\r\n121590,\"Livro 6 - E-book\"\r\n121592,\"Livro 3 - E-book\"\r\n121593,\"Livro 9 - E-book + Impresso\"\r\n121594,\"Livro 4 - E-book\"\r\n121595,\"Livro 4 - E-book\"\r\n121596,\"Livro 10 - E-book\"\r\n121596,\"Livro 3 - E-book\"\r\n121596,\"Livro 6 - E-book\"\r\n121597,\"Livro 6 - E-book\"\r\n121597,\"Livro 9 - E-book\"\r\n121597,\"Livro 10 - E-book\"\r\n121597,\"Livro 7 - E-book\"\r\n121598,\"Livro 3 - E-book\"\r\n121599,\"Livro 1 - E-book\"\r\n121600,\"Livro 8 - E-book\"\r\n121600,\"Livro 4 - E-book\"\r\n121600,\"Livro 1 - E-book\"\r\n121602,\"Livro 9 - E-book\"\r\n121603,\"Livro 2 - Impresso\"\r\n121603,\"Livro 5 - E-book + Impresso\"\r\n121604,\"Livro 6 - E-book\"\r\n121605,\"Livro 6 - E-book\"\r\n121605,\"Livro 3 - E-book\"\r\n121606,\"Livro 2 - E-book\"\r\n121607,\"Livro 7 - E-book\"\r\n121608,\"Livro 6 - E-book\"\r\n121609,\"Livro 6 - E-book\"\r\n121610,\"Livro 3 - E-book + Impresso\"\r\n121610,\"Livro 10 - E-book + Impresso\"\r\n121611,\"Livro 10 - E-book\"\r\n121612,\"Livro 3 - E-book\"\r\n121613,\"Livro 4 - E-book\"\r\n121614,\"Livro 4 - E-book\"\r\n121614,\"Livro 2 - E-book\"\r\n121615,\"Livro 6 - E-book\"\r\n121616,\"Livro 2 - E-book\"\r\n121617,\"Livro 2 - E-book + Impresso\"\r\n121617,\"Livro 3 - E-book + Impresso\"\r\n121618,\"Livro 2 - E-book\"\r\n121619,\"Livro 9 - E-book\"\r\n121619,\"Livro 3 - E-book\"\r\n121620,\"Livro 7 - E-book\"\r\n121621,\"Livro 6 - E-book\"\r\n121622,\"Livro 9 - E-book + Impresso\"\r\n121623,\"Livro 1 - E-book\"\r\n121623,\"Livro 6 - E-book\"\r\n121624,\"Livro 4 - E-book\"\r\n121625,\"Livro 6 - E-book\"\r\n121626,\"Livro 3 - E-book\"\r\n121627,\"Livro 8 - E-book\"\r\n121627,\"Livro 7 - E-book\"\r\n121627,\"Livro 6 - E-book\"\r\n121627,\"Livro 4 - E-book + Impresso\"\r\n121628,\"Livro 3 - Impresso\"\r\n121629,\"Livro 3 - E-book\"\r\n121630,\"Livro 2 - E-book\"\r\n121630,\"Livro 10 - E-book\"\r\n121632,\"Livro 9 - E-book\"\r\n121633,\"Livro 6 - E-book\"\r\n121633,\"Livro 4 - E-book\"\r\n121634,\"Livro 7 - E-book\"\r\n121635,\"Livro 6 - E-book\"\r\n121636,\"Livro 7 - E-book\"\r\n121637,\"Livro 2 - E-book\"\r\n121637,\"Livro 8 - E-book\"\r\n121638,\"Livro 2 - E-book\"\r\n121639,\"Livro 7 - E-book + Impresso\"\r\n121640,\"Livro 5 - E-book\"\r\n121642,\"Livro 9 - E-book + Impresso\"\r\n121642,\"Livro 8 - E-book\"\r\n121643,\"Livro 3 - E-book\"\r\n121644,\"Livro 6 - E-book + Impresso\"\r\n121645,\"Livro 3 - E-book\"\r\n121646,\"Livro 7 - E-book\"\r\n121647,\"Livro 7 - E-book\"\r\n121648,\"Livro 6 - E-book\"\r\n121649,\"Livro 9 - E-book\"\r\n121651,\"Livro 3 - E-book\"\r\n121652,\"Livro 6 - E-book\"\r\n121653,\"Livro 9 - E-book\"\r\n121656,\"Livro 9 - E-book + Impresso\"\r\n121656,\"Livro 4 - E-book + Impresso\"\r\n121657,\"Livro 10 - E-book\"\r\n121657,\"Livro 3 - E-book\"\r\n121658,\"Livro 9 - E-book\"\r\n121658,\"Livro 3 - E-book\"\r\n121659,\"Livro 7 - E-book\"\r\n121660,\"Livro 6 - E-book\"\r\n121661,\"Livro 1 - E-book\"\r\n121662,\"Livro 8 - E-book\"\r\n121663,\"Livro 6 - E-book\"\r\n121664,\"Livro 9 - Impresso\"\r\n121665,\"Livro 8 - E-book + Impresso\"\r\n121667,\"Livro 9 - E-book\"\r\n121668,\"Livro 9 - E-book\"\r\n121668,\"Livro 3 - E-book\"\r\n121669,\"Livro 9 - E-book + Impresso\"\r\n121670,\"Livro 9 - E-book + Impresso\"\r\n121671,\"Livro 9 - E-book\"\r\n121671,\"Livro 10 - E-book\"\r\n121672,\"Livro 1 - E-book\"\r\n121673,\"Livro 9 - E-book\"\r\n121675,\"Livro 9 - E-book\"\r\n121675,\"Livro 3 - E-book\"\r\n121675,\"Livro 2 - E-book\"\r\n121675,\"Livro 10 - E-book\"\r\n121676,\"Livro 6 - E-book\"\r\n121676,\"Livro 9 - E-book\"\r\n121677,\"Livro 8 - E-book\"\r\n121678,\"Livro 3 - E-book + Impresso\"\r\n121679,\"Livro 6 - E-book\"\r\n121680,\"Livro 9 - E-book\"\r\n121681,\"Livro 9 - E-book + Impresso\"\r\n121682,\"Livro 9 - E-book\"\r\n121683,\"Livro 3 - E-book\"\r\n121684,\"Livro 9 - E-book\"\r\n121685,\"Livro 9 - E-book\"\r\n121686,\"Livro 3 - E-book\"\r\n121687,\"Livro 2 - E-book + Impresso\"\r\n121688,\"Livro 3 - E-book\"\r\n121689,\"Livro 6 - E-book\"\r\n121690,\"Livro 6 - E-book\"\r\n121691,\"Livro 6 - E-book\"\r\n121692,\"Livro 1 - E-book\"\r\n121693,\"Livro 4 - E-book\"\r\n121693,\"Livro 10 - E-book\"\r\n121693,\"Livro 9 - E-book\"\r\n121696,\"Livro 9 - E-book\"\r\n121697,\"Livro 6 - E-book\"\r\n121698,\"Livro 4 - E-book\"\r\n121698,\"Livro 3 - E-book\"\r\n121699,\"Livro 9 - E-book\"\r\n121700,\"Livro 10 - E-book\"\r\n121701,\"Livro 1 - Impresso\"\r\n121702,\"Livro 3 - E-book\"\r\n121702,\"Livro 6 - E-book\"\r\n121703,\"Livro 4 - E-book\"\r\n121704,\"Livro 5 - E-book\"\r\n121705,\"Livro 7 - E-book\"\r\n121706,\"Livro 1 - E-book\"\r\n121706,\"Livro 9 - E-book\"\r\n121706,\"Livro 4 - E-book\"\r\n121708,\"Livro 1 - E-book\"\r\n121708,\"Livro 4 - E-book\"\r\n121709,\"Livro 6 - E-book\"\r\n121710,\"Livro 6 - E-book\"\r\n121711,\"Livro 2 - E-book\"\r\n121712,\"Livro 1 - E-book\"\r\n121713,\"Livro 2 - E-book\"\r\n121713,\"Livro 4 - E-book\"\r\n121714,\"Livro 6 - E-book + Impresso\"\r\n121715,\"Livro 6 - E-book\"\r\n121716,\"Livro 6 - E-book\"\r\n121718,\"Livro 9 - E-book\"\r\n121719,\"Livro 4 - E-book + Impresso\"\r\n121720,\"Livro 3 - E-book\"\r\n121721,\"Livro 3 - E-book + Impresso\"\r\n121722,\"Livro 2 - E-book + Impresso\"\r\n121724,\"Livro 9 - E-book\"\r\n121727,\"Livro 6 - E-book\"\r\n121728,\"Livro 6 - E-book\"\r\n121729,\"Livro 9 - E-book\"\r\n121732,\"Livro 3 - Impresso\"\r\n121733,\"Livro 4 - Impresso\"\r\n121735,\"Livro 3 - E-book\"\r\n121736,\"Livro 1 - E-book\"\r\n121737,\"Livro 2 - E-book\"\r\n121740,\"Livro 9 - E-book\"\r\n121741,\"Livro 4 - E-book\"\r\n121742,\"Livro 3 - E-book\"\r\n121743,\"Livro 3 - E-book\"\r\n121744,\"Livro 3 - E-book\"\r\n121747,\"Livro 4 - E-book + Impresso\"\r\n121748,\"Livro 2 - E-book\"\r\n121748,\"Livro 3 - E-book\"\r\n121749,\"Livro 3 - E-book\"\r\n121750,\"Livro 5 - E-book\"\r\n121752,\"Livro 9 - E-book\"\r\n121753,\"Livro 6 - E-book\"\r\n121754,\"Livro 9 - E-book\"\r\n121755,\"Livro 8 - E-book\"\r\n121756,\"Livro 9 - Impresso\"\r\n121758,\"Livro 6 - E-book\"\r\n121759,\"Livro 3 - E-book\"\r\n121760,\"Livro 3 - E-book\"\r\n121761,\"Livro 1 - E-book\"\r\n121764,\"Livro 9 - E-book + Impresso\"\r\n121764,\"Livro 4 - E-book + Impresso\"\r\n121765,\"Livro 4 - E-book\"\r\n121766,\"Livro 3 - E-book\"\r\n121766,\"Livro 5 - E-book\"\r\n121768,\"Livro 2 - E-book\"\r\n121769,\"Livro 9 - E-book\"\r\n121770,\"Livro 3 - E-book\"\r\n121771,\"Livro 9 - E-book + Impresso\"\r\n121773,\"Livro 9 - E-book\"\r\n121774,\"Livro 9 - E-book\"\r\n121775,\"Livro 4 - E-book\"\r\n121776,\"Livro 9 - E-book\"\r\n121777,\"Livro 1 - E-book\"\r\n121778,\"Livro 6 - E-book + Impresso\"\r\n121779,\"Livro 6 - E-book\"\r\n121780,\"Livro 9 - E-book\"\r\n121781,\"Livro 3 - E-book + Impresso\"\r\n121782,\"Livro 3 - E-book\"\r\n121783,\"Livro 9 - E-book\"\r\n121784,\"Livro 10 - E-book\"\r\n121784,\"Livro 9 - E-book\"\r\n121784,\"Livro 3 - E-book\"\r\n121785,\"Livro 3 - E-book\"\r\n121786,\"Livro 9 - E-book\"\r\n121787,\"Livro 5 - E-book\"\r\n121788,\"Livro 1 - E-book\"\r\n121789,\"Livro 1 - Impresso\"\r\n121790,\"Livro 6 - E-book + Impresso\"\r\n121790,\"Livro 9 - E-book + Impresso\"\r\n121790,\"Livro 3 - Impresso\"\r\n121791,\"Livro 3 - E-book\"\r\n121792,\"Livro 9 - E-book\"\r\n121793,\"Livro 9 - E-book\"\r\n121794,\"Livro 3 - E-book\"\r\n121795,\"Livro 2 - E-book\"\r\n121795,\"Livro 6 - E-book\"\r\n121795,\"Livro 1 - E-book\"\r\n121796,\"Livro 6 - E-book\"\r\n121797,\"Livro 9 - E-book + Impresso\"\r\n121798,\"Livro 4 - E-book\"\r\n121799,\"Livro 10 - E-book\"\r\n121800,\"Livro 2 - E-book\"\r\n121801,\"Livro 6 - E-book\"\r\n121802,\"Livro 2 - E-book\"\r\n121803,\"Livro 6 - E-book\"\r\n121804,\"Livro 2 - E-book + Impresso\"\r\n121806,\"Livro 8 - E-book\"\r\n121806,\"Livro 2 - E-book\"\r\n121806,\"Livro 4 - E-book\"\r\n121807,\"Livro 3 - E-book\"\r\n121807,\"Livro 10 - E-book\"\r\n121808,\"Livro 6 - E-book\"\r\n121808,\"Livro 3 - E-book\"\r\n121808,\"Livro 2 - E-book\"\r\n121810,\"Livro 3 - E-book\"\r\n121811,\"Livro 3 - E-book + Impresso\"\r\n121812,\"Livro 6 - E-book\"\r\n121812,\"Livro 3 - E-book\"\r\n121813,\"Livro 2 - E-book\"\r\n121814,\"Livro 4 - E-book\"\r\n121814,\"Livro 2 - E-book\"\r\n121815,\"Livro 2 - E-book\"\r\n121815,\"Livro 9 - E-book\"\r\n121815,\"Livro 4 - E-book\"\r\n121815,\"Livro 6 - E-book\"\r\n121816,\"Livro 1 - E-book\"\r\n121817,\"Livro 1 - E-book\"\r\n121819,\"Livro 2 - E-book\"\r\n121821,\"Livro 2 - E-book\"\r\n121821,\"Livro 9 - E-book\"\r\n121821,\"Livro 8 - E-book\"\r\n121822,\"Livro 2 - E-book\"\r\n121823,\"Livro 4 - E-book\"\r\n121824,\"Livro 9 - E-book\"\r\n121825,\"Livro 2 - E-book\"\r\n121825,\"Livro 8 - E-book\"\r\n121825,\"Livro 9 - E-book + Impresso\"\r\n121826,\"Livro 3 - E-book\"\r\n121826,\"Livro 6 - E-book\"\r\n121826,\"Livro 2 - E-book\"\r\n121828,\"Livro 5 - E-book\"\r\n121829,\"Livro 2 - E-book\"\r\n121830,\"Livro 6 - E-book\"\r\n121831,\"Livro 1 - E-book\"\r\n121832,\"Livro 5 - E-book\"\r\n121832,\"Livro 2 - E-book\"\r\n121832,\"Livro 8 - E-book\"\r\n121833,\"Livro 4 - E-book\"\r\n121834,\"Livro 9 - E-book\"\r\n121836,\"Livro 9 - E-book\"\r\n121837,\"Livro 9 - E-book + Impresso\"\r\n121838,\"Livro 3 - E-book + Impresso\"\r\n121839,\"Livro 9 - E-book + Impresso\"\r\n121840,\"Livro 1 - E-book\"\r\n121841,\"Livro 3 - E-book\"\r\n121842,\"Livro 3 - E-book\"\r\n121843,\"Livro 8 - E-book\"\r\n121844,\"Livro 3 - E-book\"\r\n121845,\"Livro 2 - E-book\"\r\n121846,\"Livro 4 - E-book\"\r\n121848,\"Livro 6 - E-book\"\r\n121851,\"Livro 6 - E-book + Impresso\"\r\n121852,\"Livro 2 - Impresso\"\r\n121853,\"Livro 3 - E-book\"\r\n121855,\"Livro 2 - E-book\"\r\n121855,\"Livro 8 - E-book\"\r\n121856,\"Livro 3 - E-book\"\r\n121857,\"Livro 9 - E-book\"\r\n121858,\"Livro 3 - E-book\"\r\n121859,\"Livro 9 - E-book\"\r\n121860,\"Livro 8 - E-book\"\r\n121861,\"Livro 3 - E-book\"\r\n121862,\"Livro 9 - E-book\"\r\n121863,\"Livro 4 - Impresso\"\r\n121864,\"Livro 3 - E-book\"\r\n121865,\"Livro 6 - E-book\"\r\n121866,\"Livro 9 - E-book\"\r\n121867,\"Livro 5 - E-book + Impresso\"\r\n121867,\"Livro 8 - E-book + Impresso\"\r\n121867,\"Livro 10 - E-book + Impresso\"\r\n121867,\"Livro 1 - Impresso\"\r\n121867,\"Livro 4 - Impresso\"\r\n121868,\"Livro 3 - E-book\"\r\n121868,\"Livro 1 - E-book\"\r\n121869,\"Livro 2 - E-book\"\r\n121869,\"Livro 9 - E-book\"\r\n121869,\"Livro 3 - E-book\"\r\n121869,\"Livro 10 - E-book\"\r\n121870,\"Livro 9 - E-book\"\r\n121872,\"Livro 9 - E-book\"\r\n121874,\"Livro 6 - E-book\"\r\n121875,\"Livro 3 - E-book\"\r\n121876,\"Livro 6 - E-book\"\r\n121876,\"Livro 9 - E-book\"\r\n121877,\"Livro 4 - Impresso\"\r\n121877,\"Livro 9 - Impresso\"\r\n121878,\"Livro 3 - E-book\"\r\n121879,\"Livro 2 - E-book\"\r\n121880,\"Livro 6 - E-book\"\r\n121882,\"Livro 1 - E-book\"\r\n121883,\"Livro 3 - Impresso\"\r\n121884,\"Livro 9 - E-book + Impresso\"\r\n121885,\"Livro 3 - E-book\"\r\n121886,\"Livro 10 - E-book\"\r\n121887,\"Livro 9 - E-book\"\r\n121888,\"Livro 3 - E-book\"\r\n121889,\"Livro 5 - E-book\"\r\n121889,\"Livro 2 - E-book\"\r\n121889,\"Livro 9 - E-book\"\r\n121890,\"Livro 4 - E-book\"\r\n121891,\"Livro 9 - E-book\"\r\n121891,\"Livro 3 - E-book\"\r\n121892,\"Livro 10 - E-book\"\r\n121893,\"Livro 9 - E-book\"\r\n121894,\"Livro 2 - E-book\"\r\n121895,\"Livro 1 - E-book\"\r\n121896,\"Livro 6 - E-book + Impresso\"\r\n121899,\"Livro 3 - E-book\"\r\n121900,\"Livro 9 - E-book\"\r\n121901,\"Livro 8 - E-book\"\r\n121902,\"Livro 2 - E-book + Impresso\"\r\n121903,\"Livro 9 - E-book\"\r\n121904,\"Livro 3 - E-book\"\r\n121905,\"Livro 2 - E-book\"\r\n121906,\"Livro 3 - E-book\"\r\n121907,\"Livro 3 - Impresso\"\r\n121907,\"Livro 7 - E-book + Impresso\"\r\n121908,\"Livro 9 - E-book\"\r\n121909,\"Livro 9 - Impresso\"\r\n121910,\"Livro 10 - E-book\"\r\n121910,\"Livro 3 - E-book\"\r\n121912,\"Livro 9 - E-book\"\r\n121913,\"Livro 2 - E-book\"\r\n121913,\"Livro 1 - E-book\"\r\n121914,\"Livro 9 - E-book\"\r\n121915,\"Livro 4 - E-book\"\r\n121916,\"Livro 9 - E-book\"\r\n121917,\"Livro 3 - E-book + Impresso\"\r\n121918,\"Livro 3 - E-book\"\r\n121920,\"Livro 3 - E-book\"\r\n121921,\"Livro 9 - E-book\"\r\n121922,\"Livro 9 - E-book\"\r\n121923,\"Livro 2 - E-book\"\r\n121925,\"Livro 7 - E-book\"\r\n121926,\"Livro 4 - E-book\"\r\n121927,\"Livro 8 - E-book\"\r\n121928,\"Livro 9 - E-book + Impresso\"\r\n121929,\"Livro 3 - Impresso\"\r\n121930,\"Livro 3 - E-book\"\r\n121930,\"Livro 6 - E-book\"\r\n121931,\"Livro 3 - E-book\"\r\n121932,\"Livro 10 - E-book\"\r\n121933,\"Livro 9 - Impresso\"\r\n121933,\"Livro 4 - E-book\"\r\n121934,\"Livro 10 - E-book\"\r\n121934,\"Livro 4 - E-book\"\r\n121934,\"Livro 6 - E-book\"\r\n121935,\"Livro 6 - E-book\"\r\n121936,\"Livro 9 - E-book\"\r\n121937,\"Livro 2 - E-book\"\r\n121939,\"Livro 3 - E-book\"\r\n121939,\"Livro 6 - E-book\"\r\n121940,\"Livro 7 - E-book\"\r\n121941,\"Livro 2 - Impresso\"\r\n121942,\"Livro 4 - E-book\"\r\n121943,\"Livro 2 - E-book\"\r\n121944,\"Livro 3 - E-book\"\r\n121945,\"Livro 1 - E-book\"\r\n121946,\"Livro 3 - E-book + Impresso\"\r\n121947,\"Livro 3 - E-book\"\r\n121949,\"Livro 3 - Impresso\"\r\n121950,\"Livro 4 - E-book\"\r\n121951,\"Livro 3 - Impresso\"\r\n121952,\"Livro 3 - Impresso\"\r\n121953,\"Livro 2 - E-book + Impresso\"\r\n121954,\"Livro 1 - E-book\"\r\n121955,\"Livro 3 - E-book\"\r\n121956,\"Livro 4 - E-book\"\r\n121957,\"Livro 9 - E-book\"\r\n121958,\"Livro 8 - E-book\"\r\n121959,\"Livro 9 - E-book\"\r\n121960,\"Livro 8 - E-book\"\r\n121961,\"Livro 2 - E-book\"\r\n121962,\"Livro 3 - E-book\"\r\n121965,\"Livro 3 - E-book\"\r\n121966,\"Livro 3 - E-book\"\r\n121967,\"Livro 6 - E-book + Impresso\"\r\n121967,\"Livro 3 - E-book + Impresso\"\r\n121968,\"Livro 3 - E-book + Impresso\"\r\n121971,\"Livro 3 - E-book\"\r\n121972,\"Livro 6 - E-book\"\r\n121973,\"Livro 3 - E-book\"\r\n121973,\"Livro 7 - E-book\"\r\n121974,\"Livro 1 - E-book + Impresso\"\r\n121974,\"Livro 5 - E-book + Impresso\"\r\n121975,\"Livro 3 - E-book\"\r\n121976,\"Livro 1 - E-book\"\r\n121979,\"Livro 3 - E-book\"\r\n121980,\"Livro 9 - E-book\"\r\n121983,\"Livro 7 - E-book\"\r\n121983,\"Livro 2 - E-book\"\r\n121984,\"Livro 4 - E-book + Impresso\"\r\n121986,\"Livro 10 - E-book\"\r\n121987,\"Livro 1 - E-book + Impresso\"\r\n121988,\"Livro 9 - E-book\"\r\n121989,\"Livro 3 - E-book\"\r\n121990,\"Livro 3 - E-book\"\r\n121991,\"Livro 9 - E-book + Impresso\"\r\n121992,\"Livro 2 - E-book\"\r\n121993,\"Livro 2 - E-book\"\r\n121994,\"Livro 6 - E-book + Impresso\"\r\n121995,\"Livro 7 - E-book\"\r\n121997,\"Livro 4 - E-book\"\r\n121998,\"Livro 3 - E-book\"\r\n121999,\"Livro 8 - E-book\"\r\n122000,\"Livro 5 - E-book\"\r\n122001,\"Livro 3 - E-book\"\r\n122002,\"Livro 3 - E-book\"\r\n122002,\"Livro 6 - E-book\"\r\n122003,\"Livro 6 - E-book\"\r\n122004,\"Livro 2 - E-book\"\r\n122005,\"Livro 3 - E-book\"\r\n122006,\"Livro 6 - E-book\"\r\n',30224,58),(59,'package br.ime.usp.commendans.factory;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation.Tuple;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.model.User;\r\n\r\npublic class ItemToItemRecommenderFactoryTest {\r\n\r\n    @Test\r\n    public void test() {\r\n        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n        Item item1 = new Item(1l);\r\n        Item item2 = new Item(2l);\r\n        Item item3 = new Item(3l);\r\n        Item item4 = new Item(4l);\r\n        User user1 = new User(Arrays.asList(item1, item3), 1l);\r\n        User user2 = new User(Arrays.asList(item2, item4), 2l);\r\n        User user3 = new User(Arrays.asList(item1, item2, item3), 3l);\r\n        User user4 = new User(Arrays.asList(item3, item4), 4l);\r\n        factory.addUser(user1);\r\n        factory.addUser(user2);\r\n        factory.addUser(user3);\r\n        factory.addUser(user4);\r\n        \r\n        ItemToItemRecommender recommender = factory.build();\r\n        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n        \r\n        List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1);\r\n        ItemToItemsAssociation association = associations.get(item1);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(2, recommendedItems.size());\r\n        assertEquals(item3, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(item2, recommendedItems.get(1).getItem());\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendendItemsFor(item2);\r\n        association = associations.get(item2);\r\n        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendendItemsFor(item3);\r\n        association = associations.get(item3);\r\n        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(item1, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        association = associations.get(item4);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n    }\r\n\r\n}\r\n',4134,59),(60,'',0,60),(61,'',0,61),(62,'',0,62),(63,'*.jar\r\n*.class\r\nbuild/\r\n.~lock*\r\n',33,63),(64,'package br.ime.usp.commendans.util;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.model.User;\r\n\r\npublic class DataImporter {\r\n    \r\n    private final Session session;\r\n    private static Logger logger;\r\n\r\n    public DataImporter(Session session) {\r\n        this.session = session;\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        logger = Logger.getLogger(DataImporter.class);\r\n        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        Session session = sf.openSession();\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n    }\r\n\r\n    private void importData(String file) throws IOException {\r\n        HashMap<Long, User> users = new HashMap<Long, User>();\r\n        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n        String line = reader.readLine();\r\n        \r\n        while (line != null) {\r\n            logger.info(line);\r\n            List<String> row = Arrays.asList(line.split(\",\"));\r\n            long id = Long.parseLong(row.get(0));\r\n            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n            User user = users.get(id);\r\n            if (user == null) {\r\n                user = new User(new ArrayList<Item>(), id);\r\n            }\r\n            Item item = items.get(itemId);\r\n            if (item == null) {\r\n                item = new Item(itemId);\r\n            }\r\n            user.add(item);\r\n            line = reader.readLine();\r\n            users.put(id, user);\r\n            items.put(itemId, item);\r\n        }\r\n        \r\n        logger.info(\"persisting\");\r\n        session.getTransaction().begin();\r\n        for (Item item : items.values()) {\r\n            session.save(item);\r\n        }\r\n        \r\n        Collection<User> allUsers = users.values();\r\n        for (User user : allUsers) {\r\n            System.out.println(user.itemsBought());\r\n            session.save(user);\r\n        }\r\n        session.getTransaction().commit();\r\n        logger.info(\"finished persisting\");\r\n    }\r\n\r\n}\r\n',2693,64),(65,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n	    <property name=\"c3p0.acquire_increment\">1</property> \r\n		<property name=\"c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n		<property name=\"c3p0.max_size\">15</property> \r\n		<property name=\"c3p0.min_size\">1</property> \r\n		<property name=\"c3p0.timeout\">600</property>\r\n    \r\n        <property name=\"connection.url\">jdbc:mysql://localhost/commendans</property>\r\n        <property name=\"connection.driver_class\">com.mysql.jdbc.Driver</property>\r\n        <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\r\n        <property name=\"connection.username\">root</property>\r\n        <property name=\"connection.password\"></property>\r\n        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n        <property name=\"show_sql\">false</property>\r\n        <property name=\"format_sql\">false</property>\r\n        <property name=\"hibernate.generate_statistics\">true</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.User\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1393,65),(66,'<ivy-module version=\"2.0\">\r\n	<info organisation=\"ime-usp\" module=\"recommender\" />\r\n\r\n	<configurations>\r\n		<conf name=\"default\" description=\"dependencies used for compile\" />\r\n		<conf name=\"test\" description=\"dependencies used for tests\" visibility=\"public\" />\r\n	</configurations>\r\n\r\n	<dependencies>\r\n		<!-- Hibernate and other stuff -->\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-core\" rev=\"3.6.10.Final\"/>\r\n		<dependency org=\"org.hibernate.javax.persistence\" name=\"hibernate-jpa-2.0-api\" rev=\"1.0.0.Final\" conf=\"default\" />\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-c3p0\" rev=\"3.6.10.Final\" conf=\"default\" />\r\n		<dependency org=\"javax.transaction\" name=\"jta\" rev=\"1.1\"/>\r\n		<dependency org=\"mysql\" name=\"mysql-connector-java\" rev=\"5.1.18\"/>\r\n		<dependency org=\"c3p0\" name=\"c3p0\" rev=\"0.9.1\" conf=\"default\" />\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-validator\" rev=\"4.3.0.Final\"/>\r\n		<dependency org=\"net.sf.ehcache\" name=\"ehcache-core\" rev=\"2.5.3\"/>\r\n\r\n		<!-- VRaptor dependencies -->\r\n		<dependency org=\"br.com.caelum\" name=\"vraptor\" rev=\"3.4.1\" conf=\"default\" />\r\n        <dependency org=\"org.slf4j\" name=\"slf4j-api\" rev=\"1.6.1\"/>\r\n        <dependency org=\"log4j\" name=\"log4j\" rev=\"1.2.16\"/>\r\n		<dependency org=\"org.slf4j\" name=\"slf4j-log4j12\" rev=\"1.6.1\"/>\r\n		<dependency org=\"org.mortbay.jetty\" name=\"servlet-api-2.5\" rev=\"6.1H.14.1\"/>\r\n		<dependency org=\"org.glassfish.web\" name=\"jstl-impl\" rev=\"1.2\"/>\r\n		<dependency org=\"org.mortbay.jetty\" name=\"servlet-api\" rev=\"3.0.pre4\"/>\r\n		<dependency org=\"javassist\" name=\"javassist\" rev=\"3.12.1.GA\"/>\r\n		<dependency org=\"commons-io\" name=\"commons-io\" rev=\"2.0.1\"/>\r\n		<dependency org=\"com.google.guava\" name=\"guava\" rev=\"r09\"/>\r\n\r\n		<!-- commendans dependencies -->\r\n		<dependency org=\"com.google.code.gson\" name=\"gson\" rev=\"2.2.2\"/>\r\n		\r\n		<!-- Test dependencies -->\r\n		<dependency org=\"junit\" name=\"junit\" rev=\"4.8.2\" conf=\"test->default\" />\r\n		<dependency org=\"org.mockito\" name=\"mockito-all\" rev=\"1.8.5\" conf=\"test->default\" />\r\n		<dependency org=\"org.hsqldb\" name=\"hsqldb\" rev=\"2.2.8\" conf=\"test->default\" />\r\n            \r\n	</dependencies>\r\n</ivy-module>\r\n',2139,66),(67,'package br.ime.usp.commendans;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic interface Recommender {\r\n    public ItemVector recommendendItemsFor(Item item);\r\n}\r\n',222,67),(68,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.infra.TupleJsonSerializer;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\nimport br.ime.usp.commendans.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Resource\r\npublic class ItemToItemController {\r\n    private final ItemToItemRecommender itemToItem;\r\n    private final ItemDao itemDao;\r\n    private final Result result;\r\n    private final TupleJsonSerializer serializer;\r\n\r\n    public ItemToItemController(ItemToItemRecommender itemToItem, ItemDao itemDao, Result result, TupleJsonSerializer serializer) {\r\n        this.itemToItem = itemToItem;\r\n        this.itemDao = itemDao;\r\n        this.result = result;\r\n        this.serializer = serializer;\r\n    }\r\n    \r\n    @Get(\"/recommend/item/{itemId}\")\r\n    public void recommend(Long itemId) {\r\n        Item item = itemDao.find(itemId);\r\n        ItemVector recommendend = itemToItem.recommendendItemsFor(item);\r\n        result.use(Results.http())\r\n            .addHeader(\"content-type\", \"application/json\")\r\n            .body(serializer.toJson(recommendend.getTuples()));\r\n    }\r\n    \r\n    @Get(\"/recommend/items/\")\r\n    public void recommend(List<Long> itemsIds) {\r\n        List<Item> items = itemDao.find(itemsIds);\r\n        List<Tuple> recommendend = itemToItem.recommendendItemsFor(items).getTuples();\r\n        result.use(Results.http())\r\n        .addHeader(\"content-type\", \"application/json\")\r\n        .body(serializer.toJson(recommendend));\r\n    }\r\n}\r\n',1792,68),(69,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Component\r\npublic class ItemDao {\r\n    \r\n    private final Session session;\r\n\r\n    public ItemDao(Session session) {\r\n        this.session = session;\r\n    }\r\n\r\n    public Item find(Long itemId) {\r\n        return (Item) session.load(Item.class, itemId);\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Item> find(List<Long> itemsIds) {\r\n        return session\r\n                .createQuery(\"select item from Item item where item.id in :ids\")\r\n                .setParameterList(\"ids\", itemsIds)\r\n                .list();\r\n    }\r\n\r\n}\r\n',733,69),(70,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.User;\r\n\r\n@Component\r\npublic class UserDao {\r\n    private final Session session;\r\n\r\n    public UserDao(Session session) {\r\n        this.session = session;\r\n    }\r\n    \r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<User> list() {\r\n        session.createQuery(\"select user from User user join fetch user.items\");\r\n        return session.createCriteria(User.class).list();\r\n    }\r\n}\r\n',564,70),(71,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.annotation.PostConstruct;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\nimport br.ime.usp.commendans.dao.UserDao;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\nimport br.ime.usp.commendans.model.User;\r\n\r\n@Component\r\npublic class ItemToItemRecommenderCreator implements ComponentFactory<ItemToItemRecommender> {\r\n    private final UserDao dao;\r\n    private final ItemToItemRecommenderFactory factory;\r\n    private ItemToItemRecommender itemToItemRecommender;\r\n\r\n    public ItemToItemRecommenderCreator(UserDao dao, ItemToItemRecommenderFactory factory) {\r\n        this.dao = dao;\r\n        this.factory = factory;\r\n    }\r\n\r\n    @Override\r\n    public ItemToItemRecommender getInstance() {\r\n        return itemToItemRecommender;\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        List<User> users = dao.list();\r\n        for (User user : users) {\r\n            factory.addUser(user);\r\n        }\r\n        this.itemToItemRecommender = factory.build();\r\n    }\r\n}\r\n',1197,71),(72,'package br.ime.usp.commendans.infra;\r\n\r\n\r\npublic class RecommenderComponent {\r\n    \r\n}\r\n',88,72),(73,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\n\r\nimport com.google.gson.Gson;\r\n\r\n@Component\r\npublic class TupleJsonSerializer {\r\n    \r\n    private final Gson gson;\r\n\r\n    public TupleJsonSerializer() {\r\n        this.gson = new Gson();\r\n    }\r\n\r\n    public String toJson(Tuple tuple) {\r\n        return gson.toJson(tuple);\r\n    }\r\n    \r\n    public String toJson(List<Tuple> tuples) {\r\n        return gson.toJson(tuples);\r\n    }\r\n\r\n    \r\n}\r\n',550,73),(74,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.ime.usp.commendans.Recommender;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class ItemToItemRecommender implements Recommender {\r\n\r\n    private final Map<Item, ItemVector> associations;\r\n\r\n    public ItemToItemRecommender(\r\n            HashMap<Item, ItemToItemsAssociation> associations) {\r\n        this.associations = parse(associations);\r\n    }\r\n\r\n    private Map<Item, ItemVector> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n        HashMap<Item, ItemVector> map = new HashMap<Item, ItemVector>();\r\n        Set<Item> items = associations.keySet();\r\n        for (Item item : items) {\r\n            ItemToItemsAssociation association = associations.get(item);\r\n            List<Tuple> tuples = association.toTupleList();\r\n            map.put(item, new ItemVector(tuples));\r\n        }\r\n        return map;\r\n    }\r\n\r\n    @Override\r\n    public ItemVector recommendendItemsFor(Item item) {\r\n        return associations.get(item);\r\n    }\r\n\r\n    public ItemVector recommendendItemsFor(List<Item> items) {\r\n        ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n        for (Item item : items) {\r\n            ItemVector other = recommendendItemsFor(item);\r\n            vector = vector.merge(other);\r\n        }\r\n        return vector;\r\n    }\r\n\r\n}\r\n',1462,74),(75,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.model.User;\r\n\r\n@Component\r\npublic class ItemToItemRecommenderFactory {\r\n\r\n    private Map<Item, List<User>> usersByItemBought;\r\n    private HashMap<Item, ItemToItemsAssociation> associations;\r\n    \r\n    public ItemToItemRecommenderFactory() {\r\n        usersByItemBought = new HashMap<Item, List<User>>();\r\n    }\r\n    \r\n    public void addUser(User user) {\r\n        List<Item> items = user.itemsBought();\r\n        for (Item item : items) {\r\n            store(item, user);\r\n        }\r\n    }\r\n\r\n    private void store(Item item, User user) {\r\n        List<User> users = usersByItemBought.get(item);\r\n        if (users == null) {\r\n            users = new ArrayList<User>();\r\n        }\r\n        users.add(user);\r\n        usersByItemBought.put(item, users);\r\n    }\r\n    \r\n    \r\n    public ItemToItemRecommender build() {\r\n        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n        Set<Item> items = usersByItemBought.keySet();\r\n        for (Item item : items) {\r\n            ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n            List<User> users = usersByItemBought.get(item);\r\n            for (User user : users) {\r\n                List<Item> boughtTogether = user.itemsBought();\r\n                System.out.println(item + \" -> \" +boughtTogether);\r\n                for (Item i : boughtTogether) {\r\n                    association.associate(i);\r\n                }\r\n            }\r\n            associations.put(item, association);\r\n        }\r\n        return new ItemToItemRecommender(associations);\r\n    }\r\n    \r\n    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n        return associations;\r\n    }\r\n\r\n}\r\n',1954,75),(76,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class ItemToItemsAssociation {\r\n    private Item item;\r\n    private Map<Item, Double> associations;\r\n\r\n    public ItemToItemsAssociation(Item item) {\r\n        this.item = item;\r\n        this.associations = new HashMap<Item, Double>();\r\n    }\r\n\r\n    public void associate(Item i) {\r\n        if (i.equals(this.item))\r\n            return;\r\n        Double v = associations.get(i);\r\n        if (v == null) {\r\n            v = 0.0;\r\n        }\r\n        v += 1.0;\r\n        associations.put(i, v);\r\n    }\r\n    \r\n    public double associationValue(Item i) {\r\n        Double v = associations.get(i);\r\n        if (v == null) {\r\n            return 0.0;\r\n        }\r\n        return v;\r\n    }\r\n    \r\n    \r\n    @Override\r\n    public String toString() {\r\n        String res = this.item.toString() + \" => {\" + associations.toString() + \"}\";\r\n        return res;\r\n    }\r\n\r\n    public List<Tuple> toTupleList() {\r\n        Set<Item> items = associations.keySet();\r\n        ArrayList<Tuple> tuples = new ArrayList<Tuple>();\r\n        for (Item item : items) {\r\n            Double value = associations.get(item);\r\n            tuples.add(new Tuple(item, value));\r\n        }\r\n        Collections.sort(tuples);\r\n        Collections.reverse(tuples);\r\n        return tuples;\r\n    }\r\n\r\n}\r\n',1512,76),(77,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\npublic class ItemVector {\r\n\r\n    private Set<Tuple> tuples;\r\n\r\n    public ItemVector(Set<Tuple> tuples) {\r\n        this.tuples = tuples;\r\n    }\r\n\r\n    public ItemVector(List<Tuple> tuples) {\r\n        this(new HashSet<Tuple>(tuples));\r\n    }\r\n\r\n    public List<Tuple> getTuples() {\r\n        ArrayList<Tuple> tuples = new ArrayList<Tuple>(this.tuples);\r\n        Collections.sort(tuples);\r\n        Collections.reverse(tuples);\r\n        return Collections.unmodifiableList(tuples);\r\n    }\r\n    \r\n    private void remove(Tuple t) {\r\n        tuples.remove(t);\r\n    }\r\n\r\n    public ItemVector merge(ItemVector other) {\r\n        Set<Tuple> tuples = new HashSet<Tuple>();\r\n        Set<Tuple> tuplesToRemove = new HashSet<Tuple>();\r\n        for (Tuple tuple : this.tuples) {\r\n            for (Tuple t : other.getTuples()) {\r\n                if (t.getItem().equals(tuple.getItem())) {\r\n                    Tuple newTuple = new Tuple(t.getItem(), tuple.getValue() + t.getValue());\r\n                    tuples.add(newTuple);\r\n                    tuplesToRemove.add(t);\r\n                    tuplesToRemove.add(tuple);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        tuples.addAll(this.tuples);\r\n        tuples.addAll(other.getTuples());\r\n        tuples.removeAll(tuplesToRemove);\r\n        return new ItemVector(tuples);\r\n    }\r\n\r\n}\r\n',1534,77),(78,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class Tuple implements Comparable<Tuple> {\r\n    private Item item;\r\n    private Double value;\r\n\r\n    public Tuple(Item item, Double value) {\r\n        this.item = item;\r\n        this.value = value;\r\n    }\r\n\r\n    public Item getItem() {\r\n        return item;\r\n    }\r\n\r\n    public Double getValue() {\r\n        return value;\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Tuple o) {\r\n        return (int) (value - o.getValue());\r\n    }\r\n    \r\n    @Override\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((item == null) ? 0 : item.hashCode());\r\n        result = prime * result + ((value == null) ? 0 : value.hashCode());\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        Tuple other = (Tuple) obj;\r\n        if (item == null) {\r\n            if (other.item != null)\r\n                return false;\r\n        } else if (!item.equals(other.item))\r\n            return false;\r\n        if (value == null) {\r\n            if (other.value != null)\r\n                return false;\r\n        } else if (!value.equals(other.value))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"[Tuple: item=\" + item + \"]\";\r\n    }\r\n\r\n}\r\n',1570,78),(79,'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"\r\n	xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n	id=\"WebApp_ID\" version=\"3.0\">\r\n	<display-name>commendans</display-name>\r\n	\r\n	<context-param>\r\n		<param-name>br.com.caelum.vraptor.packages</param-name>\r\n		<param-value>\r\n	        br.com.caelum.vraptor.util.hibernate\r\n        </param-value>\r\n	</context-param>\r\n	\r\n</web-app>\r\n',593,79),(80,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.User;\r\n\r\npublic class UserDaoTest {\r\n\r\n    @Test\r\n    public void test() {\r\n        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        Session session = sf.openSession();\r\n        UserDao userDao = new UserDao(session);\r\n        List<User> users = userDao.list();\r\n    }\r\n\r\n}\r\n',565,80),(81,'package br.ime.usp.commendans.factory;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.model.User;\r\n\r\npublic class ItemToItemRecommenderFactoryTest {\r\n\r\n    @Test\r\n    public void shouldBuildRecommender() {\r\n        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n        Item item1 = new Item(1l);\r\n        Item item2 = new Item(2l);\r\n        Item item3 = new Item(3l);\r\n        Item item4 = new Item(4l);\r\n        User user1 = new User(Arrays.asList(item1, item3), 1l);\r\n        User user2 = new User(Arrays.asList(item2, item4), 2l);\r\n        User user3 = new User(Arrays.asList(item1, item2, item3), 3l);\r\n        User user4 = new User(Arrays.asList(item3, item4), 4l);\r\n        factory.addUser(user1);\r\n        factory.addUser(user2);\r\n        factory.addUser(user3);\r\n        factory.addUser(user4);\r\n        \r\n        ItemToItemRecommender recommender = factory.build();\r\n        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n        \r\n        List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1).getTuples();\r\n        ItemToItemsAssociation association = associations.get(item1);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(2, recommendedItems.size());\r\n        assertEquals(item3, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(item2, recommendedItems.get(1).getItem());\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendendItemsFor(item2).getTuples();\r\n        association = associations.get(item2);\r\n        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendendItemsFor(item3).getTuples();\r\n        association = associations.get(item3);\r\n        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(item1, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        association = associations.get(item4);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n    }\r\n\r\n}\r\n',4165,81),(82,'package br.ime.usp.commendans.infra;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class TupleJsonSerializerTest {\r\n\r\n    @Test\r\n    public void shouldSerializeATuple() {\r\n        TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n        String json = serializer.toJson(new Tuple(new Item(1l), 10.0));\r\n        assertEquals(\"{\\\"item\\\":{\\\"id\\\":1},\\\"value\\\":10.0}\", json);\r\n    }\r\n    \r\n    @Test\r\n    public void shouldSerializeATupleList() {\r\n        TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n        String json = serializer.toJson(Arrays.asList(new Tuple(new Item(1l), 10.0)));\r\n        assertEquals(\"[{\\\"item\\\":{\\\"id\\\":1},\\\"value\\\":10.0}]\", json);\r\n    }\r\n\r\n}\r\n',852,82),(83,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class ItemVectorTest {\r\n\r\n    @Test\r\n    public void test() {\r\n        Item item1 = new Item(1l);\r\n        Item item2 = new Item(2l);\r\n        Item item3 = new Item(3l);\r\n        Item item4 = new Item(4l);\r\n        List<Tuple> tuples = asList(new Tuple(item1, 11.0), new Tuple(item2, 8.0), new Tuple(item3, 2.0));\r\n        ItemVector itemVector1 = new ItemVector(new HashSet<Tuple>(tuples));\r\n        tuples = asList(new Tuple(item4, 10.0), new Tuple(item3, 7.0));\r\n        ItemVector itemVector2 = new ItemVector(new HashSet<Tuple>(tuples));\r\n        \r\n        ItemVector merge = itemVector1.merge(itemVector2);\r\n        List<Tuple> expected = asList(new Tuple(item1, 11.0), new Tuple(item4, 10.0), new Tuple(item3, 9.0), new Tuple(item2, 8.0));\r\n        assertEquals(expected, merge.getTuples());\r\n        \r\n    }\r\n\r\n    private List<Tuple> asList(Tuple ... tuples) {\r\n        ArrayList<Tuple> tuplesList = new ArrayList<Tuple>();\r\n        for (int i = 0; i < tuples.length; i++) {\r\n            tuplesList.add(tuples[i]);\r\n        }\r\n        return tuplesList;\r\n    }\r\n\r\n}\r\n',1328,83),(84,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\npublic class ItemVector {\r\n\r\n    private Set<Tuple> tuples;\r\n\r\n    public ItemVector(Set<Tuple> tuples) {\r\n        this.tuples = tuples;\r\n    }\r\n\r\n    public ItemVector(List<Tuple> tuples) {\r\n        this(new HashSet<Tuple>(tuples));\r\n    }\r\n\r\n    public List<Tuple> getTuples() {\r\n        ArrayList<Tuple> tuples = new ArrayList<Tuple>(this.tuples);\r\n        Collections.sort(tuples);\r\n        Collections.reverse(tuples);\r\n        return Collections.unmodifiableList(tuples);\r\n    }\r\n    \r\n    public ItemVector merge(ItemVector other) {\r\n        Set<Tuple> tuples = new HashSet<Tuple>();\r\n        Set<Tuple> tuplesToRemove = new HashSet<Tuple>();\r\n        for (Tuple tuple : this.tuples) {\r\n            for (Tuple t : other.getTuples()) {\r\n                if (t.getItem().equals(tuple.getItem())) {\r\n                    Tuple newTuple = new Tuple(t.getItem(), tuple.getValue() + t.getValue());\r\n                    tuples.add(newTuple);\r\n                    tuplesToRemove.add(t);\r\n                    tuplesToRemove.add(tuple);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        tuples.addAll(this.tuples);\r\n        tuples.addAll(other.getTuples());\r\n        tuples.removeAll(tuplesToRemove);\r\n        return new ItemVector(tuples);\r\n    }\r\n\r\n}\r\n',1462,84),(85,'package br.ime.usp.commendans.dao;\r\n\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\nimport org.junit.Test;\r\n\r\npublic class UserDaoTest {\r\n\r\n    @Test\r\n    public void shouldFindUsers() {\r\n        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        Session session = sf.openSession();\r\n        UserDao userDao = new UserDao(session);\r\n        userDao.list();\r\n    }\r\n\r\n}\r\n',487,85),(86,'*.jar\r\n*.class\r\nbuild/\r\n.~lock*\r\ntarget/\r\n',42,86),(87,'package br.ime.usp.commendans.components;\r\n\r\nimport javax.annotation.PostConstruct;\r\nimport javax.annotation.PreDestroy;\r\n\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\nimport br.com.caelum.vraptor.ioc.RequestScoped;\r\n\r\n@Component @RequestScoped\r\npublic class SessionCreator implements ComponentFactory<Session> {\r\n    \r\n    private final SessionFactory sf;\r\n    private org.hibernate.classic.Session session;\r\n\r\n    public SessionCreator(SessionFactory sf) {\r\n        this.sf = sf;\r\n    }\r\n\r\n    @Override\r\n    public Session getInstance() {\r\n        return session;\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        session = sf.openSession();\r\n    }\r\n    \r\n    @PreDestroy\r\n    public void destroy() {\r\n        session.close();\r\n    }\r\n\r\n}\r\n',887,87),(88,'package br.ime.usp.commendans.components;\r\n\r\nimport javax.annotation.PostConstruct;\r\nimport javax.annotation.PreDestroy;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\n\r\n@Component @ApplicationScoped\r\npublic class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n\r\n    private SessionFactory sessionFactory;\r\n    private static Logger LOG = Logger.getLogger(SessionFactoryCreator.class);\r\n    \r\n    public SessionFactoryCreator() {\r\n    }\r\n\r\n    @Override\r\n    public SessionFactory getInstance() {\r\n        return sessionFactory;\r\n    }\r\n    \r\n    @PreDestroy\r\n    public void destroy() {\r\n        sessionFactory.close();\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        //if (env.getName().equals(\"heroku\")) {\r\n        if (true) {\r\n            LOG.info(\"using heroku specific confs\");\r\n            Configuration configuration = new Configuration().configure(\"/hibernate-heroku.cfg.xml\");\r\n            configuration.setProperty(\"hibernate.connection.url\", \"jdbc:mysql://localhost/commendans\");\r\n            configuration.setProperty(\"hibernate.connection.driver_class\", \"com.mysql.jdbc.Driver\");\r\n            configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.MySQL5InnoDBDialect\");\r\n            configuration.setProperty(\"hibernate.connection.username\", \"root\");\r\n            configuration.setProperty(\"hibernate.connection.password\", \"\");\r\n            \r\n            sessionFactory = configuration.buildSessionFactory();\r\n        } else {\r\n            LOG.info(\"using heroku specific normal confs\");\r\n            sessionFactory = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        }\r\n    }\r\n\r\n}\r\n',1911,88),(89,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n	    <property name=\"hibernate.c3p0.acquire_increment\">1</property> \r\n		<property name=\"hibernate.c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n		<property name=\"hibernate.c3p0.max_size\">15</property> \r\n		<property name=\"hibernate.c3p0.min_size\">1</property> \r\n		<property name=\"hibernate.c3p0.timeout\">600</property>\r\n    \r\n        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n        <property name=\"show_sql\">false</property>\r\n        <property name=\"format_sql\">false</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.User\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',995,89),(90,'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xmlns=\"http://java.sun.com/xml/ns/javaee\" xmlns:web=\"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\"\r\n	xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n	id=\"WebApp_ID\" version=\"3.0\">\r\n	<display-name>commendans</display-name>\r\n	\r\n</web-app>\r\n',406,90),(91,'package br.ime.usp.commendans.components;\r\n\r\nimport static org.mockito.Mockito.mock;\r\nimport static org.mockito.Mockito.when;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.com.caelum.vraptor.environment.Environment;\r\n\r\npublic class SessionFactoryCreatorTest {\r\n\r\n    @Test\r\n    public void shouldGetSessionFactory() {\r\n        Environment env = mock(Environment.class);\r\n        when(env.getName()).thenReturn(\"heroku\");\r\n        SessionFactoryCreator sfc = new SessionFactoryCreator(env);\r\n        sfc.create();\r\n    }\r\n\r\n}\r\n',519,91),(92,'package br.ime.usp.commendans.components;\r\n\r\nimport org.junit.Test;\r\n\r\npublic class SessionFactoryCreatorTest {\r\n\r\n    @Test\r\n    public void shouldGetSessionFactory() {\r\n        SessionFactoryCreator sfc = new SessionFactoryCreator();\r\n        sfc.create();\r\n    }\r\n\r\n}\r\n',272,92),(93,'*.jar\r\n*.class\r\nbuild/\r\n.~lock*\r\ntarget/\r\nsrc/main/webapp/WEB-INF/lib/\r\nsrc/main/webapp/WEB-INF/classes/\r\n',106,93),(94,'web: sh target/bin/webapp\r\n',27,94),(95,'webapp.dir=src/main/webapp/\r\nlibs.dir=${webapp.dir}/WEB-INF/lib\r\n\r\nivy.jar.file=ivy-2.2.0.jar\r\nivy.file=ivysettings.xml\r\n\r\ntmp.root=target\r\ntmp.dir=${tmp.root}/recommender\r\ntmp.webinf.dir=${tmp.dir}/WEB-INF\r\ntmp.classes.dir=${tmp.webinf.dir}/classes\r\ntmp.test-classes.dir=${tmp.dir}/test-classes\r\n\r\nartifacts.dir=${tmp.root}/artifacts/\r\nwar.file=commendans.war\r\n\r\nsrc.dir=src/main/java\r\nlibs.dir=${webapp.dir}/WEB-INF/lib\r\nresources.dir=src/main/resources\r\n\r\n',459,95),(96,'<project name=\"Metric Miner\" default=\"resolve\" basedir=\".\" xmlns:ivy=\"antlib:org.apache.ivy.ant\">\r\n\r\n	<property file=\"build.properties\" />\r\n\r\n	<path id=\"libs.classpath\" path=\".\">\r\n		<fileset dir=\"${libs.dir}\">\r\n			<include name=\"*.jar\" />\r\n		</fileset>\r\n	</path>\r\n\r\n	<path id=\"compile.classpath\" path=\".\">\r\n		<path refid=\"libs.classpath\" />\r\n	</path>\r\n\r\n	<target name=\"prepare\">\r\n		<mkdir dir=\"${tmp.dir}\" />\r\n		<mkdir dir=\"${tmp.webinf.dir}\" />\r\n		<mkdir dir=\"${tmp.classes.dir}\" />\r\n		<mkdir dir=\"${tmp.test-classes.dir}\" />\r\n	</target>\r\n\r\n	<target name=\"clean\">\r\n		<delete dir=\"${tmp.root}\" />\r\n	</target>\r\n	\r\n	<!-- resolve dependencies -->\r\n	<target name=\"resolve\" description=\"--> retrieve dependencies with ivy\">\r\n		<path id=\"ivy.lib.path\">\r\n			<pathelement location=\"${ivy.jar.file}\" />\r\n		</path>\r\n		<taskdef resource=\"org/apache/ivy/ant/antlib.xml\" uri=\"antlib:org.apache.ivy.ant\" classpathref=\"ivy.lib.path\" />\r\n\r\n		<delete dir=\"${libs.dir}\" includes=\"**/*.*\" />\r\n		<ivy:settings file=\"${ivy.file}\" />\r\n		<ivy:retrieve pattern=\"${webapp.dir}/WEB-INF/lib/[artifact](-[classifier]).[ext]\" sync=\"true\" />\r\n	</target>\r\n\r\n	<target name=\"compile\" depends=\"prepare\">\r\n		<javac destdir=\"${tmp.classes.dir}\" srcdir=\"${src.dir}\" classpathref=\"compile.classpath\" debug=\"true\" encoding=\"UTF-8\" />\r\n	</target>\r\n\r\n	<target name=\"heroku-war\" depends=\"compile\">\r\n		<delete file=\"${artifacts.dir}/${war.file}\" />\r\n		<copy todir=\"${tmp.classes.dir}\">\r\n			<fileset dir=\"${resources.dir}\" />\r\n		</copy>\r\n		\r\n		<copy file=\"${webapp.dir}/WEB-INF/web.xml\" tofile=\"${webapp.dir}/WEB-INF/web-dev.xml\"/>\r\n		\r\n		<copy file=\"${webapp.dir}/WEB-INF/web-heroku.xml\" tofile=\"${webapp.dir}/WEB-INF/web.xml\"/>\r\n\r\n		<war destfile=\"${artifacts.dir}/${war.file}\" webxml=\"${webapp.dir}/WEB-INF/web.xml\" compress=\"true\">\r\n			<classes dir=\"${tmp.classes.dir}\" />\r\n		</war>\r\n		\r\n		<copy file=\"${webapp.dir}/WEB-INF/web-dev.xml\" tofile=\"${webapp.dir}/WEB-INF/web.xml\"/>\r\n	</target>\r\n\r\n</project>\r\n',1965,96),(97,'<ivy-module version=\"2.0\">\r\n	<info organisation=\"ime-usp\" module=\"recommender\" />\r\n\r\n	<configurations>\r\n		<conf name=\"default\" description=\"dependencies used for compile\" />\r\n		<conf name=\"test\" description=\"dependencies used for tests\" visibility=\"public\" />\r\n	</configurations>\r\n\r\n	<dependencies>\r\n		<dependency org=\"com.github.jsimone\" name=\"webapp-runner\" rev=\"7.0.22.1\"/>\r\n	\r\n		<!-- Hibernate and other stuff -->\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-core\" rev=\"3.6.10.Final\"/>\r\n		<dependency org=\"org.hibernate.javax.persistence\" name=\"hibernate-jpa-2.0-api\" rev=\"1.0.0.Final\" conf=\"default\" />\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-c3p0\" rev=\"3.6.10.Final\" conf=\"default\" />\r\n		<dependency org=\"javax.transaction\" name=\"jta\" rev=\"1.1\"/>\r\n		<dependency org=\"mysql\" name=\"mysql-connector-java\" rev=\"5.1.18\"/>\r\n		<dependency org=\"c3p0\" name=\"c3p0\" rev=\"0.9.1\" conf=\"default\" />\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-validator\" rev=\"4.3.0.Final\"/>\r\n		<dependency org=\"net.sf.ehcache\" name=\"ehcache-core\" rev=\"2.5.3\"/>\r\n\r\n		<!-- VRaptor dependencies -->\r\n		<dependency org=\"br.com.caelum\" name=\"vraptor\" rev=\"3.4.1\" conf=\"default\" />\r\n        <dependency org=\"org.slf4j\" name=\"slf4j-api\" rev=\"1.6.1\"/>\r\n        <dependency org=\"log4j\" name=\"log4j\" rev=\"1.2.16\"/>\r\n		<dependency org=\"org.slf4j\" name=\"slf4j-log4j12\" rev=\"1.6.1\"/>\r\n		<dependency org=\"org.mortbay.jetty\" name=\"servlet-api-2.5\" rev=\"6.1H.14.1\"/>\r\n		<dependency org=\"org.glassfish.web\" name=\"jstl-impl\" rev=\"1.2\"/>\r\n		<dependency org=\"org.mortbay.jetty\" name=\"servlet-api\" rev=\"3.0.pre4\"/>\r\n		<dependency org=\"javassist\" name=\"javassist\" rev=\"3.12.1.GA\"/>\r\n		<dependency org=\"commons-io\" name=\"commons-io\" rev=\"2.0.1\"/>\r\n		<dependency org=\"com.google.guava\" name=\"guava\" rev=\"r09\"/>\r\n\r\n		<!-- commendans dependencies -->\r\n		<dependency org=\"com.google.code.gson\" name=\"gson\" rev=\"2.2.2\"/>\r\n		\r\n		<!-- Test dependencies -->\r\n		<dependency org=\"junit\" name=\"junit\" rev=\"4.8.2\" conf=\"test->default\" />\r\n		<dependency org=\"org.mockito\" name=\"mockito-all\" rev=\"1.8.5\" conf=\"test->default\" />\r\n		<dependency org=\"org.hsqldb\" name=\"hsqldb\" rev=\"2.2.8\" conf=\"test->default\" />\r\n            \r\n	</dependencies>\r\n</ivy-module>\r\n',2220,97),(98,'<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<groupId>heroku-blank</groupId>\r\n	<artifactId>heroku-blank</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>heroku-blank</name>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n	</properties>\r\n\r\n	<build>\r\n		<outputDirectory>${basedir}/src/main/webapp/WEB-INF/classes</outputDirectory>\r\n		<plugins>\r\n			<plugin>\r\n				<artifactId>maven-compiler-plugin</artifactId>\r\n				<version>2.3.2</version>\r\n				<configuration>\r\n					<source>1.6</source>\r\n					<target>1.6</target>\r\n					<encoding>UTF-8</encoding>\r\n				</configuration>\r\n			</plugin>\r\n            \r\n            <plugin>\r\n                <artifactId>maven-eclipse-plugin</artifactId>\r\n                <version>2.8</version>\r\n                <configuration>\r\n                    <downloadSources>true</downloadSources>\r\n                    <downloadJavadocs>true</downloadJavadocs>\r\n                </configuration>\r\n            </plugin>\r\n            \r\n            <plugin>\r\n				<artifactId>maven-dependency-plugin</artifactId>\r\n				<executions>\r\n					<execution>\r\n						<phase>install</phase>\r\n						<goals>\r\n							<goal>copy-dependencies</goal>\r\n						</goals>\r\n						<configuration>\r\n							<outputDirectory>src/main/webapp/WEB-INF/lib</outputDirectory>\r\n						</configuration>\r\n					</execution>\r\n				</executions>\r\n				</plugin>\r\n            \r\n			<plugin>\r\n				<groupId>org.apache.maven.plugins</groupId>\r\n				<artifactId>maven-war-plugin</artifactId>\r\n				<version>2.1.1</version>\r\n			</plugin>\r\n			<plugin>\r\n				<groupId>org.mortbay.jetty</groupId>\r\n				<artifactId>maven-jetty-plugin</artifactId>\r\n				<version>6.1.14</version>\r\n				<configuration>\r\n					<scanIntervalSeconds>3</scanIntervalSeconds>\r\n					<stopKey>foo</stopKey>\r\n					<stopPort>9999</stopPort>\r\n					<webAppConfig>\r\n						<contextPath>/</contextPath>\r\n					</webAppConfig>\r\n				</configuration>\r\n			</plugin>\r\n            <plugin>\r\n                <groupId>org.codehaus.mojo</groupId>\r\n                <artifactId>appassembler-maven-plugin</artifactId>\r\n                <version>1.1.1</version>\r\n                <executions>\r\n                    <execution>\r\n                        <phase>package</phase>\r\n                        <goals>\r\n                            <goal>assemble</goal>\r\n                        </goals>\r\n                        <configuration>\r\n                            <assembleDirectory>target</assembleDirectory>\r\n                            <extraJvmArguments>-Xmx512m</extraJvmArguments>\r\n                            <programs>\r\n                                <program>\r\n                                    <mainClass>Main</mainClass>\r\n                                    <name>webapp</name>\r\n                                </program>\r\n                            </programs>\r\n                        </configuration>\r\n                    </execution>\r\n                </executions>\r\n            </plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-core</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate.javax.persistence</groupId>\r\n		  <artifactId>hibernate-jpa-2.0-api</artifactId>\r\n		  <version>1.0.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-c3p0</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javax.transaction</groupId>\r\n		  <artifactId>jta</artifactId>\r\n		  <version>1.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>mysql</groupId>\r\n		  <artifactId>mysql-connector-java</artifactId>\r\n		  <version>5.1.18</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>c3p0</groupId>\r\n		  <artifactId>c3p0</artifactId>\r\n		  <version>0.9.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-validator</artifactId>\r\n		  <version>4.3.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>net.sf.ehcache</groupId>\r\n		  <artifactId>ehcache-core</artifactId>\r\n		  <version>2.5.3</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>br.com.caelum</groupId>\r\n		  <artifactId>vraptor</artifactId>\r\n		  <version>3.4.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-api</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>log4j</groupId>\r\n		  <artifactId>log4j</artifactId>\r\n		  <version>1.2.16</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-log4j12</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api-2.5</artifactId>\r\n		  <version>6.1H.14.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.glassfish.web</groupId>\r\n		  <artifactId>jstl-impl</artifactId>\r\n		  <version>1.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api</artifactId>\r\n		  <version>3.0.pre4</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javassist</groupId>\r\n		  <artifactId>javassist</artifactId>\r\n		  <version>3.12.1.GA</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>commons-io</groupId>\r\n		  <artifactId>commons-io</artifactId>\r\n		  <version>2.0.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.guava</groupId>\r\n		  <artifactId>guava</artifactId>\r\n		  <version>r09</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.code.gson</groupId>\r\n		  <artifactId>gson</artifactId>\r\n		  <version>2.2.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>junit</groupId>\r\n		  <artifactId>junit</artifactId>\r\n		  <version>4.8.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mockito</groupId>\r\n		  <artifactId>mockito-all</artifactId>\r\n		  <version>1.8.5</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hsqldb</groupId>\r\n		  <artifactId>hsqldb</artifactId>\r\n		  <version>2.2.8</version>\r\n		</dependency>\r\n		<!-- Provided dependencies -->\r\n	</dependencies>\r\n\r\n	<reporting>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.codehaus.mojo</groupId>\r\n				<artifactId>cobertura-maven-plugin</artifactId>\r\n				<version>2.5.1</version>\r\n			</plugin>\r\n		</plugins>\r\n	</reporting>\r\n</project>\r\n',6629,98),(99,'package br.ime.usp.commendans.components;\r\n\r\nimport java.net.URI;\r\nimport java.net.URISyntaxException;\r\n\r\nimport javax.annotation.PostConstruct;\r\nimport javax.annotation.PreDestroy;\r\nimport javax.servlet.ServletContext;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\n\r\n@Component @ApplicationScoped\r\npublic class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n\r\n    private SessionFactory sessionFactory;\r\n    private static Logger LOG = Logger.getLogger(SessionFactoryCreator.class);\r\n    private String env;\r\n    \r\n    public SessionFactoryCreator(ServletContext context) {\r\n        env = context.getInitParameter(\"environment\");\r\n    }\r\n\r\n    @Override\r\n    public SessionFactory getInstance() {\r\n        return sessionFactory;\r\n    }\r\n    \r\n    @PreDestroy\r\n    public void destroy() {\r\n        sessionFactory.close();\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        if (env.equals(\"heroku\")) {\r\n            \r\n            URI dbUri;\r\n            try {\r\n                dbUri = new URI(System.getenv(\"DATABASE_URL\"));\r\n            } catch (URISyntaxException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n\r\n            String username = dbUri.getUserInfo().split(\":\")[0];\r\n            String password = dbUri.getUserInfo().split(\":\")[1];\r\n            String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + \':\' + dbUri.getPort() + \"/\" + dbUri.getPort();\r\n            \r\n            LOG.info(\"using heroku specific confs\");\r\n            LOG.info(\"username: \" + username);\r\n            LOG.info(\"password: \" + password);\r\n            LOG.info(\"dbUrl: \" + dbUrl);\r\n            Configuration configuration = new Configuration().configure(\"/hibernate-heroku.cfg.xml\");\r\n            configuration.setProperty(\"hibernate.connection.url\", dbUrl);\r\n            configuration.setProperty(\"hibernate.connection.driver_class\", \"com.mysql.jdbc.Driver\");\r\n            configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\r\n            configuration.setProperty(\"hibernate.connection.username\", username);\r\n            configuration.setProperty(\"hibernate.connection.password\", password);\r\n            \r\n            sessionFactory = configuration.buildSessionFactory();\r\n        } else {\r\n            LOG.info(\"using heroku specific normal confs\");\r\n            sessionFactory = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        }\r\n    }\r\n\r\n}\r\n',2689,99),(100,'package br.ime.usp.commendans.controller;\r\n\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.util.DataImporter;\r\n\r\n\r\n@Resource\r\npublic class IndexController {\r\n    \r\n    private final Result result;\r\n    private final Session session;\r\n\r\n    public IndexController(Result result, Session session) {\r\n        this.result = result;\r\n        this.session = session;\r\n    }\r\n    \r\n    @Get(\"/\")\r\n    public void index() {\r\n        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n    }\r\n    \r\n    @Get(\"/import/askjdhakjshdakjshd\")\r\n    public void importData() {\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n        result.use(Results.http()).body(\"<html><body>finished persisting</body></html>\");\r\n    }\r\n}\r\n',980,100),(101,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.infra.TupleJsonSerializer;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\nimport br.ime.usp.commendans.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Resource\r\npublic class ItemToItemController {\r\n    private final ItemToItemRecommender itemToItem;\r\n    private final ItemDao itemDao;\r\n    private final Result result;\r\n    private final TupleJsonSerializer serializer;\r\n\r\n    public ItemToItemController(ItemToItemRecommender itemToItem, ItemDao itemDao, Result result, TupleJsonSerializer serializer) {\r\n        this.itemToItem = itemToItem;\r\n        this.itemDao = itemDao;\r\n        this.result = result;\r\n        this.serializer = serializer;\r\n    }\r\n    \r\n    @Get(\"/recommend/item/{itemId}\")\r\n    public void recommend(Long itemId) {\r\n        Item item = itemDao.find(itemId);\r\n        ItemVector recommendend = itemToItem.recommendendItemsFor(item);\r\n        serializedResult(recommendend.getTuples());\r\n    }\r\n    \r\n    @Get(\"/recommend/items/\")\r\n    public void recommend(List<Long> itemsIds) {\r\n        List<Item> items = itemDao.find(itemsIds);\r\n        List<Tuple> recommendend = itemToItem.recommendendItemsFor(items).getTuples();\r\n        serializedResult(recommendend);\r\n    }\r\n\r\n    private void serializedResult(List<Tuple> recommendend) {\r\n        result.use(Results.http())\r\n            .addHeader(\"content-type\", \"application/json\")\r\n            .body(serializer.toJson(recommendend));\r\n    }\r\n}\r\n',1805,101),(102,'package br.ime.usp.commendans.util;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.model.User;\r\n\r\npublic class DataImporter {\r\n    \r\n    private final Session session;\r\n    private static Logger logger = Logger.getLogger(DataImporter.class);\r\n\r\n    public DataImporter(Session session) {\r\n        this.session = session;\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        Session session = sf.openSession();\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n    }\r\n\r\n    public void importData(String file) {\r\n        HashMap<Long, User> users = new HashMap<Long, User>();\r\n        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n        String line = safeReadLine(reader);\r\n        \r\n        while (line != null) {\r\n            logger.info(line);\r\n            List<String> row = Arrays.asList(line.split(\",\"));\r\n            long id = Long.parseLong(row.get(0));\r\n            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n            User user = users.get(id);\r\n            if (user == null) {\r\n                user = new User(new ArrayList<Item>(), id);\r\n            }\r\n            Item item = items.get(itemId);\r\n            if (item == null) {\r\n                item = new Item(itemId);\r\n            }\r\n            user.add(item);\r\n            line = safeReadLine(reader);\r\n            users.put(id, user);\r\n            items.put(itemId, item);\r\n        }\r\n        \r\n        logger.info(\"persisting\");\r\n        session.getTransaction().begin();\r\n        for (Item item : items.values()) {\r\n            session.save(item);\r\n        }\r\n        \r\n        Collection<User> allUsers = users.values();\r\n        for (User user : allUsers) {\r\n            session.save(user);\r\n        }\r\n        session.getTransaction().commit();\r\n        logger.info(\"finished persisting\");\r\n    }\r\n\r\n    private String safeReadLine(BufferedReader reader) {\r\n        try {\r\n            return reader.readLine();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"could not read file\", e);\r\n        }\r\n    }\r\n\r\n}\r\n',2843,102),(103,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n	    <property name=\"hibernate.c3p0.acquire_increment\">1</property> \r\n		<property name=\"hibernate.c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n		<property name=\"hibernate.c3p0.max_size\">15</property> \r\n		<property name=\"hibernate.c3p0.min_size\">1</property> \r\n		<property name=\"hibernate.c3p0.timeout\">600</property>\r\n    \r\n        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n        <property name=\"show_sql\">false</property>\r\n        <property name=\"format_sql\">false</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.User\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1000,103),(104,'<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n<!--\r\n  Licensed to the Apache Software Foundation (ASF) under one or more\r\n  contributor license agreements.  See the NOTICE file distributed with\r\n  this work for additional information regarding copyright ownership.\r\n  The ASF licenses this file to You under the Apache License, Version 2.0\r\n  (the \"License\"); you may not use this file except in compliance with\r\n  the License.  You may obtain a copy of the License at\r\n\r\n      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n-->\r\n<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\r\n                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n  version=\"3.0\">\r\n\r\n    <servlet>\r\n        <servlet-name>default</servlet-name>\r\n        <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>\r\n        <init-param>\r\n            <param-name>debug</param-name>\r\n            <param-value>0</param-value>\r\n        </init-param>\r\n        <init-param>\r\n            <param-name>listings</param-name>\r\n            <param-value>false</param-value>\r\n        </init-param>\r\n        <load-on-startup>1</load-on-startup>\r\n    </servlet>\r\n\r\n\r\n\r\n    <session-config>\r\n        <session-timeout>30</session-timeout>\r\n    </session-config>\r\n\r\n    \r\n    <display-name>commendans</display-name>\r\n	\r\n	<context-param>\r\n        <param-name>environment</param-name>\r\n        <param-value>heroku</param-value>\r\n    </context-param>\r\n\r\n</web-app>\r\n',1882,104),(105,'<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n<!--\r\n  Licensed to the Apache Software Foundation (ASF) under one or more\r\n  contributor license agreements.  See the NOTICE file distributed with\r\n  this work for additional information regarding copyright ownership.\r\n  The ASF licenses this file to You under the Apache License, Version 2.0\r\n  (the \"License\"); you may not use this file except in compliance with\r\n  the License.  You may obtain a copy of the License at\r\n\r\n      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n-->\r\n<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\r\n                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n  version=\"3.0\">\r\n\r\n\r\n    <session-config>\r\n        <session-timeout>30</session-timeout>\r\n    </session-config>\r\n\r\n    \r\n    <display-name>commendans</display-name>\r\n	\r\n	<context-param>\r\n        <param-name>environment</param-name>\r\n        <param-value>heroku</param-value>\r\n    </context-param>\r\n\r\n</web-app>\r\n',1402,105),(106,'<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n<!--\r\n  Licensed to the Apache Software Foundation (ASF) under one or more\r\n  contributor license agreements.  See the NOTICE file distributed with\r\n  this work for additional information regarding copyright ownership.\r\n  The ASF licenses this file to You under the Apache License, Version 2.0\r\n  (the \"License\"); you may not use this file except in compliance with\r\n  the License.  You may obtain a copy of the License at\r\n\r\n      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n-->\r\n<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\r\n                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n  version=\"3.0\">\r\n\r\n\r\n\r\n\r\n    <session-config>\r\n        <session-timeout>30</session-timeout>\r\n    </session-config>\r\n\r\n    \r\n    <display-name>commendans</display-name>\r\n	\r\n	<context-param>\r\n        <param-name>environment</param-name>\r\n        <param-value>heroku</param-value>\r\n    </context-param>\r\n\r\n</web-app>\r\n',1406,106),(107,'package br.ime.usp.commendans.components;\r\n\r\nimport static org.mockito.Mockito.mock;\r\nimport static org.mockito.Mockito.when;\r\n\r\nimport javax.servlet.ServletContext;\r\n\r\nimport org.junit.Ignore;\r\nimport org.junit.Test;\r\n\r\npublic class SessionFactoryCreatorTest {\r\n\r\n    @Test @Ignore\r\n    public void shouldGetSessionFactory() {\r\n        ServletContext context = mock(ServletContext.class);\r\n        when(context.getInitParameter(\"environment\")).thenReturn(\"heroku\");\r\n        SessionFactoryCreator sfc = new SessionFactoryCreator(context);\r\n        sfc.create();\r\n    }\r\n\r\n}\r\n',576,107),(108,'<ivy-module version=\"2.0\">\r\n	<info organisation=\"ime-usp\" module=\"recommender\" />\r\n\r\n	<configurations>\r\n		<conf name=\"default\" description=\"dependencies used for compile\" />\r\n		<conf name=\"test\" description=\"dependencies used for tests\" visibility=\"public\" />\r\n	</configurations>\r\n\r\n	<dependencies>\r\n		<dependency org=\"com.github.jsimone\" name=\"webapp-runner\" rev=\"7.0.22.1\"/>\r\n	\r\n		<!-- Hibernate and other stuff -->\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-core\" rev=\"3.6.10.Final\"/>\r\n		<dependency org=\"org.hibernate.javax.persistence\" name=\"hibernate-jpa-2.0-api\" rev=\"1.0.0.Final\" conf=\"default\" />\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-c3p0\" rev=\"3.6.10.Final\" conf=\"default\" />\r\n		<dependency org=\"javax.transaction\" name=\"jta\" rev=\"1.1\"/>\r\n		<dependency org=\"mysql\" name=\"mysql-connector-java\" rev=\"5.1.18\"/>\r\n		<dependency org=\"c3p0\" name=\"c3p0\" rev=\"0.9.1\" conf=\"default\" />\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-validator\" rev=\"4.3.0.Final\"/>\r\n		<dependency org=\"net.sf.ehcache\" name=\"ehcache-core\" rev=\"2.5.3\"/>\r\n\r\n		<!-- VRaptor dependencies -->\r\n		<dependency org=\"br.com.caelum\" name=\"vraptor\" rev=\"3.4.1\" conf=\"default\" />\r\n        <dependency org=\"org.slf4j\" name=\"slf4j-api\" rev=\"1.6.1\"/>\r\n        <dependency org=\"log4j\" name=\"log4j\" rev=\"1.2.16\"/>\r\n		<dependency org=\"org.slf4j\" name=\"slf4j-log4j12\" rev=\"1.6.1\"/>\r\n		<dependency org=\"org.mortbay.jetty\" name=\"servlet-api-2.5\" rev=\"6.1H.14.1\"/>\r\n		<dependency org=\"org.glassfish.web\" name=\"jstl-impl\" rev=\"1.2\"/>\r\n		<dependency org=\"org.mortbay.jetty\" name=\"servlet-api\" rev=\"3.0.pre4\"/>\r\n		<dependency org=\"javassist\" name=\"javassist\" rev=\"3.12.1.GA\"/>\r\n		<dependency org=\"commons-io\" name=\"commons-io\" rev=\"2.0.1\"/>\r\n		<dependency org=\"com.google.guava\" name=\"guava\" rev=\"r09\"/>\r\n\r\n		<!-- commendans dependencies -->\r\n		<dependency org=\"com.google.code.gson\" name=\"gson\" rev=\"2.2.2\"/>\r\n		<dependency org=\"com.google.code.gson\" name=\"gson\" rev=\"2.2.2\"/>\r\n		\r\n		<dependency org=\"org.eclipse.jetty\" name=\"jetty-webapp\" rev=\"7.4.4.v20110707\"/>\r\n		<dependency org=\"org.mortbay.jetty\" name=\"jsp-2.1-glassfish\" rev=\"2.1.v20100127\" />\r\n		\r\n		<!-- Test dependencies -->\r\n		<dependency org=\"junit\" name=\"junit\" rev=\"4.8.2\" conf=\"test->default\" />\r\n		<dependency org=\"org.mockito\" name=\"mockito-all\" rev=\"1.8.5\" conf=\"test->default\" />\r\n		<dependency org=\"org.hsqldb\" name=\"hsqldb\" rev=\"2.2.8\" conf=\"test->default\" />\r\n            \r\n	</dependencies>\r\n</ivy-module>\r\n',2462,108),(109,'<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<groupId>heroku-blank</groupId>\r\n	<artifactId>heroku-blank</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>heroku-blank</name>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n	</properties>\r\n\r\n	<build>\r\n		<outputDirectory>${basedir}/src/main/webapp/WEB-INF/classes</outputDirectory>\r\n		<plugins>\r\n			<plugin>\r\n				<artifactId>maven-compiler-plugin</artifactId>\r\n				<version>2.3.2</version>\r\n				<configuration>\r\n					<source>1.6</source>\r\n					<target>1.6</target>\r\n					<encoding>UTF-8</encoding>\r\n				</configuration>\r\n			</plugin>\r\n            \r\n            <plugin>\r\n                <artifactId>maven-eclipse-plugin</artifactId>\r\n                <version>2.8</version>\r\n                <configuration>\r\n                    <downloadSources>true</downloadSources>\r\n                    <downloadJavadocs>true</downloadJavadocs>\r\n                </configuration>\r\n            </plugin>\r\n            \r\n            <plugin>\r\n				<artifactId>maven-dependency-plugin</artifactId>\r\n				<executions>\r\n					<execution>\r\n						<phase>install</phase>\r\n						<goals>\r\n							<goal>copy-dependencies</goal>\r\n						</goals>\r\n						<configuration>\r\n							<outputDirectory>src/main/webapp/WEB-INF/lib</outputDirectory>\r\n						</configuration>\r\n					</execution>\r\n				</executions>\r\n				</plugin>\r\n            \r\n			<plugin>\r\n				<groupId>org.apache.maven.plugins</groupId>\r\n				<artifactId>maven-war-plugin</artifactId>\r\n				<version>2.1.1</version>\r\n				<configuration>\r\n    					<webXml>src/main/webapp/WEB-INF/web-heroku.xml</webXml>        \r\n  				</configuration>\r\n			</plugin>\r\n			<plugin>\r\n				<groupId>org.mortbay.jetty</groupId>\r\n				<artifactId>maven-jetty-plugin</artifactId>\r\n				<version>6.1.14</version>\r\n				<configuration>\r\n					<scanIntervalSeconds>3</scanIntervalSeconds>\r\n					<stopKey>foo</stopKey>\r\n					<stopPort>9999</stopPort>\r\n					<webAppConfig>\r\n						<contextPath>/</contextPath>\r\n					</webAppConfig>\r\n				</configuration>\r\n			</plugin>\r\n            <plugin>\r\n                <groupId>org.codehaus.mojo</groupId>\r\n                <artifactId>appassembler-maven-plugin</artifactId>\r\n                <version>1.1.1</version>\r\n                <executions>\r\n                    <execution>\r\n                        <phase>package</phase>\r\n                        <goals>\r\n                            <goal>assemble</goal>\r\n                        </goals>\r\n                        <configuration>\r\n                            <assembleDirectory>target</assembleDirectory>\r\n                            <extraJvmArguments>-Xmx512m</extraJvmArguments>\r\n                            <programs>\r\n                                <program>\r\n                                    <mainClass>br.ime.usp.commendans.runner.Runner</mainClass>\r\n                                    <name>webapp</name>\r\n                                </program>\r\n                            </programs>\r\n                        </configuration>\r\n                    </execution>\r\n                </executions>\r\n            </plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-core</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate.javax.persistence</groupId>\r\n		  <artifactId>hibernate-jpa-2.0-api</artifactId>\r\n		  <version>1.0.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-c3p0</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javax.transaction</groupId>\r\n		  <artifactId>jta</artifactId>\r\n		  <version>1.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>mysql</groupId>\r\n		  <artifactId>mysql-connector-java</artifactId>\r\n		  <version>5.1.18</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>c3p0</groupId>\r\n		  <artifactId>c3p0</artifactId>\r\n		  <version>0.9.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-validator</artifactId>\r\n		  <version>4.3.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>net.sf.ehcache</groupId>\r\n		  <artifactId>ehcache-core</artifactId>\r\n		  <version>2.5.3</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>br.com.caelum</groupId>\r\n		  <artifactId>vraptor</artifactId>\r\n		  <version>3.4.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-api</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>log4j</groupId>\r\n		  <artifactId>log4j</artifactId>\r\n		  <version>1.2.16</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-log4j12</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api-2.5</artifactId>\r\n		  <version>6.1H.14.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.glassfish.web</groupId>\r\n		  <artifactId>jstl-impl</artifactId>\r\n		  <version>1.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api</artifactId>\r\n		  <version>3.0.pre4</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javassist</groupId>\r\n		  <artifactId>javassist</artifactId>\r\n		  <version>3.12.1.GA</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>commons-io</groupId>\r\n		  <artifactId>commons-io</artifactId>\r\n		  <version>2.0.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.guava</groupId>\r\n		  <artifactId>guava</artifactId>\r\n		  <version>r09</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.code.gson</groupId>\r\n		  <artifactId>gson</artifactId>\r\n		  <version>2.2.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>junit</groupId>\r\n		  <artifactId>junit</artifactId>\r\n		  <version>4.8.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mockito</groupId>\r\n		  <artifactId>mockito-all</artifactId>\r\n		  <version>1.8.5</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hsqldb</groupId>\r\n		  <artifactId>hsqldb</artifactId>\r\n		  <version>2.2.8</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.eclipse.jetty</groupId>\r\n			<artifactId>jetty-webapp</artifactId>\r\n			<version>7.4.4.v20110707</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.mortbay.jetty</groupId>\r\n			<artifactId>jsp-2.1-glassfish</artifactId>\r\n			<version>2.1.v20100127</version>\r\n		</dependency>\r\n		<!-- Provided dependencies -->\r\n	</dependencies>\r\n\r\n	<reporting>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.codehaus.mojo</groupId>\r\n				<artifactId>cobertura-maven-plugin</artifactId>\r\n				<version>2.5.1</version>\r\n			</plugin>\r\n		</plugins>\r\n	</reporting>\r\n</project>\r\n',7092,109),(110,'package br.ime.usp.commendans.runner;\r\n\r\nimport org.eclipse.jetty.server.Server;\r\nimport org.eclipse.jetty.webapp.WebAppContext;\r\n\r\npublic class Runner {\r\n    \r\n    public static void main(String[] args) throws Exception {\r\n        String webappDirLocation = \"src/main/webapp/\";\r\n        String webPort = System.getenv(\"PORT\");\r\n        if (webPort == null || webPort.isEmpty()) {\r\n            webPort = \"8080\";\r\n        }\r\n        Server server = new Server(Integer.valueOf(webPort));\r\n        WebAppContext root = new WebAppContext();\r\n        root.setContextPath(\"/\");\r\n        root.setDescriptor(webappDirLocation + \"/WEB-INF/web.xml\");\r\n        root.setResourceBase(webappDirLocation);\r\n        root.setParentLoaderPriority(true);\r\n        server.setHandler(root);\r\n        server.start();\r\n        server.join();\r\n    }\r\n    \r\n}\r\n',836,110),(111,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n<!-- 	    <property name=\"hibernate.c3p0.acquire_increment\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.idle_test_period\">100</property> seconds  -->\r\n<!-- 		<property name=\"hibernate.c3p0.max_size\">15</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.min_size\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.timeout\">600</property> -->\r\n    \r\n        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n        <property name=\"show_sql\">false</property>\r\n        <property name=\"format_sql\">false</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.User\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1036,111),(112,'package br.ime.usp.commendans.components;\r\n\r\nimport java.net.URI;\r\nimport java.net.URISyntaxException;\r\n\r\nimport javax.annotation.PostConstruct;\r\nimport javax.annotation.PreDestroy;\r\nimport javax.servlet.ServletContext;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\n\r\n@Component @ApplicationScoped\r\npublic class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n\r\n    private SessionFactory sessionFactory;\r\n    private static Logger LOG = Logger.getLogger(SessionFactoryCreator.class);\r\n    private String env;\r\n    \r\n    public SessionFactoryCreator(ServletContext context) {\r\n        env = context.getInitParameter(\"environment\");\r\n    }\r\n\r\n    @Override\r\n    public SessionFactory getInstance() {\r\n        return sessionFactory;\r\n    }\r\n    \r\n    @PreDestroy\r\n    public void destroy() {\r\n        sessionFactory.close();\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        if (env.equals(\"heroku\")) {\r\n            \r\n            URI dbUri;\r\n            try {\r\n                dbUri = new URI(System.getenv(\"DATABASE_URL\"));\r\n            } catch (URISyntaxException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n\r\n            String username = dbUri.getUserInfo().split(\":\")[0];\r\n            String password = dbUri.getUserInfo().split(\":\")[1];\r\n            String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + \':\' + dbUri.getPort() + \"/\" + dbUri.getPort();\r\n            \r\n            LOG.info(\"using heroku specific confs\");\r\n            LOG.info(\"username: \" + username);\r\n            LOG.info(\"password: \" + password);\r\n            LOG.info(\"dbUrl: \" + dbUrl);\r\n            Configuration configuration = new Configuration().configure(\"/hibernate-heroku.cfg.xml\");\r\n            configuration.setProperty(\"hibernate.connection.url\", dbUrl);\r\n            configuration.setProperty(\"hibernate.connection.driver_class\", \"org.postgresql.Driver\");\r\n            configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\r\n            configuration.setProperty(\"hibernate.connection.username\", username);\r\n            configuration.setProperty(\"hibernate.connection.password\", password);\r\n            \r\n            sessionFactory = configuration.buildSessionFactory();\r\n        } else {\r\n            LOG.info(\"using heroku specific normal confs\");\r\n            sessionFactory = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        }\r\n    }\r\n\r\n}\r\n',2689,112),(113,'<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<groupId>heroku-blank</groupId>\r\n	<artifactId>heroku-blank</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>heroku-blank</name>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n	</properties>\r\n\r\n	<build>\r\n		<outputDirectory>${basedir}/src/main/webapp/WEB-INF/classes</outputDirectory>\r\n		<plugins>\r\n			<plugin>\r\n				<artifactId>maven-compiler-plugin</artifactId>\r\n				<version>2.3.2</version>\r\n				<configuration>\r\n					<source>1.6</source>\r\n					<target>1.6</target>\r\n					<encoding>UTF-8</encoding>\r\n				</configuration>\r\n			</plugin>\r\n            \r\n            <plugin>\r\n                <artifactId>maven-eclipse-plugin</artifactId>\r\n                <version>2.8</version>\r\n                <configuration>\r\n                    <downloadSources>true</downloadSources>\r\n                    <downloadJavadocs>true</downloadJavadocs>\r\n                </configuration>\r\n            </plugin>\r\n            \r\n            <plugin>\r\n				<artifactId>maven-dependency-plugin</artifactId>\r\n				<executions>\r\n					<execution>\r\n						<phase>install</phase>\r\n						<goals>\r\n							<goal>copy-dependencies</goal>\r\n						</goals>\r\n						<configuration>\r\n							<outputDirectory>src/main/webapp/WEB-INF/lib</outputDirectory>\r\n						</configuration>\r\n					</execution>\r\n				</executions>\r\n				</plugin>\r\n            \r\n			<plugin>\r\n				<groupId>org.apache.maven.plugins</groupId>\r\n				<artifactId>maven-war-plugin</artifactId>\r\n				<version>2.1.1</version>\r\n				<configuration>\r\n    					<webXml>src/main/webapp/WEB-INF/web-heroku.xml</webXml>        \r\n  				</configuration>\r\n			</plugin>\r\n			<plugin>\r\n				<groupId>org.mortbay.jetty</groupId>\r\n				<artifactId>maven-jetty-plugin</artifactId>\r\n				<version>6.1.14</version>\r\n				<configuration>\r\n					<scanIntervalSeconds>3</scanIntervalSeconds>\r\n					<stopKey>foo</stopKey>\r\n					<stopPort>9999</stopPort>\r\n					<webAppConfig>\r\n						<contextPath>/</contextPath>\r\n					</webAppConfig>\r\n				</configuration>\r\n			</plugin>\r\n            <plugin>\r\n                <groupId>org.codehaus.mojo</groupId>\r\n                <artifactId>appassembler-maven-plugin</artifactId>\r\n                <version>1.1.1</version>\r\n                <executions>\r\n                    <execution>\r\n                        <phase>package</phase>\r\n                        <goals>\r\n                            <goal>assemble</goal>\r\n                        </goals>\r\n                        <configuration>\r\n                            <assembleDirectory>target</assembleDirectory>\r\n                            <extraJvmArguments>-Xmx512m</extraJvmArguments>\r\n                            <programs>\r\n                                <program>\r\n                                    <mainClass>br.ime.usp.commendans.runner.Runner</mainClass>\r\n                                    <name>webapp</name>\r\n                                </program>\r\n                            </programs>\r\n                        </configuration>\r\n                    </execution>\r\n                </executions>\r\n            </plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-core</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate.javax.persistence</groupId>\r\n		  <artifactId>hibernate-jpa-2.0-api</artifactId>\r\n		  <version>1.0.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-c3p0</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javax.transaction</groupId>\r\n		  <artifactId>jta</artifactId>\r\n		  <version>1.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>mysql</groupId>\r\n		  <artifactId>mysql-connector-java</artifactId>\r\n		  <version>5.1.18</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>c3p0</groupId>\r\n		  <artifactId>c3p0</artifactId>\r\n		  <version>0.9.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-validator</artifactId>\r\n		  <version>4.3.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>net.sf.ehcache</groupId>\r\n		  <artifactId>ehcache-core</artifactId>\r\n		  <version>2.5.3</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>br.com.caelum</groupId>\r\n		  <artifactId>vraptor</artifactId>\r\n		  <version>3.4.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-api</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>log4j</groupId>\r\n		  <artifactId>log4j</artifactId>\r\n		  <version>1.2.16</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-log4j12</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api-2.5</artifactId>\r\n		  <version>6.1H.14.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.glassfish.web</groupId>\r\n		  <artifactId>jstl-impl</artifactId>\r\n		  <version>1.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api</artifactId>\r\n		  <version>3.0.pre4</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javassist</groupId>\r\n		  <artifactId>javassist</artifactId>\r\n		  <version>3.12.1.GA</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>commons-io</groupId>\r\n		  <artifactId>commons-io</artifactId>\r\n		  <version>2.0.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.guava</groupId>\r\n		  <artifactId>guava</artifactId>\r\n		  <version>r09</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.code.gson</groupId>\r\n		  <artifactId>gson</artifactId>\r\n		  <version>2.2.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>junit</groupId>\r\n		  <artifactId>junit</artifactId>\r\n		  <version>4.8.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mockito</groupId>\r\n		  <artifactId>mockito-all</artifactId>\r\n		  <version>1.8.5</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hsqldb</groupId>\r\n		  <artifactId>hsqldb</artifactId>\r\n		  <version>2.2.8</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.eclipse.jetty</groupId>\r\n			<artifactId>jetty-webapp</artifactId>\r\n			<version>7.4.4.v20110707</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.mortbay.jetty</groupId>\r\n			<artifactId>jsp-2.1-glassfish</artifactId>\r\n			<version>2.1.v20100127</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>postgresql</groupId>\r\n			<artifactId>postgresql</artifactId>\r\n			<version>9.1-901.jdbc4</version>\r\n		</dependency>\r\n            \r\n		<!-- Provided dependencies -->\r\n	</dependencies>\r\n\r\n	<reporting>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.codehaus.mojo</groupId>\r\n				<artifactId>cobertura-maven-plugin</artifactId>\r\n				<version>2.5.1</version>\r\n			</plugin>\r\n		</plugins>\r\n	</reporting>\r\n</project>\r\n',7250,113),(114,'package br.ime.usp.commendans.components;\r\n\r\nimport java.net.URI;\r\nimport java.net.URISyntaxException;\r\n\r\nimport javax.annotation.PostConstruct;\r\nimport javax.annotation.PreDestroy;\r\nimport javax.servlet.ServletContext;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\n\r\n@Component @ApplicationScoped\r\npublic class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n\r\n    private SessionFactory sessionFactory;\r\n    private static Logger LOG = Logger.getLogger(SessionFactoryCreator.class);\r\n    private String env;\r\n    \r\n    public SessionFactoryCreator(ServletContext context) {\r\n        env = context.getInitParameter(\"environment\");\r\n    }\r\n\r\n    @Override\r\n    public SessionFactory getInstance() {\r\n        return sessionFactory;\r\n    }\r\n    \r\n    @PreDestroy\r\n    public void destroy() {\r\n        sessionFactory.close();\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        if (env.equals(\"heroku\")) {\r\n            \r\n            URI dbUri;\r\n            try {\r\n                dbUri = new URI(System.getenv(\"DATABASE_URL\"));\r\n            } catch (URISyntaxException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n\r\n            String username = dbUri.getUserInfo().split(\":\")[0];\r\n            String password = dbUri.getUserInfo().split(\":\")[1];\r\n            String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + \':\' + dbUri.getPort()  + dbUri.getPath();\r\n            \r\n            LOG.info(\"using heroku specific confs\");\r\n            LOG.info(\"username: \" + username);\r\n            LOG.info(\"password: \" + password);\r\n            LOG.info(\"dbUrl: \" + dbUrl);\r\n            Configuration configuration = new Configuration().configure(\"/hibernate-heroku.cfg.xml\");\r\n            configuration.setProperty(\"hibernate.connection.url\", dbUrl);\r\n            configuration.setProperty(\"hibernate.connection.driver_class\", \"org.postgresql.Driver\");\r\n            configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\r\n            configuration.setProperty(\"hibernate.connection.username\", username);\r\n            configuration.setProperty(\"hibernate.connection.password\", password);\r\n            \r\n            sessionFactory = configuration.buildSessionFactory();\r\n        } else {\r\n            LOG.info(\"using heroku specific normal confs\");\r\n            sessionFactory = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        }\r\n    }\r\n\r\n}\r\n',2684,114),(115,'package br.ime.usp.commendans.components;\r\n\r\nimport java.net.URI;\r\nimport java.net.URISyntaxException;\r\n\r\nimport javax.annotation.PostConstruct;\r\nimport javax.annotation.PreDestroy;\r\nimport javax.servlet.ServletContext;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\n\r\n@Component @ApplicationScoped\r\npublic class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n\r\n    private SessionFactory sessionFactory;\r\n    private static Logger LOG = Logger.getLogger(SessionFactoryCreator.class);\r\n    private String env;\r\n    \r\n    public SessionFactoryCreator(ServletContext context) {\r\n        env = context.getInitParameter(\"environment\");\r\n    }\r\n\r\n    @Override\r\n    public SessionFactory getInstance() {\r\n        return sessionFactory;\r\n    }\r\n    \r\n    @PreDestroy\r\n    public void destroy() {\r\n        sessionFactory.close();\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        if (env.equals(\"heroku\")) {\r\n            \r\n            URI dbUri;\r\n            try {\r\n                dbUri = new URI(System.getenv(\"DATABASE_URL\"));\r\n            } catch (URISyntaxException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n\r\n            String username = dbUri.getUserInfo().split(\":\")[0];\r\n            String password = dbUri.getUserInfo().split(\":\")[1];\r\n            String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + \':\' + dbUri.getPort()  + dbUri.getPath();\r\n            \r\n            LOG.info(\"using heroku specific confs\");\r\n            LOG.info(\"username: \" + username);\r\n            LOG.info(\"password: \" + password);\r\n            LOG.info(\"dbUrl: \" + dbUrl);\r\n            Configuration configuration = new Configuration().configure(\"/hibernate-heroku.cfg.xml\");\r\n            configuration.setProperty(\"hibernate.connection.url\", dbUrl);\r\n            configuration.setProperty(\"hibernate.connection.driver_class\", \"org.postgresql.Driver\");\r\n            configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\r\n            configuration.setProperty(\"hibernate.connection.username\", username);\r\n            configuration.setProperty(\"hibernate.connection.password\", password);\r\n            \r\n            sessionFactory = configuration.buildSessionFactory();\r\n        } else {\r\n            sessionFactory = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        }\r\n    }\r\n\r\n}\r\n',2623,115),(116,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.Customer;\r\n\r\n@Component\r\npublic class CustomerDao {\r\n    private final Session session;\r\n\r\n    public CustomerDao(Session session) {\r\n        this.session = session;\r\n    }\r\n    \r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Customer> list() {\r\n        session.createQuery(\"select customer from Customer customer join fetch customer.items\");\r\n        return session.createCriteria(Customer.class).list();\r\n    }\r\n}\r\n',600,116),(117,'',0,117),(118,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.annotation.PostConstruct;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\nimport br.ime.usp.commendans.model.Customer;\r\n\r\n@Component\r\npublic class ItemToItemRecommenderCreator implements ComponentFactory<ItemToItemRecommender> {\r\n    private final CustomerDao dao;\r\n    private final ItemToItemRecommenderFactory factory;\r\n    private ItemToItemRecommender itemToItemRecommender;\r\n\r\n    public ItemToItemRecommenderCreator(CustomerDao dao, ItemToItemRecommenderFactory factory) {\r\n        this.dao = dao;\r\n        this.factory = factory;\r\n    }\r\n\r\n    @Override\r\n    public ItemToItemRecommender getInstance() {\r\n        return itemToItemRecommender;\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        List<Customer> users = dao.list();\r\n        for (Customer user : users) {\r\n            factory.addUser(user);\r\n        }\r\n        this.itemToItemRecommender = factory.build();\r\n    }\r\n}\r\n',1221,118),(119,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.model.Customer;\r\n\r\n@Component\r\npublic class ItemToItemRecommenderFactory {\r\n\r\n    private Map<Item, List<Customer>> usersByItemBought;\r\n    private HashMap<Item, ItemToItemsAssociation> associations;\r\n    \r\n    public ItemToItemRecommenderFactory() {\r\n        usersByItemBought = new HashMap<Item, List<Customer>>();\r\n    }\r\n    \r\n    public void addUser(Customer user) {\r\n        List<Item> items = user.itemsBought();\r\n        for (Item item : items) {\r\n            store(item, user);\r\n        }\r\n    }\r\n\r\n    private void store(Item item, Customer user) {\r\n        List<Customer> users = usersByItemBought.get(item);\r\n        if (users == null) {\r\n            users = new ArrayList<Customer>();\r\n        }\r\n        users.add(user);\r\n        usersByItemBought.put(item, users);\r\n    }\r\n    \r\n    \r\n    public ItemToItemRecommender build() {\r\n        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n        Set<Item> items = usersByItemBought.keySet();\r\n        for (Item item : items) {\r\n            ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n            List<Customer> users = usersByItemBought.get(item);\r\n            for (Customer user : users) {\r\n                List<Item> boughtTogether = user.itemsBought();\r\n                System.out.println(item + \" -> \" +boughtTogether);\r\n                for (Item i : boughtTogether) {\r\n                    association.associate(i);\r\n                }\r\n            }\r\n            associations.put(item, association);\r\n        }\r\n        return new ItemToItemRecommender(associations);\r\n    }\r\n    \r\n    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n        return associations;\r\n    }\r\n\r\n}\r\n',1990,119),(120,'package br.ime.usp.commendans.model;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.ManyToMany;\r\n\r\n@Entity\r\npublic class Customer {\r\n    \r\n    @Id @GeneratedValue\r\n    private Long id;\r\n\r\n    @ManyToMany\r\n    private List<Item> items;\r\n    \r\n    @Deprecated\r\n    public Customer() {\r\n    }\r\n\r\n    public Customer(List<Item> items, Long id) {\r\n        this.items = items;\r\n        this.id = id;\r\n    }\r\n\r\n    public List<Item> itemsBought() {\r\n        return items;\r\n    }\r\n    \r\n    @Override\r\n    public String toString() {\r\n        return \"User \" + id;\r\n    }\r\n\r\n    public void add(Item item) {\r\n        items.add(item);\r\n    }\r\n    \r\n    public List<Item> getItems() {\r\n        return items;\r\n    }\r\n\r\n}\r\n',822,120),(121,'',0,121),(122,'package br.ime.usp.commendans.util;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.model.Customer;\r\n\r\npublic class DataImporter {\r\n    \r\n    private final Session session;\r\n    private static Logger logger = Logger.getLogger(DataImporter.class);\r\n\r\n    public DataImporter(Session session) {\r\n        this.session = session;\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        Session session = sf.openSession();\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n    }\r\n\r\n    public void importData(String file) {\r\n        HashMap<Long, Customer> users = new HashMap<Long, Customer>();\r\n        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n        String line = safeReadLine(reader);\r\n        \r\n        while (line != null) {\r\n            logger.debug(line);\r\n            List<String> row = Arrays.asList(line.split(\",\"));\r\n            long id = Long.parseLong(row.get(0));\r\n            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n            Customer user = users.get(id);\r\n            if (user == null) {\r\n                user = new Customer(new ArrayList<Item>(), id);\r\n            }\r\n            Item item = items.get(itemId);\r\n            if (item == null) {\r\n                item = new Item(itemId);\r\n            }\r\n            user.add(item);\r\n            line = safeReadLine(reader);\r\n            users.put(id, user);\r\n            items.put(itemId, item);\r\n        }\r\n        \r\n        logger.debug(\"persisting\");\r\n        session.getTransaction().begin();\r\n        for (Item item : items.values()) {\r\n            session.save(item);\r\n        }\r\n        \r\n        Collection<Customer> allUsers = users.values();\r\n        for (Customer user : allUsers) {\r\n            session.save(user);\r\n        }\r\n        session.getTransaction().commit();\r\n        logger.debug(\"finished persisting\");\r\n    }\r\n\r\n    private String safeReadLine(BufferedReader reader) {\r\n        try {\r\n            return reader.readLine();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"could not read file\", e);\r\n        }\r\n    }\r\n\r\n}\r\n',2874,122),(123,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n<!-- 	    <property name=\"hibernate.c3p0.acquire_increment\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.idle_test_period\">100</property> seconds  -->\r\n<!-- 		<property name=\"hibernate.c3p0.max_size\">15</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.min_size\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.timeout\">600</property> -->\r\n    \r\n        <property name=\"show_sql\">false</property>\r\n        <property name=\"format_sql\">false</property>\r\n        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1040,123),(124,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n	    <property name=\"c3p0.acquire_increment\">1</property> \r\n		<property name=\"c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n		<property name=\"c3p0.max_size\">15</property> \r\n		<property name=\"c3p0.min_size\">1</property> \r\n		<property name=\"c3p0.timeout\">600</property>\r\n    \r\n        <property name=\"connection.url\">jdbc:mysql://localhost/commendans</property>\r\n        <property name=\"connection.driver_class\">com.mysql.jdbc.Driver</property>\r\n        <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\r\n        <property name=\"connection.username\">root</property>\r\n        <property name=\"connection.password\"></property>\r\n        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n        <property name=\"show_sql\">false</property>\r\n        <property name=\"format_sql\">false</property>\r\n        <property name=\"hibernate.generate_statistics\">true</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1402,124),(125,'<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\r\n<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\r\n\r\n	<appender name=\"stdout\" class=\"org.apache.log4j.ConsoleAppender\">\r\n		<layout class=\"org.apache.log4j.PatternLayout\">\r\n			<param name=\"ConversionPattern\" value=\"%d{HH:mm:ss,SSS} %5p [%-20c{1}] %m%n\" />\r\n		</layout>\r\n	</appender>\r\n\r\n	<category name=\"org.hibernate\">\r\n		<priority value=\"INFO\" />\r\n		<appender-ref ref=\"stdout\" />\r\n	</category>\r\n	\r\n	<category name=\"br.ime.usp\">\r\n		<priority value=\"INFO\" />\r\n		<appender-ref ref=\"stdout\" />\r\n	</category>\r\n\r\n	<category name=\"br.com.caelum.vraptor\">\r\n		<priority value=\"INFO\" />\r\n		<appender-ref ref=\"stdout\" />\r\n	</category>\r\n	\r\n\r\n</log4j:configuration>\r\n',765,125),(126,'package br.ime.usp.commendans.dao;\r\n\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\nimport org.junit.Test;\r\n\r\npublic class UserDaoTest {\r\n\r\n    @Test\r\n    public void shouldFindUsers() {\r\n        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        Session session = sf.openSession();\r\n        CustomerDao userDao = new CustomerDao(session);\r\n        userDao.list();\r\n    }\r\n\r\n}\r\n',495,126),(127,'package br.ime.usp.commendans.factory;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.model.Customer;\r\n\r\npublic class ItemToItemRecommenderFactoryTest {\r\n\r\n    @Test\r\n    public void shouldBuildRecommender() {\r\n        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n        Item item1 = new Item(1l);\r\n        Item item2 = new Item(2l);\r\n        Item item3 = new Item(3l);\r\n        Item item4 = new Item(4l);\r\n        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l);\r\n        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l);\r\n        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l);\r\n        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l);\r\n        factory.addUser(user1);\r\n        factory.addUser(user2);\r\n        factory.addUser(user3);\r\n        factory.addUser(user4);\r\n        \r\n        ItemToItemRecommender recommender = factory.build();\r\n        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n        \r\n        List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1).getTuples();\r\n        ItemToItemsAssociation association = associations.get(item1);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(2, recommendedItems.size());\r\n        assertEquals(item3, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(item2, recommendedItems.get(1).getItem());\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendendItemsFor(item2).getTuples();\r\n        association = associations.get(item2);\r\n        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendendItemsFor(item3).getTuples();\r\n        association = associations.get(item3);\r\n        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(item1, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        association = associations.get(item4);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n    }\r\n\r\n}\r\n',4201,127),(128,'package br.ime.usp.commendans.controller;\r\n\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\n\r\n\r\n@Resource\r\npublic class IndexController {\r\n    \r\n    private final Result result;\r\n    private final Session session;\r\n\r\n    public IndexController(Result result, Session session) {\r\n        this.result = result;\r\n        this.session = session;\r\n    }\r\n    \r\n    @Get(\"/\")\r\n    public void index() {\r\n        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n    }\r\n    \r\n    @Get(\"/import/askjdhakjshdakjshd\")\r\n    public void importData() {\r\n        //DataImporter dataImporter = new DataImporter(session);\r\n        //dataImporter.importData(\"/orders.csv\");\r\n        result.use(Results.http()).body(\"<html><body>finished persisting</body></html>\");\r\n    }\r\n}\r\n',935,128),(129,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.infra.TupleJsonSerializer;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\nimport br.ime.usp.commendans.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Resource\r\npublic class ItemToItemController {\r\n    private final ItemToItemRecommender itemToItem;\r\n    private final ItemDao itemDao;\r\n    private final Result result;\r\n    private final TupleJsonSerializer serializer;\r\n\r\n    public ItemToItemController(ItemToItemRecommender itemToItem, ItemDao itemDao, Result result, TupleJsonSerializer serializer) {\r\n        this.itemToItem = itemToItem;\r\n        this.itemDao = itemDao;\r\n        this.result = result;\r\n        this.serializer = serializer;\r\n    }\r\n    \r\n    @Get(\"/recommend/item/{itemId}\")\r\n    public void recommend(Long itemId) {\r\n        Item item = itemDao.find(itemId);\r\n        ItemVector recommendend = itemToItem.recommendendItemsFor(item);\r\n        serializeResult(recommendend.getTuples());\r\n    }\r\n    \r\n    @Get(\"/recommend/items/\")\r\n    public void recommend(List<Long> itemsIds) {\r\n        List<Item> items = itemDao.find(itemsIds);\r\n        List<Tuple> recommendend = itemToItem.recommendendItemsFor(items).getTuples();\r\n        serializeResult(recommendend);\r\n    }\r\n\r\n    private void serializeResult(List<Tuple> recommendend) {\r\n        result.use(Results.http())\r\n            .addHeader(\"content-type\", \"application/json\")\r\n            .body(serializer.toJson(recommendend));\r\n    }\r\n}\r\n',1802,129),(130,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.annotation.PostConstruct;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\nimport br.ime.usp.commendans.model.Customer;\r\n\r\n@Component @ApplicationScoped\r\npublic class ItemToItemRecommenderCreator implements ComponentFactory<ItemToItemRecommender> {\r\n    private final CustomerDao dao;\r\n    private final ItemToItemRecommenderFactory factory;\r\n    private ItemToItemRecommender itemToItemRecommender;\r\n\r\n    public ItemToItemRecommenderCreator(CustomerDao dao, ItemToItemRecommenderFactory factory) {\r\n        this.dao = dao;\r\n        this.factory = factory;\r\n    }\r\n\r\n    @Override\r\n    public ItemToItemRecommender getInstance() {\r\n        return itemToItemRecommender;\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        List<Customer> users = dao.list();\r\n        for (Customer user : users) {\r\n            factory.addUser(user);\r\n        }\r\n        this.itemToItemRecommender = factory.build();\r\n    }\r\n}\r\n',1293,130),(131,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n<!-- 	    <property name=\"hibernate.c3p0.acquire_increment\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.idle_test_period\">100</property> seconds  -->\r\n<!-- 		<property name=\"hibernate.c3p0.max_size\">15</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.min_size\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.timeout\">600</property> -->\r\n    \r\n        <property name=\"show_sql\">false</property>\r\n        <property name=\"format_sql\">false</property>\r\n        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1035,131),(132,'package br.ime.usp.commendans.controller;\r\n\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.util.DataImporter;\r\n\r\n\r\n@Resource\r\npublic class IndexController {\r\n    \r\n    private final Result result;\r\n    private final Session session;\r\n\r\n    public IndexController(Result result, Session session) {\r\n        this.result = result;\r\n        this.session = session;\r\n    }\r\n    \r\n    @Get(\"/\")\r\n    public void index() {\r\n        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n    }\r\n    \r\n    @Get(\"/import/askjdhakjshdakjshd\")\r\n    public void importData() {\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n        result.use(Results.http()).body(\"<html><body>finished persisting</body></html>\");\r\n    }\r\n}\r\n',980,132),(133,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.annotation.PostConstruct;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\nimport br.ime.usp.commendans.model.Customer;\r\n\r\n@Component\r\npublic class ItemToItemRecommenderCreator implements ComponentFactory<ItemToItemRecommender> {\r\n    private final CustomerDao dao;\r\n    private final ItemToItemRecommenderFactory factory;\r\n    private ItemToItemRecommender itemToItemRecommender;\r\n\r\n    public ItemToItemRecommenderCreator(CustomerDao dao, ItemToItemRecommenderFactory factory) {\r\n        this.dao = dao;\r\n        this.factory = factory;\r\n    }\r\n\r\n    @Override\r\n    public ItemToItemRecommender getInstance() {\r\n        return itemToItemRecommender;\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        List<Customer> users = dao.list();\r\n        for (Customer user : users) {\r\n            factory.addUser(user);\r\n        }\r\n        this.itemToItemRecommender = factory.build();\r\n    }\r\n}\r\n',1221,133),(134,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Component @ApplicationScoped\r\npublic class ItemToItemRecommenderFactory {\r\n\r\n    private Map<Item, List<Customer>> usersByItemBought;\r\n    private HashMap<Item, ItemToItemsAssociation> associations;\r\n    \r\n    public ItemToItemRecommenderFactory() {\r\n        usersByItemBought = new HashMap<Item, List<Customer>>();\r\n    }\r\n    \r\n    public void addUser(Customer user) {\r\n        List<Item> items = user.itemsBought();\r\n        for (Item item : items) {\r\n            store(item, user);\r\n        }\r\n    }\r\n\r\n    private void store(Item item, Customer user) {\r\n        List<Customer> users = usersByItemBought.get(item);\r\n        if (users == null) {\r\n            users = new ArrayList<Customer>();\r\n        }\r\n        users.add(user);\r\n        usersByItemBought.put(item, users);\r\n    }\r\n    \r\n    \r\n    public ItemToItemRecommender build() {\r\n        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n        Set<Item> items = usersByItemBought.keySet();\r\n        for (Item item : items) {\r\n            ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n            List<Customer> users = usersByItemBought.get(item);\r\n            for (Customer user : users) {\r\n                List<Item> boughtTogether = user.itemsBought();\r\n                for (Item i : boughtTogether) {\r\n                    association.associate(i);\r\n                }\r\n            }\r\n            associations.put(item, association);\r\n        }\r\n        return new ItemToItemRecommender(associations);\r\n    }\r\n    \r\n    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n        return associations;\r\n    }\r\n\r\n}\r\n',1994,134),(135,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n<!-- 	    <property name=\"hibernate.c3p0.acquire_increment\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.idle_test_period\">100</property> seconds  -->\r\n<!-- 		<property name=\"hibernate.c3p0.max_size\">15</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.min_size\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.timeout\">600</property> -->\r\n    \r\n        <property name=\"show_sql\">false</property>\r\n        <property name=\"format_sql\">false</property>\r\n        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1040,135),(136,'package br.ime.usp.commendans.factory;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.model.Customer;\r\n\r\npublic class ItemToItemRecommenderFactoryTest {\r\n\r\n    @Test\r\n    public void shouldBuildRecommenderBookExample() {\r\n        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n        Item item1 = new Item(1l);\r\n        Item item2 = new Item(2l);\r\n        Item item3 = new Item(3l);\r\n        Item item4 = new Item(4l);\r\n        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l);\r\n        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l);\r\n        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l);\r\n        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l);\r\n        factory.addUser(user1);\r\n        factory.addUser(user2);\r\n        factory.addUser(user3);\r\n        factory.addUser(user4);\r\n        \r\n        ItemToItemRecommender recommender = factory.build();\r\n        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n        \r\n        List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1).getTuples();\r\n        ItemToItemsAssociation association = associations.get(item1);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(2, recommendedItems.size());\r\n        assertEquals(item3, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(item2, recommendedItems.get(1).getItem());\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendendItemsFor(item2).getTuples();\r\n        association = associations.get(item2);\r\n        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendendItemsFor(item3).getTuples();\r\n        association = associations.get(item3);\r\n        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(item1, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        association = associations.get(item4);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n    }\r\n\r\n}\r\n',4212,136),(137,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n<!-- 	    <property name=\"hibernate.c3p0.acquire_increment\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.idle_test_period\">100</property> seconds  -->\r\n<!-- 		<property name=\"hibernate.c3p0.max_size\">15</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.min_size\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.timeout\">600</property> -->\r\n    \r\n        <property name=\"show_sql\">false</property>\r\n        <property name=\"format_sql\">false</property>\r\n        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1035,137),(138,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Component @ApplicationScoped\r\npublic class ItemToItemRecommenderFactory {\r\n\r\n    private Map<Item, List<Customer>> customerByItemBought;\r\n    private HashMap<Item, ItemToItemsAssociation> associations;\r\n    \r\n    public ItemToItemRecommenderFactory() {\r\n        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n    }\r\n    \r\n    public void addUser(Customer user) {\r\n        for (Item item : user.itemsBought()) {\r\n            store(item, user);\r\n        }\r\n    }\r\n\r\n    private void store(Item item, Customer user) {\r\n        List<Customer> users = customerByItemBought.get(item);\r\n        if (users == null) {\r\n            users = new ArrayList<Customer>();\r\n        }\r\n        users.add(user);\r\n        customerByItemBought.put(item, users);\r\n    }\r\n    \r\n    \r\n    public ItemToItemRecommender build() {\r\n        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n        Set<Item> items = customerByItemBought.keySet();\r\n        for (Item item : items) {\r\n            associate(item);\r\n        }\r\n        return new ItemToItemRecommender(associations);\r\n    }\r\n\r\n    private void associate(Item item) {\r\n        ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n        List<Customer> customers = customerByItemBought.get(item);\r\n        for (Customer user : customers) {\r\n            List<Item> boughtTogether = user.itemsBought();\r\n            for (Item i : boughtTogether) {\r\n                association.associate(i);\r\n            }\r\n        }\r\n        associations.put(item, association);\r\n    }\r\n    \r\n    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n        return associations;\r\n    }\r\n\r\n}\r\n',2029,138),(139,'package br.ime.usp.commendans.model;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.ManyToMany;\r\n\r\n@Entity\r\npublic class Customer {\r\n    \r\n    @Id @GeneratedValue\r\n    private Long id;\r\n\r\n    @ManyToMany\r\n    private List<Item> items;\r\n    \r\n    @Deprecated\r\n    public Customer() {\r\n    }\r\n\r\n    public Customer(List<Item> items, Long id) {\r\n        this.items = items;\r\n        this.id = id;\r\n    }\r\n\r\n    public List<Item> itemsBought() {\r\n        return items;\r\n    }\r\n    \r\n    @Override\r\n    public String toString() {\r\n        return \"User \" + id;\r\n    }\r\n\r\n    public void add(Item item) {\r\n        items.add(item);\r\n    }\r\n    \r\n}\r\n',754,139),(140,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\n\r\nimport com.google.gson.ExclusionStrategy;\r\nimport com.google.gson.FieldAttributes;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.GsonBuilder;\r\n\r\n@Component\r\npublic class TupleJsonSerializer {\r\n    \r\n    private final Gson gson;\r\n\r\n    public TupleJsonSerializer() {\r\n        ExclusionStrategy strategy = new IncludeAllowedAttributes();\r\n        this.gson = new GsonBuilder().addSerializationExclusionStrategy(strategy).create();\r\n    }\r\n\r\n    public String toJson(Tuple tuple) {\r\n        return gson.toJson(tuple);\r\n    }\r\n    \r\n    public String toJson(List<Tuple> tuples) {\r\n        return gson.toJson(tuples);\r\n    }\r\n    \r\n    private class IncludeAllowedAttributes implements ExclusionStrategy {\r\n\r\n        private List<String> allowedAttributes = Arrays.asList(\"item\", \"id\", \"value\");\r\n\r\n        @Override\r\n        public boolean shouldSkipClass(Class<?> arg0) {\r\n            return false;\r\n        }\r\n\r\n        @Override\r\n        public boolean shouldSkipField(FieldAttributes attr) {\r\n            String name = attr.getName();\r\n            boolean allowedAttribute = allowedAttributes.contains(name); \r\n            return !allowedAttribute;\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n}\r\n',1384,140),(141,'package br.ime.usp.commendans.model;\r\n\r\npublic class Application {\r\n    private String name;\r\n    private String key;\r\n    \r\n    public Application(String name, String key) {\r\n        this.name = name;\r\n        this.key = key;\r\n    }\r\n\r\n}\r\n',240,141),(142,'package br.ime.usp.commendans.model;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.ManyToMany;\r\nimport javax.persistence.ManyToOne;\r\n\r\n@Entity\r\npublic class Customer {\r\n    \r\n    @Id @GeneratedValue\r\n    private Long id;\r\n\r\n    @ManyToMany\r\n    private List<Item> items;\r\n    \r\n    @ManyToOne\r\n    private Application app;\r\n    \r\n    @Deprecated\r\n    public Customer() {\r\n    }\r\n\r\n    public Customer(List<Item> items, Long id, Application app) {\r\n        this.items = items;\r\n        this.id = id;\r\n        this.app = app;\r\n    }\r\n\r\n    public List<Item> itemsBought() {\r\n        return items;\r\n    }\r\n    \r\n    @Override\r\n    public String toString() {\r\n        return \"User \" + id;\r\n    }\r\n\r\n    public void add(Item item) {\r\n        items.add(item);\r\n    }\r\n    \r\n}\r\n',885,142),(143,'package br.ime.usp.commendans.model;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.ManyToOne;\r\n\r\n@Entity\r\npublic class Item {\r\n    @Id\r\n    private Long id;\r\n    \r\n    @ManyToOne\r\n    private Application app;\r\n\r\n    @Deprecated\r\n    protected Item() {\r\n    }\r\n    \r\n    public Item(Long id, Application app) {\r\n        this.id = id;\r\n        this.app = app;\r\n    }\r\n    \r\n    @Override\r\n    public int hashCode() {\r\n        return id.hashCode();\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (obj instanceof Item) {\r\n            Item other = (Item) obj;\r\n            return other.getId().equals(this.id);\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    public Long getId() {\r\n        return id;\r\n    }\r\n    \r\n    @Override\r\n    public String toString() {\r\n        return \"Item \" + id;\r\n    }\r\n}\r\n',877,143),(144,'package br.ime.usp.commendans.util;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class DataImporter {\r\n    \r\n    private final Session session;\r\n    private static Logger logger = Logger.getLogger(DataImporter.class);\r\n\r\n    public DataImporter(Session session) {\r\n        this.session = session;\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        Session session = sf.openSession();\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n    }\r\n\r\n    public void importData(String file) {\r\n        HashMap<Long, Customer> users = new HashMap<Long, Customer>();\r\n        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n        String line = safeReadLine(reader);\r\n        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n        \r\n        while (line != null) {\r\n            logger.debug(line);\r\n            List<String> row = Arrays.asList(line.split(\",\"));\r\n            long id = Long.parseLong(row.get(0));\r\n            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n            Customer user = users.get(id);\r\n            if (user == null) {\r\n                user = new Customer(new ArrayList<Item>(), id, cdc);\r\n            }\r\n            Item item = items.get(itemId);\r\n            if (item == null) {\r\n                item = new Item(itemId, cdc);\r\n            }\r\n            user.add(item);\r\n            line = safeReadLine(reader);\r\n            users.put(id, user);\r\n            items.put(itemId, item);\r\n        }\r\n        \r\n        logger.debug(\"persisting\");\r\n        session.getTransaction().begin();\r\n        for (Item item : items.values()) {\r\n            session.save(item);\r\n        }\r\n        \r\n        Collection<Customer> allUsers = users.values();\r\n        for (Customer user : allUsers) {\r\n            session.save(user);\r\n        }\r\n        session.getTransaction().commit();\r\n        logger.debug(\"finished persisting\");\r\n    }\r\n\r\n    private String safeReadLine(BufferedReader reader) {\r\n        try {\r\n            return reader.readLine();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"could not read file\", e);\r\n        }\r\n    }\r\n\r\n}\r\n',3002,144),(145,'package br.ime.usp.commendans.factory;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommender;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class ItemToItemRecommenderFactoryTest {\r\n\r\n    @Test\r\n    public void shouldBuildRecommenderBookExample() {\r\n        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n        Item item1 = new Item(1l, cdc);\r\n        Item item2 = new Item(2l, cdc);\r\n        Item item3 = new Item(3l, cdc);\r\n        Item item4 = new Item(4l, cdc);\r\n        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l, cdc);\r\n        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l, cdc);\r\n        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l, cdc);\r\n        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l, cdc);\r\n        factory.addUser(user1);\r\n        factory.addUser(user2);\r\n        factory.addUser(user3);\r\n        factory.addUser(user4);\r\n        \r\n        ItemToItemRecommender recommender = factory.build();\r\n        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n        \r\n        List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1).getTuples();\r\n        ItemToItemsAssociation association = associations.get(item1);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(2, recommendedItems.size());\r\n        assertEquals(item3, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(item2, recommendedItems.get(1).getItem());\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendendItemsFor(item2).getTuples();\r\n        association = associations.get(item2);\r\n        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendendItemsFor(item3).getTuples();\r\n        association = associations.get(item3);\r\n        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(item1, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        association = associations.get(item4);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n    }\r\n\r\n}\r\n',4369,145),(146,'package br.ime.usp.commendans.infra;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class TupleJsonSerializerTest {\r\n\r\n    @Test\r\n    public void shouldSerializeATuple() {\r\n        TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n        String json = serializer.toJson(new Tuple(new Item(1l, cdc), 10.0));\r\n        assertEquals(\"{\\\"item\\\":{\\\"id\\\":1},\\\"value\\\":10.0}\", json);\r\n    }\r\n    \r\n    @Test\r\n    public void shouldSerializeATupleList() {\r\n        TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n        String json = serializer.toJson(Arrays.asList(new Tuple(new Item(1l, cdc), 10.0)));\r\n        assertEquals(\"[{\\\"item\\\":{\\\"id\\\":1},\\\"value\\\":10.0}]\", json);\r\n    }\r\n\r\n}\r\n',1049,146),(147,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class ItemVectorTest {\r\n\r\n    @Test\r\n    public void test() {\r\n        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n        Item item1 = new Item(1l, cdc);\r\n        Item item2 = new Item(2l, cdc);\r\n        Item item3 = new Item(3l, cdc);\r\n        Item item4 = new Item(4l, cdc);\r\n        List<Tuple> tuples = asList(new Tuple(item1, 11.0), new Tuple(item2, 8.0), new Tuple(item3, 2.0));\r\n        ItemVector itemVector1 = new ItemVector(new HashSet<Tuple>(tuples));\r\n        tuples = asList(new Tuple(item4, 10.0), new Tuple(item3, 7.0));\r\n        ItemVector itemVector2 = new ItemVector(new HashSet<Tuple>(tuples));\r\n        \r\n        ItemVector merge = itemVector1.merge(itemVector2);\r\n        List<Tuple> expected = asList(new Tuple(item1, 11.0), new Tuple(item4, 10.0), new Tuple(item3, 9.0), new Tuple(item2, 8.0));\r\n        assertEquals(expected, merge.getTuples());\r\n        \r\n    }\r\n\r\n    private List<Tuple> asList(Tuple ... tuples) {\r\n        ArrayList<Tuple> tuplesList = new ArrayList<Tuple>();\r\n        for (int i = 0; i < tuples.length; i++) {\r\n            tuplesList.add(tuples[i]);\r\n        }\r\n        return tuplesList;\r\n    }\r\n\r\n}\r\n',1466,147),(148,'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<classpath>\r\n	<classpathentry kind=\"src\" path=\"src/main/java\"/>\r\n	<classpathentry kind=\"src\" path=\"src/main/resources\"/>\r\n	<classpathentry kind=\"src\" path=\"src/test/java\"/>\r\n	<classpathentry kind=\"src\" path=\"src/test/resources\"/>\r\n	<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/java\">\r\n		<attributes>\r\n			<attribute name=\"owner.project.facets\" value=\"java\"/>\r\n		</attributes>\r\n	</classpathentry>\r\n	<classpathentry kind=\"con\" path=\"org.eclipse.jst.server.core.container/org.eclipse.jst.server.tomcat.runtimeTarget/Apache Tomcat v7.0\">\r\n		<attributes>\r\n			<attribute name=\"owner.project.facets\" value=\"jst.web\"/>\r\n		</attributes>\r\n	</classpathentry>\r\n	<classpathentry kind=\"con\" path=\"org.eclipse.jst.j2ee.internal.web.container\"/>\r\n	<classpathentry kind=\"con\" path=\"org.eclipse.jst.j2ee.internal.module.container\"/>\r\n	<classpathentry kind=\"output\" path=\"build/classes\"/>\r\n</classpath>\r\n',1010,148),(149,'<?xml version=\"1.0\" encoding=\"UTF-8\"?><project-modules id=\"moduleCoreId\" project-version=\"1.5.0\">\r\n    <wb-module deploy-name=\"commendans\">\r\n        <wb-resource deploy-path=\"/\" source-path=\"/src/main/webapp\" tag=\"defaultRootSource\"/>\r\n        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/java\"/>\r\n        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/main/resources\"/>\r\n        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/test/java\"/>\r\n        <wb-resource deploy-path=\"/WEB-INF/classes\" source-path=\"/src/test/resources\"/>\r\n        <property name=\"java-output-path\" value=\"/commendans/build/classes\"/>\r\n        <property name=\"context-root\" value=\"commendans\"/>\r\n    </wb-module>\r\n</project-modules>\r\n',759,149),(150,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.infra.TupleJsonSerializer;\r\nimport br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\nimport br.ime.usp.commendans.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Resource\r\npublic class ItemToItemController {\r\n    private final SingleAppRecommender itemToItem;\r\n    private final ItemDao itemDao;\r\n    private final Result result;\r\n    private final TupleJsonSerializer serializer;\r\n\r\n    public ItemToItemController(SingleAppRecommender itemToItem, ItemDao itemDao, Result result, TupleJsonSerializer serializer) {\r\n        this.itemToItem = itemToItem;\r\n        this.itemDao = itemDao;\r\n        this.result = result;\r\n        this.serializer = serializer;\r\n    }\r\n    \r\n    @Get(\"/recommend/item/{itemId}\")\r\n    public void recommend(Long itemId) {\r\n        Item item = itemDao.find(itemId);\r\n        ItemVector recommendend = itemToItem.recommendendItemsFor(item);\r\n        serializeResult(recommendend.getTuples());\r\n    }\r\n    \r\n    @Get(\"/recommend/items/\")\r\n    public void recommend(List<Long> itemsIds) {\r\n        List<Item> items = itemDao.find(itemsIds);\r\n        List<Tuple> recommendend = itemToItem.recommendendItemsFor(items).getTuples();\r\n        serializeResult(recommendend);\r\n    }\r\n\r\n    private void serializeResult(List<Tuple> recommendend) {\r\n        result.use(Results.http())\r\n            .addHeader(\"content-type\", \"application/json\")\r\n            .body(serializer.toJson(recommendend));\r\n    }\r\n}\r\n',1799,150),(151,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Query;\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\n\r\n@Component\r\npublic class CustomerDao {\r\n    private final Session session;\r\n\r\n    public CustomerDao(Session session) {\r\n        this.session = session;\r\n    }\r\n    \r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Customer> list() {\r\n        Query query = session.createQuery(\"select customer from Customer customer join fetch customer.items\");\r\n        return session.createCriteria(Customer.class).list();\r\n    }\r\n\r\n    public List<Customer> findCustomersOf(Application app) {\r\n        Query query = session.createQuery(\"select customer from Customer customer \" +\r\n        		\"join fetch customer.items \" +\r\n        		\"where customer.app.name like :appName\");\r\n        query.setParameter(\"appName\", app.getName());\r\n        return query.list();\r\n    }\r\n}\r\n',1030,151),(152,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.annotation.PostConstruct;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\nimport br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.recommender.GeneralRecommender;\r\n\r\n@Component\r\npublic class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n    private final CustomerDao dao;\r\n    private final ItemToItemRecommenderFactory factory;\r\n    private SingleAppRecommender itemToItemRecommender;\r\n    private GeneralRecommender recommender;\r\n\r\n    public RecommenderCreator(CustomerDao dao, ItemToItemRecommenderFactory factory) {\r\n        this.dao = dao;\r\n        this.factory = factory;\r\n    }\r\n\r\n    @Override\r\n    public GeneralRecommender getInstance() {\r\n        return recommender;\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        List<Customer> users = dao.list();\r\n        this.itemToItemRecommender = buildSingleAppRecommender(users);\r\n    }\r\n\r\n    private SingleAppRecommender buildSingleAppRecommender(List<Customer> users) {\r\n        for (Customer user : users) {\r\n            factory.addUser(user);\r\n        }\r\n        return factory.build();\r\n    }\r\n}\r\n',1433,152),(153,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Component @ApplicationScoped\r\npublic class ItemToItemRecommenderFactory {\r\n\r\n    private Map<Item, List<Customer>> customerByItemBought;\r\n    private HashMap<Item, ItemToItemsAssociation> associations;\r\n    \r\n    public ItemToItemRecommenderFactory() {\r\n        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n    }\r\n    \r\n    public void addUser(Customer user) {\r\n        for (Item item : user.itemsBought()) {\r\n            store(item, user);\r\n        }\r\n    }\r\n\r\n    private void store(Item item, Customer user) {\r\n        List<Customer> users = customerByItemBought.get(item);\r\n        if (users == null) {\r\n            users = new ArrayList<Customer>();\r\n        }\r\n        users.add(user);\r\n        customerByItemBought.put(item, users);\r\n    }\r\n    \r\n    \r\n    public SingleAppRecommender build() {\r\n        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n        Set<Item> items = customerByItemBought.keySet();\r\n        for (Item item : items) {\r\n            associate(item);\r\n        }\r\n        return new SingleAppRecommender(associations);\r\n    }\r\n\r\n    private void associate(Item item) {\r\n        ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n        List<Customer> customers = customerByItemBought.get(item);\r\n        for (Customer user : customers) {\r\n            List<Item> boughtTogether = user.itemsBought();\r\n            for (Item i : boughtTogether) {\r\n                association.associate(i);\r\n            }\r\n        }\r\n        associations.put(item, association);\r\n    }\r\n    \r\n    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n        return associations;\r\n    }\r\n\r\n}\r\n',2027,153),(154,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.ime.usp.commendans.Recommender;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class SingleAppRecommender implements Recommender {\r\n\r\n    private final Map<Item, ItemVector> associations;\r\n\r\n    public SingleAppRecommender(\r\n            HashMap<Item, ItemToItemsAssociation> associations) {\r\n        this.associations = parse(associations);\r\n    }\r\n\r\n    private Map<Item, ItemVector> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n        HashMap<Item, ItemVector> map = new HashMap<Item, ItemVector>();\r\n        Set<Item> items = associations.keySet();\r\n        for (Item item : items) {\r\n            ItemToItemsAssociation association = associations.get(item);\r\n            List<Tuple> tuples = association.toTupleList();\r\n            map.put(item, new ItemVector(tuples));\r\n        }\r\n        return map;\r\n    }\r\n\r\n    @Override\r\n    public ItemVector recommendendItemsFor(Item item) {\r\n        return associations.get(item);\r\n    }\r\n\r\n    public ItemVector recommendendItemsFor(List<Item> items) {\r\n        ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n        for (Item item : items) {\r\n            ItemVector other = recommendendItemsFor(item);\r\n            vector = vector.merge(other);\r\n        }\r\n        return vector;\r\n    }\r\n\r\n}\r\n',1460,154),(155,'package br.ime.usp.commendans.model;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\n\r\n@Entity\r\npublic class Application {\r\n    \r\n    @Id @GeneratedValue\r\n    private Long id;\r\n    \r\n    private String name;\r\n    \r\n    private String accessKey;\r\n\r\n    @Deprecated\r\n    protected Application() {\r\n    }\r\n    \r\n    public Application(String name, String accessKey) {\r\n        this.name = name;\r\n        this.accessKey = accessKey;\r\n    }\r\n    \r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n}\r\n',569,155),(156,'package br.ime.usp.commendans.model;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.ManyToMany;\r\nimport javax.persistence.ManyToOne;\r\n\r\n@Entity\r\npublic class Customer {\r\n    \r\n    @Id @GeneratedValue\r\n    private Long id;\r\n    \r\n    private Long appId;\r\n\r\n    @ManyToMany()\r\n    private List<Item> items;\r\n    \r\n    @ManyToOne\r\n    private Application app;\r\n    \r\n    @Deprecated\r\n    public Customer() {\r\n    }\r\n\r\n    public Customer(List<Item> items, Long appId, Application app) {\r\n        this.items = items;\r\n        this.appId = appId;\r\n        this.app = app;\r\n    }\r\n\r\n    public List<Item> itemsBought() {\r\n        return items;\r\n    }\r\n    \r\n    @Override\r\n    public String toString() {\r\n        return \"User \" + appId + \" from \" + app;\r\n    }\r\n\r\n    public void add(Item item) {\r\n        items.add(item);\r\n    }\r\n    \r\n    public Application getApp() {\r\n        return app;\r\n    }\r\n    \r\n}\r\n',1016,156),(157,'package br.ime.usp.commendans.recommender;\r\n\r\npublic class GeneralRecommender {\r\n\r\n}\r\n',86,157),(158,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n	    <property name=\"c3p0.acquire_increment\">1</property> \r\n		<property name=\"c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n		<property name=\"c3p0.max_size\">15</property> \r\n		<property name=\"c3p0.min_size\">1</property> \r\n		<property name=\"c3p0.timeout\">600</property>\r\n    \r\n        <property name=\"connection.url\">jdbc:mysql://localhost/commendans</property>\r\n        <property name=\"connection.driver_class\">com.mysql.jdbc.Driver</property>\r\n        <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\r\n        <property name=\"connection.username\">root</property>\r\n        <property name=\"connection.password\"></property>\r\n        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n        <property name=\"show_sql\">false</property>\r\n        <property name=\"format_sql\">false</property>\r\n        <property name=\"hibernate.generate_statistics\">true</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1471,158),(159,'<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\r\n<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\r\n\r\n	<appender name=\"stdout\" class=\"org.apache.log4j.ConsoleAppender\">\r\n		<layout class=\"org.apache.log4j.PatternLayout\">\r\n			<param name=\"ConversionPattern\" value=\"%d{HH:mm:ss,SSS} %5p [%-20c{1}] %m%n\" />\r\n		</layout>\r\n	</appender>\r\n\r\n	<category name=\"org.hibernate\">\r\n		<priority value=\"DEBUG\" />\r\n		<appender-ref ref=\"stdout\" />\r\n	</category>\r\n	\r\n	<category name=\"br.ime.usp\">\r\n		<priority value=\"INFO\" />\r\n		<appender-ref ref=\"stdout\" />\r\n	</category>\r\n\r\n	<category name=\"br.com.caelum.vraptor\">\r\n		<priority value=\"INFO\" />\r\n		<appender-ref ref=\"stdout\" />\r\n	</category>\r\n	\r\n\r\n</log4j:configuration>\r\n',766,159),(160,'package br.ime.usp.commendans.dao;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\nimport org.junit.After;\r\nimport org.junit.Before;\r\nimport org.junit.BeforeClass;\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class CustomerDaoTest {\r\n\r\n    private static Session session;\r\n    private static CustomerDao userDao;\r\n    private static Application app;\r\n\r\n    @BeforeClass\r\n    public static void setUpClass() {\r\n        SessionFactory sf = new Configuration().configure(\r\n                \"/hibernate.test.cfg.xml\").buildSessionFactory();\r\n        session = sf.openSession();\r\n        userDao = new CustomerDao(session);\r\n        app = new Application(\"cdc\", \"123\");\r\n        session.save(app);\r\n    }\r\n    \r\n    @Before\r\n    public void setUp() {\r\n        session.beginTransaction();\r\n    }\r\n    \r\n    @After\r\n    public void tearDown() {\r\n        session.getTransaction().rollback();\r\n    }\r\n\r\n    @Test\r\n    public void shouldFindUsers() {\r\n        List<Item> items = Arrays.asList();\r\n        session.save(new Customer(items, 1l, app));\r\n        session.save(new Customer(items, 2l, app));\r\n        session.save(new Customer(items, 3l, app));\r\n        List<Customer> users = userDao.list();\r\n        assertEquals(3, users.size());\r\n    }\r\n\r\n    @Test\r\n    public void shouldFindUsersOfSpecificApp() throws Exception {\r\n        Item item = new Item(1l, app);\r\n        List<Item> items = Arrays.asList(item);\r\n        session.save(new Customer(items, 1l, app));\r\n        session.save(new Customer(items, 2l, app));\r\n        session.save(new Customer(items, 3l, app));\r\n        Application otherApp = new Application(\"gnarus\", \"123\");\r\n        item = new Item(2l, otherApp);\r\n        items = Arrays.asList(item);\r\n        session.save(otherApp);\r\n        session.save(item);\r\n        session.save(new Customer(items, 1l, otherApp));\r\n        session.save(new Customer(items, 2l, otherApp));\r\n        session.save(new Customer(items, 3l, otherApp));\r\n\r\n        List<Customer> customers = userDao.findCustomersOf(app);\r\n        assertEquals(3, customers.size());\r\n        assertEquals(\"cdc\", customers.get(0).getApp().getName());\r\n        assertEquals(\"cdc\", customers.get(1).getApp().getName());\r\n        assertEquals(\"cdc\", customers.get(2).getApp().getName());\r\n\r\n    }\r\n\r\n}\r\n',2568,160),(161,'package br.ime.usp.commendans.factory;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class ItemToItemRecommenderFactoryTest {\r\n\r\n    @Test\r\n    public void shouldBuildRecommenderBookExample() {\r\n        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n        Item item1 = new Item(1l, cdc);\r\n        Item item2 = new Item(2l, cdc);\r\n        Item item3 = new Item(3l, cdc);\r\n        Item item4 = new Item(4l, cdc);\r\n        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l, cdc);\r\n        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l, cdc);\r\n        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l, cdc);\r\n        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l, cdc);\r\n        factory.addUser(user1);\r\n        factory.addUser(user2);\r\n        factory.addUser(user3);\r\n        factory.addUser(user4);\r\n        \r\n        SingleAppRecommender recommender = factory.build();\r\n        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n        \r\n        List<Tuple> recommendedItems = recommender.recommendendItemsFor(item1).getTuples();\r\n        ItemToItemsAssociation association = associations.get(item1);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(2, recommendedItems.size());\r\n        assertEquals(item3, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(item2, recommendedItems.get(1).getItem());\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendendItemsFor(item2).getTuples();\r\n        association = associations.get(item2);\r\n        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendendItemsFor(item3).getTuples();\r\n        association = associations.get(item3);\r\n        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(item1, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        association = associations.get(item4);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n    }\r\n\r\n}\r\n',4367,161),(162,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n	    <property name=\"c3p0.acquire_increment\">1</property> \r\n		<property name=\"c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n		<property name=\"c3p0.max_size\">15</property> \r\n		<property name=\"c3p0.min_size\">1</property> \r\n		<property name=\"c3p0.timeout\">600</property>\r\n    \r\n        <property name=\"connection.url\">jdbc:mysql://localhost/commendans_test</property>\r\n        <property name=\"connection.driver_class\">com.mysql.jdbc.Driver</property>\r\n        <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\r\n        <property name=\"connection.username\">root</property>\r\n        <property name=\"connection.password\"></property>\r\n        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n        <property name=\"show_sql\">true</property>\r\n        <property name=\"format_sql\">false</property>\r\n        <property name=\"hibernate.generate_statistics\">true</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1475,162),(163,'package br.ime.usp.commendans;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic interface Recommender {\r\n    public ItemVector recommendedItemsFor(Item item);\r\n}\r\n',221,163),(164,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.infra.TupleJsonSerializer;\r\nimport br.ime.usp.commendans.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.GeneralRecommender;\r\n\r\n@Resource\r\npublic class ItemToItemController {\r\n    private final ItemDao itemDao;\r\n    private final Result result;\r\n    private final TupleJsonSerializer serializer;\r\n    private final GeneralRecommender recommender;\r\n\r\n    public ItemToItemController(GeneralRecommender recommender, \r\n            ItemDao itemDao, Result result, \r\n            TupleJsonSerializer serializer) {\r\n        this.recommender = recommender;\r\n        this.itemDao = itemDao;\r\n        this.result = result;\r\n        this.serializer = serializer;\r\n    }\r\n    \r\n    @Get(\"/recommend/item/{itemId}\")\r\n    public void recommend(Long itemId, String accessKey) {\r\n        Item item = itemDao.find(itemId);\r\n        ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n        serializeResult(recommended.getTuples());\r\n    }\r\n    \r\n    @Get(\"/recommend/items/\")\r\n    public void recommend(List<Long> itemsIds, String accessKey) {\r\n        List<Item> items = itemDao.find(itemsIds);\r\n        ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n        serializeResult(recommended.getTuples());\r\n    }\r\n\r\n    private void serializeResult(List<Tuple> recommendend) {\r\n        result.use(Results.http())\r\n            .addHeader(\"content-type\", \"application/json\")\r\n            .body(serializer.toJson(recommendend));\r\n    }\r\n}\r\n',1879,164),(165,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.Application;\r\n\r\n@Component\r\npublic class ApplicationDao {\r\n    \r\n    private final Session session;\r\n\r\n    public ApplicationDao(Session session) {\r\n        this.session = session;\r\n    }\r\n    \r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Application> list() {\r\n        return session.createCriteria(Application.class).list();\r\n    }\r\n\r\n\r\n}\r\n',527,165),(166,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Query;\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\n\r\n@Component\r\npublic class CustomerDao {\r\n    private final Session session;\r\n\r\n    public CustomerDao(Session session) {\r\n        this.session = session;\r\n    }\r\n    \r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Customer> list() {\r\n        return session.createCriteria(Customer.class).list();\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Customer> findCustomersOf(Application app) {\r\n        Query query = session.createQuery(\"select customer from Customer customer \" +\r\n        		\"join fetch customer.items \" +\r\n        		\"where customer.app.name like :appName\");\r\n        query.setParameter(\"appName\", app.getName());\r\n        return query.list();\r\n    }\r\n}\r\n',954,166),(167,'',0,167),(168,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.annotation.PostConstruct;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\nimport br.ime.usp.commendans.dao.ApplicationDao;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\nimport br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.recommender.GeneralRecommender;\r\n\r\n@Component\r\npublic class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n    private final CustomerDao customerDao;\r\n    private final ItemToItemRecommenderFactory factory;\r\n    private GeneralRecommender recommender;\r\n    private final ApplicationDao appDao;\r\n\r\n    public RecommenderCreator(CustomerDao dao, ApplicationDao appDao, ItemToItemRecommenderFactory factory) {\r\n        this.customerDao = dao;\r\n        this.appDao = appDao;\r\n        this.factory = factory;\r\n    }\r\n\r\n    @Override\r\n    public GeneralRecommender getInstance() {\r\n        return recommender;\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        List<Application> apps = appDao.list();\r\n        for (Application app : apps) {\r\n            List<Customer> customers = customerDao.findCustomersOf(app);\r\n            SingleAppRecommender recommender = buildSingleAppRecommender(customers);\r\n            app.use(recommender);\r\n        }\r\n        this.recommender = new GeneralRecommender(apps);\r\n    }\r\n\r\n    private SingleAppRecommender buildSingleAppRecommender(List<Customer> users) {\r\n        factory.clean();\r\n        for (Customer user : users) {\r\n            factory.addUser(user);\r\n        }\r\n        return factory.build();\r\n    }\r\n}\r\n',1850,168),(169,'',0,169),(170,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Component @ApplicationScoped\r\npublic class ItemToItemRecommenderFactory {\r\n\r\n    private Map<Item, List<Customer>> customerByItemBought;\r\n    private HashMap<Item, ItemToItemsAssociation> associations;\r\n    \r\n    public ItemToItemRecommenderFactory() {\r\n        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n    }\r\n    \r\n    public void addUser(Customer user) {\r\n        for (Item item : user.itemsBought()) {\r\n            store(item, user);\r\n        }\r\n    }\r\n\r\n    private void store(Item item, Customer user) {\r\n        List<Customer> users = customerByItemBought.get(item);\r\n        if (users == null) {\r\n            users = new ArrayList<Customer>();\r\n        }\r\n        users.add(user);\r\n        customerByItemBought.put(item, users);\r\n    }\r\n    \r\n    \r\n    public SingleAppRecommender build() {\r\n        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n        Set<Item> items = customerByItemBought.keySet();\r\n        for (Item item : items) {\r\n            associate(item);\r\n        }\r\n        return new SingleAppRecommender(associations);\r\n    }\r\n\r\n    private void associate(Item item) {\r\n        ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n        List<Customer> customers = customerByItemBought.get(item);\r\n        for (Customer user : customers) {\r\n            List<Item> boughtTogether = user.itemsBought();\r\n            for (Item i : boughtTogether) {\r\n                association.associate(i);\r\n            }\r\n        }\r\n        associations.put(item, association);\r\n    }\r\n    \r\n    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n        return associations;\r\n    }\r\n\r\n    public void clean() {\r\n        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n    }\r\n\r\n}\r\n',2132,170),(171,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.ime.usp.commendans.Recommender;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class SingleAppRecommender implements Recommender {\r\n\r\n    private final Map<Item, ItemVector> associations;\r\n\r\n    public SingleAppRecommender(\r\n            HashMap<Item, ItemToItemsAssociation> associations) {\r\n        this.associations = parse(associations);\r\n    }\r\n\r\n    private Map<Item, ItemVector> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n        HashMap<Item, ItemVector> map = new HashMap<Item, ItemVector>();\r\n        Set<Item> items = associations.keySet();\r\n        for (Item item : items) {\r\n            ItemToItemsAssociation association = associations.get(item);\r\n            List<Tuple> tuples = association.toTupleList();\r\n            map.put(item, new ItemVector(tuples));\r\n        }\r\n        return map;\r\n    }\r\n\r\n    @Override\r\n    public ItemVector recommendedItemsFor(Item item) {\r\n        return associations.get(item);\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(List<Item> items) {\r\n        ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n        for (Item item : items) {\r\n            ItemVector other = recommendedItemsFor(item);\r\n            vector = vector.merge(other);\r\n        }\r\n        return vector;\r\n    }\r\n\r\n}\r\n',1457,171),(172,'package br.ime.usp.commendans.model;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.Transient;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n\r\n@Entity\r\npublic class Application {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n    private String accessKey;\r\n\r\n    @Transient\r\n    private SingleAppRecommender recommender;\r\n\r\n    @Deprecated\r\n    protected Application() {\r\n    }\r\n\r\n    public Application(String name, String accessKey) {\r\n        this.name = name;\r\n        this.accessKey = accessKey;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void use(SingleAppRecommender recommender) {\r\n        this.recommender = recommender;\r\n    }\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(Item item) {\r\n        return recommender.recommendedItemsFor(item);\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(List<Item> items) {\r\n        return recommender.recommendedItemsFor(items);\r\n    }\r\n\r\n    public String getAccessKey() {\r\n        return accessKey;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Application [id=\" + id + \", name=\" + name + \", accessKey=\"\r\n                + accessKey + \"]\";\r\n    }\r\n}\r\n',1449,172),(173,'package br.ime.usp.commendans.recommender;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class GeneralRecommender {\r\n\r\n    private Map<String, Application> appsMap;\r\n\r\n    public GeneralRecommender(List<Application> apps) {\r\n        appsMap = new HashMap<String, Application>();\r\n        for (Application app : apps) {\r\n            appsMap.put(app.getAccessKey(), app);\r\n        }\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(Item item, String accessKey) {\r\n        Application application = appsMap.get(accessKey);\r\n        return application.recommendedItemsFor(item);\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(List<Item> items, String accessKey) {\r\n        Application application = appsMap.get(accessKey);\r\n        return application.recommendedItemsFor(items);\r\n    }\r\n\r\n}\r\n',982,173),(174,'package br.ime.usp.commendans.util;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class DataImporter {\r\n    \r\n    private final Session session;\r\n    private static Logger logger = Logger.getLogger(DataImporter.class);\r\n\r\n    public DataImporter(Session session) {\r\n        this.session = session;\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        Session session = sf.openSession();\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n    }\r\n\r\n    public void importData(String file) {\r\n        HashMap<Long, Customer> users = new HashMap<Long, Customer>();\r\n        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n        String line = safeReadLine(reader);\r\n        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n        session.save(cdc);\r\n        \r\n        while (line != null) {\r\n            logger.debug(line);\r\n            List<String> row = Arrays.asList(line.split(\",\"));\r\n            long id = Long.parseLong(row.get(0));\r\n            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n            Customer user = users.get(id);\r\n            if (user == null) {\r\n                user = new Customer(new ArrayList<Item>(), id, cdc);\r\n            }\r\n            Item item = items.get(itemId);\r\n            if (item == null) {\r\n                item = new Item(itemId, cdc);\r\n            }\r\n            user.add(item);\r\n            line = safeReadLine(reader);\r\n            users.put(id, user);\r\n            items.put(itemId, item);\r\n        }\r\n        \r\n        logger.debug(\"persisting\");\r\n        session.getTransaction().begin();\r\n        for (Item item : items.values()) {\r\n            session.save(item);\r\n        }\r\n        \r\n        Collection<Customer> allUsers = users.values();\r\n        for (Customer user : allUsers) {\r\n            session.save(user);\r\n        }\r\n        session.getTransaction().commit();\r\n        logger.debug(\"finished persisting\");\r\n    }\r\n\r\n    private String safeReadLine(BufferedReader reader) {\r\n        try {\r\n            return reader.readLine();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"could not read file\", e);\r\n        }\r\n    }\r\n\r\n}\r\n',3030,174),(175,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n	    <property name=\"c3p0.acquire_increment\">1</property> \r\n		<property name=\"c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n		<property name=\"c3p0.max_size\">15</property> \r\n		<property name=\"c3p0.min_size\">1</property> \r\n		<property name=\"c3p0.timeout\">600</property>\r\n    \r\n        <property name=\"connection.url\">jdbc:mysql://localhost/commendans</property>\r\n        <property name=\"connection.driver_class\">com.mysql.jdbc.Driver</property>\r\n        <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\r\n        <property name=\"connection.username\">root</property>\r\n        <property name=\"connection.password\"></property>\r\n        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n        <property name=\"show_sql\">true</property>\r\n        <property name=\"format_sql\">false</property>\r\n        <property name=\"hibernate.generate_statistics\">true</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1470,175),(176,'<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\r\n<!--\r\n  Licensed to the Apache Software Foundation (ASF) under one or more\r\n  contributor license agreements.  See the NOTICE file distributed with\r\n  this work for additional information regarding copyright ownership.\r\n  The ASF licenses this file to You under the Apache License, Version 2.0\r\n  (the \"License\"); you may not use this file except in compliance with\r\n  the License.  You may obtain a copy of the License at\r\n\r\n      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n-->\r\n<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\r\n                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\n  version=\"3.0\">\r\n\r\n\r\n\r\n\r\n    <session-config>\r\n        <session-timeout>30</session-timeout>\r\n    </session-config>\r\n\r\n    \r\n    <display-name>commendans</display-name>\r\n	\r\n	<context-param>\r\n        <param-name>environment</param-name>\r\n        <param-value>dev</param-value>\r\n    </context-param>\r\n\r\n</web-app>\r\n',1403,176),(177,'package br.ime.usp.commendans.dao;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.List;\r\n\r\nimport org.junit.After;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.Application;\r\n\r\npublic class ApplicationDaoTest extends DaoTest {\r\n    private static ApplicationDao applicationDao;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        applicationDao = new ApplicationDao(session);\r\n        session.beginTransaction();\r\n    }\r\n    \r\n    @After\r\n    public void tearDown() {\r\n        session.getTransaction().rollback();\r\n        session.clear();\r\n    }\r\n    \r\n    @Test\r\n    public void shouldListApps() throws Exception {\r\n        session.save(new Application(\"cdc\", \"123\"));\r\n        session.save(new Application(\"caelum\", \"1234\"));\r\n        List<Application> apps = applicationDao.list();\r\n        assertEquals(2, apps.size());\r\n    }\r\n\r\n}\r\n',900,177),(178,'package br.ime.usp.commendans.dao;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport org.junit.After;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class CustomerDaoTest extends DaoTest {\r\n\r\n    private static CustomerDao userDao;\r\n    private static Application app;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        userDao = new CustomerDao(session);\r\n        app = new Application(\"cdc\", \"123\");\r\n        session.beginTransaction();\r\n        session.save(app);\r\n    }\r\n    \r\n    @After\r\n    public void tearDown() {\r\n        session.getTransaction().rollback();\r\n        session.clear();\r\n    }\r\n\r\n    @Test\r\n    public void shouldFindUsers() {\r\n        Item item = new Item(1l, app);\r\n        session.save(item);\r\n        List<Item> items = Arrays.asList(item);\r\n        session.save(new Customer(items, 1l, app));\r\n        session.save(new Customer(items, 2l, app));\r\n        session.save(new Customer(items, 3l, app));\r\n        List<Customer> users = userDao.list();\r\n        assertEquals(3, users.size());\r\n    }\r\n\r\n    @Test\r\n    public void shouldFindUsersOfSpecificApp() throws Exception {\r\n        Item item = new Item(1l, app);\r\n        session.save(item);\r\n        List<Item> items = Arrays.asList(item);\r\n        session.save(new Customer(items, 1l, app));\r\n        session.save(new Customer(items, 2l, app));\r\n        session.save(new Customer(items, 3l, app));\r\n        Application otherApp = new Application(\"gnarus\", \"123\");\r\n        item = new Item(2l, otherApp);\r\n        items = Arrays.asList(item);\r\n        session.save(otherApp);\r\n        session.save(item);\r\n        session.save(new Customer(items, 1l, otherApp));\r\n        session.save(new Customer(items, 2l, otherApp));\r\n        session.save(new Customer(items, 3l, otherApp));    \r\n\r\n        List<Customer> customers = userDao.findCustomersOf(app);\r\n        assertEquals(3, customers.size());\r\n        assertEquals(\"cdc\", customers.get(0).getApp().getName());\r\n        assertEquals(\"cdc\", customers.get(1).getApp().getName());\r\n        assertEquals(\"cdc\", customers.get(2).getApp().getName());\r\n    }\r\n\r\n}\r\n',2302,178),(179,'package br.ime.usp.commendans.dao;\r\n\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\nimport org.hibernate.classic.Session;\r\nimport org.junit.BeforeClass;\r\n\r\npublic class DaoTest {\r\n\r\n    protected static Session session;\r\n        \r\n    @BeforeClass\r\n    public static void setUpClass() {\r\n        SessionFactory sf = new Configuration().configure(\r\n                \"/hibernate.test.cfg.xml\").buildSessionFactory();\r\n        session = sf.openSession();\r\n    }\r\n\r\n}\r\n',497,179),(180,'',0,180),(181,'package br.ime.usp.commendans.factory;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemRecommenderFactory;\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class ItemToItemRecommenderFactoryTest {\r\n\r\n    @Test\r\n    public void shouldBuildRecommenderBookExample() {\r\n        ItemToItemRecommenderFactory factory = new ItemToItemRecommenderFactory();\r\n        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n        Item item1 = new Item(1l, cdc);\r\n        Item item2 = new Item(2l, cdc);\r\n        Item item3 = new Item(3l, cdc);\r\n        Item item4 = new Item(4l, cdc);\r\n        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l, cdc);\r\n        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l, cdc);\r\n        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l, cdc);\r\n        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l, cdc);\r\n        factory.addUser(user1);\r\n        factory.addUser(user2);\r\n        factory.addUser(user3);\r\n        factory.addUser(user4);\r\n        \r\n        SingleAppRecommender recommender = factory.build();\r\n        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n        \r\n        List<Tuple> recommendedItems = recommender.recommendedItemsFor(item1).getTuples();\r\n        ItemToItemsAssociation association = associations.get(item1);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(2, recommendedItems.size());\r\n        assertEquals(item3, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(item2, recommendedItems.get(1).getItem());\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendedItemsFor(item2).getTuples();\r\n        association = associations.get(item2);\r\n        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendedItemsFor(item3).getTuples();\r\n        association = associations.get(item3);\r\n        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(item1, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        association = associations.get(item4);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n    }\r\n\r\n}\r\n',4364,181),(182,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\n\r\nimport com.google.gson.ExclusionStrategy;\r\nimport com.google.gson.FieldAttributes;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.GsonBuilder;\r\n\r\n@Component\r\npublic class TupleJsonSerializer {\r\n    \r\n    private final Gson gson;\r\n\r\n    public TupleJsonSerializer() {\r\n        ExclusionStrategy strategy = new IncludeAllowedAttributes();\r\n        this.gson = new GsonBuilder().addSerializationExclusionStrategy(strategy).create();\r\n    }\r\n\r\n    public String toJson(Tuple tuple) {\r\n        return gson.toJson(tuple);\r\n    }\r\n    \r\n    public String toJson(List<Tuple> tuples) {\r\n        return gson.toJson(tuples);\r\n    }\r\n    \r\n    private class IncludeAllowedAttributes implements ExclusionStrategy {\r\n\r\n        private List<String> allowedAttributes = Arrays.asList(\"item\", \"appItemId\", \"value\");\r\n\r\n        @Override\r\n        public boolean shouldSkipClass(Class<?> arg0) {\r\n            return false;\r\n        }\r\n\r\n        @Override\r\n        public boolean shouldSkipField(FieldAttributes attr) {\r\n            String name = attr.getName();\r\n            boolean allowedAttribute = allowedAttributes.contains(name); \r\n            return !allowedAttribute;\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n}\r\n',1391,182),(183,'package br.ime.usp.commendans.model;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.Transient;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\n\r\n@Entity\r\npublic class Application {\r\n\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n    private String accessKey;\r\n\r\n    @Transient\r\n    private SingleAppRecommender recommender;\r\n\r\n    @Deprecated\r\n    protected Application() {\r\n    }\r\n\r\n    public Application(String name, String accessKey) {\r\n        this.name = name;\r\n        this.accessKey = accessKey;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void use(SingleAppRecommender recommender) {\r\n        this.recommender = recommender;\r\n    }\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(Item item) {\r\n        return recommender.recommendedItemsFor(item);\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(List<Item> items) {\r\n        return recommender.recommendedItemsFor(items);\r\n    }\r\n\r\n    public String getAccessKey() {\r\n        return accessKey;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Application [id=\" + id + \", name=\" + name + \", accessKey=\"\r\n                + accessKey + \"]\";\r\n    }\r\n    @Override\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((id == null) ? 0 : id.hashCode());\r\n        return result;\r\n    }\r\n    \r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        Application other = (Application) obj;\r\n        if (id == null) {\r\n            if (other.id != null)\r\n                return false;\r\n        } else if (!id.equals(other.id))\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n',2129,183),(184,'package br.ime.usp.commendans.model;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.ManyToOne;\r\n\r\n@Entity\r\npublic class Item {\r\n    @Id @GeneratedValue\r\n    private Long id;\r\n    \r\n    private Long appItemId;\r\n    \r\n    @ManyToOne\r\n    private Application app;\r\n\r\n    @Deprecated\r\n    protected Item() {\r\n    }\r\n    \r\n    public Item(Long appItemId, Application app) {\r\n        this.appItemId = appItemId;\r\n        this.app = app;\r\n    }\r\n    \r\n    public Long getAppItemId() {\r\n        return appItemId;\r\n    }\r\n    \r\n    public Application getApp() {\r\n        return app;\r\n    }\r\n    \r\n    @Override\r\n    public String toString() {\r\n        return \"Item \" + id;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((app == null) ? 0 : app.hashCode());\r\n        result = prime * result\r\n                + ((appItemId == null) ? 0 : appItemId.hashCode());\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        Item other = (Item) obj;\r\n        if (app == null) {\r\n            if (other.app != null)\r\n                return false;\r\n        } else if (!app.equals(other.app))\r\n            return false;\r\n        if (appItemId == null) {\r\n            if (other.appItemId != null)\r\n                return false;\r\n        } else if (!appItemId.equals(other.appItemId))\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n',1722,184),(185,'package br.ime.usp.commendans.infra;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class TupleJsonSerializerTest {\r\n\r\n    @Test\r\n    public void shouldSerializeATuple() {\r\n        TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n        String json = serializer.toJson(new Tuple(new Item(1l, cdc), 10.0));\r\n        assertEquals(\"{\\\"item\\\":{\\\"appItemId\\\":1},\\\"value\\\":10.0}\", json);\r\n    }\r\n    \r\n    @Test\r\n    public void shouldSerializeATupleList() {\r\n        TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n        String json = serializer.toJson(Arrays.asList(new Tuple(new Item(1l, cdc), 10.0)));\r\n        assertEquals(\"[{\\\"item\\\":{\\\"appItemId\\\":1},\\\"value\\\":10.0}]\", json);\r\n    }\r\n\r\n}\r\n',1063,185),(186,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n<!-- 	    <property name=\"hibernate.c3p0.acquire_increment\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.idle_test_period\">100</property> seconds  -->\r\n<!-- 		<property name=\"hibernate.c3p0.max_size\">15</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.min_size\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.timeout\">600</property> -->\r\n    \r\n        <property name=\"show_sql\">false</property>\r\n        <property name=\"format_sql\">false</property>\r\n        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1104,186),(187,'<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<groupId>heroku-blank</groupId>\r\n	<artifactId>heroku-blank</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>heroku-blank</name>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n	</properties>\r\n\r\n	<build>\r\n		<outputDirectory>${basedir}/src/main/webapp/WEB-INF/classes</outputDirectory>\r\n		<plugins>\r\n			<plugin>\r\n				<artifactId>maven-compiler-plugin</artifactId>\r\n				<version>2.3.2</version>\r\n				<configuration>\r\n					<source>1.6</source>\r\n					<target>1.6</target>\r\n					<encoding>UTF-8</encoding>\r\n				</configuration>\r\n			</plugin>\r\n            \r\n            <plugin>\r\n                <artifactId>maven-eclipse-plugin</artifactId>\r\n                <version>2.8</version>\r\n                <configuration>\r\n                    <downloadSources>true</downloadSources>\r\n                    <downloadJavadocs>true</downloadJavadocs>\r\n                </configuration>\r\n            </plugin>\r\n            \r\n            <plugin>\r\n				<artifactId>maven-dependency-plugin</artifactId>\r\n				<executions>\r\n					<execution>\r\n						<phase>install</phase>\r\n						<goals>\r\n							<goal>copy-dependencies</goal>\r\n						</goals>\r\n						<configuration>\r\n							<outputDirectory>src/main/webapp/WEB-INF/lib</outputDirectory>\r\n						</configuration>\r\n					</execution>\r\n				</executions>\r\n				</plugin>\r\n            \r\n			<plugin>\r\n				<groupId>org.apache.maven.plugins</groupId>\r\n				<artifactId>maven-war-plugin</artifactId>\r\n				<version>2.1.1</version>\r\n				<configuration>\r\n   					<webXml>src/main/webapp/WEB-INF/web-heroku.xml</webXml>        \r\n  				</configuration>\r\n			</plugin>\r\n			<plugin>\r\n				<groupId>org.mortbay.jetty</groupId>\r\n				<artifactId>maven-jetty-plugin</artifactId>\r\n				<version>6.1.14</version>\r\n				<configuration>\r\n					<scanIntervalSeconds>3</scanIntervalSeconds>\r\n					<stopKey>foo</stopKey>\r\n					<stopPort>9999</stopPort>\r\n					<webAppConfig>\r\n						<contextPath>/</contextPath>\r\n					</webAppConfig>\r\n				</configuration>\r\n			</plugin>\r\n            <plugin>\r\n                <groupId>org.codehaus.mojo</groupId>\r\n                <artifactId>appassembler-maven-plugin</artifactId>\r\n                <version>1.1.1</version>\r\n                <executions>\r\n                    <execution>\r\n                        <phase>package</phase>\r\n                        <goals>\r\n                            <goal>assemble</goal>\r\n                        </goals>\r\n                        <configuration>\r\n                            <assembleDirectory>target</assembleDirectory>\r\n                            <extraJvmArguments>-Xmx512m</extraJvmArguments>\r\n                            <programs>\r\n                                <program>\r\n                                    <mainClass>br.ime.usp.commendans.runner.Runner</mainClass>\r\n                                    <name>webapp</name>\r\n                                </program>\r\n                            </programs>\r\n                        </configuration>\r\n                    </execution>\r\n                </executions>\r\n            </plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-core</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate.javax.persistence</groupId>\r\n		  <artifactId>hibernate-jpa-2.0-api</artifactId>\r\n		  <version>1.0.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-c3p0</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javax.transaction</groupId>\r\n		  <artifactId>jta</artifactId>\r\n		  <version>1.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>mysql</groupId>\r\n		  <artifactId>mysql-connector-java</artifactId>\r\n		  <version>5.1.18</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>c3p0</groupId>\r\n		  <artifactId>c3p0</artifactId>\r\n		  <version>0.9.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-validator</artifactId>\r\n		  <version>4.3.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>net.sf.ehcache</groupId>\r\n		  <artifactId>ehcache-core</artifactId>\r\n		  <version>2.5.3</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>br.com.caelum</groupId>\r\n		  <artifactId>vraptor</artifactId>\r\n		  <version>3.4.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-api</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>log4j</groupId>\r\n		  <artifactId>log4j</artifactId>\r\n		  <version>1.2.16</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-log4j12</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api-2.5</artifactId>\r\n		  <version>6.1H.14.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.glassfish.web</groupId>\r\n		  <artifactId>jstl-impl</artifactId>\r\n		  <version>1.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api</artifactId>\r\n		  <version>3.0.pre4</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javassist</groupId>\r\n		  <artifactId>javassist</artifactId>\r\n		  <version>3.12.1.GA</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>commons-io</groupId>\r\n		  <artifactId>commons-io</artifactId>\r\n		  <version>2.0.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.guava</groupId>\r\n		  <artifactId>guava</artifactId>\r\n		  <version>r09</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.code.gson</groupId>\r\n		  <artifactId>gson</artifactId>\r\n		  <version>2.2.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>junit</groupId>\r\n		  <artifactId>junit</artifactId>\r\n		  <version>4.8.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mockito</groupId>\r\n		  <artifactId>mockito-all</artifactId>\r\n		  <version>1.8.5</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hsqldb</groupId>\r\n		  <artifactId>hsqldb</artifactId>\r\n		  <version>2.2.8</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.eclipse.jetty</groupId>\r\n			<artifactId>jetty-webapp</artifactId>\r\n			<version>7.4.4.v20110707</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.mortbay.jetty</groupId>\r\n			<artifactId>jsp-2.1-glassfish</artifactId>\r\n			<version>2.1.v20100127</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>postgresql</groupId>\r\n			<artifactId>postgresql</artifactId>\r\n			<version>9.1-901.jdbc4</version>\r\n		</dependency>\r\n            \r\n		<!-- Provided dependencies -->\r\n	</dependencies>\r\n\r\n	<reporting>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.codehaus.mojo</groupId>\r\n				<artifactId>cobertura-maven-plugin</artifactId>\r\n				<version>2.5.1</version>\r\n			</plugin>\r\n		</plugins>\r\n	</reporting>\r\n</project>\r\n',7249,187),(188,'package br.ime.usp.commendans.runner;\r\n\r\nimport org.eclipse.jetty.server.Server;\r\nimport org.eclipse.jetty.webapp.WebAppContext;\r\n\r\npublic class Runner {\r\n    \r\n    public static void main(String[] args) throws Exception {\r\n        String webappDirLocation = \"src/main/webapp/\";\r\n        String webPort = System.getenv(\"PORT\");\r\n        if (webPort == null || webPort.isEmpty()) {\r\n            webPort = \"8080\";\r\n        }\r\n        Server server = new Server(Integer.valueOf(webPort));\r\n        WebAppContext root = new WebAppContext();\r\n        root.setContextPath(\"/\");\r\n        root.setDescriptor(webappDirLocation + \"/WEB-INF/web-heroku.xml\");\r\n        root.setResourceBase(webappDirLocation);\r\n        root.setParentLoaderPriority(true);\r\n        server.setHandler(root);\r\n        server.start();\r\n        server.join();\r\n    }\r\n    \r\n}\r\n',843,188),(189,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n<!-- 	    <property name=\"hibernate.c3p0.acquire_increment\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.idle_test_period\">100</property> seconds  -->\r\n<!-- 		<property name=\"hibernate.c3p0.max_size\">15</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.min_size\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.timeout\">600</property> -->\r\n    \r\n        <property name=\"show_sql\">false</property>\r\n        <property name=\"format_sql\">false</property>\r\n        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1109,189),(190,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.infra.TupleJsonSerializer;\r\nimport br.ime.usp.commendans.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.GeneralRecommender;\r\n\r\n@Resource\r\npublic class ItemToItemController {\r\n    private final ItemDao itemDao;\r\n    private final Result result;\r\n    private final TupleJsonSerializer serializer;\r\n    private final GeneralRecommender recommender;\r\n\r\n    public ItemToItemController(GeneralRecommender recommender, \r\n            ItemDao itemDao, Result result, \r\n            TupleJsonSerializer serializer) {\r\n        this.recommender = recommender;\r\n        this.itemDao = itemDao;\r\n        this.result = result;\r\n        this.serializer = serializer;\r\n    }\r\n    \r\n    @Get(\"/recommend/item/{appItemId}\")\r\n    public void recommend(Long appItemId, String accessKey) {\r\n        Item item = itemDao.findByAppItemId(appItemId);\r\n        ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n        serializeResult(recommended.getTuples());\r\n    }\r\n    \r\n    @Get(\"/recommend/items/\")\r\n    public void recommend(List<Long> itemsIds, String accessKey) {\r\n        List<Item> items = itemDao.findAppItemIds(itemsIds);\r\n        ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n        serializeResult(recommended.getTuples());\r\n    }\r\n\r\n    private void serializeResult(List<Tuple> recommendend) {\r\n        result.use(Results.http())\r\n            .addHeader(\"content-type\", \"application/json\")\r\n            .body(serializer.toJson(recommendend));\r\n    }\r\n}\r\n',1909,190),(191,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Query;\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Component\r\npublic class ItemDao {\r\n    \r\n    private final Session session;\r\n\r\n    public ItemDao(Session session) {\r\n        this.session = session;\r\n    }\r\n\r\n    public Item findByAppItemId(Long appItemId) {\r\n        Query query = session.createQuery(\"select item from Item item where item.appItemId = :id\");\r\n        query.setLong(\"id\", appItemId);\r\n        return (Item) query.uniqueResult();\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Item> findAppItemIds(List<Long> itemsIds) {\r\n        return session\r\n                .createQuery(\"select item from Item item where item.appItemId in :ids\")\r\n                .setParameterList(\"ids\", itemsIds)\r\n                .list();\r\n    }\r\n\r\n}\r\n',923,191),(192,'package br.ime.usp.commendans.dao;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport org.junit.After;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class ItemDaoTest extends DaoTest {\r\n    \r\n    private ItemDao itemDao;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        itemDao = new ItemDao(session);\r\n        session.beginTransaction();\r\n    }\r\n    \r\n    @After\r\n    public void tearDown() {\r\n        session.getTransaction().rollback();\r\n        session.clear();\r\n    }\r\n    \r\n    @Test\r\n    public void shouldFindByAppItemId() throws Exception {\r\n        Application app = new Application(\"cdc\", \"123\");\r\n        session.save(app);\r\n        session.save(new Item(11l, app));\r\n        Item item = itemDao.findByAppItemId(11l);\r\n        assertEquals(11l, item.getAppItemId().longValue());\r\n    }\r\n\r\n}\r\n',920,192),(193,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ApplicationDao;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.infra.TupleJsonSerializer;\r\nimport br.ime.usp.commendans.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.GeneralRecommender;\r\n\r\n@Resource\r\npublic class ItemToItemController {\r\n    private final ItemDao itemDao;\r\n    private final Result result;\r\n    private final TupleJsonSerializer serializer;\r\n    private final GeneralRecommender recommender;\r\n    private final ApplicationDao appDao;\r\n\r\n    public ItemToItemController(GeneralRecommender recommender, \r\n            ItemDao itemDao, ApplicationDao appDao, Result result, \r\n            TupleJsonSerializer serializer) {\r\n        this.recommender = recommender;\r\n        this.itemDao = itemDao;\r\n        this.appDao = appDao;\r\n        this.result = result;\r\n        this.serializer = serializer;\r\n    }\r\n    \r\n    @Get(\"/recommend/item/{appItemId}\")\r\n    public void recommend(Long appItemId, String accessKey) {\r\n        if (validKey(accessKey)) {\r\n            Application app = appDao.findByAccessKey(accessKey);\r\n            Item item = itemDao.findByAppItemId(appItemId, app);\r\n            ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n            serializeResult(recommended);\r\n        }\r\n    }\r\n    \r\n\r\n    @Get(\"/recommend/items/\")\r\n    public void recommend(List<Long> itemsIds, String accessKey) {\r\n        if (validKey(accessKey)) {\r\n            Application app = appDao.findByAccessKey(accessKey);\r\n            List<Item> items = itemDao.findAppItemIds(itemsIds, app);\r\n            ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n            serializeResult(recommended);\r\n        }\r\n    }\r\n\r\n    private boolean validKey(String accessKey) {\r\n        Application app = appDao.findByAccessKey(accessKey);\r\n        if (app == null) {\r\n            result.notFound();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void serializeResult(ItemVector recommended) {\r\n        List<Tuple> tuples = recommended == null ? new ArrayList<Tuple>() : recommended.getTuples();\r\n        result.use(Results.http())\r\n            .addHeader(\"content-type\", \"application/json\")\r\n            .body(serializer.toJson(tuples));\r\n    }\r\n}\r\n',2706,193),(194,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Query;\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.Application;\r\n\r\n@Component\r\npublic class ApplicationDao {\r\n    \r\n    private final Session session;\r\n\r\n    public ApplicationDao(Session session) {\r\n        this.session = session;\r\n    }\r\n    \r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Application> list() {\r\n        return session.createCriteria(Application.class).list();\r\n    }\r\n\r\n    public Application findByAccessKey(String key) {\r\n        Query query = session.createQuery(\"select app from Application app where app.accessKey=:key\");\r\n        query.setParameter(\"key\", key);\r\n        return (Application) query.uniqueResult();\r\n    }\r\n\r\n\r\n}\r\n',816,194),(195,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Query;\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Component\r\npublic class ItemDao {\r\n    \r\n    private final Session session;\r\n\r\n    public ItemDao(Session session) {\r\n        this.session = session;\r\n    }\r\n\r\n    public Item findByAppItemId(Long appItemId, Application app) {\r\n        Query query = session.createQuery(\"select item from Item item where item.appItemId = :id and item.app.id = :appId\");\r\n        query.setLong(\"id\", appItemId);\r\n        query.setLong(\"appId\", app.getId());\r\n        return (Item) query.uniqueResult();\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Item> findAppItemIds(List<Long> itemsIds, Application app) {\r\n        return session\r\n                .createQuery(\"select item from Item item where item.appItemId in :ids and item.app.id = :appId\")\r\n                .setParameterList(\"ids\", itemsIds)\r\n                .setParameter(\"appId\", app.getId())\r\n                .list();\r\n    }\r\n\r\n}\r\n',1155,195),(196,'package br.ime.usp.commendans.dao;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.List;\r\n\r\nimport org.junit.After;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.Application;\r\n\r\npublic class ApplicationDaoTest extends DaoTest {\r\n    private static ApplicationDao applicationDao;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        applicationDao = new ApplicationDao(session);\r\n        session.beginTransaction();\r\n    }\r\n    \r\n    @After\r\n    public void tearDown() {\r\n        session.getTransaction().rollback();\r\n        session.clear();\r\n    }\r\n    \r\n    @Test\r\n    public void shouldListApps() throws Exception {\r\n        session.save(new Application(\"cdc\", \"123\"));\r\n        session.save(new Application(\"caelum\", \"1234\"));\r\n        List<Application> apps = applicationDao.list();\r\n        assertEquals(2, apps.size());\r\n    }\r\n    \r\n    @Test\r\n    public void shouldFindAppByAccessKey() throws Exception {\r\n        session.save(new Application(\"cdc\", \"123\"));\r\n        session.save(new Application(\"caelum\", \"1234\"));\r\n        Application app = applicationDao.findByAccessKey(\"1234\");\r\n        assertEquals(\"caelum\", app.getName());\r\n    }\r\n\r\n}\r\n',1214,196),(197,'package br.ime.usp.commendans.dao;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport org.junit.After;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class ItemDaoTest extends DaoTest {\r\n    \r\n    private ItemDao itemDao;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        itemDao = new ItemDao(session);\r\n        session.beginTransaction();\r\n    }\r\n    \r\n    @After\r\n    public void tearDown() {\r\n        session.getTransaction().rollback();\r\n        session.clear();\r\n    }\r\n    \r\n    @Test\r\n    public void shouldFindByAppItemId() throws Exception {\r\n        Application app = new Application(\"cdc\", \"123\");\r\n        Application app2 = new Application(\"caelum\", \"1234\");\r\n        session.save(app);\r\n        session.save(app2);\r\n        session.save(new Item(11l, app));\r\n        session.save(new Item(11l, app2));\r\n        Item item = itemDao.findByAppItemId(11l, app);\r\n        assertEquals(11l, item.getAppItemId().longValue());\r\n        assertEquals(\"cdc\", item.getApp().getName());\r\n    }\r\n\r\n}\r\n',1116,197),(198,'',0,198),(199,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.annotation.PostConstruct;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\nimport br.ime.usp.commendans.dao.ApplicationDao;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.itemtoitem.SingleAppRecommenderFactory;\r\nimport br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.recommender.GeneralRecommender;\r\n\r\n@Component @ApplicationScoped\r\npublic class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n    private final CustomerDao customerDao;\r\n    private final SingleAppRecommenderFactory factory;\r\n    private GeneralRecommender recommender;\r\n    private final ApplicationDao appDao;\r\n\r\n    public RecommenderCreator(CustomerDao dao, ApplicationDao appDao, SingleAppRecommenderFactory factory) {\r\n        this.customerDao = dao;\r\n        this.appDao = appDao;\r\n        this.factory = factory;\r\n    }\r\n\r\n    @Override\r\n    public GeneralRecommender getInstance() {\r\n        return recommender;\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        List<Application> apps = appDao.list();\r\n        for (Application app : apps) {\r\n            List<Customer> customers = customerDao.findCustomersOf(app);\r\n            SingleAppRecommender recommender = buildSingleAppRecommender(customers);\r\n            app.use(recommender);\r\n        }\r\n        this.recommender = new GeneralRecommender(apps);\r\n    }\r\n\r\n    private SingleAppRecommender buildSingleAppRecommender(List<Customer> users) {\r\n        factory.clean();\r\n        for (Customer user : users) {\r\n            factory.addUser(user);\r\n        }\r\n        return factory.build();\r\n    }\r\n}\r\n',1919,199),(200,'',0,200),(201,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Component @ApplicationScoped\r\npublic class SingleAppRecommenderFactory {\r\n\r\n    private Map<Item, List<Customer>> customerByItemBought;\r\n    private HashMap<Item, ItemToItemsAssociation> associations;\r\n    \r\n    public SingleAppRecommenderFactory() {\r\n        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n    }\r\n    \r\n    public void addUser(Customer user) {\r\n        for (Item item : user.itemsBought()) {\r\n            store(item, user);\r\n        }\r\n    }\r\n\r\n    private void store(Item item, Customer user) {\r\n        List<Customer> users = customerByItemBought.get(item);\r\n        if (users == null) {\r\n            users = new ArrayList<Customer>();\r\n        }\r\n        users.add(user);\r\n        customerByItemBought.put(item, users);\r\n    }\r\n    \r\n    \r\n    public SingleAppRecommender build() {\r\n        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n        Set<Item> items = customerByItemBought.keySet();\r\n        for (Item item : items) {\r\n            associate(item);\r\n        }\r\n        return new SingleAppRecommender(associations);\r\n    }\r\n\r\n    private void associate(Item item) {\r\n        ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n        List<Customer> customers = customerByItemBought.get(item);\r\n        for (Customer user : customers) {\r\n            List<Item> boughtTogether = user.itemsBought();\r\n            for (Item i : boughtTogether) {\r\n                association.associate(i);\r\n            }\r\n        }\r\n        associations.put(item, association);\r\n    }\r\n    \r\n    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n        return associations;\r\n    }\r\n\r\n    public void clean() {\r\n        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n    }\r\n\r\n}\r\n',2130,201),(202,'',0,202),(203,'package br.ime.usp.commendans.factory;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.itemtoitem.ItemToItemsAssociation;\r\nimport br.ime.usp.commendans.itemtoitem.SingleAppRecommender;\r\nimport br.ime.usp.commendans.itemtoitem.SingleAppRecommenderFactory;\r\nimport br.ime.usp.commendans.itemtoitem.Tuple;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class SingleAppRecommenderFactoryTest {\r\n\r\n    @Test\r\n    public void shouldBuildRecommenderFromCollectiveIntelligenceInActionExample() {\r\n        SingleAppRecommenderFactory factory = new SingleAppRecommenderFactory();\r\n        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n        Item item1 = new Item(1l, cdc);\r\n        Item item2 = new Item(2l, cdc);\r\n        Item item3 = new Item(3l, cdc);\r\n        Item item4 = new Item(4l, cdc);\r\n        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l, cdc);\r\n        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l, cdc);\r\n        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l, cdc);\r\n        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l, cdc);\r\n        factory.addUser(user1);\r\n        factory.addUser(user2);\r\n        factory.addUser(user3);\r\n        factory.addUser(user4);\r\n        \r\n        SingleAppRecommender recommender = factory.build();\r\n        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n        \r\n        List<Tuple> recommendedItems = recommender.recommendedItemsFor(item1).getTuples();\r\n        ItemToItemsAssociation association = associations.get(item1);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(2, recommendedItems.size());\r\n        assertEquals(item3, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(item2, recommendedItems.get(1).getItem());\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendedItemsFor(item2).getTuples();\r\n        association = associations.get(item2);\r\n        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendedItemsFor(item3).getTuples();\r\n        association = associations.get(item3);\r\n        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(item1, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        association = associations.get(item4);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n    }\r\n\r\n}\r\n',4390,203),(204,'package br.ime.usp.commendans.itemtoitem;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class ItemVectorTest {\r\n\r\n    @Test\r\n    public void shouldMergeTuples() {\r\n        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n        Item item1 = new Item(1l, cdc);\r\n        Item item2 = new Item(2l, cdc);\r\n        Item item3 = new Item(3l, cdc);\r\n        Item item4 = new Item(4l, cdc);\r\n        List<Tuple> tuples = asList(new Tuple(item1, 11.0), new Tuple(item2, 8.0), new Tuple(item3, 2.0));\r\n        ItemVector itemVector1 = new ItemVector(new HashSet<Tuple>(tuples));\r\n        tuples = asList(new Tuple(item4, 10.0), new Tuple(item3, 7.0));\r\n        ItemVector itemVector2 = new ItemVector(new HashSet<Tuple>(tuples));\r\n        \r\n        ItemVector merge = itemVector1.merge(itemVector2);\r\n        List<Tuple> expected = asList(new Tuple(item1, 11.0), new Tuple(item4, 10.0), new Tuple(item3, 9.0), new Tuple(item2, 8.0));\r\n        assertEquals(expected, merge.getTuples());\r\n        \r\n    }\r\n\r\n    private List<Tuple> asList(Tuple ... tuples) {\r\n        ArrayList<Tuple> tuplesList = new ArrayList<Tuple>();\r\n        for (int i = 0; i < tuples.length; i++) {\r\n            tuplesList.add(tuples[i]);\r\n        }\r\n        return tuplesList;\r\n    }\r\n\r\n}\r\n',1479,204),(205,'<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<groupId>heroku-blank</groupId>\r\n	<artifactId>heroku-blank</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>heroku-blank</name>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n	</properties>\r\n\r\n	<build>\r\n		<outputDirectory>${basedir}/src/main/webapp/WEB-INF/classes</outputDirectory>\r\n		<plugins>\r\n			<plugin>\r\n				<artifactId>maven-compiler-plugin</artifactId>\r\n				<version>2.3.2</version>\r\n				<configuration>\r\n					<source>1.6</source>\r\n					<target>1.6</target>\r\n					<encoding>UTF-8</encoding>\r\n				</configuration>\r\n			</plugin>\r\n            \r\n            <plugin>\r\n                <artifactId>maven-eclipse-plugin</artifactId>\r\n                <version>2.8</version>\r\n                <configuration>\r\n                    <downloadSources>true</downloadSources>\r\n                    <downloadJavadocs>true</downloadJavadocs>\r\n                </configuration>\r\n            </plugin>\r\n            \r\n            <plugin>\r\n				<artifactId>maven-dependency-plugin</artifactId>\r\n				<executions>\r\n					<execution>\r\n						<phase>install</phase>\r\n						<goals>\r\n							<goal>copy-dependencies</goal>\r\n						</goals>\r\n						<configuration>\r\n							<outputDirectory>src/main/webapp/WEB-INF/lib</outputDirectory>\r\n						</configuration>\r\n					</execution>\r\n				</executions>\r\n				</plugin>\r\n            \r\n			<plugin>\r\n				<groupId>org.apache.maven.plugins</groupId>\r\n				<artifactId>maven-war-plugin</artifactId>\r\n				<version>2.1.1</version>\r\n				<configuration>\r\n   					<webXml>src/main/webapp/WEB-INF/web-heroku.xml</webXml>        \r\n  				</configuration>\r\n			</plugin>\r\n			<plugin>\r\n				<groupId>org.mortbay.jetty</groupId>\r\n				<artifactId>maven-jetty-plugin</artifactId>\r\n				<version>6.1.14</version>\r\n				<configuration>\r\n					<scanIntervalSeconds>3</scanIntervalSeconds>\r\n					<stopKey>foo</stopKey>\r\n					<stopPort>9999</stopPort>\r\n					<webAppConfig>\r\n						<contextPath>/</contextPath>\r\n					</webAppConfig>\r\n				</configuration>\r\n			</plugin>\r\n            <plugin>\r\n                <groupId>org.codehaus.mojo</groupId>\r\n                <artifactId>appassembler-maven-plugin</artifactId>\r\n                <version>1.1.1</version>\r\n                <executions>\r\n                    <execution>\r\n                        <phase>package</phase>\r\n                        <goals>\r\n                            <goal>assemble</goal>\r\n                        </goals>\r\n                        <configuration>\r\n                            <assembleDirectory>target</assembleDirectory>\r\n                            <extraJvmArguments>-Xmx512m</extraJvmArguments>\r\n                            <programs>\r\n                                <program>\r\n                                    <mainClass>br.ime.usp.commendans.infra.JettyRunner</mainClass>\r\n                                    <name>webapp</name>\r\n                                </program>\r\n                            </programs>\r\n                        </configuration>\r\n                    </execution>\r\n                </executions>\r\n            </plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-core</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate.javax.persistence</groupId>\r\n		  <artifactId>hibernate-jpa-2.0-api</artifactId>\r\n		  <version>1.0.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-c3p0</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javax.transaction</groupId>\r\n		  <artifactId>jta</artifactId>\r\n		  <version>1.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>mysql</groupId>\r\n		  <artifactId>mysql-connector-java</artifactId>\r\n		  <version>5.1.18</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>c3p0</groupId>\r\n		  <artifactId>c3p0</artifactId>\r\n		  <version>0.9.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-validator</artifactId>\r\n		  <version>4.3.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>net.sf.ehcache</groupId>\r\n		  <artifactId>ehcache-core</artifactId>\r\n		  <version>2.5.3</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>br.com.caelum</groupId>\r\n		  <artifactId>vraptor</artifactId>\r\n		  <version>3.4.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-api</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>log4j</groupId>\r\n		  <artifactId>log4j</artifactId>\r\n		  <version>1.2.16</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-log4j12</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api-2.5</artifactId>\r\n		  <version>6.1H.14.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.glassfish.web</groupId>\r\n		  <artifactId>jstl-impl</artifactId>\r\n		  <version>1.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api</artifactId>\r\n		  <version>3.0.pre4</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javassist</groupId>\r\n		  <artifactId>javassist</artifactId>\r\n		  <version>3.12.1.GA</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>commons-io</groupId>\r\n		  <artifactId>commons-io</artifactId>\r\n		  <version>2.0.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.guava</groupId>\r\n		  <artifactId>guava</artifactId>\r\n		  <version>r09</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.code.gson</groupId>\r\n		  <artifactId>gson</artifactId>\r\n		  <version>2.2.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>junit</groupId>\r\n		  <artifactId>junit</artifactId>\r\n		  <version>4.8.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mockito</groupId>\r\n		  <artifactId>mockito-all</artifactId>\r\n		  <version>1.8.5</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hsqldb</groupId>\r\n		  <artifactId>hsqldb</artifactId>\r\n		  <version>2.2.8</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.eclipse.jetty</groupId>\r\n			<artifactId>jetty-webapp</artifactId>\r\n			<version>7.4.4.v20110707</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.mortbay.jetty</groupId>\r\n			<artifactId>jsp-2.1-glassfish</artifactId>\r\n			<version>2.1.v20100127</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>postgresql</groupId>\r\n			<artifactId>postgresql</artifactId>\r\n			<version>9.1-901.jdbc4</version>\r\n		</dependency>\r\n            \r\n		<!-- Provided dependencies -->\r\n	</dependencies>\r\n\r\n	<reporting>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.codehaus.mojo</groupId>\r\n				<artifactId>cobertura-maven-plugin</artifactId>\r\n				<version>2.5.1</version>\r\n			</plugin>\r\n		</plugins>\r\n	</reporting>\r\n</project>\r\n',7253,205),(206,'',0,206),(207,'',0,207),(208,'',0,208),(209,'package br.ime.usp.commendans.controller;\r\n\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.infra.DataImporter;\r\n\r\n\r\n@Resource\r\npublic class IndexController {\r\n    \r\n    private final Result result;\r\n    private final Session session;\r\n\r\n    public IndexController(Result result, Session session) {\r\n        this.result = result;\r\n        this.session = session;\r\n    }\r\n    \r\n    @Get(\"/\")\r\n    public void index() {\r\n        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n    }\r\n    \r\n    @Get(\"/import/askjdhakjshdakjshd\")\r\n    public void importData() {\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n        result.use(Results.http()).body(\"<html><body>finished persisting</body></html>\");\r\n    }\r\n}\r\n',981,209),(210,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ApplicationDao;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.infra.TupleJsonSerializer;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.GeneralRecommender;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n\r\n@Resource\r\npublic class ItemToItemController {\r\n    private final ItemDao itemDao;\r\n    private final Result result;\r\n    private final TupleJsonSerializer serializer;\r\n    private final GeneralRecommender recommender;\r\n    private final ApplicationDao appDao;\r\n\r\n    public ItemToItemController(GeneralRecommender recommender, \r\n            ItemDao itemDao, ApplicationDao appDao, Result result, \r\n            TupleJsonSerializer serializer) {\r\n        this.recommender = recommender;\r\n        this.itemDao = itemDao;\r\n        this.appDao = appDao;\r\n        this.result = result;\r\n        this.serializer = serializer;\r\n    }\r\n    \r\n    @Get(\"/recommend/item/{appItemId}\")\r\n    public void recommend(Long appItemId, String accessKey) {\r\n        if (validKey(accessKey)) {\r\n            Application app = appDao.findByAccessKey(accessKey);\r\n            Item item = itemDao.findByAppItemId(appItemId, app);\r\n            ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n            serializeResult(recommended);\r\n        }\r\n    }\r\n    \r\n\r\n    @Get(\"/recommend/items/\")\r\n    public void recommend(List<Long> itemsIds, String accessKey) {\r\n        if (validKey(accessKey)) {\r\n            Application app = appDao.findByAccessKey(accessKey);\r\n            List<Item> items = itemDao.findAppItemIds(itemsIds, app);\r\n            ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n            serializeResult(recommended);\r\n        }\r\n    }\r\n\r\n    private boolean validKey(String accessKey) {\r\n        Application app = appDao.findByAccessKey(accessKey);\r\n        if (app == null) {\r\n            result.notFound();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void serializeResult(ItemVector recommended) {\r\n        List<Tuple> tuples = recommended == null ? new ArrayList<Tuple>() : recommended.getTuples();\r\n        result.use(Results.http())\r\n            .addHeader(\"content-type\", \"application/json\")\r\n            .body(serializer.toJson(tuples));\r\n    }\r\n}\r\n',2730,210),(211,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class DataImporter {\r\n    \r\n    private final Session session;\r\n    private static Logger logger = Logger.getLogger(DataImporter.class);\r\n\r\n    public DataImporter(Session session) {\r\n        this.session = session;\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        Session session = sf.openSession();\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n    }\r\n\r\n    public void importData(String file) {\r\n        HashMap<Long, Customer> users = new HashMap<Long, Customer>();\r\n        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n        String line = safeReadLine(reader);\r\n        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n        session.save(cdc);\r\n        \r\n        while (line != null) {\r\n            logger.debug(line);\r\n            List<String> row = Arrays.asList(line.split(\",\"));\r\n            long id = Long.parseLong(row.get(0));\r\n            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n            Customer user = users.get(id);\r\n            if (user == null) {\r\n                user = new Customer(new ArrayList<Item>(), id, cdc);\r\n            }\r\n            Item item = items.get(itemId);\r\n            if (item == null) {\r\n                item = new Item(itemId, cdc);\r\n            }\r\n            user.add(item);\r\n            line = safeReadLine(reader);\r\n            users.put(id, user);\r\n            items.put(itemId, item);\r\n        }\r\n        \r\n        logger.debug(\"persisting\");\r\n        session.getTransaction().begin();\r\n        for (Item item : items.values()) {\r\n            session.save(item);\r\n        }\r\n        \r\n        Collection<Customer> allUsers = users.values();\r\n        for (Customer user : allUsers) {\r\n            session.save(user);\r\n        }\r\n        session.getTransaction().commit();\r\n        logger.debug(\"finished persisting\");\r\n    }\r\n\r\n    private String safeReadLine(BufferedReader reader) {\r\n        try {\r\n            return reader.readLine();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"could not read file\", e);\r\n        }\r\n    }\r\n\r\n}\r\n',3031,211),(212,'package br.ime.usp.commendans.infra;\r\n\r\nimport org.eclipse.jetty.server.Server;\r\nimport org.eclipse.jetty.webapp.WebAppContext;\r\n\r\npublic class JettyRunner {\r\n    \r\n    public static void main(String[] args) throws Exception {\r\n        String webappDirLocation = \"src/main/webapp/\";\r\n        String webPort = System.getenv(\"PORT\");\r\n        if (webPort == null || webPort.isEmpty()) {\r\n            webPort = \"8080\";\r\n        }\r\n        Server server = new Server(Integer.valueOf(webPort));\r\n        WebAppContext root = new WebAppContext();\r\n        root.setContextPath(\"/\");\r\n        root.setDescriptor(webappDirLocation + \"/WEB-INF/web-heroku.xml\");\r\n        root.setResourceBase(webappDirLocation);\r\n        root.setParentLoaderPriority(true);\r\n        server.setHandler(root);\r\n        server.start();\r\n        server.join();\r\n    }\r\n    \r\n}\r\n',847,212),(213,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.annotation.PostConstruct;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\nimport br.ime.usp.commendans.dao.ApplicationDao;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.recommender.GeneralRecommender;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommenderFactory;\r\n\r\n@Component @ApplicationScoped\r\npublic class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n    private final CustomerDao customerDao;\r\n    private final SingleAppRecommenderFactory factory;\r\n    private GeneralRecommender recommender;\r\n    private final ApplicationDao appDao;\r\n\r\n    public RecommenderCreator(CustomerDao dao, ApplicationDao appDao, SingleAppRecommenderFactory factory) {\r\n        this.customerDao = dao;\r\n        this.appDao = appDao;\r\n        this.factory = factory;\r\n    }\r\n\r\n    @Override\r\n    public GeneralRecommender getInstance() {\r\n        return recommender;\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        List<Application> apps = appDao.list();\r\n        for (Application app : apps) {\r\n            List<Customer> customers = customerDao.findCustomersOf(app);\r\n            SingleAppRecommender recommender = buildSingleAppRecommender(customers);\r\n            app.use(recommender);\r\n        }\r\n        this.recommender = new GeneralRecommender(apps);\r\n    }\r\n\r\n    private SingleAppRecommender buildSingleAppRecommender(List<Customer> users) {\r\n        factory.clean();\r\n        for (Customer user : users) {\r\n            factory.addUser(user);\r\n        }\r\n        return factory.build();\r\n    }\r\n}\r\n',1943,213),(214,'package br.ime.usp.commendans.infra;\r\n\r\nimport javax.annotation.PostConstruct;\r\nimport javax.annotation.PreDestroy;\r\n\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\nimport br.com.caelum.vraptor.ioc.RequestScoped;\r\n\r\n@Component @RequestScoped\r\npublic class SessionCreator implements ComponentFactory<Session> {\r\n    \r\n    private final SessionFactory sf;\r\n    private org.hibernate.classic.Session session;\r\n\r\n    public SessionCreator(SessionFactory sf) {\r\n        this.sf = sf;\r\n    }\r\n\r\n    @Override\r\n    public Session getInstance() {\r\n        return session;\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        session = sf.openSession();\r\n    }\r\n    \r\n    @PreDestroy\r\n    public void destroy() {\r\n        session.close();\r\n    }\r\n\r\n}\r\n',882,214),(215,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.net.URI;\r\nimport java.net.URISyntaxException;\r\n\r\nimport javax.annotation.PostConstruct;\r\nimport javax.annotation.PreDestroy;\r\nimport javax.servlet.ServletContext;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\n\r\n@Component @ApplicationScoped\r\npublic class SessionFactoryCreator implements ComponentFactory<SessionFactory> {\r\n\r\n    private SessionFactory sessionFactory;\r\n    private static Logger LOG = Logger.getLogger(SessionFactoryCreator.class);\r\n    private String env;\r\n    \r\n    public SessionFactoryCreator(ServletContext context) {\r\n        env = context.getInitParameter(\"environment\");\r\n    }\r\n\r\n    @Override\r\n    public SessionFactory getInstance() {\r\n        return sessionFactory;\r\n    }\r\n    \r\n    @PreDestroy\r\n    public void destroy() {\r\n        sessionFactory.close();\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        if (env.equals(\"heroku\")) {\r\n            \r\n            URI dbUri;\r\n            try {\r\n                dbUri = new URI(System.getenv(\"DATABASE_URL\"));\r\n            } catch (URISyntaxException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n\r\n            String username = dbUri.getUserInfo().split(\":\")[0];\r\n            String password = dbUri.getUserInfo().split(\":\")[1];\r\n            String dbUrl = \"jdbc:postgresql://\" + dbUri.getHost() + \':\' + dbUri.getPort()  + dbUri.getPath();\r\n            \r\n            LOG.info(\"using heroku specific confs\");\r\n            LOG.info(\"username: \" + username);\r\n            LOG.info(\"password: \" + password);\r\n            LOG.info(\"dbUrl: \" + dbUrl);\r\n            Configuration configuration = new Configuration().configure(\"/hibernate-heroku.cfg.xml\");\r\n            configuration.setProperty(\"hibernate.connection.url\", dbUrl);\r\n            configuration.setProperty(\"hibernate.connection.driver_class\", \"org.postgresql.Driver\");\r\n            configuration.setProperty(\"hibernate.dialect\", \"org.hibernate.dialect.PostgreSQLDialect\");\r\n            configuration.setProperty(\"hibernate.connection.username\", username);\r\n            configuration.setProperty(\"hibernate.connection.password\", password);\r\n            \r\n            sessionFactory = configuration.buildSessionFactory();\r\n        } else {\r\n            sessionFactory = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        }\r\n    }\r\n\r\n}\r\n',2618,215),(216,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n\r\nimport com.google.gson.ExclusionStrategy;\r\nimport com.google.gson.FieldAttributes;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.GsonBuilder;\r\n\r\n@Component\r\npublic class TupleJsonSerializer {\r\n    \r\n    private final Gson gson;\r\n\r\n    public TupleJsonSerializer() {\r\n        ExclusionStrategy strategy = new IncludeAllowedAttributes();\r\n        this.gson = new GsonBuilder().addSerializationExclusionStrategy(strategy).create();\r\n    }\r\n\r\n    public String toJson(Tuple tuple) {\r\n        return gson.toJson(tuple);\r\n    }\r\n    \r\n    public String toJson(List<Tuple> tuples) {\r\n        return gson.toJson(tuples);\r\n    }\r\n    \r\n    private class IncludeAllowedAttributes implements ExclusionStrategy {\r\n\r\n        private List<String> allowedAttributes = Arrays.asList(\"item\", \"appItemId\", \"value\");\r\n\r\n        @Override\r\n        public boolean shouldSkipClass(Class<?> arg0) {\r\n            return false;\r\n        }\r\n\r\n        @Override\r\n        public boolean shouldSkipField(FieldAttributes attr) {\r\n            String name = attr.getName();\r\n            boolean allowedAttribute = allowedAttributes.contains(name); \r\n            return !allowedAttribute;\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n}\r\n',1403,216),(217,'',0,217),(218,'',0,218),(219,'',0,219),(220,'',0,220),(221,'',0,221),(222,'package br.ime.usp.commendans.model;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.Transient;\r\n\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n\r\n@Entity\r\npublic class Application {\r\n\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n    private String accessKey;\r\n\r\n    @Transient\r\n    private SingleAppRecommender recommender;\r\n\r\n    @Deprecated\r\n    protected Application() {\r\n    }\r\n\r\n    public Application(String name, String accessKey) {\r\n        this.name = name;\r\n        this.accessKey = accessKey;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void use(SingleAppRecommender recommender) {\r\n        this.recommender = recommender;\r\n    }\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(Item item) {\r\n        return recommender.recommendedItemsFor(item);\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(List<Item> items) {\r\n        return recommender.recommendedItemsFor(items);\r\n    }\r\n\r\n    public String getAccessKey() {\r\n        return accessKey;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Application [id=\" + id + \", name=\" + name + \", accessKey=\"\r\n                + accessKey + \"]\";\r\n    }\r\n    @Override\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((id == null) ? 0 : id.hashCode());\r\n        return result;\r\n    }\r\n    \r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        Application other = (Application) obj;\r\n        if (id == null) {\r\n            if (other.id != null)\r\n                return false;\r\n        } else if (!id.equals(other.id))\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n',2153,222),(223,'package br.ime.usp.commendans.recommender;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n\r\npublic class GeneralRecommender {\r\n\r\n    private Map<String, Application> appsMap;\r\n\r\n    public GeneralRecommender(List<Application> apps) {\r\n        appsMap = new HashMap<String, Application>();\r\n        for (Application app : apps) {\r\n            appsMap.put(app.getAccessKey(), app);\r\n        }\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(Item item, String accessKey) {\r\n        Application application = appsMap.get(accessKey);\r\n        return application.recommendedItemsFor(item);\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(List<Item> items, String accessKey) {\r\n        Application application = appsMap.get(accessKey);\r\n        return application.recommendedItemsFor(items);\r\n    }\r\n\r\n}\r\n',994,223),(224,'package br.ime.usp.commendans.recommender;\r\n\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n\r\npublic interface Recommender {\r\n    public ItemVector recommendedItemsFor(Item item);\r\n}\r\n',245,224),(225,'package br.ime.usp.commendans.recommender.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class ItemToItemsAssociation {\r\n    private Item item;\r\n    private Map<Item, Double> associations;\r\n\r\n    public ItemToItemsAssociation(Item item) {\r\n        this.item = item;\r\n        this.associations = new HashMap<Item, Double>();\r\n    }\r\n\r\n    public void associate(Item i) {\r\n        if (i.equals(this.item))\r\n            return;\r\n        Double v = associations.get(i);\r\n        if (v == null) {\r\n            v = 0.0;\r\n        }\r\n        v += 1.0;\r\n        associations.put(i, v);\r\n    }\r\n    \r\n    public double associationValue(Item i) {\r\n        Double v = associations.get(i);\r\n        if (v == null) {\r\n            return 0.0;\r\n        }\r\n        return v;\r\n    }\r\n    \r\n    \r\n    @Override\r\n    public String toString() {\r\n        String res = this.item.toString() + \" => {\" + associations.toString() + \"}\";\r\n        return res;\r\n    }\r\n\r\n    public List<Tuple> toTupleList() {\r\n        Set<Item> items = associations.keySet();\r\n        ArrayList<Tuple> tuples = new ArrayList<Tuple>();\r\n        for (Item item : items) {\r\n            Double value = associations.get(item);\r\n            tuples.add(new Tuple(item, value));\r\n        }\r\n        Collections.sort(tuples);\r\n        Collections.reverse(tuples);\r\n        return tuples;\r\n    }\r\n\r\n}\r\n',1524,225),(226,'package br.ime.usp.commendans.recommender.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\npublic class ItemVector {\r\n\r\n    private Set<Tuple> tuples;\r\n\r\n    public ItemVector(Set<Tuple> tuples) {\r\n        this.tuples = tuples;\r\n    }\r\n\r\n    public ItemVector(List<Tuple> tuples) {\r\n        this(new HashSet<Tuple>(tuples));\r\n    }\r\n\r\n    public List<Tuple> getTuples() {\r\n        ArrayList<Tuple> tuples = new ArrayList<Tuple>(this.tuples);\r\n        Collections.sort(tuples);\r\n        Collections.reverse(tuples);\r\n        return Collections.unmodifiableList(tuples);\r\n    }\r\n    \r\n    public ItemVector merge(ItemVector other) {\r\n        Set<Tuple> tuples = new HashSet<Tuple>();\r\n        Set<Tuple> tuplesToRemove = new HashSet<Tuple>();\r\n        for (Tuple tuple : this.tuples) {\r\n            for (Tuple t : other.getTuples()) {\r\n                if (t.getItem().equals(tuple.getItem())) {\r\n                    Tuple newTuple = new Tuple(t.getItem(), tuple.getValue() + t.getValue());\r\n                    tuples.add(newTuple);\r\n                    tuplesToRemove.add(t);\r\n                    tuplesToRemove.add(tuple);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        tuples.addAll(this.tuples);\r\n        tuples.addAll(other.getTuples());\r\n        tuples.removeAll(tuplesToRemove);\r\n        return new ItemVector(tuples);\r\n    }\r\n\r\n}\r\n',1474,226),(227,'package br.ime.usp.commendans.recommender.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.Recommender;\r\n\r\npublic class SingleAppRecommender implements Recommender {\r\n\r\n    private final Map<Item, ItemVector> associations;\r\n\r\n    public SingleAppRecommender(\r\n            HashMap<Item, ItemToItemsAssociation> associations) {\r\n        this.associations = parse(associations);\r\n    }\r\n\r\n    private Map<Item, ItemVector> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n        HashMap<Item, ItemVector> map = new HashMap<Item, ItemVector>();\r\n        Set<Item> items = associations.keySet();\r\n        for (Item item : items) {\r\n            ItemToItemsAssociation association = associations.get(item);\r\n            List<Tuple> tuples = association.toTupleList();\r\n            map.put(item, new ItemVector(tuples));\r\n        }\r\n        return map;\r\n    }\r\n\r\n    @Override\r\n    public ItemVector recommendedItemsFor(Item item) {\r\n        return associations.get(item);\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(List<Item> items) {\r\n        ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n        for (Item item : items) {\r\n            ItemVector other = recommendedItemsFor(item);\r\n            vector = vector.merge(other);\r\n        }\r\n        return vector;\r\n    }\r\n\r\n}\r\n',1481,227),(228,'package br.ime.usp.commendans.recommender.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Component @ApplicationScoped\r\npublic class SingleAppRecommenderFactory {\r\n\r\n    private Map<Item, List<Customer>> customerByItemBought;\r\n    private HashMap<Item, ItemToItemsAssociation> associations;\r\n    \r\n    public SingleAppRecommenderFactory() {\r\n        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n    }\r\n    \r\n    public void addUser(Customer user) {\r\n        for (Item item : user.itemsBought()) {\r\n            store(item, user);\r\n        }\r\n    }\r\n\r\n    private void store(Item item, Customer user) {\r\n        List<Customer> users = customerByItemBought.get(item);\r\n        if (users == null) {\r\n            users = new ArrayList<Customer>();\r\n        }\r\n        users.add(user);\r\n        customerByItemBought.put(item, users);\r\n    }\r\n    \r\n    \r\n    public SingleAppRecommender build() {\r\n        associations = new HashMap<Item, ItemToItemsAssociation>();\r\n        Set<Item> items = customerByItemBought.keySet();\r\n        for (Item item : items) {\r\n            associate(item);\r\n        }\r\n        return new SingleAppRecommender(associations);\r\n    }\r\n\r\n    private void associate(Item item) {\r\n        ItemToItemsAssociation association = new ItemToItemsAssociation(item);\r\n        List<Customer> customers = customerByItemBought.get(item);\r\n        for (Customer user : customers) {\r\n            List<Item> boughtTogether = user.itemsBought();\r\n            for (Item i : boughtTogether) {\r\n                association.associate(i);\r\n            }\r\n        }\r\n        associations.put(item, association);\r\n    }\r\n    \r\n    public HashMap<Item, ItemToItemsAssociation> getAssociations() {\r\n        return associations;\r\n    }\r\n\r\n    public void clean() {\r\n        customerByItemBought = new HashMap<Item, List<Customer>>();\r\n    }\r\n\r\n}\r\n',2142,228),(229,'package br.ime.usp.commendans.recommender.itemtoitem;\r\n\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class Tuple implements Comparable<Tuple> {\r\n    private Item item;\r\n    private Double value;\r\n\r\n    public Tuple(Item item, Double value) {\r\n        this.item = item;\r\n        this.value = value;\r\n    }\r\n\r\n    public Item getItem() {\r\n        return item;\r\n    }\r\n\r\n    public Double getValue() {\r\n        return value;\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Tuple o) {\r\n        return (int) (value - o.getValue());\r\n    }\r\n    \r\n    @Override\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((item == null) ? 0 : item.hashCode());\r\n        result = prime * result + ((value == null) ? 0 : value.hashCode());\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        Tuple other = (Tuple) obj;\r\n        if (item == null) {\r\n            if (other.item != null)\r\n                return false;\r\n        } else if (!item.equals(other.item))\r\n            return false;\r\n        if (value == null) {\r\n            if (other.value != null)\r\n                return false;\r\n        } else if (!value.equals(other.value))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"[Tuple: item=\" + item + \"]\";\r\n    }\r\n\r\n}\r\n',1582,229),(230,'',0,230),(231,'',0,231),(232,'package br.ime.usp.commendans.components;\r\n\r\nimport static org.mockito.Mockito.mock;\r\nimport static org.mockito.Mockito.when;\r\n\r\nimport javax.servlet.ServletContext;\r\n\r\nimport org.junit.Ignore;\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.infra.SessionFactoryCreator;\r\n\r\npublic class SessionFactoryCreatorTest {\r\n\r\n    @Test @Ignore\r\n    public void shouldGetSessionFactory() {\r\n        ServletContext context = mock(ServletContext.class);\r\n        when(context.getInitParameter(\"environment\")).thenReturn(\"heroku\");\r\n        SessionFactoryCreator sfc = new SessionFactoryCreator(context);\r\n        sfc.create();\r\n    }\r\n\r\n}\r\n',637,232),(233,'',0,233),(234,'package br.ime.usp.commendans.infra;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n\r\npublic class TupleJsonSerializerTest {\r\n\r\n    @Test\r\n    public void shouldSerializeATuple() {\r\n        TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n        String json = serializer.toJson(new Tuple(new Item(1l, cdc), 10.0));\r\n        assertEquals(\"{\\\"item\\\":{\\\"appItemId\\\":1},\\\"value\\\":10.0}\", json);\r\n    }\r\n    \r\n    @Test\r\n    public void shouldSerializeATupleList() {\r\n        TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n        String json = serializer.toJson(Arrays.asList(new Tuple(new Item(1l, cdc), 10.0)));\r\n        assertEquals(\"[{\\\"item\\\":{\\\"appItemId\\\":1},\\\"value\\\":10.0}]\", json);\r\n    }\r\n\r\n}\r\n',1075,234),(235,'',0,235),(236,'package br.ime.usp.commendans.recommender.itemtoitem;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n\r\npublic class ItemVectorTest {\r\n\r\n    @Test\r\n    public void shouldMergeTuples() {\r\n        Application cdc = new Application(\"Casa do Código\", \"123\");\r\n        Item item1 = new Item(1l, cdc);\r\n        Item item2 = new Item(2l, cdc);\r\n        Item item3 = new Item(3l, cdc);\r\n        Item item4 = new Item(4l, cdc);\r\n        List<Tuple> tuples = asList(new Tuple(item1, 11.0), new Tuple(item2, 8.0), new Tuple(item3, 2.0));\r\n        ItemVector itemVector1 = new ItemVector(new HashSet<Tuple>(tuples));\r\n        tuples = asList(new Tuple(item4, 10.0), new Tuple(item3, 7.0));\r\n        ItemVector itemVector2 = new ItemVector(new HashSet<Tuple>(tuples));\r\n        \r\n        ItemVector merge = itemVector1.merge(itemVector2);\r\n        List<Tuple> expected = asList(new Tuple(item1, 11.0), new Tuple(item4, 10.0), new Tuple(item3, 9.0), new Tuple(item2, 8.0));\r\n        assertEquals(expected, merge.getTuples());\r\n        \r\n    }\r\n\r\n    private List<Tuple> asList(Tuple ... tuples) {\r\n        ArrayList<Tuple> tuplesList = new ArrayList<Tuple>();\r\n        for (int i = 0; i < tuples.length; i++) {\r\n            tuplesList.add(tuples[i]);\r\n        }\r\n        return tuplesList;\r\n    }\r\n\r\n}\r\n',1616,236),(237,'package br.ime.usp.commendans.recommender.itemtoitem;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemToItemsAssociation;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommenderFactory;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n\r\npublic class SingleAppRecommenderFactoryTest {\r\n\r\n    @Test\r\n    public void shouldBuildRecommenderFromCollectiveIntelligenceInActionExample() {\r\n        SingleAppRecommenderFactory factory = new SingleAppRecommenderFactory();\r\n        Application cdc = new Application(\"casadocodigo\", \"1234\");\r\n        Item item1 = new Item(1l, cdc);\r\n        Item item2 = new Item(2l, cdc);\r\n        Item item3 = new Item(3l, cdc);\r\n        Item item4 = new Item(4l, cdc);\r\n        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l, cdc);\r\n        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l, cdc);\r\n        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l, cdc);\r\n        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l, cdc);\r\n        factory.addUser(user1);\r\n        factory.addUser(user2);\r\n        factory.addUser(user3);\r\n        factory.addUser(user4);\r\n        \r\n        SingleAppRecommender recommender = factory.build();\r\n        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n        \r\n        List<Tuple> recommendedItems = recommender.recommendedItemsFor(item1).getTuples();\r\n        ItemToItemsAssociation association = associations.get(item1);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(2, recommendedItems.size());\r\n        assertEquals(item3, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(item2, recommendedItems.get(1).getItem());\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendedItemsFor(item2).getTuples();\r\n        association = associations.get(item2);\r\n        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendedItemsFor(item3).getTuples();\r\n        association = associations.get(item3);\r\n        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(item1, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        association = associations.get(item4);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n    }\r\n\r\n}\r\n',4453,237),(238,'<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\r\n<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\">\r\n\r\n	<appender name=\"stdout\" class=\"org.apache.log4j.ConsoleAppender\">\r\n		<layout class=\"org.apache.log4j.PatternLayout\">\r\n			<param name=\"ConversionPattern\" value=\"%d{HH:mm:ss,SSS} %5p [%-20c{1}] %m%n\" />\r\n		</layout>\r\n	</appender>\r\n\r\n	<category name=\"org.hibernate\">\r\n		<priority value=\"DEBUG\" />\r\n		<appender-ref ref=\"stdout\" />\r\n	</category>\r\n	\r\n	<category name=\"br.ime.usp\">\r\n		<priority value=\"INFO\" />\r\n		<appender-ref ref=\"stdout\" />\r\n	</category>\r\n\r\n	<category name=\"br.com.caelum.vraptor\">\r\n		<priority value=\"INFO\" />\r\n		<appender-ref ref=\"stdout\" />\r\n	</category>\r\n	\r\n	<category name=\"org.eclipse.jetty.util.log\">\r\n		<priority value=\"DEBUG\" />\r\n		<appender-ref ref=\"stdout\" />\r\n	</category>\r\n	\r\n\r\n</log4j:configuration>\r\n',893,238),(239,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Query;\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.PrototypeScoped;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\n\r\n@Component @PrototypeScoped\r\npublic class CustomerDao {\r\n    private final Session session;\r\n\r\n    public CustomerDao(Session session) {\r\n        this.session = session;\r\n    }\r\n    \r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Customer> list() {\r\n        return session.createCriteria(Customer.class).list();\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Customer> findCustomersOf(Application app) {\r\n        Query query = session.createQuery(\"select customer from Customer customer \" +\r\n        		\"join fetch customer.items \" +\r\n        		\"where customer.app.name like :appName\");\r\n        query.setParameter(\"appName\", app.getName());\r\n        return query.list();\r\n    }\r\n}\r\n',1022,239),(240,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.annotation.PostConstruct;\r\n\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\nimport br.ime.usp.commendans.dao.ApplicationDao;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.recommender.GeneralRecommender;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommenderFactory;\r\n\r\n@Component @ApplicationScoped\r\npublic class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n    private final CustomerDao customerDao;\r\n    private final SingleAppRecommenderFactory factory;\r\n    private GeneralRecommender recommender;\r\n    private final ApplicationDao appDao;\r\n\r\n    public RecommenderCreator(SingleAppRecommenderFactory factory, SessionFactory sf) {\r\n        Session session = sf.openSession();\r\n        this.customerDao = new CustomerDao(session);\r\n        this.appDao = new ApplicationDao(session);\r\n        this.factory = factory;\r\n    }\r\n\r\n    @Override\r\n    public GeneralRecommender getInstance() {\r\n        return recommender;\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        List<Application> apps = appDao.list();\r\n        for (Application app : apps) {\r\n            List<Customer> customers = customerDao.findCustomersOf(app);\r\n            SingleAppRecommender recommender = buildSingleAppRecommender(customers);\r\n            app.use(recommender);\r\n        }\r\n        this.recommender = new GeneralRecommender(apps);\r\n    }\r\n\r\n    private SingleAppRecommender buildSingleAppRecommender(List<Customer> users) {\r\n        factory.clean();\r\n        for (Customer user : users) {\r\n            factory.addUser(user);\r\n        }\r\n        return factory.build();\r\n    }\r\n}\r\n',2080,240),(241,'package br.ime.usp.commendans.controller;\r\n\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.infra.DataImporter;\r\nimport br.ime.usp.commendans.recommender.RecommenderCreator;\r\n\r\n\r\n@Resource\r\npublic class IndexController {\r\n    \r\n    private final Result result;\r\n    private final Session session;\r\n    private final RecommenderCreator recommenderCreator;\r\n\r\n    public IndexController(Result result, Session session, RecommenderCreator recommenderCreator) {\r\n        this.result = result;\r\n        this.session = session;\r\n        this.recommenderCreator = recommenderCreator;\r\n    }\r\n    \r\n    @Get(\"/\")\r\n    public void index() {\r\n        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n    }\r\n    \r\n    @Get(\"/import/askjdhakjshdakjshd\")\r\n    public void importData() {\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n        recommenderCreator.create();\r\n        result.use(Results.http()).body(\"<html><body>finished persisting</body></html>\");\r\n    }\r\n}\r\n',1233,241),(242,'',0,242),(243,'package br.ime.usp.commendans.recommender;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.annotation.PostConstruct;\r\n\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\nimport br.ime.usp.commendans.dao.ApplicationDao;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.model.Application;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommenderFactory;\r\n\r\n@Component @ApplicationScoped\r\npublic class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n    private final CustomerDao customerDao;\r\n    private final SingleAppRecommenderFactory factory;\r\n    private GeneralRecommender recommender;\r\n    private final ApplicationDao appDao;\r\n\r\n    public RecommenderCreator(SingleAppRecommenderFactory factory, SessionFactory sf) {\r\n        Session session = sf.openSession();\r\n        this.customerDao = new CustomerDao(session);\r\n        this.appDao = new ApplicationDao(session);\r\n        this.factory = factory;\r\n    }\r\n\r\n    @Override\r\n    public GeneralRecommender getInstance() {\r\n        return recommender;\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        List<Application> apps = appDao.list();\r\n        for (Application app : apps) {\r\n            List<Customer> customers = customerDao.findCustomersOf(app);\r\n            SingleAppRecommender recommender = buildSingleAppRecommender(customers);\r\n            app.use(recommender);\r\n        }\r\n        this.recommender = new GeneralRecommender(apps);\r\n    }\r\n    \r\n    private SingleAppRecommender buildSingleAppRecommender(List<Customer> users) {\r\n        factory.clean();\r\n        for (Customer user : users) {\r\n            factory.addUser(user);\r\n        }\r\n        return factory.build();\r\n    }\r\n}\r\n',2028,243),(244,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n<!-- 	    <property name=\"hibernate.c3p0.acquire_increment\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.idle_test_period\">100</property> seconds  -->\r\n<!-- 		<property name=\"hibernate.c3p0.max_size\">15</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.min_size\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.timeout\">600</property> -->\r\n    \r\n        <property name=\"show_sql\">false</property>\r\n        <property name=\"format_sql\">false</property>\r\n        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Application\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1104,244),(245,'curl --data \"clientAppUserId=66666666&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\" http://localhost:8080/commendans/app/123/addSale\r\n',131,245),(246,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.Post;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ClientAppDao;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.GroupedItems;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Resource\r\npublic class ClientAppController {\r\n\r\n    private final Result result;\r\n    private final ClientAppDao appDao;\r\n    private final ItemDao itemDao;\r\n    private final CustomerDao customerDao;\r\n\r\n    public ClientAppController(Result result, ClientAppDao appDao, ItemDao itemDao, CustomerDao customerDao) {\r\n        this.result = result;\r\n        this.appDao = appDao;\r\n        this.itemDao = itemDao;\r\n        this.customerDao = customerDao;\r\n    }\r\n    \r\n    //clientAppUserId=100&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\r\n    @Post(\"app/{key}/addSale\")\r\n    public void addSale(String key, Long clientAppUserId, List<Long> itemsIds) {\r\n        ClientApp app = appDao.findByAccessKey(key);\r\n        GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n        \r\n        ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n        \r\n        for (Item item : newItems) {\r\n            itemDao.save(item);\r\n        }\r\n        \r\n        Customer customer = customerDao.find(app, clientAppUserId);\r\n        List<Item> allItems = groupedItems.getItems();\r\n        if (customer == null) {\r\n            customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n        }\r\n        for (Item item : allItems) {\r\n            customer.add(item);\r\n        }\r\n        customerDao.save(customer);\r\n        result.use(Results.json()).from(true).serialize();\r\n    }\r\n\r\n}\r\n',1990,246),(247,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ClientAppDao;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.infra.TupleJsonSerializer;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.GeneralRecommender;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n\r\n@Resource\r\npublic class ItemToItemController {\r\n    private final ItemDao itemDao;\r\n    private final Result result;\r\n    private final TupleJsonSerializer serializer;\r\n    private final GeneralRecommender recommender;\r\n    private final ClientAppDao appDao;\r\n\r\n    public ItemToItemController(GeneralRecommender recommender, \r\n            ItemDao itemDao, ClientAppDao appDao, Result result, \r\n            TupleJsonSerializer serializer) {\r\n        this.recommender = recommender;\r\n        this.itemDao = itemDao;\r\n        this.appDao = appDao;\r\n        this.result = result;\r\n        this.serializer = serializer;\r\n    }\r\n    \r\n    @Get(\"/recommend/item/{appItemId}\")\r\n    public void recommend(Long appItemId, String accessKey) {\r\n        if (validKey(accessKey)) {\r\n            ClientApp app = appDao.findByAccessKey(accessKey);\r\n            Item item = itemDao.findByAppItemId(appItemId, app);\r\n            ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n            serializeResult(recommended);\r\n        }\r\n    }\r\n    \r\n\r\n    @Get(\"/recommend/items/\")\r\n    public void recommend(List<Long> itemsIds, String accessKey) {\r\n        if (validKey(accessKey)) {\r\n            ClientApp app = appDao.findByAccessKey(accessKey);\r\n            List<Item> items = itemDao.findItems(itemsIds, app).getItems();\r\n            ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n            serializeResult(recommended);\r\n        }\r\n    }\r\n\r\n    private boolean validKey(String accessKey) {\r\n        ClientApp app = appDao.findByAccessKey(accessKey);\r\n        if (app == null) {\r\n            result.notFound();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void serializeResult(ItemVector recommended) {\r\n        List<Tuple> tuples = recommended == null ? new ArrayList<Tuple>() : recommended.getTuples();\r\n        result.use(Results.http())\r\n            .addHeader(\"content-type\", \"application/json\")\r\n            .body(serializer.toJson(tuples));\r\n    }\r\n}\r\n',2722,247),(248,'',0,248),(249,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Query;\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\n\r\n@Component\r\npublic class ClientAppDao {\r\n    \r\n    private final Session session;\r\n\r\n    public ClientAppDao(Session session) {\r\n        this.session = session;\r\n    }\r\n    \r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<ClientApp> list() {\r\n        return session.createCriteria(ClientApp.class).list();\r\n    }\r\n\r\n    public ClientApp findByAccessKey(String key) {\r\n        Query query = session.createQuery(\"select app from ClientApp app where app.accessKey=:key\");\r\n        query.setParameter(\"key\", key);\r\n        return (ClientApp) query.uniqueResult();\r\n    }\r\n\r\n\r\n}\r\n',800,249),(250,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Query;\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.PrototypeScoped;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\n\r\n@Component @PrototypeScoped\r\npublic class CustomerDao {\r\n    private final Session session;\r\n\r\n    public CustomerDao(Session session) {\r\n        this.session = session;\r\n    }\r\n    \r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Customer> list() {\r\n        return session.createCriteria(Customer.class).list();\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Customer> findCustomersOf(ClientApp app) {\r\n        Query query = session.createQuery(\"select customer from Customer customer \" +\r\n        		\"join fetch customer.items \" +\r\n        		\"where customer.app.name like :appName\");\r\n        query.setParameter(\"appName\", app.getName());\r\n        return query.list();\r\n    }\r\n\r\n    public void save(Customer customer) {\r\n        session.saveOrUpdate(customer);\r\n    }\r\n\r\n    public Customer find(ClientApp app, Long customerId) {\r\n        Query query = session.createQuery(\"select customer from Customer customer \" +\r\n                \"where customer.app.id like :appId \" +\r\n                \"and customer.clientAppCustomerId = :customerId\");\r\n        query.setParameter(\"appId\", app.getId());\r\n        query.setParameter(\"customerId\", customerId);\r\n        return (Customer) query.uniqueResult();\r\n    }\r\n}\r\n',1546,250),(251,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Query;\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.GroupedItems;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Component\r\npublic class ItemDao {\r\n    \r\n    private final Session session;\r\n\r\n    public ItemDao(Session session) {\r\n        this.session = session;\r\n    }\r\n\r\n    public Item findByAppItemId(Long appItemId, ClientApp app) {\r\n        Query query = session.createQuery(\"select item from Item item where item.appItemId = :id and item.app.id = :appId\");\r\n        query.setLong(\"id\", appItemId);\r\n        query.setLong(\"appId\", app.getId());\r\n        return (Item) query.uniqueResult();\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public GroupedItems findItems(List<Long> itemsIds, ClientApp app) {\r\n        List<Item> items = session\r\n                .createQuery(\"select item from Item item where item.appItemId in :ids and item.app.id = :appId\")\r\n                .setParameterList(\"ids\", itemsIds)\r\n                .setParameter(\"appId\", app.getId())\r\n                .list();\r\n        return new GroupedItems(items);\r\n    }\r\n\r\n    public void save(Item item) {\r\n        session.save(item);\r\n    }\r\n\r\n}\r\n',1322,251),(252,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class DataImporter {\r\n    \r\n    private final Session session;\r\n    private static Logger logger = Logger.getLogger(DataImporter.class);\r\n\r\n    public DataImporter(Session session) {\r\n        this.session = session;\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        Session session = sf.openSession();\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n    }\r\n\r\n    public void importData(String file) {\r\n        HashMap<Long, Customer> users = new HashMap<Long, Customer>();\r\n        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n        String line = safeReadLine(reader);\r\n        ClientApp cdc = new ClientApp(\"Casa do Código\", \"123\");\r\n        session.save(cdc);\r\n        \r\n        while (line != null) {\r\n            logger.debug(line);\r\n            List<String> row = Arrays.asList(line.split(\",\"));\r\n            long id = Long.parseLong(row.get(0));\r\n            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n            Customer user = users.get(id);\r\n            if (user == null) {\r\n                user = new Customer(new ArrayList<Item>(), id, cdc);\r\n            }\r\n            Item item = items.get(itemId);\r\n            if (item == null) {\r\n                item = new Item(itemId, cdc);\r\n            }\r\n            user.add(item);\r\n            line = safeReadLine(reader);\r\n            users.put(id, user);\r\n            items.put(itemId, item);\r\n        }\r\n        \r\n        logger.debug(\"persisting\");\r\n        session.getTransaction().begin();\r\n        for (Item item : items.values()) {\r\n            session.save(item);\r\n        }\r\n        \r\n        Collection<Customer> allUsers = users.values();\r\n        for (Customer user : allUsers) {\r\n            session.save(user);\r\n        }\r\n        session.getTransaction().commit();\r\n        logger.debug(\"finished persisting\");\r\n    }\r\n\r\n    private String safeReadLine(BufferedReader reader) {\r\n        try {\r\n            return reader.readLine();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"could not read file\", e);\r\n        }\r\n    }\r\n\r\n}\r\n',3025,252),(253,'',0,253),(254,'package br.ime.usp.commendans.model;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.Transient;\r\n\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n\r\n@Entity\r\npublic class ClientApp {\r\n\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n    private String accessKey;\r\n\r\n    @Transient\r\n    private SingleAppRecommender recommender;\r\n\r\n    @Deprecated\r\n    protected ClientApp() {\r\n    }\r\n\r\n    public ClientApp(String name, String accessKey) {\r\n        this.name = name;\r\n        this.accessKey = accessKey;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void use(SingleAppRecommender recommender) {\r\n        this.recommender = recommender;\r\n    }\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(Item item) {\r\n        return recommender.recommendedItemsFor(item);\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(List<Item> items) {\r\n        return recommender.recommendedItemsFor(items);\r\n    }\r\n\r\n    public String getAccessKey() {\r\n        return accessKey;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Application [id=\" + id + \", name=\" + name + \", accessKey=\"\r\n                + accessKey + \"]\";\r\n    }\r\n    @Override\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((id == null) ? 0 : id.hashCode());\r\n        return result;\r\n    }\r\n    \r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        ClientApp other = (ClientApp) obj;\r\n        if (id == null) {\r\n            if (other.id != null)\r\n                return false;\r\n        } else if (!id.equals(other.id))\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n',2143,254),(255,'package br.ime.usp.commendans.model;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.ManyToMany;\r\nimport javax.persistence.ManyToOne;\r\n\r\n@Entity\r\npublic class Customer {\r\n    \r\n    @Id @GeneratedValue\r\n    private Long id;\r\n    \r\n    private Long clientAppCustomerId;\r\n\r\n    @ManyToMany\r\n    private List<Item> items;\r\n    \r\n    @ManyToOne\r\n    private ClientApp app;\r\n    \r\n    @Deprecated\r\n    public Customer() {\r\n    }\r\n\r\n    public Customer(List<Item> items, Long clientAppCustomerId, ClientApp app) {\r\n        this.items = items;\r\n        this.clientAppCustomerId = clientAppCustomerId;\r\n        this.app = app;\r\n    }\r\n\r\n    public List<Item> itemsBought() {\r\n        return items;\r\n    }\r\n    \r\n    @Override\r\n    public String toString() {\r\n        return \"User \" + clientAppCustomerId + \" from \" + app;\r\n    }\r\n\r\n    public void add(Item item) {\r\n        items.add(item);\r\n    }\r\n    \r\n    public ClientApp getApp() {\r\n        return app;\r\n    }\r\n    \r\n    public Long getClientAppCustomerId() {\r\n        return clientAppCustomerId;\r\n    }\r\n    \r\n}\r\n',1172,255),(256,'package br.ime.usp.commendans.model;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class GroupedItems {\r\n\r\n    private final List<Item> items;\r\n\r\n    public GroupedItems(List<Item> items) {\r\n        this.items = new ArrayList(items);\r\n    }\r\n\r\n    public ArrayList<Item> addRemaining(List<Long> ids, ClientApp app) {\r\n        ArrayList<Item> added = new ArrayList<Item>();\r\n        for (Long id : ids) {\r\n            Item item = new Item(id, app);\r\n            if (!items.contains(item)) {\r\n                items.add(item);\r\n                added.add(item);\r\n            }\r\n        }\r\n        return added;\r\n\r\n    }\r\n\r\n    public List<Item> getItems() {\r\n        return items;\r\n    }\r\n\r\n}\r\n',709,256),(257,'package br.ime.usp.commendans.model;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\nimport static org.junit.Assert.assertTrue;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\npublic class GroupedItemsTest {\r\n\r\n    @Test\r\n    public void shouldAddReaminingItems() {\r\n        Item item1 = new Item(1l, null);\r\n        Item item2 = new Item(2l, null);\r\n        GroupedItems groupedItems = new GroupedItems(Arrays.asList(item1, item2));\r\n        List<Long> ids = Arrays.asList(1l, 2l, 3l, 4l);\r\n        groupedItems.addRemaining(ids, null);\r\n        \r\n        List<Item> items = groupedItems.getItems();\r\n        \r\n        assertEquals(4, items.size());\r\n        assertTrue(items.contains(item1));\r\n        assertTrue(items.contains(item2));\r\n        assertTrue(items.contains(new Item(3l, null)));\r\n        assertTrue(items.contains(new Item(4l, null)));\r\n    }\r\n\r\n}\r\n',900,257),(258,'package br.ime.usp.commendans.model;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.ManyToOne;\r\n\r\n@Entity\r\npublic class Item {\r\n    @Id @GeneratedValue\r\n    private Long id;\r\n    \r\n    private Long appItemId;\r\n    \r\n    @ManyToOne\r\n    private ClientApp app;\r\n\r\n    @Deprecated\r\n    protected Item() {\r\n    }\r\n    \r\n    public Item(Long appItemId, ClientApp app) {\r\n        this.appItemId = appItemId;\r\n        this.app = app;\r\n    }\r\n    \r\n    public Long getAppItemId() {\r\n        return appItemId;\r\n    }\r\n    \r\n    public ClientApp getApp() {\r\n        return app;\r\n    }\r\n    \r\n    @Override\r\n    public String toString() {\r\n        return \"Item \" + id;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((app == null) ? 0 : app.hashCode());\r\n        result = prime * result\r\n                + ((appItemId == null) ? 0 : appItemId.hashCode());\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        Item other = (Item) obj;\r\n        if (app == null) {\r\n            if (other.app != null)\r\n                return false;\r\n        } else if (!app.equals(other.app))\r\n            return false;\r\n        if (appItemId == null) {\r\n            if (other.appItemId != null)\r\n                return false;\r\n        } else if (!appItemId.equals(other.appItemId))\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n',1716,258),(259,'package br.ime.usp.commendans.recommender;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n\r\npublic class GeneralRecommender {\r\n\r\n    private Map<String, ClientApp> appsMap;\r\n\r\n    public GeneralRecommender(List<ClientApp> apps) {\r\n        appsMap = new HashMap<String, ClientApp>();\r\n        for (ClientApp app : apps) {\r\n            appsMap.put(app.getAccessKey(), app);\r\n        }\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(Item item, String accessKey) {\r\n        ClientApp application = appsMap.get(accessKey);\r\n        return application.recommendedItemsFor(item);\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(List<Item> items, String accessKey) {\r\n        ClientApp application = appsMap.get(accessKey);\r\n        return application.recommendedItemsFor(items);\r\n    }\r\n\r\n}\r\n',980,259),(260,'package br.ime.usp.commendans.recommender;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.annotation.PostConstruct;\r\n\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\n\r\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\r\nimport br.ime.usp.commendans.dao.ClientAppDao;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommenderFactory;\r\n\r\n@Component @ApplicationScoped\r\npublic class RecommenderCreator implements ComponentFactory<GeneralRecommender> {\r\n    private final CustomerDao customerDao;\r\n    private final SingleAppRecommenderFactory factory;\r\n    private GeneralRecommender recommender;\r\n    private final ClientAppDao appDao;\r\n\r\n    public RecommenderCreator(SingleAppRecommenderFactory factory, SessionFactory sf) {\r\n        Session session = sf.openSession();\r\n        this.customerDao = new CustomerDao(session);\r\n        this.appDao = new ClientAppDao(session);\r\n        this.factory = factory;\r\n    }\r\n\r\n    @Override\r\n    public GeneralRecommender getInstance() {\r\n        return recommender;\r\n    }\r\n    \r\n    @PostConstruct\r\n    public void create() {\r\n        List<ClientApp> apps = appDao.list();\r\n        for (ClientApp app : apps) {\r\n            List<Customer> customers = customerDao.findCustomersOf(app);\r\n            SingleAppRecommender recommender = buildSingleAppRecommender(customers);\r\n            app.use(recommender);\r\n        }\r\n        this.recommender = new GeneralRecommender(apps);\r\n    }\r\n    \r\n    private SingleAppRecommender buildSingleAppRecommender(List<Customer> users) {\r\n        factory.clean();\r\n        for (Customer user : users) {\r\n            factory.addUser(user);\r\n        }\r\n        return factory.build();\r\n    }\r\n}\r\n',2016,260),(261,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n<!-- 	    <property name=\"hibernate.c3p0.acquire_increment\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.idle_test_period\">100</property> seconds  -->\r\n<!-- 		<property name=\"hibernate.c3p0.max_size\">15</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.min_size\">1</property>  -->\r\n<!-- 		<property name=\"hibernate.c3p0.timeout\">600</property> -->\r\n    \r\n        <property name=\"show_sql\">false</property>\r\n        <property name=\"format_sql\">false</property>\r\n        <property name=\"hibernate.hbm2ddl.auto\">update</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.ClientApp\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1102,261),(262,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n	    <property name=\"c3p0.acquire_increment\">1</property> \r\n		<property name=\"c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n		<property name=\"c3p0.max_size\">15</property> \r\n		<property name=\"c3p0.min_size\">1</property> \r\n		<property name=\"c3p0.timeout\">600</property>\r\n    \r\n        <property name=\"connection.url\">jdbc:mysql://localhost/commendans</property>\r\n        <property name=\"connection.driver_class\">com.mysql.jdbc.Driver</property>\r\n        <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\r\n        <property name=\"connection.username\">root</property>\r\n        <property name=\"connection.password\"></property>\r\n        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n        <property name=\"show_sql\">true</property>\r\n        <property name=\"format_sql\">false</property>\r\n        <property name=\"hibernate.generate_statistics\">true</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.ClientApp\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1468,262),(263,'',0,263),(264,'package br.ime.usp.commendans.dao;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.List;\r\n\r\nimport org.junit.After;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.ClientApp;\r\n\r\npublic class ClientAppDaoTest extends DaoTest {\r\n    private static ClientAppDao applicationDao;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        applicationDao = new ClientAppDao(session);\r\n        session.beginTransaction();\r\n    }\r\n    \r\n    @After\r\n    public void tearDown() {\r\n        session.getTransaction().rollback();\r\n        session.clear();\r\n    }\r\n    \r\n    @Test\r\n    public void shouldListApps() throws Exception {\r\n        session.save(new ClientApp(\"cdc\", \"123\"));\r\n        session.save(new ClientApp(\"caelum\", \"1234\"));\r\n        List<ClientApp> apps = applicationDao.list();\r\n        assertEquals(2, apps.size());\r\n    }\r\n    \r\n    @Test\r\n    public void shouldFindAppByAccessKey() throws Exception {\r\n        session.save(new ClientApp(\"cdc\", \"123\"));\r\n        session.save(new ClientApp(\"caelum\", \"1234\"));\r\n        ClientApp app = applicationDao.findByAccessKey(\"1234\");\r\n        assertEquals(\"caelum\", app.getName());\r\n    }\r\n\r\n}\r\n',1194,264),(265,'package br.ime.usp.commendans.dao;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport org.junit.After;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class CustomerDaoTest extends DaoTest {\r\n\r\n    private static CustomerDao userDao;\r\n    private static ClientApp app;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        userDao = new CustomerDao(session);\r\n        app = new ClientApp(\"cdc\", \"123\");\r\n        session.beginTransaction();\r\n        session.save(app);\r\n    }\r\n    \r\n    @After\r\n    public void tearDown() {\r\n        session.getTransaction().rollback();\r\n        session.clear();\r\n    }\r\n\r\n    @Test\r\n    public void shouldFindUsers() {\r\n        Item item = new Item(1l, app);\r\n        session.save(item);\r\n        List<Item> items = Arrays.asList(item);\r\n        session.save(new Customer(items, 1l, app));\r\n        session.save(new Customer(items, 2l, app));\r\n        session.save(new Customer(items, 3l, app));\r\n        List<Customer> users = userDao.list();\r\n        assertEquals(3, users.size());\r\n    }\r\n\r\n    @Test\r\n    public void shouldFindUsersOfSpecificApp() throws Exception {\r\n        saveCustomers();    \r\n\r\n        List<Customer> customers = userDao.findCustomersOf(app);\r\n        assertEquals(3, customers.size());\r\n        assertEquals(\"cdc\", customers.get(0).getApp().getName());\r\n        assertEquals(\"cdc\", customers.get(1).getApp().getName());\r\n        assertEquals(\"cdc\", customers.get(2).getApp().getName());\r\n    }\r\n    \r\n    @Test\r\n    public void shouldFindCustomerWithIdAndApp() throws Exception {\r\n        saveCustomers();    \r\n        \r\n        Customer c = userDao.find(app, 1l);\r\n        assertEquals(\"cdc\", c.getApp().getName());\r\n        assertEquals(1l, c.getClientAppCustomerId().longValue());\r\n    }\r\n\r\n    private void saveCustomers() {\r\n        Item item = new Item(1l, app);\r\n        session.save(item);\r\n        List<Item> items = Arrays.asList(item);\r\n        session.save(new Customer(items, 1l, app));\r\n        session.save(new Customer(items, 2l, app));\r\n        session.save(new Customer(items, 3l, app));\r\n        ClientApp otherApp = new ClientApp(\"gnarus\", \"123\");\r\n        item = new Item(2l, otherApp);\r\n        items = Arrays.asList(item);\r\n        session.save(otherApp);\r\n        session.save(item);\r\n        session.save(new Customer(items, 1l, otherApp));\r\n        session.save(new Customer(items, 2l, otherApp));\r\n        session.save(new Customer(items, 3l, otherApp));\r\n    }\r\n\r\n}\r\n',2660,265),(266,'package br.ime.usp.commendans.dao;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport org.junit.After;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class ItemDaoTest extends DaoTest {\r\n    \r\n    private ItemDao itemDao;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        itemDao = new ItemDao(session);\r\n        session.beginTransaction();\r\n    }\r\n    \r\n    @After\r\n    public void tearDown() {\r\n        session.getTransaction().rollback();\r\n        session.clear();\r\n    }\r\n    \r\n    @Test\r\n    public void shouldFindByAppItemId() throws Exception {\r\n        ClientApp app = new ClientApp(\"cdc\", \"123\");\r\n        ClientApp app2 = new ClientApp(\"caelum\", \"1234\");\r\n        session.save(app);\r\n        session.save(app2);\r\n        session.save(new Item(11l, app));\r\n        session.save(new Item(11l, app2));\r\n        Item item = itemDao.findByAppItemId(11l, app);\r\n        assertEquals(11l, item.getAppItemId().longValue());\r\n        assertEquals(\"cdc\", item.getApp().getName());\r\n    }\r\n\r\n}\r\n',1106,266),(267,'package br.ime.usp.commendans.infra;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n\r\npublic class TupleJsonSerializerTest {\r\n\r\n    @Test\r\n    public void shouldSerializeATuple() {\r\n        TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n        ClientApp cdc = new ClientApp(\"Casa do Código\", \"123\");\r\n        String json = serializer.toJson(new Tuple(new Item(1l, cdc), 10.0));\r\n        assertEquals(\"{\\\"item\\\":{\\\"appItemId\\\":1},\\\"value\\\":10.0}\", json);\r\n    }\r\n    \r\n    @Test\r\n    public void shouldSerializeATupleList() {\r\n        TupleJsonSerializer serializer = new TupleJsonSerializer();\r\n        ClientApp cdc = new ClientApp(\"Casa do Código\", \"123\");\r\n        String json = serializer.toJson(Arrays.asList(new Tuple(new Item(1l, cdc), 10.0)));\r\n        assertEquals(\"[{\\\"item\\\":{\\\"appItemId\\\":1},\\\"value\\\":10.0}]\", json);\r\n    }\r\n\r\n}\r\n',1065,267),(268,'package br.ime.usp.commendans.recommender.itemtoitem;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n\r\npublic class ItemVectorTest {\r\n\r\n    @Test\r\n    public void shouldMergeTuples() {\r\n        ClientApp cdc = new ClientApp(\"Casa do Código\", \"123\");\r\n        Item item1 = new Item(1l, cdc);\r\n        Item item2 = new Item(2l, cdc);\r\n        Item item3 = new Item(3l, cdc);\r\n        Item item4 = new Item(4l, cdc);\r\n        List<Tuple> tuples = asList(new Tuple(item1, 11.0), new Tuple(item2, 8.0), new Tuple(item3, 2.0));\r\n        ItemVector itemVector1 = new ItemVector(new HashSet<Tuple>(tuples));\r\n        tuples = asList(new Tuple(item4, 10.0), new Tuple(item3, 7.0));\r\n        ItemVector itemVector2 = new ItemVector(new HashSet<Tuple>(tuples));\r\n        \r\n        ItemVector merge = itemVector1.merge(itemVector2);\r\n        List<Tuple> expected = asList(new Tuple(item1, 11.0), new Tuple(item4, 10.0), new Tuple(item3, 9.0), new Tuple(item2, 8.0));\r\n        assertEquals(expected, merge.getTuples());\r\n        \r\n    }\r\n\r\n    private List<Tuple> asList(Tuple ... tuples) {\r\n        ArrayList<Tuple> tuplesList = new ArrayList<Tuple>();\r\n        for (int i = 0; i < tuples.length; i++) {\r\n            tuplesList.add(tuples[i]);\r\n        }\r\n        return tuplesList;\r\n    }\r\n\r\n}\r\n',1610,268),(269,'package br.ime.usp.commendans.recommender.itemtoitem;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.junit.Test;\r\n\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemToItemsAssociation;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommenderFactory;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n\r\npublic class SingleAppRecommenderFactoryTest {\r\n\r\n    @Test\r\n    public void shouldBuildRecommenderFromCollectiveIntelligenceInActionExample() {\r\n        SingleAppRecommenderFactory factory = new SingleAppRecommenderFactory();\r\n        ClientApp cdc = new ClientApp(\"casadocodigo\", \"1234\");\r\n        Item item1 = new Item(1l, cdc);\r\n        Item item2 = new Item(2l, cdc);\r\n        Item item3 = new Item(3l, cdc);\r\n        Item item4 = new Item(4l, cdc);\r\n        Customer user1 = new Customer(Arrays.asList(item1, item3), 1l, cdc);\r\n        Customer user2 = new Customer(Arrays.asList(item2, item4), 2l, cdc);\r\n        Customer user3 = new Customer(Arrays.asList(item1, item2, item3), 3l, cdc);\r\n        Customer user4 = new Customer(Arrays.asList(item3, item4), 4l, cdc);\r\n        factory.addUser(user1);\r\n        factory.addUser(user2);\r\n        factory.addUser(user3);\r\n        factory.addUser(user4);\r\n        \r\n        SingleAppRecommender recommender = factory.build();\r\n        HashMap<Item, ItemToItemsAssociation> associations = factory.getAssociations();\r\n        \r\n        List<Tuple> recommendedItems = recommender.recommendedItemsFor(item1).getTuples();\r\n        ItemToItemsAssociation association = associations.get(item1);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(2.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(2, recommendedItems.size());\r\n        assertEquals(item3, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(item2, recommendedItems.get(1).getItem());\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendedItemsFor(item2).getTuples();\r\n        association = associations.get(item2);\r\n        assertEquals(1.0, association.associationValue(item1), 0.001);\r\n        assertEquals(0.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(1.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        recommendedItems = recommender.recommendedItemsFor(item3).getTuples();\r\n        association = associations.get(item3);\r\n        assertEquals(2.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(0.0, association.associationValue(item3), 0.001);\r\n        assertEquals(1.0, association.associationValue(item4), 0.001);\r\n        \r\n        assertEquals(3, recommendedItems.size());\r\n        assertEquals(item1, recommendedItems.get(0).getItem());\r\n        assertEquals(2.0, recommendedItems.get(0).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(1).getValue().doubleValue(), 0.001);\r\n        assertEquals(1.0, recommendedItems.get(2).getValue().doubleValue(), 0.001);\r\n        \r\n        association = associations.get(item4);\r\n        assertEquals(0.0, association.associationValue(item1), 0.001);\r\n        assertEquals(1.0, association.associationValue(item2), 0.001);\r\n        assertEquals(1.0, association.associationValue(item3), 0.001);\r\n        assertEquals(0.0, association.associationValue(item4), 0.001);\r\n        \r\n    }\r\n\r\n}\r\n',4447,269),(270,'<?xml version=\'1.0\' encoding=\'utf-8\'?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n<hibernate-configuration>\r\n    <session-factory>\r\n    \r\n    	<!-- connection pool configs -->\r\n	    <property name=\"c3p0.acquire_increment\">1</property> \r\n		<property name=\"c3p0.idle_test_period\">100</property> <!-- seconds --> \r\n		<property name=\"c3p0.max_size\">15</property> \r\n		<property name=\"c3p0.min_size\">1</property> \r\n		<property name=\"c3p0.timeout\">600</property>\r\n    \r\n        <property name=\"connection.url\">jdbc:mysql://localhost/commendans_test</property>\r\n        <property name=\"connection.driver_class\">com.mysql.jdbc.Driver</property>\r\n        <property name=\"dialect\">org.hibernate.dialect.MySQL5InnoDBDialect</property>\r\n        <property name=\"connection.username\">root</property>\r\n        <property name=\"connection.password\"></property>\r\n        <property name=\"hibernate.hbm2ddl.auto\">create-drop</property>\r\n        <property name=\"show_sql\">true</property>\r\n        <property name=\"format_sql\">false</property>\r\n        <property name=\"hibernate.generate_statistics\">true</property>\r\n\r\n        <mapping class=\"br.ime.usp.commendans.model.Item\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.Customer\" />\r\n        <mapping class=\"br.ime.usp.commendans.model.ClientApp\" />\r\n\r\n    </session-factory>\r\n</hibernate-configuration>\r\n',1473,270),(271,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Post;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ClientAppDao;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.GroupedItems;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Resource\r\npublic class ClientAppController {\r\n\r\n    private final Result result;\r\n    private final ClientAppDao appDao;\r\n    private final ItemDao itemDao;\r\n    private final CustomerDao customerDao;\r\n\r\n    public ClientAppController(Result result, ClientAppDao appDao, ItemDao itemDao, CustomerDao customerDao) {\r\n        this.result = result;\r\n        this.appDao = appDao;\r\n        this.itemDao = itemDao;\r\n        this.customerDao = customerDao;\r\n    }\r\n    \r\n    //clientAppUserId=100&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\r\n    @Post(\"app/{key}/addSale\")\r\n    public void addSale(String key, Long clientAppUserId, List<Long> itemsIds) {\r\n        ClientApp app = appDao.findByAccessKey(key);\r\n        GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n        \r\n        ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n        \r\n        for (Item item : newItems) {\r\n            itemDao.save(item);\r\n        }\r\n        \r\n        Customer customer = customerDao.find(app, clientAppUserId);\r\n        List<Item> allItems = groupedItems.getItems();\r\n        if (customer == null) {\r\n            customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n        }\r\n        for (Item item : allItems) {\r\n            customer.add(item);\r\n        }\r\n        customerDao.save(customer);\r\n        result.use(Results.json()).from(true).serialize();\r\n    }\r\n    \r\n    @Get(\"app/new\")\r\n    public void clientAppForm() {\r\n    }\r\n    \r\n    @Post(\"app/new\")\r\n    public void saveApp(String name) {\r\n        String accessKey = \"123\" + name;\r\n        appDao.save(new ClientApp(name, accessKey));\r\n        result.include(\"key\", accessKey);\r\n    }\r\n\r\n}\r\n',2308,271),(272,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ClientAppDao;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.infra.TupleJsonSerializer;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.GeneralRecommender;\r\nimport br.ime.usp.commendans.recommender.RecommenderCreator;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n\r\n@Resource\r\npublic class ItemToItemController {\r\n    private final ItemDao itemDao;\r\n    private final Result result;\r\n    private final TupleJsonSerializer serializer;\r\n    private final GeneralRecommender recommender;\r\n    private final ClientAppDao appDao;\r\n    private final RecommenderCreator recommenderCreator;\r\n\r\n    public ItemToItemController(GeneralRecommender recommender, \r\n            ItemDao itemDao, ClientAppDao appDao, Result result, \r\n            TupleJsonSerializer serializer, RecommenderCreator recommenderCreator) {\r\n        this.recommender = recommender;\r\n        this.itemDao = itemDao;\r\n        this.appDao = appDao;\r\n        this.result = result;\r\n        this.serializer = serializer;\r\n        this.recommenderCreator = recommenderCreator;\r\n    }\r\n    \r\n    @Get(\"/recommend/item/{appItemId}\")\r\n    public void recommend(Long appItemId, String accessKey) {\r\n        if (validKey(accessKey)) {\r\n            ClientApp app = appDao.findByAccessKey(accessKey);\r\n            Item item = itemDao.findByAppItemId(appItemId, app);\r\n            ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n            serializeResult(recommended);\r\n        }\r\n    }\r\n    \r\n\r\n    @Get(\"/recommend/items/\")\r\n    public void recommend(List<Long> itemsIds, String accessKey) {\r\n        if (validKey(accessKey)) {\r\n            ClientApp app = appDao.findByAccessKey(accessKey);\r\n            List<Item> items = itemDao.findItems(itemsIds, app).getItems();\r\n            ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n            serializeResult(recommended);\r\n        }\r\n    }\r\n    \r\n    @Get(\"/recalculate/\")\r\n    public void recalculate() {\r\n        recommenderCreator.create();\r\n        result.use(Results.http()).body(\"ok\");\r\n    }\r\n\r\n    private boolean validKey(String accessKey) {\r\n        ClientApp app = appDao.findByAccessKey(accessKey);\r\n        if (app == null) {\r\n            result.notFound();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void serializeResult(ItemVector recommended) {\r\n        List<Tuple> tuples = recommended == null ? new ArrayList<Tuple>() : recommended.getTuples();\r\n        result.use(Results.http())\r\n            .addHeader(\"content-type\", \"application/json\")\r\n            .body(serializer.toJson(tuples));\r\n    }\r\n}\r\n',3095,272),(273,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Query;\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\n\r\n@Component\r\npublic class ClientAppDao {\r\n    \r\n    private final Session session;\r\n\r\n    public ClientAppDao(Session session) {\r\n        this.session = session;\r\n    }\r\n    \r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<ClientApp> list() {\r\n        return session.createCriteria(ClientApp.class).list();\r\n    }\r\n\r\n    public ClientApp findByAccessKey(String key) {\r\n        Query query = session.createQuery(\"select app from ClientApp app where app.accessKey=:key\");\r\n        query.setParameter(\"key\", key);\r\n        return (ClientApp) query.uniqueResult();\r\n    }\r\n\r\n    public void save(ClientApp clientApp) {\r\n        session.save(clientApp);\r\n    }\r\n\r\n    public void commit() {\r\n        session.getTransaction().commit();\r\n    }\r\n\r\n    public void beginTransaction() {\r\n        session.beginTransaction();\r\n    }\r\n\r\n\r\n}\r\n',1053,273),(274,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Query;\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.PrototypeScoped;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\n\r\n@Component @PrototypeScoped\r\npublic class CustomerDao {\r\n    private final Session session;\r\n\r\n    public CustomerDao(Session session) {\r\n        this.session = session;\r\n    }\r\n    \r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Customer> list() {\r\n        return session.createCriteria(Customer.class).list();\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Customer> findCustomersOf(ClientApp app) {\r\n        Query query = session.createQuery(\"select customer from Customer customer \" +\r\n        		\"join fetch customer.items \" +\r\n        		\"where customer.app.name like :appName\");\r\n        query.setParameter(\"appName\", app.getName());\r\n        return query.list();\r\n    }\r\n\r\n    public void save(Customer customer) {\r\n        session.save(customer);\r\n    }\r\n\r\n    public Customer find(ClientApp app, Long customerId) {\r\n        Query query = session.createQuery(\"select customer from Customer customer \" +\r\n                \"where customer.app.id like :appId \" +\r\n                \"and customer.clientAppCustomerId = :customerId\");\r\n        query.setParameter(\"appId\", app.getId());\r\n        query.setParameter(\"customerId\", customerId);\r\n        return (Customer) query.uniqueResult();\r\n    }\r\n}\r\n',1538,274),(275,'/***\r\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\r\n * All rights reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\npackage br.ime.usp.commendans.infra;\r\n\r\nimport org.hibernate.Session;\r\nimport org.hibernate.Transaction;\r\n\r\nimport br.com.caelum.vraptor.Intercepts;\r\nimport br.com.caelum.vraptor.Validator;\r\nimport br.com.caelum.vraptor.core.InterceptorStack;\r\nimport br.com.caelum.vraptor.interceptor.Interceptor;\r\nimport br.com.caelum.vraptor.resource.ResourceMethod;\r\n\r\n/**\r\n * An interceptor that manages Hibernate Transaction. All requests are intercepted\r\n * and a transaction is created before execution. If the request has no erros, the transaction\r\n * will commited, or a rollback occurs otherwise.\r\n * \r\n * @author Lucas Cavalcanti\r\n */\r\n@Intercepts\r\npublic class HibernateTransactionInterceptor implements Interceptor {\r\n\r\n    private final Session session;\r\n    private final Validator validator;\r\n\r\n    public HibernateTransactionInterceptor(Session session, Validator validator) {\r\n        this.session = session;\r\n        this.validator = validator;\r\n    }\r\n\r\n    //TODO I think that transaction null check is unnecessary, since we never get null transation (garcia-jj)\r\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object instance) {\r\n        Transaction transaction = null;\r\n        try {\r\n            transaction = session.beginTransaction();\r\n            stack.next(method, instance);\r\n            if (!validator.hasErrors() && transaction != null) {\r\n                transaction.commit();\r\n            }\r\n        } finally {\r\n            if (transaction != null && transaction.isActive()) {\r\n                transaction.rollback();\r\n            }\r\n        }\r\n    }\r\n\r\n    public boolean accepts(ResourceMethod method) {\r\n        return true; // Will intercept all requests\r\n    }\r\n}\r\n',2379,275),(276,'<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n<title>Insert title here</title>\r\n</head>\r\n<body>\r\n\r\n	<form method=\"post\">\r\n		App name: <input type=\"text\" name=\"name\" /> <br>\r\n		<input type=\"submit\"/> \r\n	</form>\r\n\r\n</body>\r\n</html>\r\n',467,276),(277,'<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n<title>Insert title here</title>\r\n</head>\r\n<body>\r\n\r\n<p>\r\n	App saved!\r\n</p>\r\n<p>\r\n	Store your access key: ${key}\r\n</p>\r\n\r\n</body>\r\n</html>\r\n',422,277),(278,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Query;\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.PrototypeScoped;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\n\r\n@Component @PrototypeScoped\r\npublic class CustomerDao {\r\n    private final Session session;\r\n\r\n    public CustomerDao(Session session) {\r\n        this.session = session;\r\n    }\r\n    \r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Customer> list() {\r\n        return session.createCriteria(Customer.class).list();\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Customer> findCustomersOf(ClientApp app) {\r\n        Query query = session.createQuery(\"select customer from Customer customer \" +\r\n        		\"where customer.app.name like :appName\");\r\n        query.setParameter(\"appName\", app.getName());\r\n        return query.list();\r\n    }\r\n\r\n    public void save(Customer customer) {\r\n        session.save(customer);\r\n    }\r\n\r\n    public Customer find(ClientApp app, Long customerId) {\r\n        Query query = session.createQuery(\"select customer from Customer customer \" +\r\n                \"where customer.app.id like :appId \" +\r\n                \"and customer.clientAppCustomerId = :customerId\");\r\n        query.setParameter(\"appId\", app.getId());\r\n        query.setParameter(\"customerId\", customerId);\r\n        return (Customer) query.uniqueResult();\r\n    }\r\n}\r\n',1496,278),(279,'package br.ime.usp.commendans.model;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.FetchType;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.ManyToMany;\r\nimport javax.persistence.ManyToOne;\r\n\r\n@Entity\r\npublic class Customer {\r\n    \r\n    @Id @GeneratedValue\r\n    private Long id;\r\n    \r\n    private Long clientAppCustomerId;\r\n\r\n    @ManyToMany(fetch=FetchType.EAGER)\r\n    private List<Item> items;\r\n    \r\n    @ManyToOne\r\n    private ClientApp app;\r\n    \r\n    @Deprecated\r\n    public Customer() {\r\n    }\r\n\r\n    public Customer(List<Item> items, Long clientAppCustomerId, ClientApp app) {\r\n        this.items = items;\r\n        this.clientAppCustomerId = clientAppCustomerId;\r\n        this.app = app;\r\n    }\r\n\r\n    public List<Item> itemsBought() {\r\n        return items;\r\n    }\r\n    \r\n    @Override\r\n    public String toString() {\r\n        return \"User \" + clientAppCustomerId + \" from \" + app;\r\n    }\r\n\r\n    public void add(Item item) {\r\n        items.add(item);\r\n    }\r\n    \r\n    public ClientApp getApp() {\r\n        return app;\r\n    }\r\n    \r\n    public Long getClientAppCustomerId() {\r\n        return clientAppCustomerId;\r\n    }\r\n    \r\n}\r\n',1232,279),(280,'<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<groupId>heroku-blank</groupId>\r\n	<artifactId>heroku-blank</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>heroku-blank</name>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n	</properties>\r\n\r\n	<build>\r\n		<outputDirectory>${basedir}/src/main/webapp/WEB-INF/classes</outputDirectory>\r\n		<plugins>\r\n			<plugin>\r\n				<artifactId>maven-compiler-plugin</artifactId>\r\n				<version>2.3.2</version>\r\n				<configuration>\r\n					<source>1.6</source>\r\n					<target>1.6</target>\r\n					<encoding>UTF-8</encoding>\r\n				</configuration>\r\n			</plugin>\r\n            \r\n            <plugin>\r\n                <artifactId>maven-eclipse-plugin</artifactId>\r\n                <version>2.8</version>\r\n                <configuration>\r\n                    <downloadSources>true</downloadSources>\r\n                    <downloadJavadocs>true</downloadJavadocs>\r\n                </configuration>\r\n            </plugin>\r\n            \r\n            <plugin>\r\n				<artifactId>maven-dependency-plugin</artifactId>\r\n				<executions>\r\n					<execution>\r\n						<phase>install</phase>\r\n						<goals>\r\n							<goal>copy-dependencies</goal>\r\n						</goals>\r\n						<configuration>\r\n							<outputDirectory>src/main/webapp/WEB-INF/lib</outputDirectory>\r\n						</configuration>\r\n					</execution>\r\n				</executions>\r\n				</plugin>\r\n            \r\n			<plugin>\r\n				<groupId>org.apache.maven.plugins</groupId>\r\n				<artifactId>maven-war-plugin</artifactId>\r\n				<version>2.1.1</version>\r\n				<configuration>\r\n   					<webXml>src/main/webapp/WEB-INF/web-heroku.xml</webXml>        \r\n  				</configuration>\r\n			</plugin>\r\n			<plugin>\r\n				<groupId>org.mortbay.jetty</groupId>\r\n				<artifactId>maven-jetty-plugin</artifactId>\r\n				<version>6.1.14</version>\r\n				<configuration>\r\n					<scanIntervalSeconds>3</scanIntervalSeconds>\r\n					<stopKey>foo</stopKey>\r\n					<stopPort>9999</stopPort>\r\n					<webAppConfig>\r\n						<contextPath>/</contextPath>\r\n					</webAppConfig>\r\n				</configuration>\r\n			</plugin>\r\n            <plugin>\r\n                <groupId>org.codehaus.mojo</groupId>\r\n                <artifactId>appassembler-maven-plugin</artifactId>\r\n                <version>1.1.1</version>\r\n                <executions>\r\n                    <execution>\r\n                        <phase>package</phase>\r\n                        <goals>\r\n                            <goal>assemble</goal>\r\n                        </goals>\r\n                        <configuration>\r\n                            <assembleDirectory>target</assembleDirectory>\r\n                            <extraJvmArguments>-Xmx512m</extraJvmArguments>\r\n                            <programs>\r\n                                <program>\r\n                                    <mainClass>br.ime.usp.commendans.infra.JettyRunner</mainClass>\r\n                                    <name>webapp</name>\r\n                                </program>\r\n                            </programs>\r\n                        </configuration>\r\n                    </execution>\r\n                </executions>\r\n            </plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-core</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate.javax.persistence</groupId>\r\n		  <artifactId>hibernate-jpa-2.0-api</artifactId>\r\n		  <version>1.0.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-c3p0</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javax.transaction</groupId>\r\n		  <artifactId>jta</artifactId>\r\n		  <version>1.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>mysql</groupId>\r\n		  <artifactId>mysql-connector-java</artifactId>\r\n		  <version>5.1.18</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>c3p0</groupId>\r\n		  <artifactId>c3p0</artifactId>\r\n		  <version>0.9.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-validator</artifactId>\r\n		  <version>4.3.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>net.sf.ehcache</groupId>\r\n		  <artifactId>ehcache-core</artifactId>\r\n		  <version>2.5.3</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>br.com.caelum</groupId>\r\n		  <artifactId>vraptor</artifactId>\r\n		  <version>3.4.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-api</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>log4j</groupId>\r\n		  <artifactId>log4j</artifactId>\r\n		  <version>1.2.16</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-log4j12</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api-2.5</artifactId>\r\n		  <version>6.1H.14.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.glassfish.web</groupId>\r\n		  <artifactId>jstl-impl</artifactId>\r\n		  <version>1.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api</artifactId>\r\n		  <version>3.0.pre4</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javassist</groupId>\r\n		  <artifactId>javassist</artifactId>\r\n		  <version>3.12.1.GA</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>commons-io</groupId>\r\n		  <artifactId>commons-io</artifactId>\r\n		  <version>2.0.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.guava</groupId>\r\n		  <artifactId>guava</artifactId>\r\n		  <version>r09</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.code.gson</groupId>\r\n		  <artifactId>gson</artifactId>\r\n		  <version>2.2.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>junit</groupId>\r\n		  <artifactId>junit</artifactId>\r\n		  <version>4.8.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mockito</groupId>\r\n		  <artifactId>mockito-all</artifactId>\r\n		  <version>1.8.5</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hsqldb</groupId>\r\n		  <artifactId>hsqldb</artifactId>\r\n		  <version>2.2.8</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.eclipse.jetty</groupId>\r\n			<artifactId>jetty-webapp</artifactId>\r\n			<version>7.4.4.v20110707</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.mortbay.jetty</groupId>\r\n			<artifactId>jsp-2.1-glassfish</artifactId>\r\n			<version>2.1.v20100127</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>postgresql</groupId>\r\n			<artifactId>postgresql</artifactId>\r\n			<version>9.1-901.jdbc4</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.glassfish.web</groupId>\r\n			<artifactId>jstl-impl</artifactId>\r\n			<version>1.2</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.glassfish.web</groupId>\r\n			<artifactId>el</artifactId>\r\n			<version>2.2.1-b03</version>\r\n		</dependency>\r\n		            \r\n		            \r\n            \r\n		<!-- Provided dependencies -->\r\n	</dependencies>\r\n\r\n	<reporting>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.codehaus.mojo</groupId>\r\n				<artifactId>cobertura-maven-plugin</artifactId>\r\n				<version>2.5.1</version>\r\n			</plugin>\r\n		</plugins>\r\n	</reporting>\r\n</project>\r\n',7564,280),(281,'<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<groupId>heroku-blank</groupId>\r\n	<artifactId>heroku-blank</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>heroku-blank</name>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n	</properties>\r\n\r\n	<build>\r\n		<outputDirectory>${basedir}/src/main/webapp/WEB-INF/classes</outputDirectory>\r\n		<plugins>\r\n			<plugin>\r\n				<artifactId>maven-compiler-plugin</artifactId>\r\n				<version>2.3.2</version>\r\n				<configuration>\r\n					<source>1.6</source>\r\n					<target>1.6</target>\r\n					<encoding>UTF-8</encoding>\r\n				</configuration>\r\n			</plugin>\r\n            \r\n            <plugin>\r\n                <artifactId>maven-eclipse-plugin</artifactId>\r\n                <version>2.8</version>\r\n                <configuration>\r\n                    <downloadSources>true</downloadSources>\r\n                    <downloadJavadocs>true</downloadJavadocs>\r\n                </configuration>\r\n            </plugin>\r\n            \r\n            <plugin>\r\n				<artifactId>maven-dependency-plugin</artifactId>\r\n				<executions>\r\n					<execution>\r\n						<phase>install</phase>\r\n						<goals>\r\n							<goal>copy-dependencies</goal>\r\n						</goals>\r\n						<configuration>\r\n							<outputDirectory>src/main/webapp/WEB-INF/lib</outputDirectory>\r\n						</configuration>\r\n					</execution>\r\n				</executions>\r\n				</plugin>\r\n            \r\n			<plugin>\r\n				<groupId>org.apache.maven.plugins</groupId>\r\n				<artifactId>maven-war-plugin</artifactId>\r\n				<version>2.1.1</version>\r\n				<configuration>\r\n   					<webXml>src/main/webapp/WEB-INF/web-heroku.xml</webXml>        \r\n  				</configuration>\r\n			</plugin>\r\n			<plugin>\r\n				<groupId>org.mortbay.jetty</groupId>\r\n				<artifactId>maven-jetty-plugin</artifactId>\r\n				<version>6.1.14</version>\r\n				<configuration>\r\n					<scanIntervalSeconds>3</scanIntervalSeconds>\r\n					<stopKey>foo</stopKey>\r\n					<stopPort>9999</stopPort>\r\n					<webAppConfig>\r\n						<contextPath>/</contextPath>\r\n					</webAppConfig>\r\n				</configuration>\r\n			</plugin>\r\n            <plugin>\r\n                <groupId>org.codehaus.mojo</groupId>\r\n                <artifactId>appassembler-maven-plugin</artifactId>\r\n                <version>1.1.1</version>\r\n                <executions>\r\n                    <execution>\r\n                        <phase>package</phase>\r\n                        <goals>\r\n                            <goal>assemble</goal>\r\n                        </goals>\r\n                        <configuration>\r\n                            <assembleDirectory>target</assembleDirectory>\r\n                            <extraJvmArguments>-Xmx512m</extraJvmArguments>\r\n                            <programs>\r\n                                <program>\r\n                                    <mainClass>br.ime.usp.commendans.infra.JettyRunner</mainClass>\r\n                                    <name>webapp</name>\r\n                                </program>\r\n                            </programs>\r\n                        </configuration>\r\n                    </execution>\r\n                </executions>\r\n            </plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-core</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate.javax.persistence</groupId>\r\n		  <artifactId>hibernate-jpa-2.0-api</artifactId>\r\n		  <version>1.0.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-c3p0</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javax.transaction</groupId>\r\n		  <artifactId>jta</artifactId>\r\n		  <version>1.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>mysql</groupId>\r\n		  <artifactId>mysql-connector-java</artifactId>\r\n		  <version>5.1.18</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>c3p0</groupId>\r\n		  <artifactId>c3p0</artifactId>\r\n		  <version>0.9.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-validator</artifactId>\r\n		  <version>4.3.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>net.sf.ehcache</groupId>\r\n		  <artifactId>ehcache-core</artifactId>\r\n		  <version>2.5.3</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>br.com.caelum</groupId>\r\n		  <artifactId>vraptor</artifactId>\r\n		  <version>3.4.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-api</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>log4j</groupId>\r\n		  <artifactId>log4j</artifactId>\r\n		  <version>1.2.16</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-log4j12</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api-2.5</artifactId>\r\n		  <version>6.1H.14.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.glassfish.web</groupId>\r\n		  <artifactId>jstl-impl</artifactId>\r\n		  <version>1.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api</artifactId>\r\n		  <version>3.0.pre4</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javassist</groupId>\r\n		  <artifactId>javassist</artifactId>\r\n		  <version>3.12.1.GA</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>commons-io</groupId>\r\n		  <artifactId>commons-io</artifactId>\r\n		  <version>2.0.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.guava</groupId>\r\n		  <artifactId>guava</artifactId>\r\n		  <version>r09</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.code.gson</groupId>\r\n		  <artifactId>gson</artifactId>\r\n		  <version>2.2.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>junit</groupId>\r\n		  <artifactId>junit</artifactId>\r\n		  <version>4.8.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mockito</groupId>\r\n		  <artifactId>mockito-all</artifactId>\r\n		  <version>1.8.5</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hsqldb</groupId>\r\n		  <artifactId>hsqldb</artifactId>\r\n		  <version>2.2.8</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.eclipse.jetty</groupId>\r\n			<artifactId>jetty-webapp</artifactId>\r\n			<version>7.4.4.v20110707</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.mortbay.jetty</groupId>\r\n			<artifactId>jsp-2.1-glassfish</artifactId>\r\n			<version>2.1.v20100127</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.mortbay.jetty</groupId>\r\n			<artifactId>jsp-api-2.1</artifactId>\r\n			<version>7.0.0pre2</version>\r\n		</dependency>\r\n		            \r\n		<dependency>\r\n			<groupId>postgresql</groupId>\r\n			<artifactId>postgresql</artifactId>\r\n			<version>9.1-901.jdbc4</version>\r\n		</dependency>\r\n            \r\n		<!-- Provided dependencies -->\r\n	</dependencies>\r\n\r\n	<reporting>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.codehaus.mojo</groupId>\r\n				<artifactId>cobertura-maven-plugin</artifactId>\r\n				<version>2.5.1</version>\r\n			</plugin>\r\n		</plugins>\r\n	</reporting>\r\n</project>\r\n',7417,281),(282,'<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<groupId>heroku-blank</groupId>\r\n	<artifactId>heroku-blank</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>heroku-blank</name>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n	</properties>\r\n\r\n	<build>\r\n		<outputDirectory>${basedir}/src/main/webapp/WEB-INF/classes</outputDirectory>\r\n		<plugins>\r\n			<plugin>\r\n				<artifactId>maven-compiler-plugin</artifactId>\r\n				<version>2.3.2</version>\r\n				<configuration>\r\n					<source>1.6</source>\r\n					<target>1.6</target>\r\n					<encoding>UTF-8</encoding>\r\n				</configuration>\r\n			</plugin>\r\n            \r\n            <plugin>\r\n                <artifactId>maven-eclipse-plugin</artifactId>\r\n                <version>2.8</version>\r\n                <configuration>\r\n                    <downloadSources>true</downloadSources>\r\n                    <downloadJavadocs>true</downloadJavadocs>\r\n                </configuration>\r\n            </plugin>\r\n            \r\n            <plugin>\r\n				<artifactId>maven-dependency-plugin</artifactId>\r\n				<executions>\r\n					<execution>\r\n						<phase>install</phase>\r\n						<goals>\r\n							<goal>copy-dependencies</goal>\r\n						</goals>\r\n						<configuration>\r\n							<outputDirectory>src/main/webapp/WEB-INF/lib</outputDirectory>\r\n						</configuration>\r\n					</execution>\r\n				</executions>\r\n				</plugin>\r\n            \r\n			<plugin>\r\n				<groupId>org.apache.maven.plugins</groupId>\r\n				<artifactId>maven-war-plugin</artifactId>\r\n				<version>2.1.1</version>\r\n				<configuration>\r\n   					<webXml>src/main/webapp/WEB-INF/web-heroku.xml</webXml>        \r\n  				</configuration>\r\n			</plugin>\r\n			<plugin>\r\n				<groupId>org.mortbay.jetty</groupId>\r\n				<artifactId>maven-jetty-plugin</artifactId>\r\n				<version>6.1.14</version>\r\n				<configuration>\r\n					<scanIntervalSeconds>3</scanIntervalSeconds>\r\n					<stopKey>foo</stopKey>\r\n					<stopPort>9999</stopPort>\r\n					<webAppConfig>\r\n						<contextPath>/</contextPath>\r\n					</webAppConfig>\r\n				</configuration>\r\n			</plugin>\r\n            <plugin>\r\n                <groupId>org.codehaus.mojo</groupId>\r\n                <artifactId>appassembler-maven-plugin</artifactId>\r\n                <version>1.1.1</version>\r\n                <executions>\r\n                    <execution>\r\n                        <phase>package</phase>\r\n                        <goals>\r\n                            <goal>assemble</goal>\r\n                        </goals>\r\n                        <configuration>\r\n                            <assembleDirectory>target</assembleDirectory>\r\n                            <extraJvmArguments>-Xmx512m</extraJvmArguments>\r\n                            <programs>\r\n                                <program>\r\n                                    <mainClass>br.ime.usp.commendans.infra.JettyRunner</mainClass>\r\n                                    <name>webapp</name>\r\n                                </program>\r\n                            </programs>\r\n                        </configuration>\r\n                    </execution>\r\n                </executions>\r\n            </plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-core</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate.javax.persistence</groupId>\r\n		  <artifactId>hibernate-jpa-2.0-api</artifactId>\r\n		  <version>1.0.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-c3p0</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javax.transaction</groupId>\r\n		  <artifactId>jta</artifactId>\r\n		  <version>1.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>mysql</groupId>\r\n		  <artifactId>mysql-connector-java</artifactId>\r\n		  <version>5.1.18</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>c3p0</groupId>\r\n		  <artifactId>c3p0</artifactId>\r\n		  <version>0.9.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-validator</artifactId>\r\n		  <version>4.3.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>net.sf.ehcache</groupId>\r\n		  <artifactId>ehcache-core</artifactId>\r\n		  <version>2.5.3</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>br.com.caelum</groupId>\r\n		  <artifactId>vraptor</artifactId>\r\n		  <version>3.4.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-api</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>log4j</groupId>\r\n		  <artifactId>log4j</artifactId>\r\n		  <version>1.2.16</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-log4j12</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api-2.5</artifactId>\r\n		  <version>6.1H.14.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.glassfish.web</groupId>\r\n		  <artifactId>jstl-impl</artifactId>\r\n		  <version>1.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api</artifactId>\r\n		  <version>3.0.pre4</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javassist</groupId>\r\n		  <artifactId>javassist</artifactId>\r\n		  <version>3.12.1.GA</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>commons-io</groupId>\r\n		  <artifactId>commons-io</artifactId>\r\n		  <version>2.0.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.guava</groupId>\r\n		  <artifactId>guava</artifactId>\r\n		  <version>r09</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.code.gson</groupId>\r\n		  <artifactId>gson</artifactId>\r\n		  <version>2.2.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>junit</groupId>\r\n		  <artifactId>junit</artifactId>\r\n		  <version>4.8.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mockito</groupId>\r\n		  <artifactId>mockito-all</artifactId>\r\n		  <version>1.8.5</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hsqldb</groupId>\r\n		  <artifactId>hsqldb</artifactId>\r\n		  <version>2.2.8</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.eclipse.jetty</groupId>\r\n			<artifactId>jetty-webapp</artifactId>\r\n			<version>7.4.4.v20110707</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.mortbay.jetty</groupId>\r\n			<artifactId>jsp-api-2.1</artifactId>\r\n			<version>7.0.0pre2</version>\r\n		</dependency>\r\n		            \r\n		<dependency>\r\n			<groupId>postgresql</groupId>\r\n			<artifactId>postgresql</artifactId>\r\n			<version>9.1-901.jdbc4</version>\r\n		</dependency>\r\n		\r\n		<dependency>\r\n		   <groupId>javax.servlet</groupId>\r\n		   <artifactId>servlet-api</artifactId>\r\n		   <version>2.5</version>\r\n		   <scope>provided</scope>\r\n		</dependency>\r\n		\r\n<dependency>\r\n	<groupId>org.mortbay.jetty</groupId>\r\n	<artifactId>jsp-2.1-glassfish</artifactId>\r\n	<version>2.1.v20100127</version>\r\n</dependency>\r\n<dependency>\r\n   <groupId>javax.servlet</groupId>\r\n   <artifactId>servlet-api</artifactId>\r\n   <version>2.5</version>\r\n   <scope>provided</scope>\r\n</dependency>\r\n<dependency>\r\n   <groupId>javax.servlet.jsp</groupId>\r\n   <artifactId>jsp-api</artifactId>\r\n   <version>2.1</version>\r\n   <scope>compile</scope>\r\n</dependency>\r\n<dependency>\r\n   <groupId>javax.servlet</groupId>\r\n   <artifactId>jstl</artifactId>\r\n   <version>1.2</version>\r\n</dependency>\r\n<dependency>\r\n   <groupId>org.apache.tomcat</groupId>\r\n   <artifactId>jasper-el</artifactId>\r\n   <version>6.0.26</version>\r\n</dependency>\r\n            \r\n		<!-- Provided dependencies -->\r\n	</dependencies>\r\n\r\n	<reporting>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.codehaus.mojo</groupId>\r\n				<artifactId>cobertura-maven-plugin</artifactId>\r\n				<version>2.5.1</version>\r\n			</plugin>\r\n		</plugins>\r\n	</reporting>\r\n</project>\r\n',8178,282),(283,'<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<groupId>heroku-blank</groupId>\r\n	<artifactId>heroku-blank</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>heroku-blank</name>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n	</properties>\r\n\r\n	<build>\r\n		<outputDirectory>${basedir}/src/main/webapp/WEB-INF/classes</outputDirectory>\r\n		<plugins>\r\n			<plugin>\r\n				<artifactId>maven-compiler-plugin</artifactId>\r\n				<version>2.3.2</version>\r\n				<configuration>\r\n					<source>1.6</source>\r\n					<target>1.6</target>\r\n					<encoding>UTF-8</encoding>\r\n				</configuration>\r\n			</plugin>\r\n            \r\n            <plugin>\r\n                <artifactId>maven-eclipse-plugin</artifactId>\r\n                <version>2.8</version>\r\n                <configuration>\r\n                    <downloadSources>true</downloadSources>\r\n                    <downloadJavadocs>true</downloadJavadocs>\r\n                </configuration>\r\n            </plugin>\r\n            \r\n            <plugin>\r\n				<artifactId>maven-dependency-plugin</artifactId>\r\n				<executions>\r\n					<execution>\r\n						<phase>install</phase>\r\n						<goals>\r\n							<goal>copy-dependencies</goal>\r\n						</goals>\r\n						<configuration>\r\n							<outputDirectory>src/main/webapp/WEB-INF/lib</outputDirectory>\r\n						</configuration>\r\n					</execution>\r\n				</executions>\r\n				</plugin>\r\n            \r\n			<plugin>\r\n				<groupId>org.apache.maven.plugins</groupId>\r\n				<artifactId>maven-war-plugin</artifactId>\r\n				<version>2.1.1</version>\r\n				<configuration>\r\n   					<webXml>src/main/webapp/WEB-INF/web-heroku.xml</webXml>        \r\n  				</configuration>\r\n			</plugin>\r\n			<plugin>\r\n				<groupId>org.mortbay.jetty</groupId>\r\n				<artifactId>maven-jetty-plugin</artifactId>\r\n				<version>6.1.14</version>\r\n				<configuration>\r\n					<scanIntervalSeconds>3</scanIntervalSeconds>\r\n					<stopKey>foo</stopKey>\r\n					<stopPort>9999</stopPort>\r\n					<webAppConfig>\r\n						<contextPath>/</contextPath>\r\n					</webAppConfig>\r\n				</configuration>\r\n			</plugin>\r\n            <plugin>\r\n                <groupId>org.codehaus.mojo</groupId>\r\n                <artifactId>appassembler-maven-plugin</artifactId>\r\n                <version>1.1.1</version>\r\n                <executions>\r\n                    <execution>\r\n                        <phase>package</phase>\r\n                        <goals>\r\n                            <goal>assemble</goal>\r\n                        </goals>\r\n                        <configuration>\r\n                            <assembleDirectory>target</assembleDirectory>\r\n                            <extraJvmArguments>-Xmx512m</extraJvmArguments>\r\n                            <programs>\r\n                                <program>\r\n                                    <mainClass>br.ime.usp.commendans.infra.JettyRunner</mainClass>\r\n                                    <name>webapp</name>\r\n                                </program>\r\n                            </programs>\r\n                        </configuration>\r\n                    </execution>\r\n                </executions>\r\n            </plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-core</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate.javax.persistence</groupId>\r\n		  <artifactId>hibernate-jpa-2.0-api</artifactId>\r\n		  <version>1.0.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-c3p0</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javax.transaction</groupId>\r\n		  <artifactId>jta</artifactId>\r\n		  <version>1.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>mysql</groupId>\r\n		  <artifactId>mysql-connector-java</artifactId>\r\n		  <version>5.1.18</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>c3p0</groupId>\r\n		  <artifactId>c3p0</artifactId>\r\n		  <version>0.9.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-validator</artifactId>\r\n		  <version>4.3.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>net.sf.ehcache</groupId>\r\n		  <artifactId>ehcache-core</artifactId>\r\n		  <version>2.5.3</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>br.com.caelum</groupId>\r\n		  <artifactId>vraptor</artifactId>\r\n		  <version>3.4.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-api</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>log4j</groupId>\r\n		  <artifactId>log4j</artifactId>\r\n		  <version>1.2.16</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-log4j12</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api-2.5</artifactId>\r\n		  <version>6.1H.14.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.glassfish.web</groupId>\r\n		  <artifactId>jstl-impl</artifactId>\r\n		  <version>1.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api</artifactId>\r\n		  <version>3.0.pre4</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javassist</groupId>\r\n		  <artifactId>javassist</artifactId>\r\n		  <version>3.12.1.GA</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>commons-io</groupId>\r\n		  <artifactId>commons-io</artifactId>\r\n		  <version>2.0.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.guava</groupId>\r\n		  <artifactId>guava</artifactId>\r\n		  <version>r09</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.code.gson</groupId>\r\n		  <artifactId>gson</artifactId>\r\n		  <version>2.2.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>junit</groupId>\r\n		  <artifactId>junit</artifactId>\r\n		  <version>4.8.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mockito</groupId>\r\n		  <artifactId>mockito-all</artifactId>\r\n		  <version>1.8.5</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hsqldb</groupId>\r\n		  <artifactId>hsqldb</artifactId>\r\n		  <version>2.2.8</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.eclipse.jetty</groupId>\r\n			<artifactId>jetty-webapp</artifactId>\r\n			<version>7.4.4.v20110707</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.mortbay.jetty</groupId>\r\n			<artifactId>jsp-api-2.1</artifactId>\r\n			<version>7.0.0pre2</version>\r\n		</dependency>\r\n		            \r\n		<dependency>\r\n			<groupId>postgresql</groupId>\r\n			<artifactId>postgresql</artifactId>\r\n			<version>9.1-901.jdbc4</version>\r\n		</dependency>\r\n		\r\n		<dependency>\r\n		   <groupId>javax.servlet</groupId>\r\n		   <artifactId>servlet-api</artifactId>\r\n		   <version>2.5</version>\r\n		   <scope>provided</scope>\r\n		</dependency>\r\n		\r\n		<dependency>\r\n			<groupId>org.mortbay.jetty</groupId>\r\n			<artifactId>jsp-2.1-glassfish</artifactId>\r\n			<version>2.1.v20100127</version>\r\n		</dependency>\r\n		<dependency>\r\n		   <groupId>javax.servlet</groupId>\r\n		   <artifactId>servlet-api</artifactId>\r\n		   <version>2.5</version>\r\n		   <scope>provided</scope>\r\n		</dependency>\r\n		<dependency>\r\n		   <groupId>javax.servlet.jsp</groupId>\r\n		   <artifactId>jsp-api</artifactId>\r\n		   <version>2.1</version>\r\n		   <scope>compile</scope>\r\n		</dependency>\r\n		<dependency>\r\n		   <groupId>javax.servlet</groupId>\r\n		   <artifactId>jstl</artifactId>\r\n		   <version>1.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		   <groupId>org.apache.tomcat</groupId>\r\n		   <artifactId>jasper-el</artifactId>\r\n		   <version>6.0.26</version>\r\n		</dependency>\r\n            \r\n		<!-- Provided dependencies -->\r\n	</dependencies>\r\n\r\n	<reporting>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.codehaus.mojo</groupId>\r\n				<artifactId>cobertura-maven-plugin</artifactId>\r\n				<version>2.5.1</version>\r\n			</plugin>\r\n		</plugins>\r\n	</reporting>\r\n</project>\r\n',8232,283),(284,'package br.ime.usp.commendans.dao;\r\n\r\nimport java.util.List;\r\n\r\nimport org.hibernate.Query;\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.ioc.Component;\r\nimport br.com.caelum.vraptor.ioc.PrototypeScoped;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\n\r\n@Component @PrototypeScoped\r\npublic class CustomerDao {\r\n    private final Session session;\r\n\r\n    public CustomerDao(Session session) {\r\n        this.session = session;\r\n    }\r\n    \r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Customer> list() {\r\n        return session.createCriteria(Customer.class).list();\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<Customer> findCustomersOf(ClientApp app) {\r\n        Query query = session.createQuery(\"select customer from Customer customer \" +\r\n        		\"where customer.app.name like :appName\");\r\n        query.setParameter(\"appName\", app.getName());\r\n        return query.list();\r\n    }\r\n\r\n    public void save(Customer customer) {\r\n        session.save(customer);\r\n    }\r\n\r\n    public Customer find(ClientApp app, Long customerId) {\r\n        Query query = session.createQuery(\"select customer from Customer customer \" +\r\n                \"where customer.app.id = :appId \" +\r\n                \"and customer.clientAppCustomerId = :customerId\");\r\n        query.setParameter(\"appId\", app.getId());\r\n        query.setParameter(\"customerId\", customerId);\r\n        return (Customer) query.uniqueResult();\r\n    }\r\n}\r\n',1493,284),(285,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class DataImporter {\r\n    \r\n    private final Session session;\r\n    private static Logger logger = Logger.getLogger(DataImporter.class);\r\n\r\n    public DataImporter(Session session) {\r\n        this.session = session;\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        Session session = sf.openSession();\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n    }\r\n\r\n    public void importData(String file) {\r\n        HashMap<Long, Customer> users = new HashMap<Long, Customer>();\r\n        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n        String line = safeReadLine(reader);\r\n        ClientApp cdc = new ClientApp(\"Casa do Código\", \"123\");\r\n        session.save(cdc);\r\n        \r\n        while (line != null) {\r\n            logger.debug(line);\r\n            List<String> row = Arrays.asList(line.split(\",\"));\r\n            long id = Long.parseLong(row.get(0));\r\n            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n            Customer user = users.get(id);\r\n            if (user == null) {\r\n                user = new Customer(new ArrayList<Item>(), id, cdc);\r\n            }\r\n            Item item = items.get(itemId);\r\n            if (item == null) {\r\n                item = new Item(itemId, cdc);\r\n            }\r\n            user.add(item);\r\n            line = safeReadLine(reader);\r\n            users.put(id, user);\r\n            items.put(itemId, item);\r\n        }\r\n        \r\n        logger.debug(\"persisting\");\r\n        for (Item item : items.values()) {\r\n            session.save(item);\r\n        }\r\n        \r\n        Collection<Customer> allUsers = users.values();\r\n        for (Customer user : allUsers) {\r\n            session.save(user);\r\n        }\r\n        logger.debug(\"finished persisting\");\r\n    }\r\n\r\n    private String safeReadLine(BufferedReader reader) {\r\n        try {\r\n            return reader.readLine();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"could not read file\", e);\r\n        }\r\n    }\r\n\r\n}\r\n',2938,285),(286,'package br.ime.usp.commendans.model;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.persistence.Column;\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.Transient;\r\n\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.SingleAppRecommender;\r\n\r\n@Entity\r\npublic class ClientApp {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n    @Column(unique=true)\r\n    private String accessKey;\r\n\r\n    @Transient\r\n    private SingleAppRecommender recommender;\r\n\r\n    @Deprecated\r\n    protected ClientApp() {\r\n    }\r\n\r\n    public ClientApp(String name, String accessKey) {\r\n        this.name = name;\r\n        this.accessKey = accessKey;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void use(SingleAppRecommender recommender) {\r\n        this.recommender = recommender;\r\n    }\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(Item item) {\r\n        return recommender.recommendedItemsFor(item);\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(List<Item> items) {\r\n        return recommender.recommendedItemsFor(items);\r\n    }\r\n\r\n    public String getAccessKey() {\r\n        return accessKey;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Application [id=\" + id + \", name=\" + name + \", accessKey=\"\r\n                + accessKey + \"]\";\r\n    }\r\n    @Override\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((id == null) ? 0 : id.hashCode());\r\n        return result;\r\n    }\r\n    \r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        ClientApp other = (ClientApp) obj;\r\n        if (id == null) {\r\n            if (other.id != null)\r\n                return false;\r\n        } else if (!id.equals(other.id))\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n',2201,286),(287,'<ivy-module version=\"2.0\">\r\n	<info organisation=\"ime-usp\" module=\"recommender\" />\r\n\r\n	<configurations>\r\n		<conf name=\"default\" description=\"dependencies used for compile\" />\r\n		<conf name=\"test\" description=\"dependencies used for tests\" visibility=\"public\" />\r\n	</configurations>\r\n\r\n	<dependencies>\r\n		<dependency org=\"com.github.jsimone\" name=\"webapp-runner\" rev=\"7.0.22.1\"/>\r\n	\r\n		<!-- Hibernate and other stuff -->\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-core\" rev=\"3.6.10.Final\"/>\r\n		<dependency org=\"org.hibernate.javax.persistence\" name=\"hibernate-jpa-2.0-api\" rev=\"1.0.0.Final\" conf=\"default\" />\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-c3p0\" rev=\"3.6.10.Final\" conf=\"default\" />\r\n		<dependency org=\"javax.transaction\" name=\"jta\" rev=\"1.1\"/>\r\n		<dependency org=\"mysql\" name=\"mysql-connector-java\" rev=\"5.1.18\"/>\r\n		<dependency org=\"c3p0\" name=\"c3p0\" rev=\"0.9.1\" conf=\"default\" />\r\n		<dependency org=\"org.hibernate\" name=\"hibernate-validator\" rev=\"4.3.0.Final\"/>\r\n		<dependency org=\"net.sf.ehcache\" name=\"ehcache-core\" rev=\"2.5.3\"/>\r\n\r\n		<!-- VRaptor dependencies -->\r\n		<dependency org=\"br.com.caelum\" name=\"vraptor\" rev=\"3.4.1\" conf=\"default\" />\r\n        <dependency org=\"org.slf4j\" name=\"slf4j-api\" rev=\"1.6.1\"/>\r\n        <dependency org=\"log4j\" name=\"log4j\" rev=\"1.2.16\"/>\r\n		<dependency org=\"org.slf4j\" name=\"slf4j-log4j12\" rev=\"1.6.1\"/>\r\n		<dependency org=\"org.mortbay.jetty\" name=\"servlet-api-2.5\" rev=\"6.1H.14.1\"/>\r\n		<dependency org=\"org.glassfish.web\" name=\"jstl-impl\" rev=\"1.2\"/>\r\n		<dependency org=\"org.mortbay.jetty\" name=\"servlet-api\" rev=\"3.0.pre4\"/>\r\n		<dependency org=\"javassist\" name=\"javassist\" rev=\"3.12.1.GA\"/>\r\n		<dependency org=\"commons-io\" name=\"commons-io\" rev=\"2.0.1\"/>\r\n		<dependency org=\"com.google.guava\" name=\"guava\" rev=\"r09\"/>\r\n\r\n		<!-- commendans dependencies -->\r\n		<dependency org=\"com.google.code.gson\" name=\"gson\" rev=\"2.2.2\"/>\r\n		\r\n		<dependency org=\"org.eclipse.jetty\" name=\"jetty-webapp\" rev=\"7.4.4.v20110707\"/>\r\n		<dependency org=\"org.mortbay.jetty\" name=\"jsp-2.1-glassfish\" rev=\"2.1.v20100127\" />\r\n		<dependency org=\"commons-codec\" name=\"commons-codec\" rev=\"1.7\"/>\r\n            \r\n		\r\n		<!-- Test dependencies -->\r\n		<dependency org=\"junit\" name=\"junit\" rev=\"4.8.2\" conf=\"test->default\" />\r\n		<dependency org=\"org.mockito\" name=\"mockito-all\" rev=\"1.8.5\" conf=\"test->default\" />\r\n		<dependency org=\"org.hsqldb\" name=\"hsqldb\" rev=\"2.2.8\" conf=\"test->default\" />\r\n            \r\n	</dependencies>\r\n</ivy-module>\r\n',2476,287),(288,'<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n	xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n	<modelVersion>4.0.0</modelVersion>\r\n	<groupId>heroku-blank</groupId>\r\n	<artifactId>heroku-blank</artifactId>\r\n	<version>0.0.1-SNAPSHOT</version>\r\n	<name>heroku-blank</name>\r\n\r\n	<properties>\r\n		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n	</properties>\r\n\r\n	<build>\r\n		<outputDirectory>${basedir}/src/main/webapp/WEB-INF/classes</outputDirectory>\r\n		<plugins>\r\n			<plugin>\r\n				<artifactId>maven-compiler-plugin</artifactId>\r\n				<version>2.3.2</version>\r\n				<configuration>\r\n					<source>1.6</source>\r\n					<target>1.6</target>\r\n					<encoding>UTF-8</encoding>\r\n				</configuration>\r\n			</plugin>\r\n            \r\n            <plugin>\r\n                <artifactId>maven-eclipse-plugin</artifactId>\r\n                <version>2.8</version>\r\n                <configuration>\r\n                    <downloadSources>true</downloadSources>\r\n                    <downloadJavadocs>true</downloadJavadocs>\r\n                </configuration>\r\n            </plugin>\r\n            \r\n            <plugin>\r\n				<artifactId>maven-dependency-plugin</artifactId>\r\n				<executions>\r\n					<execution>\r\n						<phase>install</phase>\r\n						<goals>\r\n							<goal>copy-dependencies</goal>\r\n						</goals>\r\n						<configuration>\r\n							<outputDirectory>src/main/webapp/WEB-INF/lib</outputDirectory>\r\n						</configuration>\r\n					</execution>\r\n				</executions>\r\n				</plugin>\r\n            \r\n			<plugin>\r\n				<groupId>org.apache.maven.plugins</groupId>\r\n				<artifactId>maven-war-plugin</artifactId>\r\n				<version>2.1.1</version>\r\n				<configuration>\r\n   					<webXml>src/main/webapp/WEB-INF/web-heroku.xml</webXml>        \r\n  				</configuration>\r\n			</plugin>\r\n			<plugin>\r\n				<groupId>org.mortbay.jetty</groupId>\r\n				<artifactId>maven-jetty-plugin</artifactId>\r\n				<version>6.1.14</version>\r\n				<configuration>\r\n					<scanIntervalSeconds>3</scanIntervalSeconds>\r\n					<stopKey>foo</stopKey>\r\n					<stopPort>9999</stopPort>\r\n					<webAppConfig>\r\n						<contextPath>/</contextPath>\r\n					</webAppConfig>\r\n				</configuration>\r\n			</plugin>\r\n            <plugin>\r\n                <groupId>org.codehaus.mojo</groupId>\r\n                <artifactId>appassembler-maven-plugin</artifactId>\r\n                <version>1.1.1</version>\r\n                <executions>\r\n                    <execution>\r\n                        <phase>package</phase>\r\n                        <goals>\r\n                            <goal>assemble</goal>\r\n                        </goals>\r\n                        <configuration>\r\n                            <assembleDirectory>target</assembleDirectory>\r\n                            <extraJvmArguments>-Xmx512m</extraJvmArguments>\r\n                            <programs>\r\n                                <program>\r\n                                    <mainClass>br.ime.usp.commendans.infra.JettyRunner</mainClass>\r\n                                    <name>webapp</name>\r\n                                </program>\r\n                            </programs>\r\n                        </configuration>\r\n                    </execution>\r\n                </executions>\r\n            </plugin>\r\n		</plugins>\r\n	</build>\r\n\r\n	<dependencies>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-core</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate.javax.persistence</groupId>\r\n		  <artifactId>hibernate-jpa-2.0-api</artifactId>\r\n		  <version>1.0.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-c3p0</artifactId>\r\n		  <version>3.6.10.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javax.transaction</groupId>\r\n		  <artifactId>jta</artifactId>\r\n		  <version>1.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>mysql</groupId>\r\n		  <artifactId>mysql-connector-java</artifactId>\r\n		  <version>5.1.18</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>c3p0</groupId>\r\n		  <artifactId>c3p0</artifactId>\r\n		  <version>0.9.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hibernate</groupId>\r\n		  <artifactId>hibernate-validator</artifactId>\r\n		  <version>4.3.0.Final</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>net.sf.ehcache</groupId>\r\n		  <artifactId>ehcache-core</artifactId>\r\n		  <version>2.5.3</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>br.com.caelum</groupId>\r\n		  <artifactId>vraptor</artifactId>\r\n		  <version>3.4.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-api</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>log4j</groupId>\r\n		  <artifactId>log4j</artifactId>\r\n		  <version>1.2.16</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.slf4j</groupId>\r\n		  <artifactId>slf4j-log4j12</artifactId>\r\n		  <version>1.6.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api-2.5</artifactId>\r\n		  <version>6.1H.14.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.glassfish.web</groupId>\r\n		  <artifactId>jstl-impl</artifactId>\r\n		  <version>1.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mortbay.jetty</groupId>\r\n		  <artifactId>servlet-api</artifactId>\r\n		  <version>3.0.pre4</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>javassist</groupId>\r\n		  <artifactId>javassist</artifactId>\r\n		  <version>3.12.1.GA</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>commons-io</groupId>\r\n		  <artifactId>commons-io</artifactId>\r\n		  <version>2.0.1</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.guava</groupId>\r\n		  <artifactId>guava</artifactId>\r\n		  <version>r09</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>com.google.code.gson</groupId>\r\n		  <artifactId>gson</artifactId>\r\n		  <version>2.2.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>junit</groupId>\r\n		  <artifactId>junit</artifactId>\r\n		  <version>4.8.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.mockito</groupId>\r\n		  <artifactId>mockito-all</artifactId>\r\n		  <version>1.8.5</version>\r\n		</dependency>\r\n		<dependency>\r\n		  <groupId>org.hsqldb</groupId>\r\n		  <artifactId>hsqldb</artifactId>\r\n		  <version>2.2.8</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.eclipse.jetty</groupId>\r\n			<artifactId>jetty-webapp</artifactId>\r\n			<version>7.4.4.v20110707</version>\r\n		</dependency>\r\n		<dependency>\r\n			<groupId>org.mortbay.jetty</groupId>\r\n			<artifactId>jsp-api-2.1</artifactId>\r\n			<version>7.0.0pre2</version>\r\n		</dependency>\r\n		            \r\n		<dependency>\r\n			<groupId>postgresql</groupId>\r\n			<artifactId>postgresql</artifactId>\r\n			<version>9.1-901.jdbc4</version>\r\n		</dependency>\r\n		\r\n		<dependency>\r\n		   <groupId>javax.servlet</groupId>\r\n		   <artifactId>servlet-api</artifactId>\r\n		   <version>2.5</version>\r\n		   <scope>provided</scope>\r\n		</dependency>\r\n		\r\n		<dependency>\r\n			<groupId>commons-codec</groupId>\r\n			<artifactId>commons-codec</artifactId>\r\n			<version>1.7</version>\r\n		</dependency>\r\n		            \r\n		\r\n		<dependency>\r\n			<groupId>org.mortbay.jetty</groupId>\r\n			<artifactId>jsp-2.1-glassfish</artifactId>\r\n			<version>2.1.v20100127</version>\r\n		</dependency>\r\n		<dependency>\r\n		   <groupId>javax.servlet</groupId>\r\n		   <artifactId>servlet-api</artifactId>\r\n		   <version>2.5</version>\r\n		   <scope>provided</scope>\r\n		</dependency>\r\n		<dependency>\r\n		   <groupId>javax.servlet.jsp</groupId>\r\n		   <artifactId>jsp-api</artifactId>\r\n		   <version>2.1</version>\r\n		   <scope>compile</scope>\r\n		</dependency>\r\n		<dependency>\r\n		   <groupId>javax.servlet</groupId>\r\n		   <artifactId>jstl</artifactId>\r\n		   <version>1.2</version>\r\n		</dependency>\r\n		<dependency>\r\n		   <groupId>org.apache.tomcat</groupId>\r\n		   <artifactId>jasper-el</artifactId>\r\n		   <version>6.0.26</version>\r\n		</dependency>\r\n            \r\n		<!-- Provided dependencies -->\r\n	</dependencies>\r\n\r\n	<reporting>\r\n		<plugins>\r\n			<plugin>\r\n				<groupId>org.codehaus.mojo</groupId>\r\n				<artifactId>cobertura-maven-plugin</artifactId>\r\n				<version>2.5.1</version>\r\n			</plugin>\r\n		</plugins>\r\n	</reporting>\r\n</project>\r\n',8392,288),(289,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Post;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ClientAppDao;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.GroupedItems;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Resource\r\npublic class ClientAppController {\r\n\r\n    private final Result result;\r\n    private final ClientAppDao appDao;\r\n    private final ItemDao itemDao;\r\n    private final CustomerDao customerDao;\r\n\r\n    public ClientAppController(Result result, ClientAppDao appDao, ItemDao itemDao, CustomerDao customerDao) {\r\n        this.result = result;\r\n        this.appDao = appDao;\r\n        this.itemDao = itemDao;\r\n        this.customerDao = customerDao;\r\n    }\r\n    \r\n    //clientAppUserId=100&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\r\n    @Post(\"app/{key}/addSale\")\r\n    public void addSale(String key, Long clientAppUserId, List<Long> itemsIds) {\r\n        ClientApp app = appDao.findByAccessKey(key);\r\n        GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n        \r\n        ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n        \r\n        for (Item item : newItems) {\r\n            itemDao.save(item);\r\n        }\r\n        \r\n        Customer customer = customerDao.find(app, clientAppUserId);\r\n        List<Item> allItems = groupedItems.getItems();\r\n        if (customer == null) {\r\n            customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n        }\r\n        for (Item item : allItems) {\r\n            customer.add(item);\r\n        }\r\n        customerDao.save(customer);\r\n        result.use(Results.json()).from(true).serialize();\r\n    }\r\n    \r\n    @Get(\"app/new\")\r\n    public void clientAppForm() {\r\n    }\r\n    \r\n    @Post(\"app/new\")\r\n    public void saveApp(String name) {\r\n        String accessKey = \"123\" + name;\r\n        accessKey = DigestUtils.sha256Hex(accessKey);\r\n        appDao.save(new ClientApp(name, accessKey));\r\n        result.include(\"key\", accessKey);\r\n    }\r\n\r\n}\r\n',2418,289),(290,'package br.ime.usp.commendans.controller;\r\n\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.infra.DataImporter;\r\nimport br.ime.usp.commendans.recommender.RecommenderCreator;\r\n\r\n\r\n@Resource\r\npublic class IndexController {\r\n    \r\n    private final Result result;\r\n    private final Session session;\r\n    private final RecommenderCreator recommenderCreator;\r\n\r\n    public IndexController(Result result, Session session, RecommenderCreator recommenderCreator) {\r\n        this.result = result;\r\n        this.session = session;\r\n        this.recommenderCreator = recommenderCreator;\r\n    }\r\n    \r\n    @Get(\"/\")\r\n    public void index() {\r\n        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n    }\r\n    \r\n    @Get(\"/import/askjdhakjshdakjshd\")\r\n    public void importData() {\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n        recommenderCreator.create();\r\n        String name = \"Casa do Código\";\r\n        String accessKey = \"123\" + name;\r\n        accessKey = DigestUtils.sha256Hex(accessKey);\r\n        result.use(Results.http()).body(\"<html><body>finished persisting, key: \"+accessKey+\"</body></html>\");\r\n    }\r\n}\r\n',1444,290),(291,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class DataImporter {\r\n    \r\n    private final Session session;\r\n    private static Logger logger = Logger.getLogger(DataImporter.class);\r\n\r\n    public DataImporter(Session session) {\r\n        this.session = session;\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        Session session = sf.openSession();\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n    }\r\n\r\n    public void importData(String file) {\r\n        HashMap<Long, Customer> users = new HashMap<Long, Customer>();\r\n        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n        String line = safeReadLine(reader);\r\n        \r\n        String name = \"Casa do Código\";\r\n        String accessKey = \"123\" + name;\r\n        accessKey = DigestUtils.sha256Hex(accessKey);\r\n        \r\n        ClientApp cdc = new ClientApp(\"Casa do Código\", accessKey);\r\n        session.save(cdc);\r\n        \r\n        while (line != null) {\r\n            logger.debug(line);\r\n            List<String> row = Arrays.asList(line.split(\",\"));\r\n            long id = Long.parseLong(row.get(0));\r\n            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n            Customer user = users.get(id);\r\n            if (user == null) {\r\n                user = new Customer(new ArrayList<Item>(), id, cdc);\r\n            }\r\n            Item item = items.get(itemId);\r\n            if (item == null) {\r\n                item = new Item(itemId, cdc);\r\n            }\r\n            user.add(item);\r\n            line = safeReadLine(reader);\r\n            users.put(id, user);\r\n            items.put(itemId, item);\r\n        }\r\n        \r\n        logger.debug(\"persisting\");\r\n        for (Item item : items.values()) {\r\n            session.save(item);\r\n        }\r\n        \r\n        Collection<Customer> allUsers = users.values();\r\n        for (Customer user : allUsers) {\r\n            session.save(user);\r\n        }\r\n        logger.debug(\"finished persisting\");\r\n    }\r\n\r\n    private String safeReadLine(BufferedReader reader) {\r\n        try {\r\n            return reader.readLine();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"could not read file\", e);\r\n        }\r\n    }\r\n\r\n}\r\n',3153,291),(292,'package br.ime.usp.commendans.controller;\r\n\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.infra.DataImporter;\r\nimport br.ime.usp.commendans.recommender.RecommenderCreator;\r\n\r\n\r\n@Resource\r\npublic class IndexController {\r\n    \r\n    private final Result result;\r\n    private final Session session;\r\n    private final RecommenderCreator recommenderCreator;\r\n\r\n    public IndexController(Result result, Session session, RecommenderCreator recommenderCreator) {\r\n        this.result = result;\r\n        this.session = session;\r\n        this.recommenderCreator = recommenderCreator;\r\n    }\r\n    \r\n    @Get(\"/helloworld\")\r\n    public void index() {\r\n        result.use(Results.http()).body(\"<html><body><h1>hello world</h1</body></html>\");\r\n    }\r\n    \r\n    @Get(\"/import/askjdhakjshdakjshd\")\r\n    public void importData() {\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n        recommenderCreator.create();\r\n        String name = \"Casa do Código\";\r\n        String accessKey = \"123\" + name;\r\n        accessKey = DigestUtils.sha256Hex(accessKey);\r\n        result.use(Results.http()).body(\"<html><body>finished persisting, key: \"+accessKey+\"</body></html>\");\r\n    }\r\n}\r\n',1454,292),(293,'',0,293),(294,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Post;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ClientAppDao;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.GroupedItems;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Resource\r\npublic class ClientAppController {\r\n\r\n    private final Result result;\r\n    private final ClientAppDao appDao;\r\n    private final ItemDao itemDao;\r\n    private final CustomerDao customerDao;\r\n\r\n    public ClientAppController(Result result, ClientAppDao appDao, ItemDao itemDao, CustomerDao customerDao) {\r\n        this.result = result;\r\n        this.appDao = appDao;\r\n        this.itemDao = itemDao;\r\n        this.customerDao = customerDao;\r\n    }\r\n    \r\n    //clientAppUserId=100&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\r\n    @Post(\"app/{key}/addSale\")\r\n    public void addSale(String key, Long clientAppUserId, List<Long> itemsIds) {\r\n        ClientApp app = appDao.findByAccessKey(key);\r\n        GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n        \r\n        ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n        \r\n        for (Item item : newItems) {\r\n            itemDao.save(item);\r\n        }\r\n        \r\n        Customer customer = customerDao.find(app, clientAppUserId);\r\n        List<Item> allItems = groupedItems.getItems();\r\n        if (customer == null) {\r\n            customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n        }\r\n        for (Item item : allItems) {\r\n            customer.add(item);\r\n        }\r\n        customerDao.save(customer);\r\n        result.use(Results.json()).from(true).serialize();\r\n    }\r\n    \r\n    @Get(\"app/new\")\r\n    public void clientAppForm() {\r\n    }\r\n    \r\n    @Post(\"app/new\")\r\n    public void saveApp(String name) {\r\n        String accessKey = \"askjdaklsjdlkadsjqpoipoweut\" + name;\r\n        accessKey = DigestUtils.sha256Hex(accessKey);\r\n        appDao.save(new ClientApp(name, accessKey));\r\n        result.include(\"key\", accessKey);\r\n    }\r\n\r\n}\r\n',2442,294),(295,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\nimport org.apache.log4j.Logger;\r\nimport org.hibernate.Session;\r\nimport org.hibernate.SessionFactory;\r\nimport org.hibernate.cfg.Configuration;\r\n\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\npublic class DataImporter {\r\n    \r\n    private final Session session;\r\n    private static Logger logger = Logger.getLogger(DataImporter.class);\r\n\r\n    public DataImporter(Session session) {\r\n        this.session = session;\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        SessionFactory sf = new Configuration().configure(\"/hibernate.cfg.xml\").buildSessionFactory();\r\n        Session session = sf.openSession();\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n    }\r\n\r\n    public void importData(String file) {\r\n        HashMap<Long, Customer> users = new HashMap<Long, Customer>();\r\n        HashMap<Long, Item> items = new HashMap<Long, Item>();\r\n        InputStream resourceAsStream = getClass().getResourceAsStream(file);\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(resourceAsStream));\r\n        String line = safeReadLine(reader);\r\n        \r\n        String name = \"Casa do Código\";\r\n        String accessKey = \"askjdaklsjdlkadsjqpoipoweut\" + name;\r\n        accessKey = DigestUtils.sha256Hex(accessKey);\r\n        \r\n        ClientApp cdc = new ClientApp(\"Casa do Código\", accessKey);\r\n        session.save(cdc);\r\n        \r\n        while (line != null) {\r\n            logger.debug(line);\r\n            List<String> row = Arrays.asList(line.split(\",\"));\r\n            long id = Long.parseLong(row.get(0));\r\n            long itemId = Long.parseLong(row.get(1).charAt(7) + \"\");\r\n            Customer user = users.get(id);\r\n            if (user == null) {\r\n                user = new Customer(new ArrayList<Item>(), id, cdc);\r\n            }\r\n            Item item = items.get(itemId);\r\n            if (item == null) {\r\n                item = new Item(itemId, cdc);\r\n            }\r\n            user.add(item);\r\n            line = safeReadLine(reader);\r\n            users.put(id, user);\r\n            items.put(itemId, item);\r\n        }\r\n        \r\n        logger.debug(\"persisting\");\r\n        for (Item item : items.values()) {\r\n            session.save(item);\r\n        }\r\n        \r\n        Collection<Customer> allUsers = users.values();\r\n        for (Customer user : allUsers) {\r\n            session.save(user);\r\n        }\r\n        logger.debug(\"finished persisting\");\r\n    }\r\n\r\n    private String safeReadLine(BufferedReader reader) {\r\n        try {\r\n            return reader.readLine();\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(\"could not read file\", e);\r\n        }\r\n    }\r\n\r\n}\r\n',3177,295),(296,'package br.ime.usp.commendans.model;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.persistence.Column;\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.Id;\r\nimport javax.persistence.Transient;\r\n\r\nimport br.ime.usp.commendans.recommender.Recommender;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n\r\n@Entity\r\npublic class ClientApp {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n    @Column(unique=true)\r\n    private String accessKey;\r\n\r\n    @Transient\r\n    private Recommender recommender;\r\n\r\n    @Deprecated\r\n    protected ClientApp() {\r\n    }\r\n\r\n    public ClientApp(String name, String accessKey) {\r\n        this.name = name;\r\n        this.accessKey = accessKey;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void use(Recommender recommender) {\r\n        this.recommender = recommender;\r\n    }\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(Item item) {\r\n        return recommender.recommendedItemsFor(item);\r\n    }\r\n\r\n    public ItemVector recommendedItemsFor(List<Item> items) {\r\n        return recommender.recommendedItemsFor(items);\r\n    }\r\n\r\n    public String getAccessKey() {\r\n        return accessKey;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Application [id=\" + id + \", name=\" + name + \", accessKey=\"\r\n                + accessKey + \"]\";\r\n    }\r\n    @Override\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + ((id == null) ? 0 : id.hashCode());\r\n        return result;\r\n    }\r\n    \r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null)\r\n            return false;\r\n        if (getClass() != obj.getClass())\r\n            return false;\r\n        ClientApp other = (ClientApp) obj;\r\n        if (id == null) {\r\n            if (other.id != null)\r\n                return false;\r\n        } else if (!id.equals(other.id))\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n',2163,296),(297,'package br.ime.usp.commendans.recommender;\r\n\r\nimport java.util.List;\r\n\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\n\r\npublic interface Recommender {\r\n    public ItemVector recommendedItemsFor(Item item);\r\n\r\n    public ItemVector recommendedItemsFor(List<Item> items);\r\n}\r\n',335,297),(298,'package br.ime.usp.commendans.recommender.itemtoitem;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.Recommender;\r\n\r\npublic class SingleAppRecommender implements Recommender {\r\n\r\n    private final Map<Item, ItemVector> associations;\r\n\r\n    public SingleAppRecommender(\r\n            HashMap<Item, ItemToItemsAssociation> associations) {\r\n        this.associations = parse(associations);\r\n    }\r\n\r\n    private Map<Item, ItemVector> parse(HashMap<Item, ItemToItemsAssociation> associations) {\r\n        HashMap<Item, ItemVector> map = new HashMap<Item, ItemVector>();\r\n        Set<Item> items = associations.keySet();\r\n        for (Item item : items) {\r\n            ItemToItemsAssociation association = associations.get(item);\r\n            List<Tuple> tuples = association.toTupleList();\r\n            map.put(item, new ItemVector(tuples));\r\n        }\r\n        return map;\r\n    }\r\n\r\n    @Override\r\n    public ItemVector recommendedItemsFor(Item item) {\r\n        return associations.get(item);\r\n    }\r\n\r\n    @Override\r\n    public ItemVector recommendedItemsFor(List<Item> items) {\r\n        ItemVector vector = new ItemVector(new ArrayList<Tuple>());\r\n        for (Item item : items) {\r\n            ItemVector other = recommendedItemsFor(item);\r\n            vector = vector.merge(other);\r\n        }\r\n        return vector;\r\n    }\r\n\r\n}\r\n',1496,298),(299,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Post;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ClientAppDao;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.GroupedItems;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Resource\r\npublic class ClientAppController {\r\n\r\n    private final Result result;\r\n    private final ClientAppDao appDao;\r\n    private final ItemDao itemDao;\r\n    private final CustomerDao customerDao;\r\n\r\n    public ClientAppController(Result result, ClientAppDao appDao, ItemDao itemDao, CustomerDao customerDao) {\r\n        this.result = result;\r\n        this.appDao = appDao;\r\n        this.itemDao = itemDao;\r\n        this.customerDao = customerDao;\r\n    }\r\n    \r\n    //clientAppUserId=100&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\r\n    @Post(\"app/{key}/addSale\")\r\n    public void addSale(String key, Long clientAppUserId, List<Long> itemsIds) {\r\n        ClientApp app = appDao.findByAccessKey(key);\r\n        GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n        \r\n        ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n        for (Item item : newItems)\r\n            itemDao.save(item);\r\n        \r\n        Customer customer = customerDao.find(app, clientAppUserId);\r\n        if (customer == null)\r\n            customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n        for (Item item : groupedItems.getItems())\r\n            customer.add(item);\r\n        customerDao.save(customer);\r\n                \r\n        result.use(Results.json()).from(true).serialize();\r\n    }\r\n    \r\n    @Get(\"app/new\")\r\n    public void clientAppForm() {\r\n    }\r\n    \r\n    @Post(\"app/new\")\r\n    public void saveApp(String name) {\r\n        String accessKey = \"askjdaklsjdlkadsjqpoipoweut\" + name;\r\n        accessKey = DigestUtils.sha256Hex(accessKey);\r\n        appDao.save(new ClientApp(name, accessKey));\r\n        result.include(\"key\", accessKey);\r\n    }\r\n\r\n}\r\n',2370,299),(300,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ClientAppDao;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.infra.TupleJsonSerializer;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.GeneralRecommender;\r\nimport br.ime.usp.commendans.recommender.RecommenderCreator;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n\r\n@Resource\r\npublic class ItemToItemController {\r\n    private final ItemDao itemDao;\r\n    private final Result result;\r\n    private final TupleJsonSerializer serializer;\r\n    private final GeneralRecommender recommender;\r\n    private final ClientAppDao appDao;\r\n    private final RecommenderCreator recommenderCreator;\r\n\r\n    public ItemToItemController(GeneralRecommender recommender, \r\n            ItemDao itemDao, ClientAppDao appDao, Result result, \r\n            TupleJsonSerializer serializer, RecommenderCreator recommenderCreator) {\r\n        this.recommender = recommender;\r\n        this.itemDao = itemDao;\r\n        this.appDao = appDao;\r\n        this.result = result;\r\n        this.serializer = serializer;\r\n        this.recommenderCreator = recommenderCreator;\r\n    }\r\n    \r\n    @Get(\"/recommend/item/{appItemId}\")\r\n    public void recommend(Long appItemId, String accessKey) {\r\n        if (validKey(accessKey)) {\r\n            ClientApp app = appDao.findByAccessKey(accessKey);\r\n            Item item = itemDao.findByAppItemId(appItemId, app);\r\n            ItemVector recommended = recommender.recommendedItemsFor(item, accessKey);\r\n            serializeResult(recommended);\r\n        }\r\n    }\r\n    \r\n    @Get(\"/recommend/items/\")\r\n    public void recommend(List<Long> itemsIds, String accessKey) {\r\n        if (validKey(accessKey)) {\r\n            ClientApp app = appDao.findByAccessKey(accessKey);\r\n            List<Item> items = itemDao.findItems(itemsIds, app).getItems();\r\n            ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n            serializeResult(recommended);\r\n        }\r\n    }\r\n    \r\n    @Get(\"/recalculate/\")\r\n    public void recalculate() {\r\n        recommenderCreator.create();\r\n        result.use(Results.http()).body(\"ok\");\r\n    }\r\n\r\n    private boolean validKey(String accessKey) {\r\n        ClientApp app = appDao.findByAccessKey(accessKey);\r\n        if (app == null) {\r\n            result.notFound();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void serializeResult(ItemVector recommended) {\r\n        List<Tuple> tuples = recommended == null ? new ArrayList<Tuple>() : recommended.getTuples();\r\n        result.use(Results.http())\r\n            .addHeader(\"content-type\", \"application/json\")\r\n            .body(serializer.toJson(tuples));\r\n    }\r\n}\r\n',3093,300),(301,'curl --data \"clientAppUserId=66666666&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3&accessKey=04775f2e51279e3fbab3ed1527c364df1b919ce98f4c86ba1bb2db94058b8c6a\" http://localhost:8080/commendans/app/addSale\r\n',202,301),(302,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Post;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ClientAppDao;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.GroupedItems;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Resource\r\npublic class ClientAppController {\r\n\r\n    private final Result result;\r\n    private final ClientAppDao appDao;\r\n    private final ItemDao itemDao;\r\n    private final CustomerDao customerDao;\r\n\r\n    public ClientAppController(Result result, ClientAppDao appDao, ItemDao itemDao, CustomerDao customerDao) {\r\n        this.result = result;\r\n        this.appDao = appDao;\r\n        this.itemDao = itemDao;\r\n        this.customerDao = customerDao;\r\n    }\r\n    \r\n    //clientAppUserId=100&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\r\n    @Post(\"app/addSale\")\r\n    public void addSale(String accessKey, Long clientAppUserId, List<Long> itemsIds) {\r\n        if (validKey(accessKey)) {\r\n            ClientApp app = appDao.findByAccessKey(accessKey);\r\n            GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n            \r\n            ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n            for (Item item : newItems)\r\n                itemDao.save(item);\r\n            \r\n            Customer customer = customerDao.find(app, clientAppUserId);\r\n            if (customer == null)\r\n                customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n            for (Item item : groupedItems.getItems())\r\n                customer.add(item);\r\n            customerDao.save(customer);\r\n                    \r\n            result.use(Results.json()).from(true).serialize();\r\n        }\r\n    }\r\n    \r\n    @Get(\"app/new\")\r\n    public void clientAppForm() {\r\n    }\r\n    \r\n    @Post(\"app/new\")\r\n    public void saveApp(String name) {\r\n        String accessKey = \"askjdaklsjdlkadsjqpoipoweut\" + name;\r\n        accessKey = DigestUtils.sha256Hex(accessKey);\r\n        appDao.save(new ClientApp(name, accessKey));\r\n        result.include(\"key\", accessKey);\r\n    }\r\n    \r\n    private boolean validKey(String accessKey) {\r\n        ClientApp app = appDao.findByAccessKey(accessKey);\r\n        if (app == null) {\r\n            result.notFound();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n',2726,302),(303,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Post;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ClientAppDao;\r\nimport br.ime.usp.commendans.dao.CustomerDao;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.infra.ValidAccessKey;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Customer;\r\nimport br.ime.usp.commendans.model.GroupedItems;\r\nimport br.ime.usp.commendans.model.Item;\r\n\r\n@Resource\r\npublic class ClientAppController {\r\n\r\n    private final Result result;\r\n    private final ClientAppDao appDao;\r\n    private final ItemDao itemDao;\r\n    private final CustomerDao customerDao;\r\n\r\n    public ClientAppController(Result result, ClientAppDao appDao, ItemDao itemDao, CustomerDao customerDao) {\r\n        this.result = result;\r\n        this.appDao = appDao;\r\n        this.itemDao = itemDao;\r\n        this.customerDao = customerDao;\r\n    }\r\n    \r\n    //clientAppUserId=100&itemsIds[0]=1&itemsIds[1]=2&itemsIds[2]=3\r\n    @ValidAccessKey(paramName=\"accessKey\")\r\n    @Post(\"app/addSale\") \r\n    public void addSale(String accessKey, Long clientAppUserId, List<Long> itemsIds) {\r\n        ClientApp app = appDao.findByAccessKey(accessKey);\r\n        GroupedItems groupedItems = itemDao.findItems(itemsIds, app);\r\n        \r\n        ArrayList<Item> newItems = groupedItems.addRemaining(itemsIds, app);\r\n        for (Item item : newItems)\r\n            itemDao.save(item);\r\n        \r\n        Customer customer = customerDao.find(app, clientAppUserId);\r\n        if (customer == null)\r\n            customer = new Customer(new ArrayList<Item>(), clientAppUserId, app);\r\n        for (Item item : groupedItems.getItems())\r\n            customer.add(item);\r\n        customerDao.save(customer);\r\n                \r\n        result.use(Results.json()).from(true).serialize();\r\n    }\r\n    \r\n    @Get(\"app/new\")\r\n    public void clientAppForm() {\r\n    }\r\n    \r\n    @Post(\"app/new\")\r\n    public void saveApp(String name) {\r\n        String accessKey = \"askjdaklsjdlkadsjqpoipoweut\" + name;\r\n        accessKey = DigestUtils.sha256Hex(accessKey);\r\n        appDao.save(new ClientApp(name, accessKey));\r\n        result.include(\"key\", accessKey);\r\n    }\r\n\r\n}\r\n',2473,303),(304,'package br.ime.usp.commendans.controller;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.dao.ClientAppDao;\r\nimport br.ime.usp.commendans.dao.ItemDao;\r\nimport br.ime.usp.commendans.infra.TupleJsonSerializer;\r\nimport br.ime.usp.commendans.infra.ValidAccessKey;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\nimport br.ime.usp.commendans.model.Item;\r\nimport br.ime.usp.commendans.recommender.GeneralRecommender;\r\nimport br.ime.usp.commendans.recommender.RecommenderCreator;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.ItemVector;\r\nimport br.ime.usp.commendans.recommender.itemtoitem.Tuple;\r\n\r\n@Resource\r\npublic class ItemToItemController {\r\n    private final ItemDao itemDao;\r\n    private final Result result;\r\n    private final TupleJsonSerializer serializer;\r\n    private final GeneralRecommender recommender;\r\n    private final ClientAppDao appDao;\r\n    private final RecommenderCreator recommenderCreator;\r\n\r\n    public ItemToItemController(GeneralRecommender recommender, \r\n            ItemDao itemDao, ClientAppDao appDao, Result result, \r\n            TupleJsonSerializer serializer, RecommenderCreator recommenderCreator) {\r\n        this.recommender = recommender;\r\n        this.itemDao = itemDao;\r\n        this.appDao = appDao;\r\n        this.result = result;\r\n        this.serializer = serializer;\r\n        this.recommenderCreator = recommenderCreator;\r\n    }\r\n    \r\n    @ValidAccessKey(paramName = \"accessKey\")\r\n    @Get(\"/recommend/item/{appItemId}\") \r\n    public void recommend(Long appItemId, String accessKey) {\r\n        ClientApp app = appDao.findByAccessKey(accessKey);\r\n        Item item = itemDao.findByAppItemId(appItemId, app);\r\n        ItemVector recommended = recommender.recommendedItemsFor(item,\r\n                accessKey);\r\n        serializeResult(recommended);\r\n    }\r\n    \r\n    @ValidAccessKey(paramName = \"accessKey\")\r\n    @Get(\"/recommend/items/\")\r\n    public void recommend(List<Long> itemsIds, String accessKey) {\r\n        ClientApp app = appDao.findByAccessKey(accessKey);\r\n        List<Item> items = itemDao.findItems(itemsIds, app).getItems();\r\n        ItemVector recommended = recommender.recommendedItemsFor(items, accessKey);\r\n        serializeResult(recommended);\r\n    }\r\n    \r\n    @Get(\"/recalculate/\")\r\n    public void recalculate() {\r\n        recommenderCreator.create();\r\n        result.use(Results.http()).body(\"ok\");\r\n    }\r\n\r\n    private void serializeResult(ItemVector recommended) {\r\n        List<Tuple> tuples = recommended == null ? new ArrayList<Tuple>() : recommended.getTuples();\r\n        result.use(Results.http())\r\n            .addHeader(\"content-type\", \"application/json\")\r\n            .body(serializer.toJson(tuples));\r\n    }\r\n}\r\n',2890,304),(305,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.lang.annotation.ElementType;\r\nimport java.lang.annotation.Retention;\r\nimport java.lang.annotation.RetentionPolicy;\r\nimport java.lang.annotation.Target;\r\n\r\n@Target(ElementType.METHOD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface ValidAccessKey {\r\n\r\n    String paramName();\r\n\r\n}\r\n',341,305),(306,'package br.ime.usp.commendans.infra;\r\n\r\nimport java.lang.annotation.Annotation;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\n\r\nimport br.com.caelum.vraptor.InterceptionException;\r\nimport br.com.caelum.vraptor.Intercepts;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.core.InterceptorStack;\r\nimport br.com.caelum.vraptor.interceptor.Interceptor;\r\nimport br.com.caelum.vraptor.resource.ResourceMethod;\r\nimport br.ime.usp.commendans.dao.ClientAppDao;\r\nimport br.ime.usp.commendans.model.ClientApp;\r\n\r\n@Intercepts\r\npublic class ValidAccessKeyInterceptor implements Interceptor {\r\n    \r\n    private final ClientAppDao appDao;\r\n    private final Result result;\r\n    private final HttpServletRequest request;\r\n    private String paramName;\r\n\r\n    public ValidAccessKeyInterceptor(HttpServletRequest request, ClientAppDao appDao, Result result) {\r\n        this.request = request;\r\n        this.appDao = appDao;\r\n        this.result = result;\r\n    }\r\n\r\n    @Override\r\n    public boolean accepts(ResourceMethod method) {\r\n        Annotation[] annotations = method.getMethod().getAnnotations();\r\n        for (Annotation annotation : annotations) {\r\n            if (annotation.annotationType().equals(ValidAccessKey.class)) {\r\n                ValidAccessKey k = (ValidAccessKey) annotation;\r\n                paramName = k.paramName();\r\n            }\r\n        }\r\n        return method.containsAnnotation(ValidAccessKey.class);\r\n    }\r\n\r\n    @Override\r\n    public void intercept(InterceptorStack stack, ResourceMethod method,\r\n            Object arg) throws InterceptionException {\r\n        String accessKey = request.getParameter(paramName);\r\n        ClientApp app = appDao.findByAccessKey(accessKey);\r\n        if (app == null) {\r\n            result.notFound();\r\n        } else {\r\n            stack.next(method, arg);\r\n        }\r\n    }\r\n\r\n}\r\n',1856,306),(307,'INSERT INTO `ClientApp` VALUES (1,\'04775f2e51279e3fbab3ed1527c364df1b919ce98f4c86ba1bb2db94058b8c6a\',\'Casa do Código\');\r\nINSERT INTO `Customer` VALUES (1,121954,1),(2,121955,1),(3,121952,1),(4,121953,1),(5,121958,1),(6,121959,1),(7,121956,1),(8,121957,1),(9,121962,1),(10,121960,1),(11,121961,1),(12,121966,1),(13,121967,1),(14,121965,1),(15,121971,1),(16,121968,1),(17,121975,1),(18,121974,1),(19,121973,1),(20,121972,1),(21,121979,1),(22,121976,1),(23,121983,1),(24,121980,1),(25,121920,1),(26,121921,1),(27,121922,1),(28,121923,1),(29,121925,1),(30,121926,1),(31,121927,1),(32,121928,1),(33,121929,1),(34,121930,1),(35,121931,1),(36,121932,1),(37,121933,1),(38,121934,1),(39,121935,1),(40,121937,1),(41,121936,1),(42,121939,1),(43,121941,1),(44,121940,1),(45,121943,1),(46,121942,1),(47,121945,1),(48,121944,1),(49,121947,1),(50,121946,1),(51,121949,1),(52,121951,1),(53,121950,1),(54,121894,1),(55,121895,1),(56,121892,1),(57,121893,1),(58,121890,1),(59,121891,1),(60,121888,1),(61,121889,1),(62,121902,1),(63,121903,1),(64,121900,1),(65,121901,1),(66,121899,1),(67,121896,1),(68,121910,1),(69,121909,1),(70,121908,1),(71,121907,1),(72,121906,1),(73,121905,1),(74,121904,1),(75,121918,1),(76,121917,1),(77,121916,1),(78,121915,1),(79,121914,1),(80,121913,1),(81,121912,1),(82,121860,1),(83,121861,1),(84,121862,1),(85,121863,1),(86,121856,1),(87,121857,1),(88,121858,1),(89,121859,1),(90,121868,1),(91,121869,1),(92,121870,1),(93,121864,1),(94,121865,1),(95,121866,1),(96,121867,1),(97,121877,1),(98,121876,1),(99,121879,1),(100,121878,1),(101,121872,1),(102,121875,1),(103,121874,1),(104,121885,1),(105,121884,1),(106,121887,1),(107,121886,1),(108,121880,1),(109,121883,1),(110,121882,1),(111,121997,1),(112,121999,1),(113,121998,1),(114,121993,1),(115,121992,1),(116,121995,1),(117,121994,1),(118,121989,1),(119,121988,1),(120,121991,1),(121,121990,1),(122,121984,1),(123,121987,1),(124,121986,1),(125,122004,1),(126,122005,1),(127,122006,1),(128,122000,1),(129,122001,1),(130,122002,1),(131,122003,1),(132,121352,1),(133,121353,1),(134,121354,1),(135,121355,1),(136,121356,1),(137,121357,1),(138,121358,1),(139,121359,1),(140,121344,1),(141,121345,1),(142,121346,1),(143,121347,1),(144,121348,1),(145,121349,1),(146,121350,1),(147,121351,1),(148,121369,1),(149,121368,1),(150,121371,1),(151,121370,1),(152,121373,1),(153,121372,1),(154,121375,1),(155,121374,1),(156,121361,1),(157,121360,1),(158,121363,1),(159,121362,1),(160,121365,1),(161,121367,1),(162,121366,1),(163,121386,1),(164,121387,1),(165,121384,1),(166,121385,1),(167,121390,1),(168,121391,1),(169,121388,1),(170,121389,1),(171,121378,1),(172,121379,1),(173,121376,1),(174,121377,1),(175,121382,1),(176,121383,1),(177,121380,1),(178,121403,1),(179,121402,1),(180,121401,1),(181,121400,1),(182,121405,1),(183,121404,1),(184,121394,1),(185,121393,1),(186,121392,1),(187,121399,1),(188,121398,1),(189,121397,1),(190,121396,1),(191,121420,1),(192,121421,1),(193,121422,1),(194,121423,1),(195,121416,1),(196,121417,1),(197,121418,1),(198,121419,1),(199,121413,1),(200,121414,1),(201,121415,1),(202,121408,1),(203,121409,1),(204,121410,1),(205,121411,1),(206,121437,1),(207,121436,1),(208,121439,1),(209,121433,1),(210,121432,1),(211,121435,1),(212,121434,1),(213,121429,1),(214,121428,1),(215,121431,1),(216,121430,1),(217,121424,1),(218,121427,1),(219,121426,1),(220,121455,1),(221,121452,1),(222,121453,1),(223,121450,1),(224,121451,1),(225,121448,1),(226,121449,1),(227,121446,1),(228,121447,1),(229,121444,1),(230,121445,1),(231,121442,1),(232,121443,1),(233,121440,1),(234,121441,1),(235,121470,1),(236,121469,1),(237,121468,1),(238,121467,1),(239,121466,1),(240,121465,1),(241,121464,1),(242,121463,1),(243,121462,1),(244,121461,1),(245,121460,1),(246,121459,1),(247,121458,1),(248,121457,1),(249,121473,1),(250,121475,1),(251,121474,1),(252,121477,1),(253,121476,1),(254,121479,1),(255,121478,1),(256,121481,1),(257,121483,1),(258,121482,1),(259,121485,1),(260,121487,1),(261,121486,1),(262,121488,1),(263,121489,1),(264,121490,1),(265,121491,1),(266,121492,1),(267,121493,1),(268,121494,1),(269,121495,1),(270,121497,1),(271,121498,1),(272,121499,1),(273,121500,1),(274,121501,1),(275,121502,1),(276,121503,1),(277,121507,1),(278,121506,1),(279,121505,1),(280,121504,1),(281,121511,1),(282,121510,1),(283,121509,1),(284,121508,1),(285,121515,1),(286,121514,1),(287,121513,1),(288,121512,1),(289,121519,1),(290,121518,1),(291,121517,1),(292,121516,1),(293,121522,1),(294,121523,1),(295,121520,1),(296,121521,1),(297,121526,1),(298,121527,1),(299,121524,1),(300,121525,1),(301,121530,1),(302,121531,1),(303,121528,1),(304,121529,1),(305,121534,1),(306,121535,1),(307,121533,1),(308,121541,1),(309,121540,1),(310,121543,1),(311,121542,1),(312,121537,1),(313,121536,1),(314,121539,1),(315,121538,1),(316,121549,1),(317,121548,1),(318,121551,1),(319,121550,1),(320,121545,1),(321,121544,1),(322,121547,1),(323,121546,1),(324,121556,1),(325,121557,1),(326,121558,1),(327,121553,1),(328,121554,1),(329,121555,1),(330,121564,1),(331,121565,1),(332,121566,1),(333,121567,1),(334,121560,1),(335,121562,1),(336,121563,1),(337,121575,1),(338,121574,1),(339,121573,1),(340,121572,1),(341,121571,1),(342,121570,1),(343,121569,1),(344,121568,1),(345,121583,1),(346,121582,1),(347,121581,1),(348,121580,1),(349,121579,1),(350,121578,1),(351,121577,1),(352,121576,1),(353,121590,1),(354,121588,1),(355,121589,1),(356,121586,1),(357,121587,1),(358,121584,1),(359,121585,1),(360,121598,1),(361,121599,1),(362,121596,1),(363,121597,1),(364,121594,1),(365,121595,1),(366,121592,1),(367,121593,1),(368,121627,1),(369,121626,1),(370,121625,1),(371,121624,1),(372,121630,1),(373,121629,1),(374,121628,1),(375,121619,1),(376,121618,1),(377,121617,1),(378,121616,1),(379,121623,1),(380,121622,1),(381,121621,1),(382,121620,1),(383,121610,1),(384,121611,1),(385,121608,1),(386,121609,1),(387,121614,1),(388,121615,1),(389,121612,1),(390,121613,1),(391,121602,1),(392,121603,1),(393,121600,1),(394,121606,1),(395,121607,1),(396,121604,1),(397,121605,1),(398,121657,1),(399,121656,1),(400,121659,1),(401,121658,1),(402,121661,1),(403,121660,1),(404,121663,1),(405,121662,1),(406,121649,1),(407,121648,1),(408,121651,1),(409,121653,1),(410,121652,1),(411,121640,1),(412,121642,1),(413,121643,1),(414,121644,1),(415,121645,1),(416,121646,1),(417,121647,1),(418,121632,1),(419,121633,1),(420,121634,1),(421,121635,1),(422,121636,1),(423,121637,1),(424,121638,1),(425,121639,1),(426,121693,1),(427,121692,1),(428,121691,1),(429,121690,1),(430,121689,1),(431,121688,1),(432,121687,1),(433,121686,1),(434,121685,1),(435,121684,1),(436,121683,1),(437,121682,1),(438,121681,1),(439,121680,1),(440,121678,1),(441,121679,1),(442,121676,1),(443,121677,1),(444,121675,1),(445,121672,1),(446,121673,1),(447,121670,1),(448,121671,1),(449,121668,1),(450,121669,1),(451,121667,1),(452,121664,1),(453,121665,1),(454,121724,1),(455,121727,1),(456,121721,1),(457,121720,1),(458,121722,1),(459,121716,1),(460,121719,1),(461,121718,1),(462,121713,1),(463,121712,1),(464,121715,1),(465,121714,1),(466,121708,1),(467,121709,1),(468,121710,1),(469,121711,1),(470,121704,1),(471,121705,1),(472,121706,1),(473,121700,1),(474,121701,1),(475,121702,1),(476,121703,1),(477,121696,1),(478,121697,1),(479,121698,1),(480,121699,1),(481,121747,1),(482,121744,1),(483,121750,1),(484,121748,1),(485,121749,1),(486,121754,1),(487,121755,1),(488,121752,1),(489,121753,1),(490,121758,1),(491,121759,1),(492,121756,1),(493,121729,1),(494,121728,1),(495,121735,1),(496,121733,1),(497,121732,1),(498,121737,1),(499,121736,1),(500,121743,1),(501,121742,1),(502,121741,1),(503,121740,1),(504,121776,1),(505,121777,1),(506,121778,1),(507,121779,1),(508,121780,1),(509,121781,1),(510,121782,1),(511,121783,1),(512,121784,1),(513,121785,1),(514,121786,1),(515,121787,1),(516,121788,1),(517,121789,1),(518,121790,1),(519,121791,1),(520,121761,1),(521,121760,1),(522,121765,1),(523,121764,1),(524,121766,1),(525,121769,1),(526,121768,1),(527,121771,1),(528,121770,1),(529,121773,1),(530,121775,1),(531,121774,1),(532,121814,1),(533,121815,1),(534,121812,1),(535,121813,1),(536,121810,1),(537,121811,1),(538,121808,1),(539,121822,1),(540,121823,1),(541,121821,1),(542,121819,1),(543,121816,1),(544,121817,1),(545,121799,1),(546,121798,1),(547,121797,1),(548,121796,1),(549,121795,1),(550,121794,1),(551,121793,1),(552,121792,1),(553,121807,1),(554,121806,1),(555,121804,1),(556,121803,1),(557,121802,1),(558,121801,1),(559,121800,1),(560,121844,1),(561,121845,1),(562,121846,1),(563,121840,1),(564,121841,1),(565,121842,1),(566,121843,1),(567,121852,1),(568,121853,1),(569,121855,1),(570,121848,1),(571,121851,1),(572,121829,1),(573,121828,1),(574,121831,1),(575,121830,1),(576,121825,1),(577,121824,1),(578,121826,1),(579,121837,1),(580,121836,1),(581,121839,1),(582,121838,1),(583,121833,1),(584,121832,1),(585,121834,1),(586,121059,1),(587,121058,1),(588,121057,1),(589,121056,1),(590,121063,1),(591,121062,1),(592,121061,1),(593,121060,1),(594,121067,1),(595,121066,1),(596,121065,1),(597,121064,1),(598,121071,1),(599,121070,1),(600,121069,1),(601,121068,1),(602,121074,1),(603,121075,1),(604,121072,1),(605,121073,1),(606,121078,1),(607,121079,1),(608,121076,1),(609,121077,1),(610,121082,1),(611,121083,1),(612,121080,1),(613,121081,1),(614,121086,1),(615,121087,1),(616,121084,1),(617,121085,1),(618,121042,1),(619,121045,1),(620,121046,1),(621,121049,1),(622,121050,1),(623,121051,1),(624,121052,1),(625,121054,1),(626,121055,1),(627,121149,1),(628,121151,1),(629,121150,1),(630,121145,1),(631,121144,1),(632,121147,1),(633,121146,1),(634,121141,1),(635,121140,1),(636,121143,1),(637,121142,1),(638,121137,1),(639,121136,1),(640,121139,1),(641,121138,1),(642,121132,1),(643,121133,1),(644,121134,1),(645,121135,1),(646,121129,1),(647,121130,1),(648,121131,1),(649,121124,1),(650,121125,1),(651,121126,1),(652,121127,1),(653,121122,1),(654,121123,1),(655,121119,1),(656,121118,1),(657,121117,1),(658,121116,1),(659,121115,1),(660,121114,1),(661,121113,1),(662,121110,1),(663,121109,1),(664,121108,1),(665,121107,1),(666,121106,1),(667,121105,1),(668,121104,1),(669,121102,1),(670,121103,1),(671,121100,1),(672,121101,1),(673,121098,1),(674,121099,1),(675,121097,1),(676,121094,1),(677,121092,1),(678,121093,1),(679,121090,1),(680,121088,1),(681,121089,1),(682,121208,1),(683,121211,1),(684,121213,1),(685,121212,1),(686,121215,1),(687,121201,1),(688,121200,1),(689,121203,1),(690,121202,1),(691,121205,1),(692,121204,1),(693,121207,1),(694,121206,1),(695,121192,1),(696,121193,1),(697,121195,1),(698,121197,1),(699,121198,1),(700,121199,1),(701,121184,1),(702,121185,1),(703,121186,1),(704,121187,1),(705,121188,1),(706,121189,1),(707,121190,1),(708,121191,1),(709,121179,1),(710,121178,1),(711,121177,1),(712,121183,1),(713,121182,1),(714,121181,1),(715,121180,1),(716,121171,1),(717,121170,1),(718,121174,1),(719,121173,1),(720,121172,1),(721,121163,1),(722,121160,1),(723,121161,1),(724,121166,1),(725,121167,1),(726,121164,1),(727,121154,1),(728,121155,1),(729,121152,1),(730,121153,1),(731,121158,1),(732,121159,1),(733,121156,1),(734,121157,1),(735,121268,1),(736,121269,1),(737,121270,1),(738,121271,1),(739,121264,1),(740,121265,1),(741,121266,1),(742,121267,1),(743,121276,1),(744,121277,1),(745,121278,1),(746,121279,1),(747,121272,1),(748,121273,1),(749,121275,1),(750,121253,1),(751,121252,1),(752,121255,1),(753,121254,1),(754,121248,1),(755,121251,1),(756,121250,1),(757,121261,1),(758,121263,1),(759,121262,1),(760,121257,1),(761,121256,1),(762,121258,1),(763,121238,1),(764,121239,1),(765,121236,1),(766,121237,1),(767,121234,1),(768,121235,1),(769,121233,1),(770,121246,1),(771,121247,1),(772,121244,1),(773,121245,1),(774,121243,1),(775,121240,1),(776,121241,1),(777,121223,1),(778,121222,1),(779,121221,1),(780,121220,1),(781,121219,1),(782,121218,1),(783,121217,1),(784,121216,1),(785,121231,1),(786,121230,1),(787,121229,1),(788,121228,1),(789,121227,1),(790,121225,1),(791,121224,1),(792,121328,1),(793,121330,1),(794,121333,1),(795,121334,1),(796,121335,1),(797,121336,1),(798,121337,1),(799,121338,1),(800,121339,1),(801,121340,1),(802,121341,1),(803,121342,1),(804,121343,1),(805,121313,1),(806,121312,1),(807,121315,1),(808,121314,1),(809,121317,1),(810,121316,1),(811,121319,1),(812,121318,1),(813,121321,1),(814,121320,1),(815,121323,1),(816,121322,1),(817,121325,1),(818,121324,1),(819,121327,1),(820,121298,1),(821,121299,1),(822,121296,1),(823,121297,1),(824,121302,1),(825,121303,1),(826,121300,1),(827,121306,1),(828,121307,1),(829,121304,1),(830,121305,1),(831,121311,1),(832,121308,1),(833,121309,1),(834,121283,1),(835,121282,1),(836,121281,1),(837,121280,1),(838,121287,1),(839,121286,1),(840,121285,1),(841,121284,1),(842,121291,1),(843,121290,1),(844,121289,1),(845,121288,1),(846,121292,1);\r\nINSERT INTO `Item` VALUES (1,1,1),(2,2,1),(3,3,1),(4,4,1),(5,5,1),(6,6,1),(7,7,1),(8,8,1),(9,9,1);\r\nINSERT INTO `Customer_Item` VALUES (1,1),(2,3),(3,3),(4,2),(5,8),(6,9),(7,4),(8,9),(9,3),(10,8),(11,2),(12,3),(13,6),(13,3),(14,3),(15,3),(16,3),(17,3),(18,1),(18,5),(19,3),(19,7),(20,6),(21,3),(22,1),(23,7),(23,2),(24,9),(25,3),(26,9),(27,9),(28,2),(29,7),(30,4),(31,8),(32,9),(33,3),(34,3),(34,6),(35,3),(36,1),(37,9),(37,4),(38,1),(38,4),(38,6),(39,6),(40,2),(41,9),(42,3),(42,6),(43,2),(44,7),(45,2),(46,4),(47,1),(48,3),(49,3),(50,3),(51,3),(52,3),(53,4),(54,2),(55,1),(56,1),(57,9),(58,4),(59,9),(59,3),(60,3),(61,5),(61,2),(61,9),(62,2),(63,9),(64,9),(65,8),(66,3),(67,6),(68,1),(68,3),(69,9),(70,9),(71,3),(71,7),(72,3),(73,2),(74,3),(75,3),(76,3),(77,9),(78,4),(79,9),(80,2),(80,1),(81,9),(82,8),(83,3),(84,9),(85,4),(86,3),(87,9),(88,3),(89,9),(90,3),(90,1),(91,2),(91,9),(91,3),(91,1),(92,9),(93,3),(94,6),(95,9),(96,5),(96,8),(96,1),(96,1),(96,4),(97,4),(97,9),(98,6),(98,9),(99,2),(100,3),(101,9),(102,3),(103,6),(104,3),(105,9),(106,9),(107,1),(108,6),(109,3),(110,1),(111,4),(112,8),(113,3),(114,2),(115,2),(116,7),(117,6),(118,3),(119,9),(120,9),(121,3),(122,4),(123,1),(124,1),(125,2),(126,3),(127,6),(128,5),(129,3),(130,3),(130,6),(131,6),(132,9),(133,8),(134,6),(135,9),(136,9),(137,8),(138,9),(139,9),(140,9),(141,9),(142,6),(143,2),(144,9),(145,7),(146,6),(146,7),(146,9),(147,4),(147,9),(147,1),(147,2),(147,1),(147,3),(148,9),(149,9),(150,6),(151,3),(152,6),(153,3),(154,6),(154,9),(155,3),(156,9),(156,8),(156,1),(157,9),(158,9),(159,8),(159,2),(160,9),(161,9),(162,4),(162,5),(163,3),(164,3),(165,9),(166,9),(167,9),(168,9),(169,6),(170,8),(170,2),(171,2),(171,4),(172,9),(173,9),(174,9),(175,1),(176,5),(177,1),(178,3),(179,6),(180,5),(181,8),(182,3),(183,2),(184,9),(185,3),(186,3),(187,3),(188,4),(189,9),(190,9),(191,4),(191,9),(192,1),(193,6),(194,9),(195,3),(196,9),(197,3),(198,2),(199,4),(200,9),(201,6),(202,2),(203,9),(204,9),(205,3),(206,3),(207,4),(208,6),(209,9),(209,1),(209,3),(210,9),(211,1),(212,5),(213,2),(213,3),(214,9),(215,6),(216,3),(217,1),(217,3),(218,3),(219,3),(220,3),(221,9),(222,9),(223,5),(224,4),(225,6),(226,3),(226,2),(227,9),(228,6),(229,6),(230,3),(231,8),(231,9),(231,6),(231,7),(232,1),(232,6),(233,7),(233,3),(233,6),(234,6),(235,8),(235,9),(236,9),(237,1),(237,6),(238,9),(239,6),(240,9),(241,9),(242,9),(243,9),(244,2),(245,3),(246,9),(247,3),(248,9),(249,9),(250,8),(250,7),(250,1),(250,9),(250,6),(251,5),(251,7),(251,8),(251,9),(252,4),(253,9),(254,4),(255,1),(255,9),(255,4),(256,8),(257,9),(258,9),(259,9),(260,5),(261,1),(262,9),(263,9),(264,9),(265,9),(266,1),(267,9),(268,7),(269,7),(270,1),(271,3),(272,9),(273,4),(274,3),(275,2),(275,9),(276,1),(277,1),(278,6),(279,9),(280,3),(281,9),(282,7),(283,9),(284,2),(284,9),(284,4),(285,9),(286,4),(286,9),(287,1),(288,9),(289,1),(290,5),(291,3),(292,4),(292,3),(293,9),(294,4),(294,1),(295,4),(296,9),(297,4),(298,2),(299,9),(300,2),(300,9),(301,7),(302,3),(303,6),(304,4),(305,2),(306,1),(306,2),(306,3),(307,9),(308,1),(309,9),(310,1),(311,3),(312,3),(313,2),(313,9),(313,6),(314,3),(315,6),(315,2),(316,7),(317,7),(318,5),(319,3),(320,3),(321,1),(322,3),(323,1),(324,2),(324,3),(324,6),(324,7),(325,3),(326,4),(327,7),(328,9),(329,7),(330,4),(331,9),(332,4),(333,2),(333,9),(334,3),(335,9),(336,9),(337,4),(338,1),(339,9),(339,1),(339,7),(339,8),(339,4),(339,6),(339,3),(339,2),(340,2),(340,9),(340,3),(341,1),(342,4),(343,5),(344,8),(345,7),(346,6),(347,1),(348,6),(349,7),(349,8),(350,9),(351,7),(352,8),(353,6),(354,5),(355,9),(356,9),(357,9),(358,7),(358,1),(358,9),(359,3),(360,3),(361,1),(362,1),(362,3),(362,6),(363,6),(363,9),(363,1),(363,7),(364,4),(365,4),(366,3),(367,9),(368,8),(368,7),(368,6),(368,4),(369,3),(370,6),(371,4),(372,2),(372,1),(373,3),(374,3),(375,9),(375,3),(376,2),(377,2),(377,3),(378,2),(379,1),(379,6),(380,9),(381,6),(382,7),(383,3),(383,1),(384,1),(385,6),(386,6),(387,4),(387,2),(388,6),(389,3),(390,4),(391,9),(392,2),(392,5),(393,8),(393,4),(393,1),(394,2),(395,7),(396,6),(397,6),(397,3),(398,1),(398,3),(399,9),(399,4),(400,7),(401,9),(401,3),(402,1),(403,6),(404,6),(405,8),(406,9),(407,6),(408,3),(409,9),(410,6),(411,5),(412,9),(412,8),(413,3),(414,6),(415,3),(416,7),(417,7),(418,9),(419,6),(419,4),(420,7),(421,6),(422,7),(423,2),(423,8),(424,2),(425,7),(426,4),(426,1),(426,9),(427,1),(428,6),(429,6),(430,6),(431,3),(432,2),(433,3),(434,9),(435,9),(436,3),(437,9),(438,9),(439,9),(440,3),(441,6),(442,6),(442,9),(443,8),(444,9),(444,3),(444,2),(444,1),(445,1),(446,9),(447,9),(448,9),(448,1),(449,9),(449,3),(450,9),(451,9),(452,9),(453,8),(454,9),(455,6),(456,3),(457,3),(458,2),(459,6),(460,4),(461,9),(462,2),(462,4),(463,1),(464,6),(465,6),(466,1),(466,4),(467,6),(468,6),(469,2),(470,5),(471,7),(472,1),(472,9),(472,4),(473,1),(474,1),(475,3),(475,6),(476,4),(477,9),(478,6),(479,4),(479,3),(480,9),(481,4),(482,3),(483,5),(484,2),(484,3),(485,3),(486,9),(487,8),(488,9),(489,6),(490,6),(491,3),(492,9),(493,9),(494,6),(495,3),(496,4),(497,3),(498,2),(499,1),(500,3),(501,3),(502,4),(503,9),(504,9),(505,1),(506,6),(507,6),(508,9),(509,3),(510,3),(511,9),(512,1),(512,9),(512,3),(513,3),(514,9),(515,5),(516,1),(517,1),(518,6),(518,9),(518,3),(519,3),(520,1),(521,3),(522,4),(523,9),(523,4),(524,3),(524,5),(525,9),(526,2),(527,9),(528,3),(529,9),(530,4),(531,9),(532,4),(532,2),(533,2),(533,9),(533,4),(533,6),(534,6),(534,3),(535,2),(536,3),(537,3),(538,6),(538,3),(538,2),(539,2),(540,4),(541,2),(541,9),(541,8),(542,2),(543,1),(544,1),(545,1),(546,4),(547,9),(548,6),(549,2),(549,6),(549,1),(550,3),(551,9),(552,9),(553,3),(553,1),(554,8),(554,2),(554,4),(555,2),(556,6),(557,2),(558,6),(559,2),(560,3),(561,2),(562,4),(563,1),(564,3),(565,3),(566,8),(567,2),(568,3),(569,2),(569,8),(570,6),(571,6),(572,2),(573,5),(574,1),(575,6),(576,2),(576,8),(576,9),(577,9),(578,3),(578,6),(578,2),(579,9),(580,9),(581,9),(582,3),(583,4),(584,5),(584,2),(584,8),(585,9),(586,1),(587,1),(588,2),(589,2),(590,4),(591,4),(592,1),(592,5),(592,2),(592,4),(593,4),(594,2),(595,3),(596,3),(597,4),(597,2),(598,1),(599,1),(600,1),(601,1),(602,5),(603,2),(604,1),(605,1),(606,3),(607,1),(607,3),(608,4),(609,4),(609,2),(610,2),(611,4),(612,5),(612,4),(612,2),(613,2),(614,1),(615,3),(615,1),(615,2),(616,1),(617,4),(618,1),(619,2),(620,1),(621,1),(622,1),(623,1),(624,1),(625,1),(626,1),(627,3),(628,2),(629,1),(630,1),(631,1),(632,1),(633,2),(633,1),(634,1),(635,4),(636,1),(637,2),(637,1),(638,3),(639,5),(640,2),(641,3),(642,2),(643,4),(644,1),(645,3),(646,1),(647,3),(648,1),(649,3),(650,3),(651,2),(652,3),(653,2),(654,3),(655,3),(656,2),(657,1),(658,2),(659,1),(660,4),(661,4),(662,3),(663,2),(664,3),(665,4),(666,6),(667,3),(668,3),(669,3),(670,1),(671,1),(672,4),(673,3),(674,3),(675,3),(676,6),(677,2),(677,1),(678,4),(679,3),(680,1),(681,2),(681,6),(681,1),(682,2),(683,6),(684,4),(685,1),(686,4),(687,2),(688,3),(688,2),(689,2),(690,2),(690,3),(691,1),(692,3),(693,4),(694,1),(695,5),(696,2),(697,2),(698,3),(699,5),(700,2),(701,2),(702,3),(703,2),(704,3),(705,3),(706,2),(707,2),(708,3),(709,3),(710,4),(711,4),(712,4),(713,6),(714,3),(715,2),(716,3),(716,1),(717,2),(718,4),(719,2),(719,1),(720,6),(721,2),(722,6),(722,1),(722,2),(723,2),(724,3),(724,2),(724,5),(725,2),(726,4),(727,6),(728,4),(729,3),(730,3),(731,4),(732,1),(733,2),(734,1),(735,9),(736,9),(737,9),(738,2),(739,9),(740,7),(740,8),(740,9),(741,8),(742,1),(743,7),(744,8),(744,2),(745,5),(746,9),(747,9),(748,7),(748,8),(748,9),(749,1),(750,1),(751,6),(752,4),(753,4),(754,6),(755,3),(756,3),(757,5),(758,7),(758,8),(758,9),(758,3),(759,1),(759,4),(760,1),(761,1),(762,4),(763,5),(763,2),(764,4),(765,4),(766,4),(767,5),(767,4),(767,2),(768,4),(768,1),(769,4),(770,1),(771,3),(772,1),(773,4),(774,4),(775,2),(776,4),(777,4),(778,4),(779,5),(780,4),(781,4),(782,4),(783,6),(784,6),(784,4),(785,6),(786,4),(787,4),(787,2),(788,2),(788,3),(789,4),(790,5),(791,4),(792,3),(793,4),(794,9),(795,9),(796,9),(796,6),(797,9),(798,4),(799,9),(800,9),(801,9),(802,9),(803,9),(803,3),(804,9),(805,7),(805,6),(805,2),(805,8),(805,1),(806,1),(807,9),(808,1),(809,1),(810,3),(811,2),(812,8),(813,6),(814,2),(814,5),(815,9),(816,9),(817,9),(818,9),(819,9),(820,3),(821,9),(822,9),(823,4),(824,9),(825,9),(826,8),(826,6),(827,6),(828,2),(829,9),(830,6),(831,2),(831,1),(832,1),(832,9),(833,8),(834,6),(835,3),(835,9),(836,9),(837,7),(838,3),(839,9),(840,2),(840,5),(841,4),(841,2),(842,7),(842,6),(842,1),(843,6),(844,6),(845,9),(846,9);\r\n',21195,307),(308,'package br.ime.usp.commendans.controller;\r\n\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.infra.DataImporter;\r\nimport br.ime.usp.commendans.recommender.RecommenderCreator;\r\n\r\n\r\n@Resource\r\npublic class IndexController {\r\n    \r\n    private final Result result;\r\n    private final Session session;\r\n    private final RecommenderCreator recommenderCreator;\r\n\r\n    public IndexController(Result result, Session session, RecommenderCreator recommenderCreator) {\r\n        this.result = result;\r\n        this.session = session;\r\n        this.recommenderCreator = recommenderCreator;\r\n    }\r\n    \r\n    @Get(\"/\")\r\n    public void index() {\r\n    }\r\n    \r\n    @Get(\"/import/askjdhakjshdakjshd\")\r\n    public void importData() {\r\n        DataImporter dataImporter = new DataImporter(session);\r\n        dataImporter.importData(\"/orders.csv\");\r\n        recommenderCreator.create();\r\n        String name = \"Casa do Código\";\r\n        String accessKey = \"123\" + name;\r\n        accessKey = DigestUtils.sha256Hex(accessKey);\r\n        result.use(Results.http()).body(\"<html><body>finished persisting, key: \"+accessKey+\"</body></html>\");\r\n    }\r\n}\r\n',1353,308),(309,'<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n<title>Commendans</title>\r\n</head>\r\n<body>\r\n\r\n	<p>Welcome to commendans, an REST recommendation service.<p>\r\n	\r\n	<p>You may register your client app <a href=\'<c:url value=\"/app/new\" />\'>here</a></p>\r\n	\r\n	<p>Some routes implemented:</p>\r\n	<ul>\r\n		<li><pre>GET <c:url value=\"/recommend/item/\" />{appItemId}</pre>\r\n			<ul>\r\n				<li><strong>Returns a sorted array of recommendations given an item of your app (identified with id <code>appItemId</code>)</strong></li>\r\n				<li>Parameters:</li>\r\n				<ul>\r\n					<li><pre>accessKey: {your-access-key}</pre></li>\r\n				</ul>\r\n			</ul>\r\n		</li>\r\n		<li><pre>GET <c:url value=\"/recommend/items/\" /></pre>\r\n			<ul>\r\n				<li><strong>Returns a sorted array of recommendations given an array of items of your app (identified with ids array <code>items</code>)</strong></li>\r\n				<li>Parameters:</li>\r\n				<ul>\r\n					<li><pre>accessKey: {your-access-key}</pre></li>\r\n					<li><pre>items[0]: {some-item-id}</pre></li>\r\n					<li><pre>items[1]: {some-item-id}</pre></li>\r\n					<li><pre>items[...]: ...</pre></li>\r\n				</ul>\r\n			</ul>\r\n		</li>\r\n		<li><pre>POST <c:url value=\"/app/addSale\" /></pre>\r\n			<ul>\r\n				<li><strong>Register a event of your app, given a user id and a list of items bought (or liked, or visited, whatever)</strong></li>\r\n				<li>Parameters:</li>\r\n				<ul>\r\n					<li><pre>accessKey: {your-access-key}</pre></li>\r\n					<li><pre>clientAppUserId: {some-user-id}</pre></li>\r\n					<li><pre>items[0]: {some-item-id}</pre></li>\r\n					<li><pre>items[1]: {some-item-id}</pre></li>\r\n					<li><pre>items[...]: ...</pre></li>\r\n				</ul>\r\n			</ul>\r\n		</li>\r\n	</ul>\r\n\r\n</body>\r\n</html>\r\n',1972,309),(310,'package br.ime.usp.commendans.controller;\r\n\r\nimport org.hibernate.Session;\r\n\r\nimport br.com.caelum.vraptor.Get;\r\nimport br.com.caelum.vraptor.Resource;\r\nimport br.com.caelum.vraptor.Result;\r\nimport br.com.caelum.vraptor.view.Results;\r\nimport br.ime.usp.commendans.recommender.RecommenderCreator;\r\n\r\n\r\n@Resource\r\npublic class IndexController {\r\n    \r\n    private final Result result;\r\n    private final Session session;\r\n    private final RecommenderCreator recommenderCreator;\r\n\r\n    public IndexController(Result result, Session session, RecommenderCreator recommenderCreator) {\r\n        this.result = result;\r\n        this.session = session;\r\n        this.recommenderCreator = recommenderCreator;\r\n    }\r\n    \r\n    @Get(\"/\")\r\n    public void index() {\r\n    }\r\n    \r\n    @Get(\"/import/askjdhakjshdakjshd\")\r\n    public void importData() {\r\n//        DataImporter dataImporter = new DataImporter(session);\r\n//        dataImporter.importData(\"/orders.csv\");\r\n//        recommenderCreator.create();\r\n//        String name = \"Casa do Código\";\r\n//        String accessKey = \"123\" + name;\r\n//        accessKey = DigestUtils.sha256Hex(accessKey);\r\n        result.use(Results.http()).body(\"<html><body>get outta here</body></html>\");\r\n    }\r\n}\r\n',1237,310),(311,'commendans\r\n==========\r\ncommendans is a REST recommendation service.\r\n\r\nRegistering your app as client, you will get a access key and then you can send to commendans items that your app users bought (or liked, or viewed, whatever) and then get recommendations for other items.\r\n\r\ncommendans is currently online here: http://commendans.herokuapp.com/\r\n',351,311);
/*!40000 ALTER TABLE `SourceCode` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `StatisticalTest`
--

DROP TABLE IF EXISTS `StatisticalTest`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `StatisticalTest` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `algorithm` varchar(255) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `user_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK1098AC8DAD8B1068` (`user_id`),
  CONSTRAINT `FK1098AC8DAD8B1068` FOREIGN KEY (`user_id`) REFERENCES `User` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `StatisticalTest`
--

LOCK TABLES `StatisticalTest` WRITE;
/*!40000 ALTER TABLE `StatisticalTest` DISABLE KEYS */;
INSERT INTO `StatisticalTest` VALUES (1,'set1 <- #set1#\nset2 <- #set2#\nt1 = wilcox.test(set1, set2, paired = TRUE)\nt1','wilcoxon',NULL),(2,'set1 <- #set1#\nset2 <- #set2#\nt1 = wilcox.test(set1, set2, paired = TRUE)\nt1','wilcoxon',NULL),(3,'set1 <- #set1#\nset2 <- #set2#\nt1 = wilcox.test(set1, set2, paired = TRUE)\nt1','wilcoxon',NULL);
/*!40000 ALTER TABLE `StatisticalTest` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `StatisticalTestResult`
--

DROP TABLE IF EXISTS `StatisticalTestResult`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `StatisticalTestResult` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `date` datetime DEFAULT NULL,
  `output` varchar(255) DEFAULT NULL,
  `q1_id` bigint(20) DEFAULT NULL,
  `q2_id` bigint(20) DEFAULT NULL,
  `test_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKA2E9030AC2C31C91` (`q1_id`),
  KEY `FKA2E9030AC2C390F0` (`q2_id`),
  KEY `FKA2E9030A64EFC547` (`test_id`),
  CONSTRAINT `FKA2E9030A64EFC547` FOREIGN KEY (`test_id`) REFERENCES `StatisticalTest` (`id`),
  CONSTRAINT `FKA2E9030AC2C31C91` FOREIGN KEY (`q1_id`) REFERENCES `QueryResult` (`id`),
  CONSTRAINT `FKA2E9030AC2C390F0` FOREIGN KEY (`q2_id`) REFERENCES `QueryResult` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `StatisticalTestResult`
--

LOCK TABLES `StatisticalTestResult` WRITE;
/*!40000 ALTER TABLE `StatisticalTestResult` DISABLE KEYS */;
/*!40000 ALTER TABLE `StatisticalTestResult` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Tag`
--

DROP TABLE IF EXISTS `Tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Tag`
--

LOCK TABLES `Tag` WRITE;
/*!40000 ALTER TABLE `Tag` DISABLE KEYS */;
/*!40000 ALTER TABLE `Tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Task`
--

DROP TABLE IF EXISTS `Task`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Task` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `endDate` datetime DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `position` int(11) NOT NULL,
  `runnableTaskFactoryClass` varchar(255) DEFAULT NULL,
  `startDate` datetime DEFAULT NULL,
  `status` varchar(255) DEFAULT NULL,
  `submitDate` datetime DEFAULT NULL,
  `project_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK27A9A5783885CC` (`project_id`),
  CONSTRAINT `FK27A9A5783885CC` FOREIGN KEY (`project_id`) REFERENCES `Project` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Task`
--

LOCK TABLES `Task` WRITE;
/*!40000 ALTER TABLE `Task` DISABLE KEYS */;
INSERT INTO `Task` VALUES (1,'2013-01-01 22:53:32','Clone SCM',0,'org.metricminer.tasks.scm.SCMCloneTaskFactory','2013-01-01 22:53:30','FINISHED','2013-01-01 22:53:20',1),(2,'2013-01-01 22:53:48','Parse SCM logs',1,'org.metricminer.tasks.scm.ParseSCMLogTaskFactory','2013-01-01 22:53:40','FINISHED','2013-01-01 22:53:20',1),(3,'2013-01-01 22:53:50','Remove source code directory',2,'org.metricminer.tasks.scm.RemoveSourceDirectoryTaskFactory','2013-01-01 22:53:50','FINISHED','2013-01-01 22:53:20',1),(4,'2013-01-01 22:54:59','Calculate all metrics',3,'org.metricminer.tasks.metric.CalculateAllMetricsTaskFactory','2013-01-01 22:54:00','FINISHED','2013-01-01 22:53:20',1),(5,'2013-01-01 22:55:00','Caculate truck factor metric',4,'org.metricminer.tasks.projectmetric.CalculateProjectMetricTaskFactory','2013-01-01 22:55:00','FINISHED','2013-01-01 22:53:20',1);
/*!40000 ALTER TABLE `Task` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `TaskConfigurationEntry`
--

DROP TABLE IF EXISTS `TaskConfigurationEntry`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `TaskConfigurationEntry` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `task_key` varchar(255) DEFAULT NULL,
  `value` varchar(255) DEFAULT NULL,
  `task_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FK8A2173A15AAEFE28` (`task_id`),
  CONSTRAINT `FK8A2173A15AAEFE28` FOREIGN KEY (`task_id`) REFERENCES `Task` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `TaskConfigurationEntry`
--

LOCK TABLES `TaskConfigurationEntry` WRITE;
/*!40000 ALTER TABLE `TaskConfigurationEntry` DISABLE KEYS */;
INSERT INTO `TaskConfigurationEntry` VALUES (1,'PROJECT_METRIC_FACTORY_CLASS','org.metricminer.tasks.projectmetric.truckfactor.TruckFactorFactory',5);
/*!40000 ALTER TABLE `TaskConfigurationEntry` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Task_Task`
--

DROP TABLE IF EXISTS `Task_Task`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Task_Task` (
  `Task_id` bigint(20) NOT NULL,
  `depends_id` bigint(20) NOT NULL,
  KEY `FK822BF7FF5AAEFE28` (`Task_id`),
  KEY `FK822BF7FFB4C464E6` (`depends_id`),
  CONSTRAINT `FK822BF7FF5AAEFE28` FOREIGN KEY (`Task_id`) REFERENCES `Task` (`id`),
  CONSTRAINT `FK822BF7FFB4C464E6` FOREIGN KEY (`depends_id`) REFERENCES `Task` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Task_Task`
--

LOCK TABLES `Task_Task` WRITE;
/*!40000 ALTER TABLE `Task_Task` DISABLE KEYS */;
INSERT INTO `Task_Task` VALUES (2,1),(3,2),(4,2),(5,4);
/*!40000 ALTER TABLE `Task_Task` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `TestedMethodFinderResult`
--

DROP TABLE IF EXISTS `TestedMethodFinderResult`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `TestedMethodFinderResult` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `productionMethod` varchar(255) DEFAULT NULL,
  `testMethod` varchar(255) DEFAULT NULL,
  `sourceCode_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `FKC212BE157FD44CE8` (`sourceCode_id`),
  CONSTRAINT `FKC212BE157FD44CE8` FOREIGN KEY (`sourceCode_id`) REFERENCES `SourceCode` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=79 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `TestedMethodFinderResult`
--

LOCK TABLES `TestedMethodFinderResult` WRITE;
/*!40000 ALTER TABLE `TestedMethodFinderResult` DISABLE KEYS */;
INSERT INTO `TestedMethodFinderResult` VALUES (1,'addUser','test',29),(2,'addUser','test',40),(3,'getAssociations','test',48),(4,'addUser','test',48),(5,'build','test',48),(6,'getAssociations','test',59),(7,'addUser','test',59),(8,'build','test',59),(9,'list','test',80),(10,'getAssociations','shouldBuildRecommender',81),(11,'addUser','shouldBuildRecommender',81),(12,'build','shouldBuildRecommender',81),(13,'toJson','shouldSerializeATupleList',82),(14,'toJson','shouldSerializeATuple',82),(15,'merge','test',83),(16,'getTuples','test',83),(17,'list','shouldFindUsers',85),(18,'create','shouldGetSessionFactory',91),(19,'create','shouldGetSessionFactory',92),(20,'create','shouldGetSessionFactory',107),(21,'getAssociations','shouldBuildRecommender',127),(22,'addUser','shouldBuildRecommender',127),(23,'build','shouldBuildRecommender',127),(24,'getAssociations','shouldBuildRecommenderBookExample',136),(25,'addUser','shouldBuildRecommenderBookExample',136),(26,'build','shouldBuildRecommenderBookExample',136),(27,'getAssociations','shouldBuildRecommenderBookExample',145),(28,'addUser','shouldBuildRecommenderBookExample',145),(29,'build','shouldBuildRecommenderBookExample',145),(30,'toJson','shouldSerializeATupleList',146),(31,'toJson','shouldSerializeATuple',146),(32,'merge','test',147),(33,'getTuples','test',147),(34,'list','shouldFindUsers',160),(35,'findCustomersOf','shouldFindUsersOfSpecificApp',160),(36,'getAssociations','shouldBuildRecommenderBookExample',161),(37,'addUser','shouldBuildRecommenderBookExample',161),(38,'build','shouldBuildRecommenderBookExample',161),(39,'list','shouldListApps',177),(40,'list','shouldFindUsers',178),(41,'findCustomersOf','shouldFindUsersOfSpecificApp',178),(42,'getAssociations','shouldBuildRecommenderBookExample',181),(43,'addUser','shouldBuildRecommenderBookExample',181),(44,'build','shouldBuildRecommenderBookExample',181),(45,'toJson','shouldSerializeATupleList',185),(46,'toJson','shouldSerializeATuple',185),(47,'findByAppItemId','shouldFindByAppItemId',192),(48,'findByAccessKey','shouldFindAppByAccessKey',196),(49,'list','shouldListApps',196),(50,'findByAppItemId','shouldFindByAppItemId',197),(51,'getAssociations','shouldBuildRecommenderFromCollectiveIntelligenceInActionExample',203),(52,'addUser','shouldBuildRecommenderFromCollectiveIntelligenceInActionExample',203),(53,'build','shouldBuildRecommenderFromCollectiveIntelligenceInActionExample',203),(54,'merge','shouldMergeTuples',204),(55,'getTuples','shouldMergeTuples',204),(56,'create','shouldGetSessionFactory',232),(57,'toJson','shouldSerializeATupleList',234),(58,'toJson','shouldSerializeATuple',234),(59,'merge','shouldMergeTuples',236),(60,'getTuples','shouldMergeTuples',236),(61,'getAssociations','shouldBuildRecommenderFromCollectiveIntelligenceInActionExample',237),(62,'addUser','shouldBuildRecommenderFromCollectiveIntelligenceInActionExample',237),(63,'build','shouldBuildRecommenderFromCollectiveIntelligenceInActionExample',237),(64,'addRemaining','shouldAddReaminingItems',257),(65,'getItems','shouldAddReaminingItems',257),(66,'findByAccessKey','shouldFindAppByAccessKey',264),(67,'list','shouldListApps',264),(68,'list','shouldFindUsers',265),(69,'find','shouldFindCustomerWithIdAndApp',265),(70,'findCustomersOf','shouldFindUsersOfSpecificApp',265),(71,'findByAppItemId','shouldFindByAppItemId',266),(72,'toJson','shouldSerializeATupleList',267),(73,'toJson','shouldSerializeATuple',267),(74,'merge','shouldMergeTuples',268),(75,'getTuples','shouldMergeTuples',268),(76,'getAssociations','shouldBuildRecommenderFromCollectiveIntelligenceInActionExample',269),(77,'addUser','shouldBuildRecommenderFromCollectiveIntelligenceInActionExample',269),(78,'build','shouldBuildRecommenderFromCollectiveIntelligenceInActionExample',269);
/*!40000 ALTER TABLE `TestedMethodFinderResult` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `TruckFactorResult`
--

DROP TABLE IF EXISTS `TruckFactorResult`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `TruckFactorResult` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `artifactId` bigint(20) DEFAULT NULL,
  `authorId` bigint(20) DEFAULT NULL,
  `percentage` double NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `TruckFactorResult`
--

LOCK TABLES `TruckFactorResult` WRITE;
/*!40000 ALTER TABLE `TruckFactorResult` DISABLE KEYS */;
INSERT INTO `TruckFactorResult` VALUES (1,40,1,100),(2,53,1,100);
/*!40000 ALTER TABLE `TruckFactorResult` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `User`
--

DROP TABLE IF EXISTS `User`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `User` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `cvUrl` varchar(255) DEFAULT NULL,
  `email` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `role` varchar(255) DEFAULT NULL,
  `twitter` varchar(255) DEFAULT NULL,
  `university` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `User`
--

LOCK TABLES `User` WRITE;
/*!40000 ALTER TABLE `User` DISABLE KEYS */;
INSERT INTO `User` VALUES (1,'','chico.sokol@gmail.com','Francisco Sokol','9c2f5ce0472220c016a8a77822c22d211ab9233a7083bbe009b0db86380b6135','ADMINISTRATOR','','IME USP'),(2,'','seixasfelipe@gmail.com','Felipe Seixas','ae3784314f375645157903c0ce188a2b0bef88b5e9476f4c72513c1015f0b875','ADMINISTRATOR','','VISIONAIRES');
/*!40000 ALTER TABLE `User` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2013-01-27 13:57:01
